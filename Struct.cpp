// ScriptStruct  CoreUObject.JoinabilitySettings
// Struct Size::0x0014
struct FJoinabilitySettings
{
    FName                                         SessionName;                                                  // 0x0000(0x0008)
    bool                                          bPublicSearchable;                                            // 0x0008(0x0001)
    bool                                          bAllowInvites;                                                // 0x0009(0x0001)
    bool                                          bJoinViaPresence;                                             // 0x000A(0x0001)
    bool                                          bJoinViaPresenceFriendsOnly;                                  // 0x000B(0x0001)
    int32_t                                       MaxPlayers;                                                   // 0x000C(0x0004)
    int32_t                                       MaxPartySize;                                                 // 0x0010(0x0004)
};


// ScriptStruct  CoreUObject.Default__ScriptStruct
// Struct Size::0x0000
struct FDefault__ScriptStruct
{
};


// ScriptStruct  CoreUObject.UniqueNetIdWrapper
// Struct Size::0x0001
struct FUniqueNetIdWrapper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CoreUObject.Guid
// Struct Size::0x0010
struct FGuid
{
    int32_t                                       A;                                                            // 0x0000(0x0004)
    int32_t                                       B;                                                            // 0x0004(0x0004)
    int32_t                                       C;                                                            // 0x0008(0x0004)
    int32_t                                       D;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Vector
// Struct Size::0x000C
struct FVector
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Vector4
// Struct Size::0x0010
struct FVector4
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Vector2D
// Struct Size::0x0008
struct FVector2D
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.TwoVectors
// Struct Size::0x0018
struct FTwoVectors
{
    FVector                                       v1;                                                           // 0x0000(0x000C)
    FVector                                       v2;                                                           // 0x000C(0x000C)
};


// ScriptStruct  CoreUObject.Plane
// Struct Size::0x0010
struct FPlane : public FVector
{
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Rotator
// Struct Size::0x000C
struct FRotator
{
    float                                         Pitch;                                                        // 0x0000(0x0004)
    float                                         Yaw;                                                          // 0x0004(0x0004)
    float                                         Roll;                                                         // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Quat
// Struct Size::0x0010
struct FQuat
{
    float                                         X;                                                            // 0x0000(0x0004)
    float                                         Y;                                                            // 0x0004(0x0004)
    float                                         Z;                                                            // 0x0008(0x0004)
    float                                         W;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.PackedNormal
// Struct Size::0x0004
struct FPackedNormal
{
    char                                          X;                                                            // 0x0000(0x0001)
    char                                          Y;                                                            // 0x0001(0x0001)
    char                                          Z;                                                            // 0x0002(0x0001)
    char                                          W;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.PackedRGB10A2N
// Struct Size::0x0004
struct FPackedRGB10A2N
{
    int32_t                                       Packed;                                                       // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.PackedRGBA16N
// Struct Size::0x0008
struct FPackedRGBA16N
{
    int32_t                                       XY;                                                           // 0x0000(0x0004)
    int32_t                                       ZW;                                                           // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntPoint
// Struct Size::0x0008
struct FIntPoint
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.IntVector
// Struct Size::0x000C
struct FIntVector
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    int32_t                                       Z;                                                            // 0x0008(0x0004)
};


// ScriptStruct  CoreUObject.Color
// Struct Size::0x0004
struct FColor
{
    char                                          B;                                                            // 0x0000(0x0001)
    char                                          G;                                                            // 0x0001(0x0001)
    char                                          R;                                                            // 0x0002(0x0001)
    char                                          A;                                                            // 0x0003(0x0001)
};


// ScriptStruct  CoreUObject.LinearColor
// Struct Size::0x0010
struct FLinearColor
{
    float                                         R;                                                            // 0x0000(0x0004)
    float                                         G;                                                            // 0x0004(0x0004)
    float                                         B;                                                            // 0x0008(0x0004)
    float                                         A;                                                            // 0x000C(0x0004)
};


// ScriptStruct  CoreUObject.Box
// Struct Size::0x001C
struct FBox
{
    FVector                                       Min;                                                          // 0x0000(0x000C)
    FVector                                       Max;                                                          // 0x000C(0x000C)
    char                                          IsValid;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  CoreUObject.Box2D
// Struct Size::0x0014
struct FBox2D
{
    FVector2D                                     Min;                                                          // 0x0000(0x0008)
    FVector2D                                     Max;                                                          // 0x0008(0x0008)
    char                                          bIsValid;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.BoxSphereBounds
// Struct Size::0x001C
struct FBoxSphereBounds
{
    FVector                                       Origin;                                                       // 0x0000(0x000C)
    FVector                                       BoxExtent;                                                    // 0x000C(0x000C)
    float                                         SphereRadius;                                                 // 0x0018(0x0004)
};


// ScriptStruct  CoreUObject.OrientedBox
// Struct Size::0x003C
struct FOrientedBox
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    FVector                                       AxisX;                                                        // 0x000C(0x000C)
    FVector                                       AxisY;                                                        // 0x0018(0x000C)
    FVector                                       AxisZ;                                                        // 0x0024(0x000C)
    float                                         ExtentX;                                                      // 0x0030(0x0004)
    float                                         ExtentY;                                                      // 0x0034(0x0004)
    float                                         ExtentZ;                                                      // 0x0038(0x0004)
};


// ScriptStruct  CoreUObject.Matrix
// Struct Size::0x0040
struct FMatrix
{
    FPlane                                        XPlane;                                                       // 0x0000(0x0010)
    FPlane                                        YPlane;                                                       // 0x0010(0x0010)
    FPlane                                        ZPlane;                                                       // 0x0020(0x0010)
    FPlane                                        WPlane;                                                       // 0x0030(0x0010)
};


// ScriptStruct  CoreUObject.InterpCurvePointFloat
// Struct Size::0x0014
struct FInterpCurvePointFloat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    float                                         OutVal;                                                       // 0x0004(0x0004)
    float                                         ArriveTangent;                                                // 0x0008(0x0004)
    float                                         LeaveTangent;                                                 // 0x000C(0x0004)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveFloat
// Struct Size::0x0018
struct FInterpCurveFloat
{
    TArray<FInterpCurvePointFloat>                Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector2D
// Struct Size::0x0020
struct FInterpCurvePointVector2D
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FVector2D                                     OutVal;                                                       // 0x0004(0x0008)
    FVector2D                                     ArriveTangent;                                                // 0x000C(0x0008)
    FVector2D                                     LeaveTangent;                                                 // 0x0014(0x0008)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveVector2D
// Struct Size::0x0018
struct FInterpCurveVector2D
{
    TArray<FInterpCurvePointVector2D>             Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointVector
// Struct Size::0x002C
struct FInterpCurvePointVector
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FVector                                       OutVal;                                                       // 0x0004(0x000C)
    FVector                                       ArriveTangent;                                                // 0x0010(0x000C)
    FVector                                       LeaveTangent;                                                 // 0x001C(0x000C)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveVector
// Struct Size::0x0018
struct FInterpCurveVector
{
    TArray<FInterpCurvePointVector>               Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointQuat
// Struct Size::0x0050
struct FInterpCurvePointQuat
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FQuat                                         OutVal;                                                       // 0x0010(0x0010)
    FQuat                                         ArriveTangent;                                                // 0x0020(0x0010)
    FQuat                                         LeaveTangent;                                                 // 0x0030(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
};


// ScriptStruct  CoreUObject.InterpCurveQuat
// Struct Size::0x0018
struct FInterpCurveQuat
{
    TArray<FInterpCurvePointQuat>                 Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointTwoVectors
// Struct Size::0x0050
struct FInterpCurvePointTwoVectors
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FTwoVectors                                   OutVal;                                                       // 0x0004(0x0018)
    FTwoVectors                                   ArriveTangent;                                                // 0x001C(0x0018)
    FTwoVectors                                   LeaveTangent;                                                 // 0x0034(0x0018)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveTwoVectors
// Struct Size::0x0018
struct FInterpCurveTwoVectors
{
    TArray<FInterpCurvePointTwoVectors>           Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.InterpCurvePointLinearColor
// Struct Size::0x0038
struct FInterpCurvePointLinearColor
{
    float                                         InVal;                                                        // 0x0000(0x0004)
    FLinearColor                                  OutVal;                                                       // 0x0004(0x0010)
    FLinearColor                                  ArriveTangent;                                                // 0x0014(0x0010)
    FLinearColor                                  LeaveTangent;                                                 // 0x0024(0x0010)
    enum class EInterpCurveMode                   InterpMode;                                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  CoreUObject.InterpCurveLinearColor
// Struct Size::0x0018
struct FInterpCurveLinearColor
{
    TArray<FInterpCurvePointLinearColor>          Points;                                                       // 0x0000(0x0010)
    bool                                          bIsLooped;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         LoopKeyOffset;                                                // 0x0014(0x0004)
};


// ScriptStruct  CoreUObject.Transform
// Struct Size::0x0030
struct FTransform
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    FVector                                       Translation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FVector                                       Scale3D;                                                      // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  CoreUObject.RandomStream
// Struct Size::0x0008
struct FRandomStream
{
    int32_t                                       InitialSeed;                                                  // 0x0000(0x0004)
    int32_t                                       Seed;                                                         // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.DateTime
// Struct Size::0x0008
struct FDateTime
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.FrameNumber
// Struct Size::0x0004
struct FFrameNumber
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  CoreUObject.FrameRate
// Struct Size::0x0008
struct FFrameRate
{
    int32_t                                       Numerator;                                                    // 0x0000(0x0004)
    int32_t                                       Denominator;                                                  // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FrameTime
// Struct Size::0x0008
struct FFrameTime
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    float                                         SubFrame;                                                     // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.QualifiedFrameTime
// Struct Size::0x0010
struct FQualifiedFrameTime
{
    FFrameTime                                    Time;                                                         // 0x0000(0x0008)
    FFrameRate                                    Rate;                                                         // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Timecode
// Struct Size::0x0014
struct FTimecode
{
    int32_t                                       Hours;                                                        // 0x0000(0x0004)
    int32_t                                       Minutes;                                                      // 0x0004(0x0004)
    int32_t                                       Seconds;                                                      // 0x0008(0x0004)
    int32_t                                       Frames;                                                       // 0x000C(0x0004)
    bool                                          bDropFrameFormat;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  CoreUObject.Timespan
// Struct Size::0x0008
struct FTimespan
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.SoftObjectPath
// Struct Size::0x0018
struct FSoftObjectPath
{
    FName                                         AssetPathName;                                                // 0x0000(0x0008)
    FString                                       SubPathString;                                                // 0x0008(0x0010)
};


// ScriptStruct  CoreUObject.SoftClassPath
// Struct Size::0x0018
struct FSoftClassPath : public FSoftObjectPath
{
};


// ScriptStruct  CoreUObject.PrimaryAssetType
// Struct Size::0x0008
struct FPrimaryAssetType
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  CoreUObject.PrimaryAssetId
// Struct Size::0x0010
struct FPrimaryAssetId
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x0008)
    FName                                         PrimaryAssetName;                                             // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FallbackStruct
// Struct Size::0x0001
struct FFallbackStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CoreUObject.FloatRangeBound
// Struct Size::0x0008
struct FFloatRangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.FloatRange
// Struct Size::0x0010
struct FFloatRange
{
    FFloatRangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FFloatRangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.Int32RangeBound
// Struct Size::0x0008
struct FInt32RangeBound
{
    enum class ERangeBoundTypes                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Range
// Struct Size::0x0010
struct FInt32Range
{
    FInt32RangeBound                              LowerBound;                                                   // 0x0000(0x0008)
    FInt32RangeBound                              UpperBound;                                                   // 0x0008(0x0008)
};


// ScriptStruct  CoreUObject.FloatInterval
// Struct Size::0x0008
struct FFloatInterval
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.Int32Interval
// Struct Size::0x0008
struct FInt32Interval
{
    int32_t                                       Min;                                                          // 0x0000(0x0004)
    int32_t                                       Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  CoreUObject.PolyglotTextData
// Struct Size::0x00B8
struct FPolyglotTextData
{
    enum class ELocalizedTextSourceCategory       Category;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       NativeCulture;                                                // 0x0008(0x0010)
    FString                                       Namespace;                                                    // 0x0018(0x0010)
    FString                                       Key;                                                          // 0x0028(0x0010)
    FString                                       NativeString;                                                 // 0x0038(0x0010)
    TMap<FString,FString>                         LocalizedStrings;                                             // 0x0048(0x0050)
    bool                                          bIsMinimalPatch;                                              // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FText                                         CachedText;                                                   // 0x00A0(0x0018)
};


// ScriptStruct  CoreUObject.AutomationEvent
// Struct Size::0x0038
struct FAutomationEvent
{
    enum class EAutomationEventType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Message;                                                      // 0x0008(0x0010)
    FString                                       Context;                                                      // 0x0018(0x0010)
    FGuid                                         Artifact;                                                     // 0x0028(0x0010)
};


// ScriptStruct  CoreUObject.AutomationExecutionEntry
// Struct Size::0x0058
struct FAutomationExecutionEntry
{
    FAutomationEvent                              Event;                                                        // 0x0000(0x0038)
    FString                                       Filename;                                                     // 0x0038(0x0010)
    int32_t                                       LineNumber;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FDateTime                                     Timestamp;                                                    // 0x0050(0x0008)
};


// ScriptStruct  WindowsDeviceProfileSelector.WIndowProfileMatchCPU
// Struct Size::0x0020
struct FWIndowProfileMatchCPU
{
    FString                                       Profile;                                                      // 0x0000(0x0010)
    FWindowsProfileMatchItemCPU                   Match;                                                        // 0x0010(0x0010)
};


// ScriptStruct  WindowsDeviceProfileSelector.WindowsProfileMatchItemCPU
// Struct Size::0x0010
struct FWindowsProfileMatchItemCPU
{
    FString                                       PrimaryCPUBrand;                                              // 0x0000(0x0010)
};


// ScriptStruct  WindowsDeviceProfileSelector.WIndowProfileMatchGPU
// Struct Size::0x0030
struct FWIndowProfileMatchGPU
{
    FString                                       Profile;                                                      // 0x0000(0x0010)
    FWindowsProfileMatchItemGPU                   Match;                                                        // 0x0010(0x0020)
};


// ScriptStruct  WindowsDeviceProfileSelector.WindowsProfileMatchItemGPU
// Struct Size::0x0020
struct FWindowsProfileMatchItemGPU
{
    FString                                       PrimaryGPUBrand;                                              // 0x0000(0x0010)
    FString                                       GraphicsMemorySize;                                           // 0x0010(0x0010)
};


// ScriptStruct  Engine.DistributionLookupTable
// Struct Size::0x0020
struct FDistributionLookupTable
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    float                                         TimeBias;                                                     // 0x0004(0x0004)
    TArray<float>                                 Values;                                                       // 0x0008(0x0010)
    char                                          Op;                                                           // 0x0018(0x0001)
    char                                          EntryCount;                                                   // 0x0019(0x0001)
    char                                          EntryStride;                                                  // 0x001A(0x0001)
    char                                          SubEntryStride;                                               // 0x001B(0x0001)
    char                                          LockFlag;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.RawDistribution
// Struct Size::0x0020
struct FRawDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.FloatDistribution
// Struct Size::0x0020
struct FFloatDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.VectorDistribution
// Struct Size::0x0020
struct FVectorDistribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.Vector4Distribution
// Struct Size::0x0020
struct FVector4Distribution
{
    FDistributionLookupTable                      Table;                                                        // 0x0000(0x0020)
};


// ScriptStruct  Engine.FloatRK4SpringInterpolator
// Struct Size::0x0008
struct FFloatRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.VectorRK4SpringInterpolator
// Struct Size::0x0008
struct FVectorRK4SpringInterpolator
{
    float                                         StiffnessConstant;                                            // 0x0000(0x0004)
    float                                         DampeningRatio;                                               // 0x0004(0x0004)
};


// ScriptStruct  Engine.FormatArgumentData
// Struct Size::0x0040
struct FFormatArgumentData
{
    FString                                       ArgumentName;                                                 // 0x0000(0x0010)
    enum class EFormatArgumentType                ArgumentValueType;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FText                                         ArgumentValue;                                                // 0x0018(0x0018)
    int32_t                                       ArgumentValueInt;                                             // 0x0030(0x0004)
    float                                         ArgumentValueFloat;                                           // 0x0034(0x0004)
    enum class ETextGender                        ArgumentValueGender;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.ExpressionInput
// Struct Size::0x000C
struct FExpressionInput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    FName                                         ExpressionName;                                               // 0x0004(0x0008)
};


// ScriptStruct  Engine.MaterialAttributesInput
// Struct Size::0x0010
struct FMaterialAttributesInput : public FExpressionInput
{
    int32_t                                       PropertyConnectedBitmask;                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.ExpressionOutput
// Struct Size::0x0008
struct FExpressionOutput
{
    FName                                         OutputName;                                                   // 0x0000(0x0008)
};


// ScriptStruct  Engine.MaterialInput
// Struct Size::0x000C
struct FMaterialInput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    FName                                         ExpressionName;                                               // 0x0004(0x0008)
};


// ScriptStruct  Engine.ColorMaterialInput
// Struct Size::0x000C
struct FColorMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.ScalarMaterialInput
// Struct Size::0x000C
struct FScalarMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.ShadingModelMaterialInput
// Struct Size::0x000C
struct FShadingModelMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.VectorMaterialInput
// Struct Size::0x000C
struct FVectorMaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.Vector2MaterialInput
// Struct Size::0x000C
struct FVector2MaterialInput : public FMaterialInput
{
};


// ScriptStruct  Engine.HitResult
// Struct Size::0x0088
struct FHitResult
{
    char                                          bBlockingHit;                                                 // 0x0000(0x0001)
    char                                          bStartPenetrating;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       FaceIndex;                                                    // 0x0004(0x0004)
    float                                         Time;                                                         // 0x0008(0x0004)
    float                                         Distance;                                                     // 0x000C(0x0004)
    FVector_NetQuantize                           Location;                                                     // 0x0010(0x000C)
    FVector_NetQuantize                           ImpactPoint;                                                  // 0x001C(0x000C)
    FVector_NetQuantizeNormal                     Normal;                                                       // 0x0028(0x000C)
    FVector_NetQuantizeNormal                     ImpactNormal;                                                 // 0x0034(0x000C)
    FVector_NetQuantize                           TraceStart;                                                   // 0x0040(0x000C)
    FVector_NetQuantize                           TraceEnd;                                                     // 0x004C(0x000C)
    float                                         PenetrationDepth;                                             // 0x0058(0x0004)
    int32_t                                       Item;                                                         // 0x005C(0x0004)
    TWeakObjectPtr<UPhysicalMaterial>             PhysMaterial;                                                 // 0x0060(0x0008)
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0068(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0070(0x0008)
    FName                                         BoneName;                                                     // 0x0078(0x0008)
    FName                                         MyBoneName;                                                   // 0x0080(0x0008)
};


// ScriptStruct  Engine.Vector_NetQuantize
// Struct Size::0x000C
struct FVector_NetQuantize : public FVector
{
};


// ScriptStruct  Engine.Vector_NetQuantizeNormal
// Struct Size::0x000C
struct FVector_NetQuantizeNormal : public FVector
{
};


// ScriptStruct  InputCore.Key
// Struct Size::0x0018
struct FKey
{
    FName                                         KeyName;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.BranchingPointNotifyPayload
// Struct Size::0x0020
struct FBranchingPointNotifyPayload
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.SimpleMemberReference
// Struct Size::0x0020
struct FSimpleMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FName                                         MemberName;                                                   // 0x0008(0x0008)
    FGuid                                         MemberGuid;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.TickFunction
// Struct Size::0x0028
struct FTickFunction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class ETickingGroup                      TickGroup;                                                    // 0x0008(0x0001)
    enum class ETickingGroup                      EndTickGroup;                                                 // 0x0009(0x0001)
    char                                          bTickEvenWhenPaused;                                          // 0x000A(0x0001)
    char                                          bCanEverTick;                                                 // 0x000A(0x0001)
    char                                          bStartWithTickEnabled;                                        // 0x000A(0x0001)
    char                                          bAllowTickOnDedicatedServer;                                  // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    float                                         TickInterval;                                                 // 0x000C(0x0004)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.ActorComponentTickFunction
// Struct Size::0x0030
struct FActorComponentTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.SubtitleCue
// Struct Size::0x0020
struct FSubtitleCue
{
    FText                                         Text;                                                         // 0x0000(0x0018)
    float                                         Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InterpControlPoint
// Struct Size::0x001C
struct FInterpControlPoint
{
    FVector                                       PositionControlPoint;                                         // 0x0000(0x000C)
    bool                                          bPositionIsRelative;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x000F]                                               // 0x000D(0x000F)
};


// ScriptStruct  Engine.PlatformInterfaceDelegateResult
// Struct Size::0x0038
struct FPlatformInterfaceDelegateResult
{
    bool                                          bSuccessful;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FPlatformInterfaceData                        Data;                                                         // 0x0008(0x0030)
};


// ScriptStruct  Engine.PlatformInterfaceData
// Struct Size::0x0030
struct FPlatformInterfaceData
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    enum class EPlatformInterfaceDataType         Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       IntValue;                                                     // 0x000C(0x0004)
    float                                         FloatValue;                                                   // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StringValue;                                                  // 0x0018(0x0010)
    UObject*                                      ObjectValue;                                                  // 0x0028(0x0008)
};


// ScriptStruct  Engine.DebugFloatHistory
// Struct Size::0x0020
struct FDebugFloatHistory
{
    TArray<float>                                 Samples;                                                      // 0x0000(0x0010)
    float                                         MaxSamples;                                                   // 0x0010(0x0004)
    float                                         MinValue;                                                     // 0x0014(0x0004)
    float                                         MaxValue;                                                     // 0x0018(0x0004)
    bool                                          bAutoAdjustMinMax;                                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.LatentActionInfo
// Struct Size::0x0018
struct FLatentActionInfo
{
    int32_t                                       Linkage;                                                      // 0x0000(0x0004)
    int32_t                                       UUID;                                                         // 0x0004(0x0004)
    FName                                         ExecutionFunction;                                            // 0x0008(0x0008)
    UObject*                                      CallbackTarget;                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.TimerHandle
// Struct Size::0x0008
struct FTimerHandle
{
    uint64_t                                      Handle;                                                       // 0x0000(0x0008)
};


// ScriptStruct  Engine.CollisionProfileName
// Struct Size::0x0008
struct FCollisionProfileName
{
    FName                                         Name;                                                         // 0x0000(0x0008)
};


// ScriptStruct  Engine.GenericStruct
// Struct Size::0x0004
struct FGenericStruct
{
    int32_t                                       Data;                                                         // 0x0000(0x0004)
};


// ScriptStruct  Engine.UserActivity
// Struct Size::0x0018
struct FUserActivity
{
    FString                                       ActionName;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.FastArraySerializerItem
// Struct Size::0x000C
struct FFastArraySerializerItem
{
    int32_t                                       ReplicationID;                                                // 0x0000(0x0004)
    int32_t                                       ReplicationKey;                                               // 0x0004(0x0004)
    int32_t                                       MostRecentArrayReplicationKey;                                // 0x0008(0x0004)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffect
// Struct Size::0x0370
struct FActiveGameplayEffect : public FFastArraySerializerItem
{
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
    FGameplayEffectSpec                           Spec;                                                         // 0x0018(0x0298)
    FPredictionKey                                PredictionKey;                                                // 0x02B0(0x0018)
    float                                         StartServerWorldTime;                                         // 0x02C8(0x0004)
    float                                         CachedStartServerWorldTime;                                   // 0x02CC(0x0004)
    float                                         StartWorldTime;                                               // 0x02D0(0x0004)
    bool                                          bIsInhibited;                                                 // 0x02D4(0x0001)
    char                                          pa_02D5[0x009B]                                               // 0x02D5(0x009B)
};


// ScriptStruct  GameplayAbilities.PredictionKey
// Struct Size::0x0018
struct FPredictionKey
{
    int16_t                                       Current;                                                      // 0x0000(0x0002)
    int16_t                                       Base;                                                         // 0x0002(0x0002)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UPackageMap*                                  PredictiveConnection;                                         // 0x0008(0x0008)
    bool                                          bIsStale;                                                     // 0x0010(0x0001)
    bool                                          bIsServerInitiated;                                           // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpec
// Struct Size::0x0298
struct FGameplayEffectSpec
{
    UGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectAttributeCaptureSpecContainer  CapturedRelevantAttributes;                                   // 0x0018(0x0028)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Duration;                                                     // 0x0050(0x0004)
    float                                         Period;                                                       // 0x0054(0x0004)
    float                                         ChanceToApplyToTarget;                                        // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FTagContainerAggregator                       CapturedSourceTags;                                           // 0x0060(0x0088)
    FTagContainerAggregator                       CapturedTargetTags;                                           // 0x00E8(0x0088)
    FGameplayTagContainer                         DynamicGrantedTags;                                           // 0x0170(0x0020)
    FGameplayTagContainer                         DynamicAssetTags;                                             // 0x0190(0x0020)
    TArray<FModifierSpec>                         Modifiers;                                                    // 0x01B0(0x0010)
    int32_t                                       StackCount;                                                   // 0x01C0(0x0004)
    char                                          bCompletedSourceAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bCompletedTargetAttributeCapture;                             // 0x01C4(0x0001)
    char                                          bDurationLocked;                                              // 0x01C4(0x0001)
    char                                          pa_01C5[0x0003]                                               // 0x01C5(0x0003)
    TArray<FGameplayAbilitySpecDef>               GrantedAbilitySpecs;                                          // 0x01C8(0x0010)
    char                                          pa_01D8[0x00A0]                                               // 0x01D8(0x00A0)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0278(0x0018)
    float                                         Level;                                                        // 0x0290(0x0004)
    char                                          pa_0294[0x0004]                                               // 0x0294(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContextHandle
// Struct Size::0x0018
struct FGameplayEffectContextHandle
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecDef
// Struct Size::0x0090
struct FGameplayAbilitySpecDef
{
    UGameplayAbility*                             Ability;                                                      // 0x0000(0x0008)
    FScalableFloat                                LevelScalableFloat;                                           // 0x0008(0x0020)
    int32_t                                       InputID;                                                      // 0x0028(0x0004)
    enum class EGameplayEffectGrantedAbilityRemovePolicyRemovalPolicy;                                          // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    UObject*                                      SourceObject;                                                 // 0x0030(0x0008)
    char                                          pa_0038[0x0050]                                               // 0x0038(0x0050)
    FGameplayAbilitySpecHandle                    AssignedHandle;                                               // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandle
// Struct Size::0x0004
struct FGameplayAbilitySpecHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.ScalableFloat
// Struct Size::0x0020
struct FScalableFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FCurveTableRowHandle                          Curve;                                                        // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.CurveTableRowHandle
// Struct Size::0x0010
struct FCurveTableRowHandle
{
    UCurveTable*                                  CurveTable;                                                   // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.ModifierSpec
// Struct Size::0x0004
struct FModifierSpec
{
    float                                         EvaluatedMagnitude;                                           // 0x0000(0x0004)
};


// ScriptStruct  GameplayTags.GameplayTagContainer
// Struct Size::0x0020
struct FGameplayTagContainer
{
    TArray<FGameplayTag>                          GameplayTags;                                                 // 0x0000(0x0010)
    TArray<FGameplayTag>                          ParentTags;                                                   // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTag
// Struct Size::0x0008
struct FGameplayTag
{
    FName                                         TagName;                                                      // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.TagContainerAggregator
// Struct Size::0x0088
struct FTagContainerAggregator
{
    FGameplayTagContainer                         CapturedActorTags;                                            // 0x0000(0x0020)
    FGameplayTagContainer                         CapturedSpecTags;                                             // 0x0020(0x0020)
    FGameplayTagContainer                         ScopedTags;                                                   // 0x0040(0x0020)
    char                                          pa_0060[0x0028]                                               // 0x0060(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpecContainer
// Struct Size::0x0028
struct FGameplayEffectAttributeCaptureSpecContainer
{
    TArray<FGameplayEffectAttributeCaptureSpec>   SourceAttributes;                                             // 0x0000(0x0010)
    TArray<FGameplayEffectAttributeCaptureSpec>   TargetAttributes;                                             // 0x0010(0x0010)
    bool                                          bHasNonSnapshottedAttributes;                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureSpec
// Struct Size::0x0050
struct FGameplayEffectAttributeCaptureSpec
{
    FGameplayEffectAttributeCaptureDefinition     BackingDefinition;                                            // 0x0000(0x0040)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectAttributeCaptureDefinition
// Struct Size::0x0040
struct FGameplayEffectAttributeCaptureDefinition
{
    FGameplayAttribute                            AttributeToCapture;                                           // 0x0000(0x0038)
    enum class EGameplayEffectAttributeCaptureSourceAttributeSource;                                            // 0x0038(0x0001)
    bool                                          bSnapshot;                                                    // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  GameplayAbilities.GameplayAttribute
// Struct Size::0x0038
struct FGameplayAttribute
{
    FString                                       AttributeName;                                                // 0x0000(0x0010)
    *                                             Attribute;                                                    // 0x0010(0x0020)
    UStruct*                                      AttributeOwner;                                               // 0x0030(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifiedAttribute
// Struct Size::0x0040
struct FGameplayEffectModifiedAttribute
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    float                                         TotalMagnitude;                                               // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectHandle
// Struct Size::0x0008
struct FActiveGameplayEffectHandle
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
    bool                                          bPassedFiltersAndWasExecuted;                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecHandle
// Struct Size::0x0010
struct FGameplayEffectSpecHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayEffectRemovalInfo
// Struct Size::0x0020
struct FGameplayEffectRemovalInfo
{
    bool                                          bPrematureRemoval;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       StackCount;                                                   // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayEventData
// Struct Size::0x00B0
struct FGameplayEventData
{
    FGameplayTag                                  EventTag;                                                     // 0x0000(0x0008)
    AActor*                                       Instigator;                                                   // 0x0008(0x0008)
    AActor*                                       Target;                                                       // 0x0010(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0018(0x0008)
    UObject*                                      OptionalObject2;                                              // 0x0020(0x0008)
    FGameplayEffectContextHandle                  ContextHandle;                                                // 0x0028(0x0018)
    FGameplayTagContainer                         InstigatorTags;                                               // 0x0040(0x0020)
    FGameplayTagContainer                         TargetTags;                                                   // 0x0060(0x0020)
    float                                         EventMagnitude;                                               // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0088(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetDataHandle
// Struct Size::0x0028
struct FGameplayAbilityTargetDataHandle
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  GameplayTasks.GameplayResourceSet
// Struct Size::0x0002
struct FGameplayResourceSet
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActivationInfo
// Struct Size::0x0020
struct FGameplayAbilityActivationInfo
{
    enum class EGameplayAbilityActivationMode     ActivationMode;                                               // 0x0000(0x0001)
    char                                          bCanBeEndedByOtherInstance;                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FPredictionKey                                PredictionKeyWhenActivated;                                   // 0x0008(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayEffectQuery
// Struct Size::0x0150
struct FGameplayEffectQuery
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FDelegate                                     CustomMatchDelegate_BP;                                       // 0x0010(0x0010)
    FGameplayTagQuery                             OwningTagQuery;                                               // 0x0020(0x0048)
    FGameplayTagQuery                             EffectTagQuery;                                               // 0x0068(0x0048)
    FGameplayTagQuery                             SourceTagQuery;                                               // 0x00B0(0x0048)
    FGameplayAttribute                            ModifyingAttribute;                                           // 0x00F8(0x0038)
    UObject*                                      EffectSource;                                                 // 0x0130(0x0008)
    UGameplayEffect*                              EffectDefinition;                                             // 0x0138(0x0008)
    char                                          pa_0140[0x0010]                                               // 0x0140(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagQuery
// Struct Size::0x0048
struct FGameplayTagQuery
{
    int32_t                                       TokenStreamVersion;                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FGameplayTag>                          TagDictionary;                                                // 0x0008(0x0010)
    TArray<char>                                  QueryTokenStream;                                             // 0x0018(0x0010)
    FString                                       UserDescription;                                              // 0x0028(0x0010)
    FString                                       AutoDescription;                                              // 0x0038(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayCueParameters
// Struct Size::0x00D0
struct FGameplayCueParameters
{
    float                                         NormalizedMagnitude;                                          // 0x0000(0x0004)
    float                                         RawMagnitude;                                                 // 0x0004(0x0004)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0008(0x0018)
    FGameplayTag                                  MatchedTagName;                                               // 0x0020(0x0008)
    FGameplayTag                                  OriginalTag;                                                  // 0x0028(0x0008)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0030(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0050(0x0020)
    FVector_NetQuantize10                         Location;                                                     // 0x0070(0x000C)
    FVector_NetQuantizeNormal                     Normal;                                                       // 0x007C(0x000C)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0088(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x0090(0x0008)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x0098(0x0008)
    TWeakObjectPtr<UPhysicalMaterial>             PhysicalMaterial;                                             // 0x00A0(0x0008)
    int32_t                                       GameplayEffectLevel;                                          // 0x00A8(0x0004)
    int32_t                                       AbilityLevel;                                                 // 0x00AC(0x0004)
    TWeakObjectPtr<USceneComponent>               TargetAttachComponent;                                        // 0x00B0(0x0008)
    TArray<AActor*>                               RelatedActorArray;                                            // 0x00B8(0x0010)
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
};


// ScriptStruct  Engine.Vector_NetQuantize10
// Struct Size::0x000C
struct FVector_NetQuantize10 : public FVector
{
};


// ScriptStruct  GameplayAbilities.GameplayEffectSpecForRPC
// Struct Size::0x0078
struct FGameplayEffectSpecForRPC
{
    UGameplayEffect*                              Def;                                                          // 0x0000(0x0008)
    TArray<FGameplayEffectModifiedAttribute>      ModifiedAttributes;                                           // 0x0008(0x0010)
    FGameplayEffectContextHandle                  EffectContext;                                                // 0x0018(0x0018)
    FGameplayTagContainer                         AggregatedSourceTags;                                         // 0x0030(0x0020)
    FGameplayTagContainer                         AggregatedTargetTags;                                         // 0x0050(0x0020)
    float                                         Level;                                                        // 0x0070(0x0004)
    float                                         AbilityLevel;                                                 // 0x0074(0x0004)
};


// ScriptStruct  GameplayAbilities.ServerAbilityRPCBatch
// Struct Size::0x0050
struct FServerAbilityRPCBatch
{
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0008(0x0018)
    FGameplayAbilityTargetDataHandle              TargetData;                                                   // 0x0020(0x0028)
    bool                                          InputPressed;                                                 // 0x0048(0x0001)
    bool                                          Ended;                                                        // 0x0049(0x0001)
    bool                                          Started;                                                      // 0x004A(0x0001)
    char                                          pa_004B[0x0005]                                               // 0x004B(0x0005)
};


// ScriptStruct  Engine.Vector_NetQuantize100
// Struct Size::0x000C
struct FVector_NetQuantize100 : public FVector
{
};


// ScriptStruct  Engine.FastArraySerializer
// Struct Size::0x0108
struct FFastArraySerializer
{
    char                                          pa_0000[0x0054]                                               // 0x0000(0x0054)
    int32_t                                       ArrayReplicationKey;                                          // 0x0054(0x0004)
    char                                          pa_0058[0x00A8]                                               // 0x0058(0x00A8)
    enum class EFastArraySerializerDeltaFlags     DeltaFlags;                                                   // 0x0100(0x0001)
    char                                          pa_0101[0x0007]                                               // 0x0101(0x0007)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyMap
// Struct Size::0x0118
struct FReplicatedPredictionKeyMap : public FFastArraySerializer
{
    TArray<FReplicatedPredictionKeyItem>          PredictionKeys;                                               // 0x0108(0x0010)
};


// ScriptStruct  GameplayAbilities.ReplicatedPredictionKeyItem
// Struct Size::0x0028
struct FReplicatedPredictionKeyItem : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0018)
};


// ScriptStruct  GameplayAbilities.MinimalReplicationTagCountMap
// Struct Size::0x0060
struct FMinimalReplicationTagCountMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0050(0x0008)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCueContainer
// Struct Size::0x0128
struct FActiveGameplayCueContainer : public FFastArraySerializer
{
    TArray<FActiveGameplayCue>                    GameplayCues;                                                 // 0x0108(0x0010)
    char                                          pa_0118[0x0008]                                               // 0x0118(0x0008)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0120(0x0008)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayCue
// Struct Size::0x0108
struct FActiveGameplayCue : public FFastArraySerializerItem
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0018)
    FGameplayCueParameters                        Parameters;                                                   // 0x0030(0x00D0)
    bool                                          bPredictivelyRemoved;                                         // 0x0100(0x0001)
    char                                          pa_0101[0x0007]                                               // 0x0101(0x0007)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectsContainer
// Struct Size::0x0488
struct FActiveGameplayEffectsContainer : public FFastArraySerializer
{
    char                                          pa_0108[0x0038]                                               // 0x0108(0x0038)
    TArray<FActiveGameplayEffect>                 GameplayEffects_Internal;                                     // 0x0140(0x0010)
    char                                          pa_0150[0x0310]                                               // 0x0150(0x0310)
    TArray<UGameplayEffect*>                      ApplicationImmunityQueryEffects;                              // 0x0460(0x0010)
    char                                          pa_0470[0x0018]                                               // 0x0470(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityLocalAnimMontage
// Struct Size::0x0030
struct FGameplayAbilityLocalAnimMontage
{
    UAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    bool                                          PlayBit;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FPredictionKey                                PredictionKey;                                                // 0x0010(0x0018)
    UGameplayAbility*                             AnimatingAbility;                                             // 0x0028(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityRepAnimMontage
// Struct Size::0x0038
struct FGameplayAbilityRepAnimMontage
{
    UAnimMontage*                                 AnimMontage;                                                  // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         Position;                                                     // 0x000C(0x0004)
    float                                         BlendTime;                                                    // 0x0010(0x0004)
    char                                          NextSectionID;                                                // 0x0014(0x0001)
    char                                          bRepPosition;                                                 // 0x0015(0x0001)
    char                                          IsStopped;                                                    // 0x0015(0x0001)
    char                                          ForcePlayBit;                                                 // 0x0015(0x0001)
    char                                          SkipPositionCorrection;                                       // 0x0015(0x0001)
    char                                          bSkipPlayRate;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0018)
    char                                          SectionIdToPlay;                                              // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecContainer
// Struct Size::0x0120
struct FGameplayAbilitySpecContainer : public FFastArraySerializer
{
    TArray<FGameplayAbilitySpec>                  Items;                                                        // 0x0108(0x0010)
    UAbilitySystemComponent*                      Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpec
// Struct Size::0x00C8
struct FGameplayAbilitySpec : public FFastArraySerializerItem
{
    FGameplayAbilitySpecHandle                    Handle;                                                       // 0x000C(0x0004)
    UGameplayAbility*                             Ability;                                                      // 0x0010(0x0008)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    int32_t                                       InputID;                                                      // 0x001C(0x0004)
    UObject*                                      SourceObject;                                                 // 0x0020(0x0008)
    char                                          ActiveCount;                                                  // 0x0028(0x0001)
    char                                          InputPressed;                                                 // 0x0029(0x0001)
    char                                          RemoveAfterActivation;                                        // 0x0029(0x0001)
    char                                          PendingRemove;                                                // 0x0029(0x0001)
    char                                          bActivateOnce;                                                // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FGameplayAbilityActivationInfo                ActivationInfo;                                               // 0x0030(0x0020)
    TArray<UGameplayAbility*>                     NonReplicatedInstances;                                       // 0x0050(0x0010)
    TArray<UGameplayAbility*>                     ReplicatedInstances;                                          // 0x0060(0x0010)
    FActiveGameplayEffectHandle                   GameplayEffectHandle;                                         // 0x0070(0x0008)
    char                                          pa_0078[0x0050]                                               // 0x0078(0x0050)
};


// ScriptStruct  GameplayAbilities.AttributeDefaults
// Struct Size::0x0010
struct FAttributeDefaults
{
    UAttributeSet*                                Attributes;                                                   // 0x0000(0x0008)
    UDataTable*                                   DefaultStartingTable;                                         // 0x0008(0x0008)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataResult
// Struct Size::0x0028
struct FChatGMEDataResult
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    bool                                          bSuccess;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       ErrorInfo;                                                    // 0x0010(0x0010)
    int32_t                                       ErrorCode;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataDeviceInfo
// Struct Size::0x0050
struct FChatGMEDataDeviceInfo : public FChatGMEDataResult
{
    FString                                       DeviceID;                                                     // 0x0028(0x0010)
    FString                                       DeviceName;                                                   // 0x0038(0x0010)
    bool                                          bNewDevice;                                                   // 0x0048(0x0001)
    bool                                          bUsedDevice;                                                  // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  LimNativeWidget.AgoraUserUpdateData
// Struct Size::0x0010
struct FAgoraUserUpdateData
{
    TArray<FString>                               UserList;                                                     // 0x0000(0x0010)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataRoomQuality
// Struct Size::0x0018
struct FChatGMEDataRoomQuality
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    int32_t                                       Weight;                                                       // 0x0008(0x0004)
    float                                         Loss;                                                         // 0x000C(0x0004)
    int32_t                                       Delay;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataChangeRoomType
// Struct Size::0x0030
struct FChatGMEDataChangeRoomType : public FChatGMEDataResult
{
    enum class EChatGMERoomTypeSubEvent           NewRoomType;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  LimNative.LimNativeLowLevelWrapper
// Struct Size::0x0010
struct FLimNativeLowLevelWrapper
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  LimNative.LimNativeDataObjectBase
// Struct Size::0x0008
struct FLimNativeDataObjectBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  LimNative.UidList
// Struct Size::0x0018
struct FUidList : public FLimNativeDataObjectBase
{
    TArray<FString>                               Uids;                                                         // 0x0008(0x0010)
};


// ScriptStruct  LimNative.LimNativeInitConfig
// Struct Size::0x0078
struct FLimNativeInitConfig : public FLimNativeDataObjectBase
{
    enum class ELimNativeSupportedLanguage        Lang;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Mode;                                                         // 0x000C(0x0004)
    FString                                       EnvId;                                                        // 0x0010(0x0010)
    FString                                       AppId;                                                        // 0x0020(0x0010)
    FString                                       SDKRegion;                                                    // 0x0030(0x0010)
    int32_t                                       GameID;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       SlsSvr;                                                       // 0x0048(0x0010)
    int32_t                                       FarlightDomain;                                               // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       ParkEnvID;                                                    // 0x0060(0x0010)
    int32_t                                       Timeout;                                                      // 0x0070(0x0004)
    int32_t                                       UseHttps;                                                     // 0x0074(0x0004)
};


// ScriptStruct  LimNative.LimNativeDataCallBackBase
// Struct Size::0x0030
struct FLimNativeDataCallBackBase : public FLimNativeDataObjectBase
{
    FString                                       FuncName;                                                     // 0x0008(0x0010)
    enum class ELimNativeErrorType                ErrorCode;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       Code;                                                         // 0x001C(0x0004)
    FString                                       Message;                                                      // 0x0020(0x0010)
};


// ScriptStruct  LimNative.LimNativeFriendCommonCallBack
// Struct Size::0x0058
struct FLimNativeFriendCommonCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeDataCallBackDataBase                ResultData;                                                   // 0x0030(0x0028)
};


// ScriptStruct  LimNative.LimNativeDataCallBackDataBase
// Struct Size::0x0028
struct FLimNativeDataCallBackDataBase : public FLimNativeDataObjectBase
{
    FLimNativeResult                              ResultData;                                                   // 0x0008(0x0020)
};


// ScriptStruct  LimNative.LimNativeResult
// Struct Size::0x0020
struct FLimNativeResult : public FLimNativeDataObjectBase
{
    int32_t                                       ErrCode;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       ErrMsg;                                                       // 0x0010(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGroupMemberAddCallBack
// Struct Size::0x0098
struct FLimNativeOnGroupMemberAddCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeIMGroup                             Data;                                                         // 0x0030(0x0068)
};


// ScriptStruct  LimNative.LimNativeIMGroupBrief
// Struct Size::0x0038
struct FLimNativeIMGroupBrief : public FLimNativeDataObjectBase
{
    FString                                       ChannelId;                                                    // 0x0008(0x0010)
    FString                                       Name;                                                         // 0x0018(0x0010)
    FString                                       Extra;                                                        // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMGroup
// Struct Size::0x0068
struct FLimNativeIMGroup : public FLimNativeIMGroupBrief
{
    FString                                       GameID;                                                       // 0x0038(0x0010)
    FString                                       Uid;                                                          // 0x0048(0x0010)
    TArray<FLimNativeIMChannelMember>             members;                                                      // 0x0058(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMChannelMember
// Struct Size::0x0038
struct FLimNativeIMChannelMember : public FLimNativeDataObjectBase
{
    FString                                       ChannelId;                                                    // 0x0008(0x0010)
    FString                                       Uid;                                                          // 0x0018(0x0010)
    FString                                       Role;                                                         // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnConvHandleCallBack
// Struct Size::0x0068
struct FLimNativeOnConvHandleCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeConvHandleCallBackData              Data;                                                         // 0x0030(0x0038)
};


// ScriptStruct  LimNative.LimNativeConvHandleCallBackData
// Struct Size::0x0038
struct FLimNativeConvHandleCallBackData : public FLimNativeDataObjectBase
{
    FLimNativeResult                              Result;                                                       // 0x0008(0x0020)
    FString                                       Msg;                                                          // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnConvsGetCallBack
// Struct Size::0x0048
struct FLimNativeOnConvsGetCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeOnConvsGetCallBackData              Data;                                                         // 0x0030(0x0018)
};


// ScriptStruct  LimNative.LimNativeOnConvsGetCallBackData
// Struct Size::0x0018
struct FLimNativeOnConvsGetCallBackData : public FLimNativeDataObjectBase
{
    TArray<FLimNativeConversationData>            ConvList;                                                     // 0x0008(0x0010)
};


// ScriptStruct  LimNative.LimNativeConversationData
// Struct Size::0x00B0
struct FLimNativeConversationData : public FLimNativeDataObjectBase
{
    FString                                       ConvID;                                                       // 0x0008(0x0010)
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       SubType;                                                      // 0x001C(0x0004)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       Avatar;                                                       // 0x0030(0x0010)
    int32_t                                       UnreadCount;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       LastMsgId;                                                    // 0x0048(0x0010)
    enum class ELimNativeMsgContentType           LastMsgType;                                                  // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    FString                                       LastMsgTs;                                                    // 0x0060(0x0010)
    FString                                       LastReadMsgId;                                                // 0x0070(0x0010)
    FString                                       LastMsgContent;                                               // 0x0080(0x0010)
    FString                                       BaseMsgId;                                                    // 0x0090(0x0010)
    FString                                       Flags;                                                        // 0x00A0(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnCreateFriendRequestCallBack
// Struct Size::0x0068
struct FLimNativeOnCreateFriendRequestCallBack : public FLimNativeDataCallBackBase
{
    FCreateFriendRequestData                      FriendRequestCallBackData;                                    // 0x0030(0x0038)
};


// ScriptStruct  LimNative.CreateFriendRequestData
// Struct Size::0x0038
struct FCreateFriendRequestData : public FLimNativeDataCallBackDataBase
{
    FString                                       RequestID;                                                    // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnCreateGroupCallBack
// Struct Size::0x0098
struct FLimNativeOnCreateGroupCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeIMGroup                             Data;                                                         // 0x0030(0x0068)
};


// ScriptStruct  LimNative.LimNativeOnGroupDestoryCallBack
// Struct Size::0x0030
struct FLimNativeOnGroupDestoryCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnGroupAttrGetAllCallBack
// Struct Size::0x0030
struct FLimNativeOnGroupAttrGetAllCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnGetBlockeesCallBack
// Struct Size::0x0068
struct FLimNativeOnGetBlockeesCallBack : public FLimNativeDataCallBackBase
{
    FGetBlockeesData                              Data;                                                         // 0x0030(0x0038)
};


// ScriptStruct  LimNative.GetBlockeesData
// Struct Size::0x0038
struct FGetBlockeesData : public FLimNativeDataCallBackDataBase
{
    TArray<FLimUserInfo>                          UserInfoList;                                                 // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimUserInfo
// Struct Size::0x0038
struct FLimUserInfo : public FLimNativeDataObjectBase
{
    FString                                       Uid;                                                          // 0x0008(0x0010)
    FString                                       NickName;                                                     // 0x0018(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGetCommonMsgsCallBack
// Struct Size::0x0068
struct FLimNativeOnGetCommonMsgsCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeGetCommonCallBackData               Data;                                                         // 0x0030(0x0038)
};


// ScriptStruct  LimNative.LimNativeGetCommonCallBackData
// Struct Size::0x0038
struct FLimNativeGetCommonCallBackData : public FLimNativeDataObjectBase
{
    TArray<FLimNativeCommonMsg>                   CommonMessages;                                               // 0x0008(0x0010)
    FLimNativeResult                              Result;                                                       // 0x0018(0x0020)
};


// ScriptStruct  LimNative.LimNativeCommonMsg
// Struct Size::0x0060
struct FLimNativeCommonMsg : public FLimNativeDataObjectBase
{
    FString                                       ServerMsgId;                                                  // 0x0008(0x0010)
    FString                                       TargetId;                                                     // 0x0018(0x0010)
    int32_t                                       TargetType;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FLimNativeCommonMsgData                       Data;                                                         // 0x0030(0x0020)
    FString                                       Timestamp;                                                    // 0x0050(0x0010)
};


// ScriptStruct  LimNative.LimNativeCommonMsgData
// Struct Size::0x0020
struct FLimNativeCommonMsgData : public FLimNativeDataObjectBase
{
    int32_t                                       Type;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0014]                                               // 0x000C(0x0014)
};


// ScriptStruct  LimNative.LimNativeOnGetConfigCallBack
// Struct Size::0x0050
struct FLimNativeOnGetConfigCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeIMConfig                            Data;                                                         // 0x0030(0x0020)
};


// ScriptStruct  LimNative.LimNativeIMConfig
// Struct Size::0x0020
struct FLimNativeIMConfig : public FLimNativeDataObjectBase
{
    enum class ELimNativeSupportedLanguage        Lang;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       ResDir;                                                       // 0x0010(0x0010)
};


// ScriptStruct  LimNative.LimNativeGetConnStateCallBack
// Struct Size::0x0040
struct FLimNativeGetConnStateCallBack : public FLimNativeDataCallBackBase
{
    FLimNativConnStateData                        Data;                                                         // 0x0030(0x0010)
};


// ScriptStruct  LimNative.LimNativConnStateData
// Struct Size::0x0010
struct FLimNativConnStateData : public FLimNativeDataObjectBase
{
    int32_t                                       Connect_State;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LimNative.LimNativeOnGetConvChatLevelConfigCallBack
// Struct Size::0x0040
struct FLimNativeOnGetConvChatLevelConfigCallBack : public FLimNativeDataCallBackBase
{
    TArray<FLimNativeConvChatLevelConfigData>     DataList;                                                     // 0x0030(0x0010)
};


// ScriptStruct  LimNative.LimNativeConvChatLevelConfigData
// Struct Size::0x0048
struct FLimNativeConvChatLevelConfigData : public FLimNativeDataCallBackDataBase
{
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       Level;                                                        // 0x002C(0x0004)
    int32_t                                       Interval;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FLimNativeConvNumLimitData>            NumLimits;                                                    // 0x0038(0x0010)
};


// ScriptStruct  LimNative.LimNativeConvNumLimitData
// Struct Size::0x0010
struct FLimNativeConvNumLimitData : public FLimNativeDataObjectBase
{
    int32_t                                       Duration;                                                     // 0x0008(0x0004)
    int32_t                                       Number;                                                       // 0x000C(0x0004)
};


// ScriptStruct  LimNative.LimNativeOnGetFriendRequestCallBack
// Struct Size::0x0078
struct FLimNativeOnGetFriendRequestCallBack : public FLimNativeDataCallBackBase
{
    FGetFriendRequestData                         GetFriendRequestData;                                         // 0x0030(0x0048)
};


// ScriptStruct  LimNative.GetFriendRequestData
// Struct Size::0x0048
struct FGetFriendRequestData : public FLimNativeDataCallBackDataBase
{
    TArray<FSendFriendRequestData>                SendRequests;                                                 // 0x0028(0x0010)
    TArray<FReceivedFriendRequestData>            ReceiveRequests;                                              // 0x0038(0x0010)
};


// ScriptStruct  LimNative.ReceivedFriendRequestData
// Struct Size::0x0060
struct FReceivedFriendRequestData : public FLimNativeDataObjectBase
{
    FString                                       RequestID;                                                    // 0x0008(0x0010)
    FString                                       TargetId;                                                     // 0x0018(0x0010)
    FString                                       NickName;                                                     // 0x0028(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0038(0x0010)
    FString                                       Timestamp;                                                    // 0x0048(0x0010)
    bool                                          IsOffLineRequest;                                             // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
};


// ScriptStruct  LimNative.SendFriendRequestData
// Struct Size::0x0058
struct FSendFriendRequestData : public FLimNativeDataObjectBase
{
    FString                                       RequestID;                                                    // 0x0008(0x0010)
    FString                                       TargetId;                                                     // 0x0018(0x0010)
    FString                                       NickName;                                                     // 0x0028(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0038(0x0010)
    FString                                       Timestamp;                                                    // 0x0048(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGetFriendCallBack
// Struct Size::0x0068
struct FLimNativeOnGetFriendCallBack : public FLimNativeDataCallBackBase
{
    FFriendInfoList                               FriendData;                                                   // 0x0030(0x0038)
};


// ScriptStruct  LimNative.FriendInfoList
// Struct Size::0x0038
struct FFriendInfoList : public FLimNativeDataCallBackDataBase
{
    TArray<FFriendInfo>                           FriendList;                                                   // 0x0028(0x0010)
};


// ScriptStruct  LimNative.FriendInfo
// Struct Size::0x01D0
struct FFriendInfo : public FLimNativeDataObjectBase
{
    FString                                       Uid;                                                          // 0x0008(0x0010)
    FString                                       NickName;                                                     // 0x0018(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0028(0x0010)
    enum class ELimNativeUserSexType              Sex;                                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FGuild                                        Guild;                                                        // 0x0040(0x0048)
    FKingdom                                      Kingdom;                                                      // 0x0088(0x0048)
    TArray<FSubTitleItem>                         SubTitleList;                                                 // 0x00D0(0x0010)
    FString                                       BadgeUrl;                                                     // 0x00E0(0x0010)
    FString                                       AvatarFrameUrl;                                               // 0x00F0(0x0010)
    FBubbleConfigs                                BubbleConfigs;                                                // 0x0100(0x00A8)
    int32_t                                       VipLevel;                                                     // 0x01A8(0x0004)
    bool                                          IsShowVip;                                                    // 0x01AC(0x0001)
    char                                          pa_01AD[0x0003]                                               // 0x01AD(0x0003)
    int32_t                                       ServerTime;                                                   // 0x01B0(0x0004)
    int32_t                                       LastFetchTime;                                                // 0x01B4(0x0004)
    FPresence                                     Presence;                                                     // 0x01B8(0x0018)
};


// ScriptStruct  LimNative.Presence
// Struct Size::0x0018
struct FPresence : public FLimNativeDataObjectBase
{
    bool                                          IsOnline;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       TeamID;                                                       // 0x000C(0x0004)
    int32_t                                       TeamStatus;                                                   // 0x0010(0x0004)
    bool                                          IsInMyTeam;                                                   // 0x0014(0x0001)
    enum class ELimNativeFriendStateType          FriendState;                                                  // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  LimNative.BubbleConfigs
// Struct Size::0x00A8
struct FBubbleConfigs : public FLimNativeDataObjectBase
{
    FBubbleConfig                                 LeftNormal;                                                   // 0x0008(0x0028)
    FBubbleConfig                                 LeftPressed;                                                  // 0x0030(0x0028)
    FBubbleConfig                                 RightNormal;                                                  // 0x0058(0x0028)
    FBubbleConfig                                 RightPressed;                                                 // 0x0080(0x0028)
};


// ScriptStruct  LimNative.BubbleConfig
// Struct Size::0x0028
struct FBubbleConfig : public FLimNativeDataObjectBase
{
    FString                                       URL;                                                          // 0x0008(0x0010)
    float                                         Top;                                                          // 0x0018(0x0004)
    float                                         Left;                                                         // 0x001C(0x0004)
    float                                         Bottom;                                                       // 0x0020(0x0004)
    float                                         Right;                                                        // 0x0024(0x0004)
};


// ScriptStruct  LimNative.SubTitleItem
// Struct Size::0x0038
struct FSubTitleItem : public FLimNativeDataObjectBase
{
    FString                                       Key;                                                          // 0x0008(0x0010)
    FString                                       Content;                                                      // 0x0018(0x0010)
    FString                                       BGUrl;                                                        // 0x0028(0x0010)
};


// ScriptStruct  LimNative.Kingdom
// Struct Size::0x0048
struct FKingdom : public FLimNativeDataObjectBase
{
    FString                                       StoryId;                                                      // 0x0008(0x0010)
    FString                                       KingdomId;                                                    // 0x0018(0x0010)
    FString                                       Name;                                                         // 0x0028(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0038(0x0010)
};


// ScriptStruct  LimNative.Guild
// Struct Size::0x0048
struct FGuild : public FLimNativeDataObjectBase
{
    FString                                       ID;                                                           // 0x0008(0x0010)
    FString                                       Name;                                                         // 0x0018(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0028(0x0010)
    FString                                       AbbrName;                                                     // 0x0038(0x0010)
};


// ScriptStruct  LimNative.LimNativeGetGMETokenCallBack
// Struct Size::0x0068
struct FLimNativeGetGMETokenCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeGetGMETokenData                     Data;                                                         // 0x0030(0x0038)
};


// ScriptStruct  LimNative.LimNativeGetGMETokenData
// Struct Size::0x0038
struct FLimNativeGetGMETokenData : public FLimNativeDataCallBackDataBase
{
    TArray<char>                                  AuthBuffer;                                                   // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGroupAttrGetCallBack
// Struct Size::0x0030
struct FLimNativeOnGroupAttrGetCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnGroupGetCallBack
// Struct Size::0x0098
struct FLimNativeOnGroupGetCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeIMGroup                             Data;                                                         // 0x0030(0x0068)
};


// ScriptStruct  LimNative.LimNativeOnGroupMemberGetCallBack
// Struct Size::0x0030
struct FLimNativeOnGroupMemberGetCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnGroupMembersGetCallBack
// Struct Size::0x0098
struct FLimNativeOnGroupMembersGetCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeIMGroup                             Data;                                                         // 0x0030(0x0068)
};


// ScriptStruct  LimNative.LimNativeOnGroupsGetCallBack
// Struct Size::0x0050
struct FLimNativeOnGroupsGetCallBack : public FLimNativeDataCallBackBase
{
    FString                                       GameID;                                                       // 0x0030(0x0010)
    TArray<FLimNativeIMGroupBrief>                Channels;                                                     // 0x0040(0x0010)
};


// ScriptStruct  LimNative.LimNativeGetMiscConfigInfoCallBack
// Struct Size::0x0070
struct FLimNativeGetMiscConfigInfoCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeGetConfigInfoData                   Data;                                                         // 0x0030(0x0040)
};


// ScriptStruct  LimNative.LimNativeGetConfigInfoData
// Struct Size::0x0040
struct FLimNativeGetConfigInfoData : public FLimNativeDataCallBackDataBase
{
    FLimNativConfigInfoData                       Data;                                                         // 0x0028(0x0010)
    int32_t                                       ResultCode;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  LimNative.LimNativConfigInfoData
// Struct Size::0x0010
struct FLimNativConfigInfoData : public FLimNativeDataObjectBase
{
    int32_t                                       Interval;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LimNative.LimNativeOnGetMsgsCallBack
// Struct Size::0x0048
struct FLimNativeOnGetMsgsCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeMsgConvData                         Data;                                                         // 0x0030(0x0018)
};


// ScriptStruct  LimNative.LimNativeMsgConvData
// Struct Size::0x0018
struct FLimNativeMsgConvData : public FLimNativeDataObjectBase
{
    TArray<FLimNativeMsgConvListData>             MsgConvList;                                                  // 0x0008(0x0010)
};


// ScriptStruct  LimNative.LimNativeMsgConvListData
// Struct Size::0x0030
struct FLimNativeMsgConvListData : public FLimNativeDataObjectBase
{
    FString                                       ConvID;                                                       // 0x0008(0x0010)
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<FLimNativeMsgListData>                 MsgList;                                                      // 0x0020(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnChatMsgCallBackData
// Struct Size::0x0090
struct FLimNativeOnChatMsgCallBackData : public FLimNativeDataObjectBase
{
    FString                                       MsgId;                                                        // 0x0008(0x0010)
    enum class ELimNativeMsgState                 State;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FLimNativeIMChatMessage                       Msg;                                                          // 0x0020(0x0070)
};


// ScriptStruct  LimNative.LimNativeIMChatMessage
// Struct Size::0x0070
struct FLimNativeIMChatMessage : public FLimNativeDataObjectBase
{
    FLimNativeIMChatMessageInfo                   BaseInfo;                                                     // 0x0008(0x0050)
    char                                          pa_0058[0x0010]                                               // 0x0058(0x0010)
    enum class ELimNativeMsgContentType           MsgType;                                                      // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  LimNative.LimNativeIMChatMessageInfo
// Struct Size::0x0050
struct FLimNativeIMChatMessageInfo : public FLimNativeDataObjectBase
{
    FString                                       ConvID;                                                       // 0x0008(0x0010)
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0018(0x0001)
    enum class ELimNativeMsgContentType           MsgType;                                                      // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    FString                                       Ext;                                                          // 0x0020(0x0010)
    FString                                       Nonce;                                                        // 0x0030(0x0010)
    FString                                       Timestamp;                                                    // 0x0040(0x0010)
};


// ScriptStruct  LimNative.LimNativeMsgListData
// Struct Size::0x00A8
struct FLimNativeMsgListData : public FLimNativeOnChatMsgCallBackData
{
    FString                                       SenderId;                                                     // 0x0090(0x0010)
    bool                                          IsISent;                                                      // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
};


// ScriptStruct  LimNative.LimNativeGetOssTokenCallBack
// Struct Size::0x00D0
struct FLimNativeGetOssTokenCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeGetOssTokenData                     Data;                                                         // 0x0030(0x00A0)
};


// ScriptStruct  LimNative.LimNativeGetOssTokenData
// Struct Size::0x00A0
struct FLimNativeGetOssTokenData : public FLimNativeDataCallBackDataBase
{
    FLimNativeOssTokenData                        Data;                                                         // 0x0028(0x0070)
    int32_t                                       ResultCode;                                                   // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  LimNative.LimNativeOssTokenData
// Struct Size::0x0070
struct FLimNativeOssTokenData : public FLimNativeDataObjectBase
{
    FString                                       AssessKeyID;                                                  // 0x0008(0x0010)
    FString                                       AccessKeySecret;                                              // 0x0018(0x0010)
    int32_t                                       ExpirationUtc;                                                // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       SecurityToken;                                                // 0x0030(0x0010)
    FString                                       Bucket;                                                       // 0x0040(0x0010)
    FString                                       EndPoint;                                                     // 0x0050(0x0010)
    FString                                       FilePath;                                                     // 0x0060(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGetUserCallBack
// Struct Size::0x0168
struct FLimNativeOnGetUserCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeGetUserData                         Data;                                                         // 0x0030(0x0138)
};


// ScriptStruct  LimNative.LimNativeGetUserData
// Struct Size::0x0138
struct FLimNativeGetUserData : public FLimNativeDataCallBackDataBase
{
    FString                                       AvatarFrameUrl;                                               // 0x0028(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0038(0x0010)
    int32_t                                       CreateTime;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FGuild                                        Guild;                                                        // 0x0050(0x0048)
    FKingdom                                      Kingdom;                                                      // 0x0098(0x0048)
    int32_t                                       LastFetchTime;                                                // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    FString                                       NickName;                                                     // 0x00E8(0x0010)
    int32_t                                       ServerTime;                                                   // 0x00F8(0x0004)
    bool                                          IsShowVip;                                                    // 0x00FC(0x0001)
    char                                          pa_00FD[0x0003]                                               // 0x00FD(0x0003)
    TArray<FSubTitleItem>                         SubTitleList;                                                 // 0x0100(0x0010)
    FString                                       Uid;                                                          // 0x0110(0x0010)
    int32_t                                       VipLevel;                                                     // 0x0120(0x0004)
    char                                          pa_0124[0x0004]                                               // 0x0124(0x0004)
    FString                                       GameExtra;                                                    // 0x0128(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGetUsersCallBack
// Struct Size::0x0068
struct FLimNativeOnGetUsersCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeGetUsersData                        Data;                                                         // 0x0030(0x0038)
};


// ScriptStruct  LimNative.LimNativeGetUsersData
// Struct Size::0x0038
struct FLimNativeGetUsersData : public FLimNativeDataCallBackDataBase
{
    TArray<FLimNativeGetUserData>                 DataResultList;                                               // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGetUsersStateCallBack
// Struct Size::0x00A8
struct FLimNativeOnGetUsersStateCallBack : public FLimNativeDataCallBackBase
{
    FUsersPresence                                Data;                                                         // 0x0030(0x0078)
};


// ScriptStruct  LimNative.UsersPresence
// Struct Size::0x0078
struct FUsersPresence : public FLimNativeDataCallBackDataBase
{
    TMap<FString,FPresence>                       Result;                                                       // 0x0028(0x0050)
};


// ScriptStruct  LimNative.LimNativeOnGroupJoinCallBack
// Struct Size::0x0030
struct FLimNativeOnGroupJoinCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnLoginCallBack
// Struct Size::0x0030
struct FLimNativeOnLoginCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnLogoutCallBack
// Struct Size::0x0030
struct FLimNativeOnLogoutCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnMsgLogicReceivedEventCallBack
// Struct Size::0x0038
struct FLimNativeOnMsgLogicReceivedEventCallBack : public FLimNativeDataObjectBase
{
    FLimNativeMsgLogiMsgData                      Data;                                                         // 0x0008(0x0030)
};


// ScriptStruct  LimNative.LimNativeMsgLogiMsgData
// Struct Size::0x0030
struct FLimNativeMsgLogiMsgData : public FLimNativeDataObjectBase
{
    FLimNativeMsgLogiCommonMsgData                Data;                                                         // 0x0008(0x0028)
};


// ScriptStruct  LimNative.LimNativeMsgLogiCommonMsgData
// Struct Size::0x0028
struct FLimNativeMsgLogiCommonMsgData : public FLimNativeDataObjectBase
{
    int32_t                                       Type;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FLimNativeDataBizFullObj                      BizObj;                                                       // 0x0010(0x0018)
};


// ScriptStruct  LimNative.LimNativeDataBizFullObj
// Struct Size::0x0018
struct FLimNativeDataBizFullObj : public FLimNativeDataObjectBase
{
    FString                                       Uid;                                                          // 0x0008(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnMsgReceivedEventCallBack
// Struct Size::0x0040
struct FLimNativeOnMsgReceivedEventCallBack : public FLimNativeDataObjectBase
{
    FLimNativeOnMsgReceivedData                   Data;                                                         // 0x0008(0x0038)
};


// ScriptStruct  LimNative.LimNativeOnMsgReceivedData
// Struct Size::0x0038
struct FLimNativeOnMsgReceivedData : public FLimNativeDataCallBackDataBase
{
    TArray<FLimNativeReceivedMsgData>             MsgDataList;                                                  // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeReceivedMsgData
// Struct Size::0x00C8
struct FLimNativeReceivedMsgData : public FLimNativeDataCallBackDataBase
{
    FString                                       LanguageList;                                                 // 0x0028(0x0010)
    FString                                       SenderId;                                                     // 0x0038(0x0010)
    FString                                       MsgId;                                                        // 0x0048(0x0010)
    FLimNativeIMChatMessage                       Msg;                                                          // 0x0058(0x0070)
};


// ScriptStruct  LimNative.LimNativeOnMsgRevokedEventCallBack
// Struct Size::0x0060
struct FLimNativeOnMsgRevokedEventCallBack : public FLimNativeDataObjectBase
{
    FLimNativeOnMsgRevokedData                    Data;                                                         // 0x0008(0x0058)
};


// ScriptStruct  LimNative.LimNativeOnMsgRevokedData
// Struct Size::0x0058
struct FLimNativeOnMsgRevokedData : public FLimNativeDataCallBackDataBase
{
    FString                                       ConvID;                                                       // 0x0028(0x0010)
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       MessageId;                                                    // 0x0040(0x0010)
    int32_t                                       SenderId;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  LimNative.LimNativeOnGroupQuitCallBack
// Struct Size::0x0050
struct FLimNativeOnGroupQuitCallBack : public FLimNativeDataCallBackBase
{
    FString                                       GameID;                                                       // 0x0030(0x0010)
    FString                                       ChannelId;                                                    // 0x0040(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnGroupMemberRemoveCallBack
// Struct Size::0x0098
struct FLimNativeOnGroupMemberRemoveCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeIMGroup                             Data;                                                         // 0x0030(0x0068)
};


// ScriptStruct  LimNative.LimNativeOnRevokeMsgCallBack
// Struct Size::0x0030
struct FLimNativeOnRevokeMsgCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnSendMsgCallBack
// Struct Size::0x00C0
struct FLimNativeOnSendMsgCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeOnChatMsgCallBackData               Data;                                                         // 0x0030(0x0090)
};


// ScriptStruct  LimNative.LimNativeOnSetConvReadCallBack
// Struct Size::0x0030
struct FLimNativeOnSetConvReadCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeOnGroupAttrSetCallBack
// Struct Size::0x0030
struct FLimNativeOnGroupAttrSetCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeLanguageConfig
// Struct Size::0x0010
struct FLimNativeLanguageConfig : public FLimNativeDataObjectBase
{
    enum class ELimNativeSupportedLanguage        Lang;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  LimNative.LimNativeOnSetMsgStateCallBack
// Struct Size::0x0030
struct FLimNativeOnSetMsgStateCallBack : public FLimNativeDataCallBackBase
{
};


// ScriptStruct  LimNative.LimNativeParkConfig
// Struct Size::0x0058
struct FLimNativeParkConfig : public FLimNativeDataObjectBase
{
    FString                                       App_Id;                                                       // 0x0008(0x0010)
    FString                                       Sdk_Env;                                                      // 0x0018(0x0010)
    FString                                       Sdk_Region;                                                   // 0x0028(0x0010)
    FString                                       Gid;                                                          // 0x0038(0x0010)
    FString                                       SlsSvr;                                                       // 0x0048(0x0010)
};


// ScriptStruct  LimNative.LimNativeReportConfig
// Struct Size::0x00C8
struct FLimNativeReportConfig : public FLimNativeDataObjectBase
{
    FString                                       PackageName;                                                  // 0x0008(0x0010)
    FString                                       Android_Id;                                                   // 0x0018(0x0010)
    FString                                       Goodle_Aid;                                                   // 0x0028(0x0010)
    FString                                       Os_Version;                                                   // 0x0038(0x0010)
    FString                                       Mac;                                                          // 0x0048(0x0010)
    FString                                       Device_Model;                                                 // 0x0058(0x0010)
    FString                                       Open_Id;                                                      // 0x0068(0x0010)
    FString                                       Idfa;                                                         // 0x0078(0x0010)
    FString                                       App_Version;                                                  // 0x0088(0x0010)
    FString                                       Server_Id;                                                    // 0x0098(0x0010)
    FString                                       Device_Id;                                                    // 0x00A8(0x0010)
    FString                                       SlsSvr;                                                       // 0x00B8(0x0010)
};


// ScriptStruct  LimNative.LimNativeResDirConfig
// Struct Size::0x0018
struct FLimNativeResDirConfig : public FLimNativeDataObjectBase
{
    FString                                       ResDir;                                                       // 0x0008(0x0010)
};


// ScriptStruct  LimNative.LimNativeTextTranslateCallBack
// Struct Size::0x0088
struct FLimNativeTextTranslateCallBack : public FLimNativeDataCallBackBase
{
    FLimNativeTextTranslateData                   Data;                                                         // 0x0030(0x0058)
};


// ScriptStruct  LimNative.LimNativeTextTranslateData
// Struct Size::0x0058
struct FLimNativeTextTranslateData : public FLimNativeDataCallBackDataBase
{
    FString                                       TranslatedText;                                               // 0x0028(0x0010)
    FString                                       Translator;                                                   // 0x0038(0x0010)
    FString                                       ExtraInfo;                                                    // 0x0048(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMChatMessageBase
// Struct Size::0x0058
struct FLimNativeIMChatMessageBase : public FLimNativeDataObjectBase
{
    char                                          pa_0008[0x0050]                                               // 0x0008(0x0050)
};


// ScriptStruct  LimNative.LimNativeIMEmotionMessage
// Struct Size::0x00B0
struct FLimNativeIMEmotionMessage : public FLimNativeIMChatMessageBase
{
    FString                                       PackName;                                                     // 0x0058(0x0010)
    enum class ELimNativePackType                 PackType;                                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FString                                       EmotionName;                                                  // 0x0070(0x0010)
    FString                                       EmotionId;                                                    // 0x0080(0x0010)
    FString                                       EmotionUrl;                                                   // 0x0090(0x0010)
    FString                                       Desc;                                                         // 0x00A0(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMImageMessage
// Struct Size::0x00A0
struct FLimNativeIMImageMessage : public FLimNativeIMChatMessageBase
{
    FString                                       UUID;                                                         // 0x0058(0x0010)
    FString                                       Fmt;                                                          // 0x0068(0x0010)
    FString                                       URL;                                                          // 0x0078(0x0010)
    int32_t                                       Width;                                                        // 0x0088(0x0004)
    int32_t                                       Height;                                                       // 0x008C(0x0004)
    FString                                       Size;                                                         // 0x0090(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMShareMessage
// Struct Size::0x00C0
struct FLimNativeIMShareMessage : public FLimNativeIMChatMessageBase
{
    int32_t                                       Type;                                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       Text;                                                         // 0x0060(0x0010)
    FString                                       Title;                                                        // 0x0070(0x0010)
    FString                                       Detail;                                                       // 0x0080(0x0010)
    FString                                       Img;                                                          // 0x0090(0x0010)
    FString                                       URL;                                                          // 0x00A0(0x0010)
    FString                                       Extra;                                                        // 0x00B0(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMTextMessage
// Struct Size::0x0068
struct FLimNativeIMTextMessage : public FLimNativeIMChatMessageBase
{
    FString                                       Text;                                                         // 0x0058(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMTextWithAtMessage
// Struct Size::0x0068
struct FLimNativeIMTextWithAtMessage : public FLimNativeIMChatMessageBase
{
    FString                                       Text;                                                         // 0x0058(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMVoiceMessage
// Struct Size::0x0090
struct FLimNativeIMVoiceMessage : public FLimNativeIMChatMessageBase
{
    FString                                       UUID;                                                         // 0x0058(0x0010)
    FString                                       URL;                                                          // 0x0068(0x0010)
    FString                                       Size;                                                         // 0x0078(0x0010)
    int32_t                                       Duration;                                                     // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  LimNative.LimNativeSetMsgState
// Struct Size::0x0040
struct FLimNativeSetMsgState : public FLimNativeDataObjectBase
{
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       ConvID;                                                       // 0x0010(0x0010)
    enum class ELimNativeMsgContentType           MsgType;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FString                                       MsgId;                                                        // 0x0028(0x0010)
    enum class ELimNativeMsgState                 MsgState;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataFileInfo
// Struct Size::0x0058
struct FChatGMEDataFileInfo : public FChatGMEDataResult
{
    FString                                       FileID;                                                       // 0x0028(0x0010)
    FString                                       FilePath;                                                     // 0x0038(0x0010)
    FString                                       Text;                                                         // 0x0048(0x0010)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataNumberOfAudioStreamsUpdate
// Struct Size::0x0010
struct FChatGMEDataNumberOfAudioStreamsUpdate
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    int32_t                                       AudioStreamsNum;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataNumberOfUserUpdate
// Struct Size::0x0018
struct FChatGMEDataNumberOfUserUpdate
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    int32_t                                       AllUserNum;                                                   // 0x0008(0x0004)
    int32_t                                       AccUserNum;                                                   // 0x000C(0x0004)
    int32_t                                       ProxyUserNum;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataRecordCompleted
// Struct Size::0x0048
struct FChatGMEDataRecordCompleted : public FChatGMEDataResult
{
    FString                                       FilePath;                                                     // 0x0028(0x0010)
    FString                                       Duration;                                                     // 0x0038(0x0010)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataRoomOperator
// Struct Size::0x0050
struct FChatGMEDataRoomOperator : public FChatGMEDataResult
{
    FString                                       SenderId;                                                     // 0x0028(0x0010)
    FString                                       ReceiverId;                                                   // 0x0038(0x0010)
    enum class EChatGMERoomManagementOp           OperateType;                                                  // 0x0048(0x0001)
    bool                                          bOpenCmd;                                                     // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataUserUpdate
// Struct Size::0x0020
struct FChatGMEDataUserUpdate
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EChatGMEEventIDUserUpdate          EventId;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FString>                               UserList;                                                     // 0x0010(0x0010)
};


// ScriptStruct  LimNativeWidget.ChatGMEDataUserVolumes
// Struct Size::0x0058
struct FChatGMEDataUserVolumes
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TMap<FString,float>                           Volumes;                                                      // 0x0008(0x0050)
};


// ScriptStruct  LimNativeWidget.ChatListConvData
// Struct Size::0x0018
struct FChatListConvData
{
    FString                                       ConvID;                                                       // 0x0000(0x0010)
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  LimNativeWidget.ChatListUserData
// Struct Size::0x0050
struct FChatListUserData
{
    FString                                       Uid;                                                          // 0x0000(0x0010)
    FString                                       NickName;                                                     // 0x0010(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0020(0x0010)
    FString                                       AvatarFrameUrl;                                               // 0x0030(0x0010)
    enum class ELimNativeUserSexType              Sex;                                                          // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       VipLevel;                                                     // 0x0044(0x0004)
    bool                                          IsShowVip;                                                    // 0x0048(0x0001)
    enum class ELimNativeFriendStateType          OnlineState;                                                  // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  LimNativeWidget.NewChatListMessageData
// Struct Size::0x0178
struct FNewChatListMessageData
{
    FString                                       SendId;                                                       // 0x0000(0x0010)
    FString                                       MsgId;                                                        // 0x0010(0x0010)
    enum class ELimNativeMsgState                 MsgState;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FString                                       MsgContent;                                                   // 0x0028(0x0010)
    FString                                       UUID;                                                         // 0x0038(0x0010)
    FString                                       URL;                                                          // 0x0048(0x0010)
    FString                                       Size;                                                         // 0x0058(0x0010)
    int32_t                                       Duration;                                                     // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FString                                       Ext;                                                          // 0x0070(0x0010)
    enum class ELimNativeMsgContentType           MsgType;                                                      // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
    FString                                       ConvID;                                                       // 0x0088(0x0010)
    enum class ELimNativeConvType                 ConvType;                                                     // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FString                                       Timestamp;                                                    // 0x00A0(0x0010)
    FLimNativeIMChatMessage                       MsgData;                                                      // 0x00B0(0x0070)
    FLimNativeIMChatMessageBase                   MsgBase;                                                      // 0x0120(0x0058)
};


// ScriptStruct  LimNativeWidget.ChatListMessageData
// Struct Size::0x0098
struct FChatListMessageData
{
    FString                                       SendId;                                                       // 0x0000(0x0010)
    FString                                       MsgId;                                                        // 0x0010(0x0010)
    enum class ELimNativeMsgState                 MsgState;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FLimNativeIMChatMessage                       MsgData;                                                      // 0x0028(0x0070)
};


// ScriptStruct  LLHSDK.LLHSDKLoginUser
// Struct Size::0x0048
struct FLLHSDKLoginUser
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       AppUid;                                                       // 0x0008(0x0010)
    FString                                       AppToken;                                                     // 0x0018(0x0010)
    enum class ELLHSDKLoginType                   LoginType;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FString                                       Name;                                                         // 0x0030(0x0010)
    bool                                          bIsGuest;                                                     // 0x0040(0x0001)
    bool                                          bIsSafe;                                                      // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    int32_t                                       LimitDeviceCount;                                             // 0x0044(0x0004)
};


// ScriptStruct  LLHSDK.LLHSDKLoginUserInfo
// Struct Size::0x0140
struct FLLHSDKLoginUserInfo
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Phone;                                                        // 0x0008(0x0010)
    FString                                       Email;                                                        // 0x0018(0x0010)
    FString                                       UserRegion;                                                   // 0x0028(0x0010)
    FString                                       IP;                                                           // 0x0038(0x0010)
    int32_t                                       RestPoint;                                                    // 0x0048(0x0004)
    bool                                          bDomesticHasBindAnyOne;                                       // 0x004C(0x0001)
    bool                                          bIsNewReg;                                                    // 0x004D(0x0001)
    bool                                          bIsIdentified;                                                // 0x004E(0x0001)
    bool                                          bIsAbusePrevented;                                            // 0x004F(0x0001)
    TSet<enum class ELLHSDKLoginType>             BoundLoginTypes;                                              // 0x0050(0x0050)
    TMap<enum class ELLHSDKLoginType,FLLHSDKLoginUserInfoMap>BoundInfoMap;                                      // 0x00A0(0x0050)
    FLLHSDKLoginUserInfoMap                       UserExtra;                                                    // 0x00F0(0x0050)
};


// ScriptStruct  LLHSDK.LLHSDKLoginUserInfoMap
// Struct Size::0x0050
struct FLLHSDKLoginUserInfoMap
{
    TMap<FString,FString>                         Info;                                                         // 0x0000(0x0050)
};


// ScriptStruct  LLHSDK.SDKSocialUserInfo
// Struct Size::0x0038
struct FSDKSocialUserInfo
{
    FString                                       Avatar;                                                       // 0x0000(0x0010)
    FString                                       Name;                                                         // 0x0010(0x0010)
    FString                                       Email;                                                        // 0x0020(0x0010)
    int32_t                                       BindType;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  LLHSDK.LLHSDKGenericSkuItemsDetailList
// Struct Size::0x0010
struct FLLHSDKGenericSkuItemsDetailList
{
    TArray<FLLHSDKGoogleSkuItemDetail>            Items;                                                        // 0x0000(0x0010)
};


// ScriptStruct  LLHSDK.LLHSDKGoogleSkuItemDetail
// Struct Size::0x0070
struct FLLHSDKGoogleSkuItemDetail
{
    enum class ELLHSDKPayGenericSkuItemType       ItemType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       Desc;                                                         // 0x0018(0x0010)
    FString                                       Price;                                                        // 0x0028(0x0010)
    FString                                       Sku;                                                          // 0x0038(0x0010)
    FString                                       Currency;                                                     // 0x0048(0x0010)
    int32_t                                       PriceAmountMicros;                                            // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       SdkConvertSymbol;                                             // 0x0060(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.BlueprintSessionResult
// Struct Size::0x0108
struct FBlueprintSessionResult
{
    char                                          pa_0000[0x0108]                                               // 0x0000(0x0108)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseProductInfo
// Struct Size::0x00A8
struct FInAppPurchaseProductInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0010(0x0010)
    FString                                       DisplayName;                                                  // 0x0020(0x0010)
    FString                                       DisplayDescription;                                           // 0x0030(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0040(0x0010)
    float                                         RawPrice;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0058(0x0010)
    FString                                       CurrencySymbol;                                               // 0x0068(0x0010)
    FString                                       DecimalSeparator;                                             // 0x0078(0x0010)
    FString                                       GroupingSeparator;                                            // 0x0088(0x0010)
    FString                                       ReceiptData;                                                  // 0x0098(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseReceiptInfo2
// Struct Size::0x0030
struct FInAppPurchaseReceiptInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemID;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.OnlineProxyStoreOffer
// Struct Size::0x0110
struct FOnlineProxyStoreOffer
{
    FString                                       OfferId;                                                      // 0x0000(0x0010)
    FText                                         Title;                                                        // 0x0010(0x0018)
    FText                                         Description;                                                  // 0x0028(0x0018)
    FText                                         LongDescription;                                              // 0x0040(0x0018)
    FText                                         RegularPriceText;                                             // 0x0058(0x0018)
    int32_t                                       RegularPrice;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FText                                         PriceText;                                                    // 0x0078(0x0018)
    int32_t                                       NumericPrice;                                                 // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0098(0x0010)
    FDateTime                                     ReleaseDate;                                                  // 0x00A8(0x0008)
    FDateTime                                     ExpirationDate;                                               // 0x00B0(0x0008)
    enum class EOnlineProxyStoreOfferDiscountType DiscountType;                                                 // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00C0(0x0050)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseRestoreInfo
// Struct Size::0x0030
struct FInAppPurchaseRestoreInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       ReceiptData;                                                  // 0x0010(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseRestoreInfo2
// Struct Size::0x0030
struct FInAppPurchaseRestoreInfo2
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemID;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  SlateCore.Geometry
// Struct Size::0x0038
struct FGeometry
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  SlateCore.SlateBrush
// Struct Size::0x00F0
struct FSlateBrush
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    FVector2D                                     ImageSize;                                                    // 0x0010(0x0008)
    bool                                          bLockRatio;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FVector2D                                     LockedSize;                                                   // 0x001C(0x0008)
    bool                                          bUsePixelMargin;                                              // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FMargin                                       Margin;                                                       // 0x0028(0x0010)
    FSlateColor                                   TintColor;                                                    // 0x0038(0x0028)
    FSlateBrushOutlineSettings                    OutlineSettings;                                              // 0x0060(0x0040)
    UObject*                                      ResourceObject;                                               // 0x00A0(0x0008)
    FName                                         ResourceName;                                                 // 0x00A8(0x0008)
    FBox2D                                        UVRegion;                                                     // 0x00B0(0x0014)
    enum class ESlateBrushDrawType                DrawAs;                                                       // 0x00C4(0x0001)
    enum class ESlateBrushTileType                Tiling;                                                       // 0x00C5(0x0001)
    enum class ESlateBrushMirrorType              Mirroring;                                                    // 0x00C6(0x0001)
    enum class ESlateBrushImageType               ImageType;                                                    // 0x00C7(0x0001)
    char                                          pa_00C8[0x0024]                                               // 0x00C8(0x0024)
    char                                          bIsDynamicallyLoaded;                                         // 0x00EC(0x0001)
    char                                          bHasUObject;                                                  // 0x00EC(0x0001)
    char                                          pa_00ED[0x0003]                                               // 0x00ED(0x0003)
};


// ScriptStruct  SlateCore.SlateBrushOutlineSettings
// Struct Size::0x0040
struct FSlateBrushOutlineSettings
{
    FVector4                                      CornerRadii;                                                  // 0x0000(0x0010)
    FSlateColor                                   Color;                                                        // 0x0010(0x0028)
    float                                         Width;                                                        // 0x0038(0x0004)
    enum class ESlateBrushRoundingType            RoundingType;                                                 // 0x003C(0x0001)
    bool                                          bUseBrushTransparency;                                        // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  SlateCore.SlateColor
// Struct Size::0x0028
struct FSlateColor
{
    FLinearColor                                  SpecifiedColor;                                               // 0x0000(0x0010)
    enum class ESlateColorStylingMode             ColorUseRule;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0017]                                               // 0x0011(0x0017)
};


// ScriptStruct  SlateCore.Margin
// Struct Size::0x0010
struct FMargin
{
    float                                         Left;                                                         // 0x0000(0x0004)
    float                                         Top;                                                          // 0x0004(0x0004)
    float                                         Right;                                                        // 0x0008(0x0004)
    float                                         Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  UMG.EventReply
// Struct Size::0x00B8
struct FEventReply
{
    char                                          pa_0000[0x00B8]                                               // 0x0000(0x00B8)
};


// ScriptStruct  SlateCore.InputEvent
// Struct Size::0x0018
struct FInputEvent
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  SlateCore.PointerEvent
// Struct Size::0x0070
struct FPointerEvent : public FInputEvent
{
    char                                          pa_0018[0x0058]                                               // 0x0018(0x0058)
};


// ScriptStruct  UMG.WidgetTransform
// Struct Size::0x001C
struct FWidgetTransform
{
    FVector2D                                     Translation;                                                  // 0x0000(0x0008)
    FVector2D                                     Scale;                                                        // 0x0008(0x0008)
    FVector2D                                     Shear;                                                        // 0x0010(0x0008)
    float                                         Angle;                                                        // 0x0018(0x0004)
};


// ScriptStruct  UMG.PaintContext
// Struct Size::0x0030
struct FPaintContext
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  SlateCore.CharacterEvent
// Struct Size::0x0020
struct FCharacterEvent : public FInputEvent
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.KeyEvent
// Struct Size::0x0038
struct FKeyEvent : public FInputEvent
{
    char                                          pa_0018[0x0020]                                               // 0x0018(0x0020)
};


// ScriptStruct  SlateCore.NavigationEvent
// Struct Size::0x0020
struct FNavigationEvent : public FInputEvent
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.AnalogInputEvent
// Struct Size::0x0040
struct FAnalogInputEvent : public FKeyEvent
{
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  SlateCore.SlateFontInfo
// Struct Size::0x0060
struct FSlateFontInfo
{
    UObject*                                      FontObject;                                                   // 0x0000(0x0008)
    UObject*                                      FontMaterial;                                                 // 0x0008(0x0008)
    FFontOutlineSettings                          OutlineSettings;                                              // 0x0010(0x0028)
    char                                          pa_0038[0x0010]                                               // 0x0038(0x0010)
    FName                                         TypefaceFontName;                                             // 0x0048(0x0008)
    int32_t                                       Size;                                                         // 0x0050(0x0004)
    int32_t                                       LetterSpacing;                                                // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  SlateCore.FontOutlineSettings
// Struct Size::0x0028
struct FFontOutlineSettings
{
    int32_t                                       OutlineSize;                                                  // 0x0000(0x0004)
    int32_t                                       OutlineBlur;                                                  // 0x0004(0x0004)
    bool                                          bSeparateFillAlpha;                                           // 0x0008(0x0001)
    bool                                          bApplyOutlineToDropShadows;                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    UObject*                                      OutlineMaterial;                                              // 0x0010(0x0008)
    FLinearColor                                  OutlineColor;                                                 // 0x0018(0x0010)
};


// ScriptStruct  SlateCore.SlateWidgetStyle
// Struct Size::0x0008
struct FSlateWidgetStyle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.TableRowStyle
// Struct Size::0x0D80
struct FTableRowStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   SelectorFocusedBrush;                                         // 0x0010(0x00F0)
    FSlateBrush                                   ActiveHoveredBrush;                                           // 0x0100(0x00F0)
    FSlateBrush                                   ActiveBrush;                                                  // 0x01F0(0x00F0)
    FSlateBrush                                   InactiveHoveredBrush;                                         // 0x02E0(0x00F0)
    FSlateBrush                                   InactiveBrush;                                                // 0x03D0(0x00F0)
    FSlateBrush                                   EvenRowBackgroundHoveredBrush;                                // 0x04C0(0x00F0)
    FSlateBrush                                   EvenRowBackgroundBrush;                                       // 0x05B0(0x00F0)
    FSlateBrush                                   OddRowBackgroundHoveredBrush;                                 // 0x06A0(0x00F0)
    FSlateBrush                                   OddRowBackgroundBrush;                                        // 0x0790(0x00F0)
    FSlateColor                                   TextColor;                                                    // 0x0880(0x0028)
    FSlateColor                                   SelectedTextColor;                                            // 0x08A8(0x0028)
    FSlateBrush                                   DropIndicator_Above;                                          // 0x08D0(0x00F0)
    FSlateBrush                                   DropIndicator_Onto;                                           // 0x09C0(0x00F0)
    FSlateBrush                                   DropIndicator_Below;                                          // 0x0AB0(0x00F0)
    FSlateBrush                                   ActiveHighlightedBrush;                                       // 0x0BA0(0x00F0)
    FSlateBrush                                   InactiveHighlightedBrush;                                     // 0x0C90(0x00F0)
};


// ScriptStruct  SlateCore.ComboBoxStyle
// Struct Size::0x0680
struct FComboBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FComboButtonStyle                             ComboButtonStyle;                                             // 0x0010(0x0640)
    FSlateSound                                   PressedSlateSound;                                            // 0x0650(0x0018)
    FSlateSound                                   SelectionChangeSlateSound;                                    // 0x0668(0x0018)
};


// ScriptStruct  SlateCore.SlateSound
// Struct Size::0x0018
struct FSlateSound
{
    UObject*                                      ResourceObject;                                               // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  SlateCore.ComboButtonStyle
// Struct Size::0x0640
struct FComboButtonStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  ButtonStyle;                                                  // 0x0010(0x0420)
    FSlateBrush                                   DownArrowImage;                                               // 0x0430(0x00F0)
    FVector2D                                     ShadowOffset;                                                 // 0x0520(0x0008)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0528(0x0010)
    char                                          pa_0538[0x0008]                                               // 0x0538(0x0008)
    FSlateBrush                                   MenuBorderBrush;                                              // 0x0540(0x00F0)
    FMargin                                       MenuBorderPadding;                                            // 0x0630(0x0010)
};


// ScriptStruct  SlateCore.ButtonStyle
// Struct Size::0x0420
struct FButtonStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   Normal;                                                       // 0x0010(0x00F0)
    FSlateBrush                                   Hovered;                                                      // 0x0100(0x00F0)
    FSlateBrush                                   Pressed;                                                      // 0x01F0(0x00F0)
    FSlateBrush                                   Disabled;                                                     // 0x02E0(0x00F0)
    FMargin                                       NormalPadding;                                                // 0x03D0(0x0010)
    FMargin                                       PressedPadding;                                               // 0x03E0(0x0010)
    FSlateSound                                   PressedSlateSound;                                            // 0x03F0(0x0018)
    FSlateSound                                   HoveredSlateSound;                                            // 0x0408(0x0018)
};


// ScriptStruct  UMG.ShapedTextOptions
// Struct Size::0x0003
struct FShapedTextOptions
{
    char                                          bOverride_TextShapingMethod;                                  // 0x0000(0x0001)
    char                                          bOverride_TextFlowDirection;                                  // 0x0000(0x0001)
    enum class ETextShapingMethod                 TextShapingMethod;                                            // 0x0001(0x0001)
    enum class ETextFlowDirection                 TextFlowDirection;                                            // 0x0002(0x0001)
};


// ScriptStruct  Slate.VirtualKeyboardOptions
// Struct Size::0x0001
struct FVirtualKeyboardOptions
{
    bool                                          bEnableAutocorrect;                                           // 0x0000(0x0001)
};


// ScriptStruct  SlateCore.EditableTextStyle
// Struct Size::0x0360
struct FEditableTextStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0060)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0068(0x0028)
    FSlateBrush                                   BackgroundImageSelected;                                      // 0x0090(0x00F0)
    FSlateBrush                                   BackgroundImageComposing;                                     // 0x0180(0x00F0)
    FSlateBrush                                   CaretImage;                                                   // 0x0270(0x00F0)
};


// ScriptStruct  SlateCore.EditableTextBoxStyle
// Struct Size::0x0D60
struct FEditableTextBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundImageNormal;                                        // 0x0010(0x00F0)
    FSlateBrush                                   BackgroundImageHovered;                                       // 0x0100(0x00F0)
    FSlateBrush                                   BackgroundImageFocused;                                       // 0x01F0(0x00F0)
    FSlateBrush                                   BackgroundImageReadOnly;                                      // 0x02E0(0x00F0)
    FMargin                                       Padding;                                                      // 0x03D0(0x0010)
    FSlateFontInfo                                Font;                                                         // 0x03E0(0x0060)
    FSlateColor                                   ForegroundColor;                                              // 0x0440(0x0028)
    FSlateColor                                   BackgroundColor;                                              // 0x0468(0x0028)
    FSlateColor                                   ReadOnlyForegroundColor;                                      // 0x0490(0x0028)
    FMargin                                       HScrollBarPadding;                                            // 0x04B8(0x0010)
    FMargin                                       VScrollBarPadding;                                            // 0x04C8(0x0010)
    char                                          pa_04D8[0x0008]                                               // 0x04D8(0x0008)
    FScrollBarStyle                               ScrollBarStyle;                                               // 0x04E0(0x0880)
};


// ScriptStruct  SlateCore.ScrollBarStyle
// Struct Size::0x0880
struct FScrollBarStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   HorizontalBackgroundImage;                                    // 0x0010(0x00F0)
    FSlateBrush                                   VerticalBackgroundImage;                                      // 0x0100(0x00F0)
    FSlateBrush                                   VerticalTopSlotImage;                                         // 0x01F0(0x00F0)
    FSlateBrush                                   HorizontalTopSlotImage;                                       // 0x02E0(0x00F0)
    FSlateBrush                                   VerticalBottomSlotImage;                                      // 0x03D0(0x00F0)
    FSlateBrush                                   HorizontalBottomSlotImage;                                    // 0x04C0(0x00F0)
    FSlateBrush                                   NormalThumbImage;                                             // 0x05B0(0x00F0)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x06A0(0x00F0)
    FSlateBrush                                   DraggedThumbImage;                                            // 0x0790(0x00F0)
};


// ScriptStruct  Slate.InputChord
// Struct Size::0x0020
struct FInputChord
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    char                                          bShift;                                                       // 0x0018(0x0001)
    char                                          bCtrl;                                                        // 0x0018(0x0001)
    char                                          bAlt;                                                         // 0x0018(0x0001)
    char                                          bCmd;                                                         // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  SlateCore.TextBlockStyle
// Struct Size::0x04A0
struct FTextBlockStyle : public FSlateWidgetStyle
{
    FSlateFontInfo                                Font;                                                         // 0x0008(0x0060)
    FSlateColor                                   ColorAndOpacity;                                              // 0x0068(0x0028)
    FVector2D                                     ShadowOffset;                                                 // 0x0090(0x0008)
    FLinearColor                                  ShadowColorAndOpacity;                                        // 0x0098(0x0010)
    FSlateColor                                   SelectedBackgroundColor;                                      // 0x00A8(0x0028)
    FLinearColor                                  HighlightColor;                                               // 0x00D0(0x0010)
    FSlateBrush                                   HighlightShape;                                               // 0x00E0(0x00F0)
    FSlateBrush                                   StrikeBrush;                                                  // 0x01D0(0x00F0)
    FSlateBrush                                   UnderlineBrush;                                               // 0x02C0(0x00F0)
    FSlateBrush                                   BackgroundBrush;                                              // 0x03B0(0x00F0)
};


// ScriptStruct  SlateCore.SpinBoxStyle
// Struct Size::0x0500
struct FSpinBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundBrush;                                              // 0x0010(0x00F0)
    FSlateBrush                                   HoveredBackgroundBrush;                                       // 0x0100(0x00F0)
    FSlateBrush                                   ActiveFillBrush;                                              // 0x01F0(0x00F0)
    FSlateBrush                                   InactiveFillBrush;                                            // 0x02E0(0x00F0)
    FSlateBrush                                   ArrowsImage;                                                  // 0x03D0(0x00F0)
    FSlateColor                                   ForegroundColor;                                              // 0x04C0(0x0028)
    FMargin                                       TextPadding;                                                  // 0x04E8(0x0010)
    char                                          pa_04F8[0x0008]                                               // 0x04F8(0x0008)
};


// ScriptStruct  Engine.DataTableRowHandle
// Struct Size::0x0010
struct FDataTableRowHandle
{
    UDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         RowName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  CommonUI.CommonNumberFormattingOptions
// Struct Size::0x0014
struct FCommonNumberFormattingOptions
{
    enum class ERoundingMode                      RoundingMode;                                                 // 0x0000(0x0001)
    bool                                          UseGrouping;                                                  // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinimumIntegralDigits;                                        // 0x0004(0x0004)
    int32_t                                       MaximumIntegralDigits;                                        // 0x0008(0x0004)
    int32_t                                       MinimumFractionalDigits;                                      // 0x000C(0x0004)
    int32_t                                       MaximumFractionalDigits;                                      // 0x0010(0x0004)
};


// ScriptStruct  Slate.Anchors
// Struct Size::0x0010
struct FAnchors
{
    FVector2D                                     Minimum;                                                      // 0x0000(0x0008)
    FVector2D                                     Maximum;                                                      // 0x0008(0x0008)
};


// ScriptStruct  SlateCore.FocusEvent
// Struct Size::0x0008
struct FFocusEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.MotionEvent
// Struct Size::0x0048
struct FMotionEvent : public FInputEvent
{
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
};


// ScriptStruct  UMG.AnimationEventBinding
// Struct Size::0x0028
struct FAnimationEventBinding
{
    UWidgetAnimation*                             Animation;                                                    // 0x0000(0x0008)
    FDelegate                                     Delegate;                                                     // 0x0008(0x0010)
    enum class EWidgetAnimationEvent              AnimationEvent;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         UserTag;                                                      // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  UMG.NamedSlotBinding
// Struct Size::0x0010
struct FNamedSlotBinding
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UWidget*                                      Content;                                                      // 0x0008(0x0008)
};


// ScriptStruct  CommonUI.CommonRegisteredTabInfo
// Struct Size::0x0018
struct FCommonRegisteredTabInfo
{
    int32_t                                       TabIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UCommonButtonBase*                            TabButton;                                                    // 0x0008(0x0008)
    UWidget*                                      ContentInstance;                                              // 0x0010(0x0008)
};


// ScriptStruct  EnhancedInput.InputActionValue
// Struct Size::0x0010
struct FInputActionValue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  DownloaderTool.DownloaderProgressInfo
// Struct Size::0x0028
struct FDownloaderProgressInfo
{
    FString                                       NecessaryURL;                                                 // 0x0000(0x0010)
    int32_t                                       BytesSent;                                                    // 0x0010(0x0004)
    int32_t                                       BytesReceived;                                                // 0x0014(0x0004)
    int32_t                                       CacheWritedSize;                                              // 0x0018(0x0004)
    int32_t                                       MixedSize;                                                    // 0x001C(0x0004)
    int32_t                                       TotalDownloadSize;                                            // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  DownloaderTool.DownloaderResponse
// Struct Size::0x0060
struct FDownloaderResponse
{
    bool                                          bWasSuccessful;                                               // 0x0000(0x0001)
    bool                                          bDownloadFromCache;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FString                                       NecessaryURL;                                                 // 0x0008(0x0010)
    FString                                       UsedCDNBaseURL;                                               // 0x0018(0x0010)
    int32_t                                       ErrorCode;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<char>                                  RawData;                                                      // 0x0030(0x0010)
    FString                                       RawFileSavePath;                                              // 0x0040(0x0010)
    int32_t                                       DataLength;                                                   // 0x0050(0x0004)
    int32_t                                       ContentLength;                                                // 0x0054(0x0004)
    int64_t                                       Timestamp;                                                    // 0x0058(0x0008)
};


// ScriptStruct  DownloaderTool.DownloaderFailedInfo
// Struct Size::0x0018
struct FDownloaderFailedInfo
{
    FString                                       NecessaryURL;                                                 // 0x0000(0x0010)
    int32_t                                       ErrorCode;                                                    // 0x0010(0x0004)
    enum class EDTFailedType                      FailedType;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  AkAudio.AKWaapiJsonObject
// Struct Size::0x0010
struct FAKWaapiJsonObject
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWaapiSubscriptionId
// Struct Size::0x0008
struct FAkWaapiSubscriptionId
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MeshWidget.UIMeshTransformInfo
// Struct Size::0x0028
struct FUIMeshTransformInfo
{
    FVector                                       MeshScale;                                                    // 0x0000(0x000C)
    FVector                                       MeshTranslate;                                                // 0x000C(0x000C)
    FVector                                       MeshRotate;                                                   // 0x0018(0x000C)
    bool                                          bDirty;                                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  MeshWidget.MeshVertex
// Struct Size::0x0020
struct FMeshVertex
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FColor                                        Color;                                                        // 0x000C(0x0004)
    FVector2D                                     UV0;                                                          // 0x0010(0x0008)
    FVector2D                                     UV1;                                                          // 0x0018(0x0008)
};


// ScriptStruct  MeshWidget.UIMeshCameraInfo
// Struct Size::0x001C
struct FUIMeshCameraInfo
{
    enum class EUIMeshTransform                   TransformType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         HalfFov;                                                      // 0x0004(0x0004)
    float                                         NearClip;                                                     // 0x0008(0x0004)
    FVector                                       CameraRotate;                                                 // 0x000C(0x000C)
    bool                                          bDirty;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  MeshWidget.UIMeshInstanceData
// Struct Size::0x0020
struct FUIMeshInstanceData
{
    FVector4                                      InstanceData1;                                                // 0x0000(0x0010)
    FVector4                                      InstanceData2;                                                // 0x0010(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PakMountInfo
// Struct Size::0x0018
struct FPakMountInfo
{
    FString                                       Pak;                                                          // 0x0000(0x0010)
    int32_t                                       PakOrder;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AppleImageUtils.AppleImageUtilsImageConversionResult
// Struct Size::0x0020
struct FAppleImageUtilsImageConversionResult
{
    FString                                       Error;                                                        // 0x0000(0x0010)
    TArray<char>                                  ImageData;                                                    // 0x0010(0x0010)
};


// ScriptStruct  LocationServicesBPLibrary.LocationServicesData
// Struct Size::0x0018
struct FLocationServicesData
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    float                                         Longitude;                                                    // 0x0004(0x0004)
    float                                         Latitude;                                                     // 0x0008(0x0004)
    float                                         HorizontalAccuracy;                                           // 0x000C(0x0004)
    float                                         VerticalAccuracy;                                             // 0x0010(0x0004)
    float                                         Altitude;                                                     // 0x0014(0x0004)
};


// ScriptStruct  Solarland.ReplayMonitorConfig
// Struct Size::0x0018
struct FReplayMonitorConfig
{
    float                                         MonitorTimeBeforeKill;                                        // 0x0000(0x0004)
    float                                         MonitorTimeAfterKill;                                         // 0x0004(0x0004)
    FString                                       MonitorReplayUploadURL;                                       // 0x0008(0x0010)
};


// ScriptStruct  Solarland.ScreenshotConfig
// Struct Size::0x0050
struct FScreenshotConfig
{
    bool                                          EnableOnCurrentReportGameCheating;                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MaxCountInRound;                                              // 0x0004(0x0004)
    FString                                       ScreenshotMoment;                                             // 0x0008(0x0010)
    int32_t                                       ScreenshotInterval;                                           // 0x0018(0x0004)
    int32_t                                       ScreenshotWidth;                                              // 0x001C(0x0004)
    int32_t                                       ScreenshotQuality;                                            // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       ImageSaveType;                                                // 0x0028(0x0010)
    FString                                       ScreenshotMode;                                               // 0x0038(0x0010)
    int32_t                                       ImageMaxSize;                                                 // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Solarland.AntiCheatSetting
// Struct Size::0x0040
struct FAntiCheatSetting
{
    int64_t                                       ID;                                                           // 0x0000(0x0008)
    int64_t                                       ValueType;                                                    // 0x0008(0x0008)
    double                                        ValueStart;                                                   // 0x0010(0x0008)
    double                                        ValueEnd;                                                     // 0x0018(0x0008)
    int64_t                                       Tolerance;                                                    // 0x0020(0x0008)
    int64_t                                       ProbeInterval;                                                // 0x0028(0x0008)
    FString                                       VariableName;                                                 // 0x0030(0x0010)
};


// ScriptStruct  Solarland.RegistedActorContainer
// Struct Size::0x0050
struct FRegistedActorContainer
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.RepAttachment
// Struct Size::0x0040
struct FRepAttachment
{
    AActor*                                       AttachParent;                                                 // 0x0000(0x0008)
    FVector_NetQuantize100                        LocationOffset;                                               // 0x0008(0x000C)
    FVector_NetQuantize100                        RelativeScale3D;                                              // 0x0014(0x000C)
    FRotator                                      RotationOffset;                                               // 0x0020(0x000C)
    FName                                         AttachSocket;                                                 // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    USceneComponent*                              AttachComponent;                                              // 0x0038(0x0008)
};


// ScriptStruct  Engine.RepMovement
// Struct Size::0x0034
struct FRepMovement
{
    FVector                                       LinearVelocity;                                               // 0x0000(0x000C)
    FVector                                       AngularVelocity;                                              // 0x000C(0x000C)
    FVector                                       Location;                                                     // 0x0018(0x000C)
    FRotator                                      Rotation;                                                     // 0x0024(0x000C)
    char                                          bSimulatedPhysicSleep;                                        // 0x0030(0x0001)
    char                                          bRepPhysics;                                                  // 0x0030(0x0001)
    enum class EVectorQuantization                LocationQuantizationLevel;                                    // 0x0031(0x0001)
    enum class EVectorQuantization                VelocityQuantizationLevel;                                    // 0x0032(0x0001)
    enum class ERotatorQuantization               RotationQuantizationLevel;                                    // 0x0033(0x0001)
};


// ScriptStruct  Engine.ActorTickFunction
// Struct Size::0x0030
struct FActorTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Solarland.LiveWatchOnlyMsg
// Struct Size::0x0040
struct FLiveWatchOnlyMsg
{
    FString                                       BattleID;                                                     // 0x0000(0x0010)
    FString                                       FromPlayerID;                                                 // 0x0010(0x0010)
    FString                                       ToPlayerID;                                                   // 0x0020(0x0010)
    FString                                       Content;                                                      // 0x0030(0x0010)
};


// ScriptStruct  Solarland.HellStrikeWarningWidgetInfoContainer
// Struct Size::0x0120
struct FHellStrikeWarningWidgetInfoContainer : public FFastArraySerializer
{
    TArray<FHellStrikeWarningWidgetInfo>          HellStrikeWarningWidgetMarkInfos;                             // 0x0108(0x0010)
    TWeakObjectPtr<UWorld>                        OwnerWorld;                                                   // 0x0118(0x0008)
};


// ScriptStruct  Solarland.HellStrikeWarningWidgetInfo
// Struct Size::0x0024
struct FHellStrikeWarningWidgetInfo : public FFastArraySerializerItem
{
    int32_t                                       Guid;                                                         // 0x000C(0x0004)
    float                                         Timestamp;                                                    // 0x0010(0x0004)
    char                                          InstigatorTeamID;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector_NetQuantize                           InstigatorLocation;                                           // 0x0018(0x000C)
};


// ScriptStruct  Solarland.GameStartConditionList
// Struct Size::0x0078
struct FGameStartConditionList
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FGameplayTagContainer                         ServerStartConditionList;                                     // 0x0008(0x0020)
    FGameplayTagContainer                         ClientStartConditionList;                                     // 0x0028(0x0020)
    FGameplayTagContainer                         AdditionalClientStartConditionList;                           // 0x0048(0x0020)
    AGameStateBase*                               Owner;                                                        // 0x0068(0x0008)
    char                                          pa_0070[0x0008]                                               // 0x0070(0x0008)
};


// ScriptStruct  Solarland.PrePooledBundle
// Struct Size::0x0010
struct FPrePooledBundle
{
    FName                                         ClassPath;                                                    // 0x0000(0x0008)
    int32_t                                       Number;                                                       // 0x0008(0x0004)
    bool                                          bNeedOnClient;                                                // 0x000C(0x0001)
    bool                                          bNeedOnServer;                                                // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Solarland.CustomRoomData
// Struct Size::0x00E8
struct FCustomRoomData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int64_t                                       MinPlayerLimit;                                               // 0x0010(0x0008)
    int64_t                                       MaxPlayerLimit;                                               // 0x0018(0x0008)
    FString                                       OwnerID;                                                      // 0x0020(0x0010)
    FString                                       Passwd;                                                       // 0x0030(0x0010)
    int32_t                                       LevelLimit;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    int64_t                                       ShowID;                                                       // 0x0048(0x0008)
    int64_t                                       MaxOBPlayerLimit;                                             // 0x0050(0x0008)
    bool                                          bIsEnabledSwapPos;                                            // 0x0058(0x0001)
    bool                                          bIsEnabledInvite;                                             // 0x0059(0x0001)
    bool                                          bIsEnableTeamJoin;                                            // 0x005A(0x0001)
    enum class ESCRoomType                        RoomType;                                                     // 0x005B(0x0001)
    FTournamentData                               TournamentData;                                               // 0x005C(0x0010)
    int32_t                                       RewardPoolID;                                                 // 0x006C(0x0004)
    int32_t                                       RewardPoolPrizeType;                                          // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FCustomServerData                             CustomServerData;                                             // 0x0078(0x0068)
    int32_t                                       KeepMatchTime;                                                // 0x00E0(0x0004)
    bool                                          bIsFreePoisonCircle;                                          // 0x00E4(0x0001)
    char                                          pa_00E5[0x0003]                                               // 0x00E5(0x0003)
};


// ScriptStruct  Solarland.CustomServerData
// Struct Size::0x0068
struct FCustomServerData
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    int32_t                                       ConfigID;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               WeaponBlacklist;                                              // 0x0018(0x0010)
    TArray<int32_t>                               WeaponTypeBlacklist;                                          // 0x0028(0x0010)
    TArray<int32_t>                               VehicleTypeBlacklist;                                         // 0x0038(0x0010)
    TArray<int32_t>                               VehicleClassBlacklist;                                        // 0x0048(0x0010)
    TArray<FString>                               AdministratorList;                                            // 0x0058(0x0010)
};


// ScriptStruct  Solarland.TournamentData
// Struct Size::0x0010
struct FTournamentData
{
    int32_t                                       StartTime;                                                    // 0x0000(0x0004)
    int32_t                                       DelayTime;                                                    // 0x0004(0x0004)
    int32_t                                       Turn;                                                         // 0x0008(0x0004)
    enum class ESCTournamentType                  TournamentType;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Solarland.KnockoutParams
// Struct Size::0x0028
struct FKnockoutParams
{
    float                                         KnockoutKillPoint;                                            // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 KnockoutRankPoints;                                           // 0x0008(0x0010)
    float                                         KnockoutDamagePoint;                                          // 0x0018(0x0004)
    float                                         KnockoutDamageTakenPoint;                                     // 0x001C(0x0004)
    float                                         ScalarParam;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SCMRankData
// Struct Size::0x0018
struct FSCMRankData
{
    FString                                       HostID;                                                       // 0x0000(0x0010)
    int32_t                                       Rank;                                                         // 0x0010(0x0004)
    float                                         Value;                                                        // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SCMRankInfo
// Struct Size::0x0018
struct FSCMRankInfo
{
    FString                                       RankName;                                                     // 0x0000(0x0010)
    enum class ESCMDataRankType                   RankType;                                                     // 0x0010(0x0001)
    enum class ESCMHostType                       HostType;                                                     // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  Engine.MovementProperties
// Struct Size::0x0001
struct FMovementProperties
{
    char                                          bCanCrouch;                                                   // 0x0000(0x0001)
    char                                          bCanJump;                                                     // 0x0000(0x0001)
    char                                          bCanWalk;                                                     // 0x0000(0x0001)
    char                                          bCanSwim;                                                     // 0x0000(0x0001)
    char                                          bCanFly;                                                      // 0x0000(0x0001)
};


// ScriptStruct  Engine.NavAgentProperties
// Struct Size::0x0030
struct FNavAgentProperties : public FMovementProperties
{
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AgentRadius;                                                  // 0x0004(0x0004)
    float                                         AgentHeight;                                                  // 0x0008(0x0004)
    float                                         AgentStepHeight;                                              // 0x000C(0x0004)
    float                                         NavWalkingSearchHeightScale;                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FSoftClassPath                                PreferredNavData;                                             // 0x0018(0x0018)
};


// ScriptStruct  Engine.FindFloorResult
// Struct Size::0x0094
struct FFindFloorResult
{
    char                                          bBlockingHit;                                                 // 0x0000(0x0001)
    char                                          bWalkableFloor;                                               // 0x0000(0x0001)
    char                                          bLineTrace;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FloorDist;                                                    // 0x0004(0x0004)
    float                                         LineDist;                                                     // 0x0008(0x0004)
    FHitResult                                    HitResult;                                                    // 0x000C(0x0088)
};


// ScriptStruct  Engine.NavAvoidanceMask
// Struct Size::0x0004
struct FNavAvoidanceMask
{
    char                                          bGroup0;                                                      // 0x0000(0x0001)
    char                                          bGroup1;                                                      // 0x0000(0x0001)
    char                                          bGroup2;                                                      // 0x0000(0x0001)
    char                                          bGroup3;                                                      // 0x0000(0x0001)
    char                                          bGroup4;                                                      // 0x0000(0x0001)
    char                                          bGroup5;                                                      // 0x0000(0x0001)
    char                                          bGroup6;                                                      // 0x0000(0x0001)
    char                                          bGroup7;                                                      // 0x0000(0x0001)
    char                                          bGroup8;                                                      // 0x0001(0x0001)
    char                                          bGroup9;                                                      // 0x0001(0x0001)
    char                                          bGroup10;                                                     // 0x0001(0x0001)
    char                                          bGroup11;                                                     // 0x0001(0x0001)
    char                                          bGroup12;                                                     // 0x0001(0x0001)
    char                                          bGroup13;                                                     // 0x0001(0x0001)
    char                                          bGroup14;                                                     // 0x0001(0x0001)
    char                                          bGroup15;                                                     // 0x0001(0x0001)
    char                                          bGroup16;                                                     // 0x0002(0x0001)
    char                                          bGroup17;                                                     // 0x0002(0x0001)
    char                                          bGroup18;                                                     // 0x0002(0x0001)
    char                                          bGroup19;                                                     // 0x0002(0x0001)
    char                                          bGroup20;                                                     // 0x0002(0x0001)
    char                                          bGroup21;                                                     // 0x0002(0x0001)
    char                                          bGroup22;                                                     // 0x0002(0x0001)
    char                                          bGroup23;                                                     // 0x0002(0x0001)
    char                                          bGroup24;                                                     // 0x0003(0x0001)
    char                                          bGroup25;                                                     // 0x0003(0x0001)
    char                                          bGroup26;                                                     // 0x0003(0x0001)
    char                                          bGroup27;                                                     // 0x0003(0x0001)
    char                                          bGroup28;                                                     // 0x0003(0x0001)
    char                                          bGroup29;                                                     // 0x0003(0x0001)
    char                                          bGroup30;                                                     // 0x0003(0x0001)
    char                                          bGroup31;                                                     // 0x0003(0x0001)
};


// ScriptStruct  Engine.RootMotionMovementParams
// Struct Size::0x0040
struct FRootMotionMovementParams
{
    bool                                          bHasRootMotion;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    RootMotionTransform;                                          // 0x0010(0x0030)
};


// ScriptStruct  Engine.RootMotionSourceGroup
// Struct Size::0x0038
struct FRootMotionSourceGroup
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    char                                          bHasAdditiveSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSources;                                          // 0x0028(0x0001)
    char                                          bHasOverrideSourcesWithIgnoreZAccumulate;                     // 0x0028(0x0001)
    char                                          bIsAdditiveVelocityApplied;                                   // 0x0028(0x0001)
    FRootMotionSourceSettings                     LastAccumulatedSettings;                                      // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FVector_NetQuantize10                         LastPreAdditiveVelocity;                                      // 0x002C(0x000C)
};


// ScriptStruct  Engine.RootMotionSourceSettings
// Struct Size::0x0001
struct FRootMotionSourceSettings
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.CharacterMovementComponentPostPhysicsTickFunction
// Struct Size::0x0030
struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Solarland.SolarClientAdjustPositionInfo
// Struct Size::0x0038
struct FSolarClientAdjustPositionInfo
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    UPrimitiveComponent*                          NewBase;                                                      // 0x0020(0x0008)
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
};


// ScriptStruct  Solarland.CustomJumpParams
// Struct Size::0x0188
struct FCustomJumpParams
{
    float                                         JumpHeight;                                                   // 0x0000(0x0004)
    float                                         JumpTime;                                                     // 0x0004(0x0004)
    float                                         JumpDelay;                                                    // 0x0008(0x0004)
    float                                         JumpOnFallingTimeThreshold;                                   // 0x000C(0x0004)
    float                                         JumpOnFallingHeightThreshold;                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FGameplayTagRequirements                      JumpOnFallingTagRequirements;                                 // 0x0018(0x0050)
    bool                                          bEnableLateralSpeedAdjust;                                    // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    FRuntimeFloatCurve                            LateralSpeedAdjustCurve;                                      // 0x0070(0x0088)
    bool                                          bEnableJumpHeightAdjust;                                      // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
    FRuntimeFloatCurve                            JumpHeightAdjustCurve;                                        // 0x0100(0x0088)
};


// ScriptStruct  Engine.RuntimeFloatCurve
// Struct Size::0x0088
struct FRuntimeFloatCurve
{
    FRichCurve                                    EditorCurveData;                                              // 0x0000(0x0080)
    UCurveFloat*                                  ExternalCurve;                                                // 0x0080(0x0008)
};


// ScriptStruct  Engine.IndexedCurve
// Struct Size::0x0068
struct FIndexedCurve
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FKeyHandleMap                                 KeyHandlesToIndices;                                          // 0x0008(0x0060)
};


// ScriptStruct  Engine.KeyHandleMap
// Struct Size::0x0060
struct FKeyHandleMap
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.RealCurve
// Struct Size::0x0070
struct FRealCurve : public FIndexedCurve
{
    float                                         DefaultValue;                                                 // 0x0068(0x0004)
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x006C(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
};


// ScriptStruct  Engine.RichCurve
// Struct Size::0x0080
struct FRichCurve : public FRealCurve
{
    TArray<FRichCurveKey>                         Keys;                                                         // 0x0070(0x0010)
};


// ScriptStruct  Engine.RichCurveKey
// Struct Size::0x001C
struct FRichCurveKey
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0000(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0001(0x0001)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         Time;                                                         // 0x0004(0x0004)
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         ArriveTangent;                                                // 0x000C(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0010(0x0004)
    float                                         LeaveTangent;                                                 // 0x0014(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0018(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayTagRequirements
// Struct Size::0x0050
struct FGameplayTagRequirements
{
    enum class ETagRequirementCheckRule           RequireTagCheckRule;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FGameplayTagContainer                         RequireTags;                                                  // 0x0008(0x0020)
    enum class ETagRequirementCheckRule           IgnoreTagCheckRule;                                           // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FGameplayTagContainer                         IgnoreTags;                                                   // 0x0030(0x0020)
};


// ScriptStruct  Solarland.SolarItemData
// Struct Size::0x00C8
struct FSolarItemData : public FFastArraySerializerItem
{
    int32_t                                       ItemID;                                                       // 0x000C(0x0004)
    int64_t                                       ThisID;                                                       // 0x0010(0x0008)
    FString                                       Name;                                                         // 0x0018(0x0010)
    FString                                       Icon;                                                         // 0x0028(0x0010)
    FString                                       Info;                                                         // 0x0038(0x0010)
    int32_t                                       count;                                                        // 0x0048(0x0004)
    enum class EItemType                          ItemType;                                                     // 0x004C(0x0004)
    int32_t                                       Quality;                                                      // 0x0050(0x0004)
    int32_t                                       MaxPile;                                                      // 0x0054(0x0004)
    bool                                          IfReplace;                                                    // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    FString                                       AbilityBP;                                                    // 0x0060(0x0010)
    FString                                       ItemBP;                                                       // 0x0070(0x0010)
    int32_t                                       DropTime;                                                     // 0x0080(0x0004)
    int32_t                                       UnPickupTime;                                                 // 0x0084(0x0004)
    bool                                          IsRecommend;                                                  // 0x0088(0x0001)
    bool                                          bDirty;                                                       // 0x0089(0x0001)
    bool                                          IsPickupLock;                                                 // 0x008A(0x0001)
    char                                          pa_008B[0x0005]                                               // 0x008B(0x0005)
    int64_t                                       UserId;                                                       // 0x0090(0x0008)
    int32_t                                       Level;                                                        // 0x0098(0x0004)
    int32_t                                       Prize;                                                        // 0x009C(0x0004)
    float                                         CurValue;                                                     // 0x00A0(0x0004)
    bool                                          UseOnPickup;                                                  // 0x00A4(0x0001)
    enum class EItemAppearanceType                AppearanceType;                                               // 0x00A5(0x0001)
    bool                                          bUpdateOverlap;                                               // 0x00A6(0x0001)
    char                                          pa_00A7[0x0001]                                               // 0x00A7(0x0001)
    int32_t                                       SourceType;                                                   // 0x00A8(0x0004)
    bool                                          bShowPickupTips;                                              // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    FString                                       OwnerPlayerID;                                                // 0x00B0(0x0010)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  Solarland.VehicleSpectateInfo
// Struct Size::0x0014
struct FVehicleSpectateInfo
{
    TWeakObjectPtr<ASolarVehiclePawn>             SpectateVehicle;                                              // 0x0000(0x0008)
    TWeakObjectPtr<ASolarVehicleWeapon>           SpectateVehicleWeapon;                                        // 0x0008(0x0008)
    enum class EWeaponScopeType                   VehicleWeaponScopeType;                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Solarland.SpectateConditions
// Struct Size::0x0028
struct FSpectateConditions
{
    bool                                          bCanBeSpectate;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LookAtSelfDeathBoxCountDown;                                  // 0x0004(0x0004)
    float                                         BlockWhenAcedCountDown;                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<enum class EFindSpectateTargetType>    FindSpectateTargetPolicy;                                     // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  Solarland.SpectateReportInfo
// Struct Size::0x0028
struct FSpectateReportInfo
{
    uint32_t                                      RankLevelID;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       TargetUserID;                                                 // 0x0008(0x0010)
    char                                          TargetType;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    uint32_t                                      SpectateElapsedTime;                                          // 0x001C(0x0004)
    char                                          Type;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Solarland.PostProcessEffectInfo
// Struct Size::0x000C
struct FPostProcessEffectInfo
{
    FGameplayTag                                  PostProcessTag;                                               // 0x0000(0x0008)
    int32_t                                       InstigatorEffectLevel;                                        // 0x0008(0x0004)
};


// ScriptStruct  Solarland.BattleUpgradeEffectParamData
// Struct Size::0x0008
struct FBattleUpgradeEffectParamData
{
    enum class ESolarTablesEnum_BattleUpgradeEffectTypeEffectType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ParameterSum;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Solarland.RepCountdownData
// Struct Size::0x002C
struct FRepCountdownData
{
    int32_t                                       RepTimes;                                                     // 0x0000(0x0004)
    int32_t                                       RepTextID;                                                    // 0x0004(0x0004)
    int32_t                                       RepPassiveTextID;                                             // 0x0008(0x0004)
    int32_t                                       RepPassiveCharacterID;                                        // 0x000C(0x0004)
    float                                         RepDuration;                                                  // 0x0010(0x0004)
    float                                         RepRemaining;                                                 // 0x0014(0x0004)
    float                                         RepAmount;                                                    // 0x0018(0x0004)
    float                                         RepStartTime;                                                 // 0x001C(0x0004)
    float                                         RepEndTime;                                                   // 0x0020(0x0004)
    int32_t                                       RepCancel;                                                    // 0x0024(0x0004)
    float                                         RemainingTime;                                                // 0x0028(0x0004)
};


// ScriptStruct  Solarland.CharacterRoleAbilityInfo
// Struct Size::0x0018
struct FCharacterRoleAbilityInfo
{
    bool                                          bHasAbility;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    bool                                          bIsCountingDown;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         StartCDTime;                                                  // 0x0004(0x0004)
    float                                         TotalCDTime;                                                  // 0x0008(0x0004)
    int32_t                                       State;                                                        // 0x000C(0x0004)
    char                                          pa_0010[0x0004]                                               // 0x0010(0x0004)
    bool                                          bOngoing;                                                     // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Solarland.ReplicateMaxPileData
// Struct Size::0x0008
struct FReplicateMaxPileData
{
    int32_t                                       ItemID;                                                       // 0x0000(0x0004)
    int32_t                                       MaxPile;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ReplicateItemData
// Struct Size::0x000C
struct FReplicateItemData
{
    int32_t                                       ItemID;                                                       // 0x0000(0x0004)
    int32_t                                       count;                                                        // 0x0004(0x0004)
    int32_t                                       Slot;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.UniqueNetIdRepl
// Struct Size::0x0028
struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
{
    char                                          pa_0001[0x0017]                                               // 0x0001(0x0017)
    TArray<char>                                  ReplicationBytes;                                             // 0x0018(0x0010)
};


// ScriptStruct  Solarland.BattleCharacterData
// Struct Size::0x0060
struct FBattleCharacterData
{
    int32_t                                       CharacterId;                                                  // 0x0000(0x0004)
    int32_t                                       SkinId;                                                       // 0x0004(0x0004)
    int32_t                                       CharacterLevel;                                               // 0x0008(0x0004)
    int32_t                                       TalentID;                                                     // 0x000C(0x0004)
    int32_t                                       UseTimes;                                                     // 0x0010(0x0004)
    int32_t                                       CardPose;                                                     // 0x0014(0x0004)
    int32_t                                       Cardbackground;                                               // 0x0018(0x0004)
    int32_t                                       CharacterExp;                                                 // 0x001C(0x0004)
    int32_t                                       Title;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    int64_t                                       Expired;                                                      // 0x0028(0x0008)
    int32_t                                       CombatScore;                                                  // 0x0030(0x0004)
    int32_t                                       BagId;                                                        // 0x0034(0x0004)
    int32_t                                       TailFlameId;                                                  // 0x0038(0x0004)
    int32_t                                       CapsuleActorId;                                               // 0x003C(0x0004)
    int32_t                                       DeathBoxId;                                                   // 0x0040(0x0004)
    int32_t                                       CharacterOwnerType;                                           // 0x0044(0x0004)
    TArray<FEquipVoiceData>                       Voice;                                                        // 0x0048(0x0010)
    int32_t                                       KillReport;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.EquipVoiceData
// Struct Size::0x0018
struct FEquipVoiceData
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               Ids;                                                          // 0x0008(0x0010)
};


// ScriptStruct  Solarland.MedalInfo
// Struct Size::0x0010
struct FMedalInfo
{
    int32_t                                       MedalID;                                                      // 0x0000(0x0004)
    int32_t                                       MedalType;                                                    // 0x0004(0x0004)
    int32_t                                       MedalPos;                                                     // 0x0008(0x0004)
    int32_t                                       MedalLv;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ExpRankMedalData
// Struct Size::0x0038
struct FExpRankMedalData
{
    FString                                       Area;                                                         // 0x0000(0x0010)
    FString                                       Country;                                                      // 0x0010(0x0010)
    int32_t                                       Rank;                                                         // 0x0020(0x0004)
    int32_t                                       CharacterId;                                                  // 0x0024(0x0004)
    int32_t                                       CharacterType;                                                // 0x0028(0x0004)
    int32_t                                       RankScore;                                                    // 0x002C(0x0004)
    int32_t                                       RankType;                                                     // 0x0030(0x0004)
    int32_t                                       AutoID;                                                       // 0x0034(0x0004)
};


// ScriptStruct  Solarland.CharacterSkin
// Struct Size::0x0008
struct FCharacterSkin
{
    int32_t                                       SkinId;                                                       // 0x0000(0x0004)
    int32_t                                       SkinOwnerType;                                                // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ShieldInfo
// Struct Size::0x0008
struct FShieldInfo
{
    int32_t                                       ShieldID;                                                     // 0x0000(0x0004)
    float                                         CurValue;                                                     // 0x0004(0x0004)
};


// ScriptStruct  Solarland.WorldMarkData
// Struct Size::0x0078
struct FWorldMarkData : public FFastArraySerializerItem
{
    int32_t                                       WorldMarkGUID;                                                // 0x000C(0x0004)
    FVector_NetQuantize                           WorldPos;                                                     // 0x0010(0x000C)
    char                                          PosInTeam;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FVector2D                                     ScreenCoordinate;                                             // 0x0020(0x0008)
    enum class EWorldMarkType                     Type;                                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       ItemID;                                                       // 0x002C(0x0004)
    int64_t                                       ItemInstanceId;                                               // 0x0030(0x0008)
    int32_t                                       NameLocID;                                                    // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       IconImg;                                                      // 0x0040(0x0010)
    int32_t                                       WeaponLevel;                                                  // 0x0050(0x0004)
    enum class EInteractableType                  InteractableType;                                             // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    int32_t                                       MarkVoiceEventName;                                           // 0x0058(0x0004)
    int32_t                                       OuterBoxThisID;                                               // 0x005C(0x0004)
    float                                         MarkTimeStamp;                                                // 0x0060(0x0004)
    bool                                          bShowOnlyOwner;                                               // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    float                                         LifeTime;                                                     // 0x0068(0x0004)
    float                                         ExtraLiveTime;                                                // 0x006C(0x0004)
    TWeakObjectPtr<AActor>                        AttachedActor;                                                // 0x0070(0x0008)
};


// ScriptStruct  Solarland.SolarBattleWeaponData
// Struct Size::0x0008
struct FSolarBattleWeaponData
{
    int32_t                                       weaponid;                                                     // 0x0000(0x0004)
    int32_t                                       SkinId;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ExposeLocationMap
// Struct Size::0x0058
struct FExposeLocationMap
{
    TMap<ASolarPlayerState*,int32_t>              InnerMap;                                                     // 0x0000(0x0050)
    ASolarPlayerState*                            Owner;                                                        // 0x0050(0x0008)
};


// ScriptStruct  Solarland.SettlementTempData
// Struct Size::0x00E8
struct FSettlementTempData
{
    int32_t                                       TotalAccountExp;                                              // 0x0000(0x0004)
    int32_t                                       AccountLevel;                                                 // 0x0004(0x0004)
    char                                          pa_0008[0x0050]                                               // 0x0008(0x0050)
    int32_t                                       CurCharacterLevel;                                            // 0x0058(0x0004)
    int32_t                                       TotalCharacterExp;                                            // 0x005C(0x0004)
    bool                                          bCharExpFull;                                                 // 0x0060(0x0001)
    bool                                          bHaveRankData;                                                // 0x0061(0x0001)
    char                                          pa_0062[0x0002]                                               // 0x0062(0x0002)
    int32_t                                       RankBeforeScore;                                              // 0x0064(0x0004)
    int32_t                                       RankAfterScore;                                               // 0x0068(0x0004)
    int32_t                                       RankSurviveScore;                                             // 0x006C(0x0004)
    int32_t                                       RankBeforeSurviveScore;                                       // 0x0070(0x0004)
    int32_t                                       RankDefeatScore;                                              // 0x0074(0x0004)
    int32_t                                       RankBeforeDefeatScore;                                        // 0x0078(0x0004)
    float                                         RankDefeatRatio;                                              // 0x007C(0x0004)
    int32_t                                       RankLegend;                                                   // 0x0080(0x0004)
    char                                          RankProtectType;                                              // 0x0084(0x0001)
    bool                                          IsRankFight;                                                  // 0x0085(0x0001)
    char                                          pa_0086[0x0002]                                               // 0x0086(0x0002)
    int32_t                                       WinninScoreID;                                                // 0x0088(0x0004)
    int32_t                                       BattlePassID;                                                 // 0x008C(0x0004)
    int32_t                                       BattlePassAddExp;                                             // 0x0090(0x0004)
    int32_t                                       BattlePassExp;                                                // 0x0094(0x0004)
    TArray<int32_t>                               BattlePassTaskID;                                             // 0x0098(0x0010)
    TArray<int32_t>                               BattlePassTaskWeek;                                           // 0x00A8(0x0010)
    TArray<int32_t>                               BattlePassTaskAdd;                                            // 0x00B8(0x0010)
    TArray<int32_t>                               BattlePassTaskVal;                                            // 0x00C8(0x0010)
    TArray<int64_t>                               BattlePassInstID;                                             // 0x00D8(0x0010)
};


// ScriptStruct  Solarland.KillEnemySnapshot
// Struct Size::0x0018
struct FKillEnemySnapshot
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.KillerInfo
// Struct Size::0x0048
struct FKillerInfo
{
    ASolarPlayerState*                            KillerPlayerState;                                            // 0x0000(0x0008)
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Solarland.EquippedEmotesData
// Struct Size::0x0010
struct FEquippedEmotesData
{
    TArray<int32_t>                               EmoteData;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SettlementCrateReward
// Struct Size::0x0018
struct FSettlementCrateReward
{
    int64_t                                       crateID;                                                      // 0x0000(0x0008)
    TArray<FSettlementReward>                     Items;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SettlementReward
// Struct Size::0x0008
struct FSettlementReward
{
    int32_t                                       ItemID;                                                       // 0x0000(0x0004)
    int32_t                                       Amount;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SettlementParam_ExtraRewardInfo
// Struct Size::0x0040
struct FSettlementParam_ExtraRewardInfo
{
    int32_t                                       TextID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       LocVariable;                                                  // 0x0008(0x0010)
    FString                                       Content;                                                      // 0x0018(0x0010)
    FString                                       ItemList;                                                     // 0x0028(0x0010)
    int32_t                                       Order;                                                        // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.LastBattleInfo
// Struct Size::0x001C
struct FLastBattleInfo
{
    float                                         MvpScore;                                                     // 0x0000(0x0004)
    int32_t                                       KillNum;                                                      // 0x0004(0x0004)
    int32_t                                       HitDown;                                                      // 0x0008(0x0004)
    int32_t                                       AssistNum;                                                    // 0x000C(0x0004)
    int32_t                                       RescueNum;                                                    // 0x0010(0x0004)
    int32_t                                       AliveTime;                                                    // 0x0014(0x0004)
    int32_t                                       CauseDamage;                                                  // 0x0018(0x0004)
};


// ScriptStruct  Engine.RepRootMotionMontage
// Struct Size::0x0098
struct FRepRootMotionMontage
{
    bool                                          bIsActive;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UAnimMontage*                                 AnimMontage;                                                  // 0x0008(0x0008)
    float                                         Position;                                                     // 0x0010(0x0004)
    FVector_NetQuantize100                        Location;                                                     // 0x0014(0x000C)
    FRotator                                      Rotation;                                                     // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0030(0x0008)
    FName                                         MovementBaseBoneName;                                         // 0x0038(0x0008)
    bool                                          bRelativePosition;                                            // 0x0040(0x0001)
    bool                                          bRelativeRotation;                                            // 0x0041(0x0001)
    char                                          pa_0042[0x0006]                                               // 0x0042(0x0006)
    FRootMotionSourceGroup                        AuthoritativeRootMotion;                                      // 0x0048(0x0038)
    FVector_NetQuantize10                         Acceleration;                                                 // 0x0080(0x000C)
    FVector_NetQuantize10                         LinearVelocity;                                               // 0x008C(0x000C)
};


// ScriptStruct  Engine.SimulatedRootMotionReplicatedMove
// Struct Size::0x00A0
struct FSimulatedRootMotionReplicatedMove
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRepRootMotionMontage                         RootMotion;                                                   // 0x0008(0x0098)
};


// ScriptStruct  Engine.BasedMovementInfo
// Struct Size::0x0030
struct FBasedMovementInfo
{
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
    FVector_NetQuantize100                        Location;                                                     // 0x0010(0x000C)
    FRotator                                      Rotation;                                                     // 0x001C(0x000C)
    bool                                          bServerHasBaseComponent;                                      // 0x0028(0x0001)
    bool                                          bRelativeRotation;                                            // 0x0029(0x0001)
    bool                                          bServerHasVelocity;                                           // 0x002A(0x0001)
    char                                          pa_002B[0x0005]                                               // 0x002B(0x0005)
};


// ScriptStruct  Solarland.InWaterActorInfo
// Struct Size::0x0018
struct FInWaterActorInfo
{
    bool                                          bIsInWater;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         WaterLineHeight;                                              // 0x0004(0x0004)
    TWeakObjectPtr<ASolarWaterActorNew>           WaterActor;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<ASolarShallowWaterActor>       ShallowWaterActor;                                            // 0x0010(0x0008)
};


// ScriptStruct  Solarland.SpawnedActorHandle
// Struct Size::0x0004
struct FSpawnedActorHandle
{
    uint32_t                                      Handle;                                                       // 0x0000(0x0004)
};


// ScriptStruct  Engine.DamageEvent
// Struct Size::0x0010
struct FDamageEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UDamageType*                                  DamageTypeClass;                                              // 0x0008(0x0008)
};


// ScriptStruct  Engine.PointDamageEvent
// Struct Size::0x00A8
struct FPointDamageEvent : public FDamageEvent
{
    float                                         Damage;                                                       // 0x0010(0x0004)
    FVector_NetQuantizeNormal                     ShotDirection;                                                // 0x0014(0x000C)
    FHitResult                                    HitInfo;                                                      // 0x0020(0x0088)
};


// ScriptStruct  Solarland.SolarPointDamageEvent
// Struct Size::0x0108
struct FSolarPointDamageEvent : public FPointDamageEvent
{
    bool                                          bBreakShield;                                                 // 0x00A8(0x0001)
    bool                                          bIgnoreShield;                                                // 0x00A9(0x0001)
    char                                          pa_00AA[0x0002]                                               // 0x00AA(0x0002)
    float                                         ActualShieldDamage;                                           // 0x00AC(0x0004)
    bool                                          bBreakArmor;                                                  // 0x00B0(0x0001)
    bool                                          bIgnoreArmor;                                                 // 0x00B1(0x0001)
    char                                          pa_00B2[0x0002]                                               // 0x00B2(0x0002)
    float                                         ActualArmorDamage;                                            // 0x00B4(0x0004)
    bool                                          bPreFakeInvincible;                                           // 0x00B8(0x0001)
    enum class EHealthChangeType                  HealthChangeType;                                             // 0x00B9(0x0001)
    enum class EDamageResultType                  ResultType;                                                   // 0x00BA(0x0001)
    bool                                          bJustForShield;                                               // 0x00BB(0x0001)
    bool                                          bCanDamageTeamate;                                            // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    int32_t                                       UseWeaponID;                                                  // 0x00C0(0x0004)
    enum class ESCMDamageType                     DamageType;                                                   // 0x00C4(0x0001)
    char                                          pa_00C5[0x0003]                                               // 0x00C5(0x0003)
    TWeakObjectPtr<AActor>                        DamageCauser;                                                 // 0x00C8(0x0008)
    char                                          pa_00D0[0x0010]                                               // 0x00D0(0x0010)
    FString                                       HitBoneName;                                                  // 0x00E0(0x0010)
    char                                          bHitVehicleWeakPoint;                                         // 0x00F0(0x0001)
    char                                          bHitHumanoidTargetHead;                                       // 0x00F0(0x0001)
    char                                          pa_00F1[0x0003]                                               // 0x00F1(0x0003)
    float                                         HeadshotDamageFactor;                                         // 0x00F4(0x0004)
    char                                          pa_00F8[0x000D]                                               // 0x00F8(0x000D)
    bool                                          bDecisiveHit;                                                 // 0x0105(0x0001)
    char                                          pa_0106[0x0002]                                               // 0x0106(0x0002)
};


// ScriptStruct  Solarland.ReconnectionParams
// Struct Size::0x0002
struct FReconnectionParams
{
    char                                          bIsCrouched;                                                  // 0x0000(0x0001)
    char                                          HoldingWeaponNeedBolt;                                        // 0x0000(0x0001)
    int8_t                                        HoldingWeaponSlot;                                            // 0x0001(0x0001)
};


// ScriptStruct  Solarland.ScannedInfo_NetQuantize
// Struct Size::0x0020
struct FScannedInfo_NetQuantize
{
    uint32_t                                      UniqueId;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMapMarkBase*                                 TargetMarkClass;                                              // 0x0008(0x0008)
    FVector_NetQuantize                           TargetLocation;                                               // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.RestoreAbilityInfo
// Struct Size::0x0020
struct FRestoreAbilityInfo
{
    FGameplayAbilitySpecHandle                    Handle;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FPredictionKey                                ActivationPredictionKey;                                      // 0x0008(0x0018)
};


// ScriptStruct  Solarland.BackpackStatisticsInfo
// Struct Size::0x001C
struct FBackpackStatisticsInfo
{
    bool                                          IsVertical;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       PlayerStartLocation;                                          // 0x0004(0x000C)
    FVector                                       PlayerEndLocation;                                            // 0x0010(0x000C)
};


// ScriptStruct  Solarland.SoundGroupPlayContext
// Struct Size::0x0010
struct FSoundGroupPlayContext
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    char                                          LabelFlags;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Solarland.HitTraceInfo
// Struct Size::0x0030
struct FHitTraceInfo
{
    TWeakObjectPtr<AActor>                        CausingActor;                                                 // 0x0000(0x0008)
    FVector_NetQuantizeNormal                     TraceDirection;                                               // 0x0008(0x000C)
    FVector                                       DamageCauserLocation;                                         // 0x0014(0x000C)
    float                                         Damage;                                                       // 0x0020(0x0004)
    enum class EWeaponType                        WeaponType;                                                   // 0x0024(0x0001)
    bool                                          bIsVehicleHitTrace;                                           // 0x0025(0x0001)
    bool                                          IsBump;                                                       // 0x0026(0x0001)
    bool                                          IsShieldDamage;                                               // 0x0027(0x0001)
    FName                                         BoneName;                                                     // 0x0028(0x0008)
};


// ScriptStruct  Solarland.HitSoundData
// Struct Size::0x001C
struct FHitSoundData
{
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0000(0x0008)
    enum class EHitSoundSourceType                SourceType;                                                   // 0x0008(0x0001)
    enum class EHitSoundTargetType                TargetType;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    FName                                         SubTableKey;                                                  // 0x000C(0x0008)
    FName                                         SubTableKey2;                                                 // 0x0014(0x0008)
};


// ScriptStruct  Solarland.OrnamentMontageInfo
// Struct Size::0x0018
struct FOrnamentMontageInfo
{
    UAnimMontage*                                 ActiveMontage;                                                // 0x0000(0x0008)
    FGameplayTag                                  OrnamentTag;                                                  // 0x0008(0x0008)
    char                                          bForcePlayBit;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Solarland.ShieldSoundData
// Struct Size::0x0050
struct FShieldSoundData
{
    TMap<enum class EShieldSoundEventType,enum class ECharacterSoundOpt>SoundData;                              // 0x0000(0x0050)
};


// ScriptStruct  Solarland.RespawnFallingBaseParam
// Struct Size::0x0018
struct FRespawnFallingBaseParam
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.SingleCruiseBaseParam
// Struct Size::0x0024
struct FSingleCruiseBaseParam
{
    char                                          pa_0000[0x0024]                                               // 0x0000(0x0024)
};


// ScriptStruct  Solarland.VehicleEjectParams
// Struct Size::0x0010
struct FVehicleEjectParams
{
    float                                         EjectTime;                                                    // 0x0000(0x0004)
    float                                         EjectDistance;                                                // 0x0004(0x0004)
    float                                         EjectBreakableTime;                                           // 0x0008(0x0004)
    float                                         EjectCameraFadeOutTime;                                       // 0x000C(0x0004)
};


// ScriptStruct  Solarland.PickUpParams
// Struct Size::0x0028
struct FPickUpParams
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0004(0x0008)
    bool                                          bAutoPickUp;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int64_t                                       ItemThisID;                                                   // 0x0010(0x0008)
    int32_t                                       TargetIndex;                                                  // 0x0018(0x0004)
    int32_t                                       ItemID;                                                       // 0x001C(0x0004)
    enum class EItemType                          ItemType;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.BattleUpgradeEffectContainer
// Struct Size::0x0120
struct FBattleUpgradeEffectContainer : public FFastArraySerializer
{
    TArray<FBattleUpgradeEffect>                  DataArray;                                                    // 0x0108(0x0010)
    ASolarCharacter*                              Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  Solarland.BattleUpgradeEffect
// Struct Size::0x0028
struct FBattleUpgradeEffect : public FFastArraySerializerItem
{
    int32_t                                       Level;                                                        // 0x000C(0x0004)
    int32_t                                       EffectID;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               EffectCandidate;                                              // 0x0018(0x0010)
};


// ScriptStruct  Solarland.RoleAbilitySpecInfoContainer
// Struct Size::0x0120
struct FRoleAbilitySpecInfoContainer : public FFastArraySerializer
{
    TArray<FRoleAbilitySpecInfo>                  GASpecInfos;                                                  // 0x0108(0x0010)
    AActor*                                       Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  Solarland.RoleAbilitySpecInfo
// Struct Size::0x0030
struct FRoleAbilitySpecInfo : public FFastArraySerializerItem
{
    char                                          AbilityIndex;                                                 // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       BoundPlayerLevel;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FGameplayAbilitySpecHandle>            GASpecHandles;                                                // 0x0018(0x0010)
    char                                          FocusGASpecIndex;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Solarland.BlindMarkEffectInfo
// Struct Size::0x0010
struct FBlindMarkEffectInfo
{
    FActiveGameplayEffectHandle                   ActiveEffectHandle;                                           // 0x0000(0x0008)
    TWeakObjectPtr<ASolarCharacter>               EffectCauser;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Solarland.SkillSpeedChangeCurveContainer
// Struct Size::0x0118
struct FSkillSpeedChangeCurveContainer : public FFastArraySerializer
{
    TArray<FSkillSpeedChangeCurve>                SkillSpeedChangeCurves;                                       // 0x0108(0x0010)
};


// ScriptStruct  Solarland.SkillSpeedChangeCurve
// Struct Size::0x0020
struct FSkillSpeedChangeCurve : public FFastArraySerializerItem
{
    int32_t                                       AbilityID;                                                    // 0x000C(0x0004)
    UCurveFloat*                                  SpeedChangeCurve;                                             // 0x0010(0x0008)
    enum class ESkillSpeedChangeType              SpeedChangeType;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         SpeedChangeCurveTime;                                         // 0x001C(0x0004)
};


// ScriptStruct  Solarland.BoardedVehicleInfo
// Struct Size::0x0010
struct FBoardedVehicleInfo
{
    ASolarVehiclePawn*                            BoardedVehicle;                                               // 0x0000(0x0008)
    int32_t                                       BoardedSeatIndex;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.SingleCruiseParamForReplicated
// Struct Size::0x0028
struct FSingleCruiseParamForReplicated
{
    bool                                          bCanFreeJump;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FlyDuringTime;                                                // 0x0004(0x0004)
    float                                         StartTime;                                                    // 0x0008(0x0004)
    float                                         CanParachuteTime;                                             // 0x000C(0x0004)
    FVector                                       StartLocation;                                                // 0x0010(0x000C)
    FVector                                       EndLocation;                                                  // 0x001C(0x000C)
};


// ScriptStruct  Solarland.CriticalHitInfo
// Struct Size::0x0068
struct FCriticalHitInfo
{
    ASolarPlayerState*                            Instigator;                                                   // 0x0000(0x0008)
    float                                         Damage;                                                       // 0x0008(0x0004)
    float                                         DamageTime;                                                   // 0x000C(0x0004)
    int32_t                                       LastDamageWeaponID;                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0054]                                               // 0x0014(0x0054)
};


// ScriptStruct  Solarland.RadarDataSpecContainer
// Struct Size::0x0120
struct FRadarDataSpecContainer : public FFastArraySerializer
{
    TArray<FRadarDataSpec>                        Radars;                                                       // 0x0108(0x0010)
    USolarRadarComponent*                         Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  Solarland.RadarDataSpec
// Struct Size::0x0018
struct FRadarDataSpec : public FFastArraySerializerItem
{
    FGameplayAbilitySpecHandle                    RadarHandle;                                                  // 0x000C(0x0004)
    APawn*                                        RadarSpawner;                                                 // 0x0010(0x0008)
};


// ScriptStruct  Engine.Timeline
// Struct Size::0x0098
struct FTimeline
{
    enum class ETimelineLengthMode                LengthMode;                                                   // 0x0000(0x0001)
    char                                          bLooping;                                                     // 0x0001(0x0001)
    char                                          bReversePlayback;                                             // 0x0001(0x0001)
    char                                          bPlaying;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Length;                                                       // 0x0004(0x0004)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         Position;                                                     // 0x000C(0x0004)
    TArray<FTimelineEventEntry>                   Events;                                                       // 0x0010(0x0010)
    TArray<FTimelineVectorTrack>                  InterpVectors;                                                // 0x0020(0x0010)
    TArray<FTimelineFloatTrack>                   InterpFloats;                                                 // 0x0030(0x0010)
    TArray<FTimelineLinearColorTrack>             InterpLinearColors;                                           // 0x0040(0x0010)
    FDelegate                                     TimelinePostUpdateFunc;                                       // 0x0050(0x0010)
    FDelegate                                     TimelineFinishedFunc;                                         // 0x0060(0x0010)
    TWeakObjectPtr<UObject>                       PropertySetObject;                                            // 0x0070(0x0008)
    FName                                         DirectionPropertyName;                                        // 0x0078(0x0008)
    char                                          pa_0080[0x0018]                                               // 0x0080(0x0018)
};


// ScriptStruct  Engine.TimelineLinearColorTrack
// Struct Size::0x0040
struct FTimelineLinearColorTrack
{
    UCurveLinearColor*                            LinearColorCurve;                                             // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         LinearColorPropertyName;                                      // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineFloatTrack
// Struct Size::0x0040
struct FTimelineFloatTrack
{
    UCurveFloat*                                  FloatCurve;                                                   // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         FloatPropertyName;                                            // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineVectorTrack
// Struct Size::0x0040
struct FTimelineVectorTrack
{
    UCurveVector*                                 VectorCurve;                                                  // 0x0000(0x0008)
    FDelegate                                     InterpFunc;                                                   // 0x0008(0x0010)
    FName                                         TrackName;                                                    // 0x0018(0x0008)
    FName                                         VectorPropertyName;                                           // 0x0020(0x0008)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
};


// ScriptStruct  Engine.TimelineEventEntry
// Struct Size::0x0014
struct FTimelineEventEntry
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FDelegate                                     EventFunc;                                                    // 0x0004(0x0010)
};


// ScriptStruct  Solarland.DestroyCorpseInfo
// Struct Size::0x0008
struct FDestroyCorpseInfo
{
    bool                                          bDestroyCorpse;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ServerTime;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Solarland.BackpackJetPrepelInfo
// Struct Size::0x000C
struct FBackpackJetPrepelInfo
{
    bool                                          IsPropelling;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       PropellingCounter;                                            // 0x0004(0x0004)
    enum class EFXJetType                         JetType;                                                      // 0x0008(0x0001)
    bool                                          bCheckGround;                                                 // 0x0009(0x0001)
    bool                                          bMuteSound;                                                   // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
};


// ScriptStruct  Solarland.WeaponIgnoreScopeLists
// Struct Size::0x0020
struct FWeaponIgnoreScopeLists
{
    TArray<enum class EWeaponPartType>            Weapon1IgnoreList;                                            // 0x0000(0x0010)
    TArray<enum class EWeaponPartType>            Weapon2IgnoreList;                                            // 0x0010(0x0010)
};


// ScriptStruct  Solarland.CharacterTagListenerForOrnamentComp
// Struct Size::0x0058
struct FCharacterTagListenerForOrnamentComp
{
    TSet<FOrnamentCompAndVisibilityConfigPair>    OrnamentCompPairs;                                            // 0x0000(0x0050)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Solarland.OrnamentCompAndVisibilityConfigPair
// Struct Size::0x0010
struct FOrnamentCompAndVisibilityConfigPair
{
    TWeakObjectPtr<USceneComponent>               OrnamentComp;                                                 // 0x0000(0x0008)
    UOrnamentComponentVisibilityConfig*           VisibilityConfig;                                             // 0x0008(0x0008)
};


// ScriptStruct  Solarland.SafeAreaMapInfo
// Struct Size::0x0038
struct FSafeAreaMapInfo
{
    FVector                                       CurrentLocation;                                              // 0x0000(0x000C)
    float                                         CurrentRadius;                                                // 0x000C(0x0004)
    FVector                                       NextLocation;                                                 // 0x0010(0x000C)
    float                                         NextRadius;                                                   // 0x001C(0x0004)
    float                                         BeginShrinkTime;                                              // 0x0020(0x0004)
    float                                         TargetShrinkTime;                                             // 0x0024(0x0004)
    float                                         CurrentConfigRadius;                                          // 0x0028(0x0004)
    FVector                                       CurrentAreaBeginLocation;                                     // 0x002C(0x000C)
};


// ScriptStruct  Solarland.MiniMapAirlineData
// Struct Size::0x0030
struct FMiniMapAirlineData
{
    enum class EMapAirlineType                    AirlineType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     StartPoint;                                                   // 0x0004(0x0008)
    FVector2D                                     EndPoint;                                                     // 0x000C(0x0008)
    FVector2D                                     RealStartPoint;                                               // 0x0014(0x0008)
    FVector2D                                     RealEndPoint;                                                 // 0x001C(0x0008)
    FVector2D                                     AirlineDir;                                                   // 0x0024(0x0008)
    float                                         AirlineLength;                                                // 0x002C(0x0004)
};


// ScriptStruct  Solarland.BattlePromptData
// Struct Size::0x0018
struct FBattlePromptData
{
    char                                          MaxLength;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FBattlePromptElem>                     BattlePromptElemArr;                                          // 0x0008(0x0010)
};


// ScriptStruct  Solarland.BattlePromptElem
// Struct Size::0x0038
struct FBattlePromptElem
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  Solarland.VehicleData
// Struct Size::0x0010
struct FVehicleData
{
    float                                         Speed1;                                                       // 0x0000(0x0004)
    float                                         Fov1;                                                         // 0x0004(0x0004)
    float                                         Speed2;                                                       // 0x0008(0x0004)
    float                                         Fov2;                                                         // 0x000C(0x0004)
};


// ScriptStruct  Solarland.MapData
// Struct Size::0x003C
struct FMapData
{
    FVector2D                                     MapTopLeftCoord;                                              // 0x0000(0x0008)
    FVector2D                                     MapRightBottomCoord;                                          // 0x0008(0x0008)
    FVector2D                                     MapImageSize;                                                 // 0x0010(0x0008)
    int32_t                                       MapImage;                                                     // 0x0018(0x0004)
    float                                         AirlineZ;                                                     // 0x001C(0x0004)
    float                                         HorizonLineZ;                                                 // 0x0020(0x0004)
    float                                         TopZ;                                                         // 0x0024(0x0004)
    float                                         BottomZ;                                                      // 0x0028(0x0004)
    float                                         AverageZ;                                                     // 0x002C(0x0004)
    float                                         InitFogZ;                                                     // 0x0030(0x0004)
    float                                         TargetFogZ;                                                   // 0x0034(0x0004)
    float                                         MapFOV;                                                       // 0x0038(0x0004)
};


// ScriptStruct  Solarland.CustomParamConfig
// Struct Size::0x0020
struct FCustomParamConfig
{
    int32_t                                       DisplayName;                                                  // 0x0000(0x0004)
    int32_t                                       Desc;                                                         // 0x0004(0x0004)
    enum class ECustomParamType                   ParamType;                                                    // 0x0008(0x0001)
    enum class ECustomParamValueType              ValueType;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    int32_t                                       DefaultIndex;                                                 // 0x000C(0x0004)
    TArray<float>                                 ValueRange;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Solarland.UserSetting
// Struct Size::0x0020
struct FUserSetting
{
    int32_t                                       Name;                                                         // 0x0000(0x0004)
    int32_t                                       Category;                                                     // 0x0004(0x0004)
    enum class ECustomParamType                   ParamType;                                                    // 0x0008(0x0001)
    enum class ECustomParamValueType              ValueType;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    int32_t                                       Index;                                                        // 0x000C(0x0004)
    TArray<float>                                 ValueRange;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Solarland.CategoryConfig
// Struct Size::0x0040
struct FCategoryConfig
{
    int32_t                                       Category;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FCustomParamConfig>                    Configs;                                                      // 0x0008(0x0010)
    TSoftClassPtr<UObject>                        StyleClass;                                                   // 0x0018(0x0028)
};


// ScriptStruct  Solarland.ResurrectInfo
// Struct Size::0x0005
struct FResurrectInfo
{
    bool                                          bClearWeapons;                                                // 0x0000(0x0001)
    bool                                          bClearAllItems;                                               // 0x0001(0x0001)
    bool                                          bEmptyEnergy;                                                 // 0x0002(0x0001)
    bool                                          bReChargeJetToFull;                                           // 0x0003(0x0001)
    enum class EPlayerResurrectType               ResurrectMethod;                                              // 0x0004(0x0001)
};


// ScriptStruct  Engine.ForceFeedbackParameters
// Struct Size::0x0010
struct FForceFeedbackParameters
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    bool                                          bLooping;                                                     // 0x0008(0x0001)
    bool                                          bIgnoreTimeDilation;                                          // 0x0009(0x0001)
    bool                                          bPlayWhilePaused;                                             // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    float                                         Intensity;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Engine.ViewTargetTransitionParams
// Struct Size::0x0018
struct FViewTargetTransitionParams
{
    float                                         BlendTime;                                                    // 0x0000(0x0004)
    enum class EViewTargetBlendFunction           BlendFunction;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         BlendExp;                                                     // 0x0008(0x0004)
    char                                          bLockOutgoing;                                                // 0x000C(0x0001)
    char                                          bWaitScoutViewBeforeAssign;                                   // 0x000C(0x0001)
    char                                          pa_000D[0x000B]                                               // 0x000D(0x000B)
};


// ScriptStruct  Engine.UpdateLevelStreamingLevelStatus
// Struct Size::0x0010
struct FUpdateLevelStreamingLevelStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    int32_t                                       LODIndex;                                                     // 0x0008(0x0004)
    char                                          bNewShouldBeLoaded;                                           // 0x000C(0x0001)
    char                                          bNewShouldBeVisible;                                          // 0x000C(0x0001)
    char                                          bNewShouldBlockOnLoad;                                        // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.UpdateLevelVisibilityLevelInfo
// Struct Size::0x0014
struct FUpdateLevelVisibilityLevelInfo
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    FName                                         Filename;                                                     // 0x0008(0x0008)
    char                                          bIsVisible;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.ActiveForceFeedbackEffect
// Struct Size::0x0020
struct FActiveForceFeedbackEffect
{
    UForceFeedbackEffect*                         ForceFeedbackEffect;                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  Solarland.SolarInputModeDataBase
// Struct Size::0x0010
struct FSolarInputModeDataBase
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.FixedAntiCheatData
// Struct Size::0x001C
struct FFixedAntiCheatData
{
    int32_t                                       FOV;                                                          // 0x0000(0x0004)
    enum class EAspectRatioAxisConstraint         AxisConstraint;                                               // 0x0004(0x0001)
    bool                                          bAssistAim;                                                   // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FVector                                       HeadBoneScale;                                                // 0x0008(0x000C)
    bool                                          CurrWeaponRecoil;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         LatestTimeDiscrepancyError;                                   // 0x0018(0x0004)
};


// ScriptStruct  Solarland.ReplayActivityHeatFragment
// Struct Size::0x0060
struct FReplayActivityHeatFragment
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    int32_t                                       FragmentId;                                                   // 0x0004(0x0004)
    enum class EPlayerActivityHeatType            ActivityHeatType;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         TotalScore;                                                   // 0x000C(0x0004)
    float                                         BeginTime;                                                    // 0x0010(0x0004)
    float                                         EndTime;                                                      // 0x0014(0x0004)
    TArray<FReplayActivityKillDetail>             ActivityKillDetails;                                          // 0x0018(0x0010)
    int32_t                                       KillNum;                                                      // 0x0028(0x0004)
    float                                         ActivityHotTime;                                              // 0x002C(0x0004)
    char                                          pa_0030[0x0030]                                               // 0x0030(0x0030)
};


// ScriptStruct  Solarland.ReplayActivityKillDetail
// Struct Size::0x0038
struct FReplayActivityKillDetail
{
    float                                         KillTime;                                                     // 0x0000(0x0004)
    enum class EReplayActivityHeatKillUseType     KillUseType;                                                  // 0x0004(0x0001)
    enum class ESCMDamageType                     DamageType;                                                   // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    int32_t                                       KillToolID;                                                   // 0x0008(0x0004)
    int32_t                                       KillToolExtraID;                                              // 0x000C(0x0004)
    FString                                       KillerSolarPlayerID;                                          // 0x0010(0x0010)
    FString                                       VictimSolarPlayerID;                                          // 0x0020(0x0010)
    int32_t                                       HighlightEffectGroupID;                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarDamageText
// Struct Size::0x0028
struct FSolarDamageText
{
    bool                                          bHitHead;                                                     // 0x0000(0x0001)
    bool                                          bHitShield;                                                   // 0x0001(0x0001)
    bool                                          bBrokenShield;                                                // 0x0002(0x0001)
    bool                                          bDecisiveHit;                                                 // 0x0003(0x0001)
    int32_t                                       Damage;                                                       // 0x0004(0x0004)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        Source;                                                       // 0x0010(0x0008)
    FVector                                       HitLocation;                                                  // 0x0018(0x000C)
    uint32_t                                      TargetUniqueID;                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.ScreenshotSetting
// Struct Size::0x0040
struct FScreenshotSetting
{
    bool                                          EnableOnCurrentReportGameCheating;                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MaxCountInRound;                                              // 0x0004(0x0004)
    TArray<bool>                                  ScreenshotMoment;                                             // 0x0008(0x0010)
    int32_t                                       ScreenshotInterval;                                           // 0x0018(0x0004)
    int32_t                                       ScreenshotWidth;                                              // 0x001C(0x0004)
    int32_t                                       ScreenshotQuality;                                            // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       ImageSaveType;                                                // 0x0028(0x0010)
    enum class EShotModeFlag                      ScreenshotMode;                                               // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       ImageMaxSize;                                                 // 0x003C(0x0004)
};


// ScriptStruct  Solarland.GlobaGameResultInfoWrapper
// Struct Size::0x0018
struct FGlobaGameResultInfoWrapper
{
    TArray<char>                                  GlobaGameResultInfoBitData;                                   // 0x0000(0x0010)
    UGlobalGameResultInfo*                        GameResult;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Solarland.PlayerGameResultBitWrapper
// Struct Size::0x0018
struct FPlayerGameResultBitWrapper
{
    TArray<char>                                  PlayerGameResultBitData;                                      // 0x0000(0x0010)
    UPlayerGameResult*                            PlayerGameResult;                                             // 0x0010(0x0008)
};


// ScriptStruct  Solarland.ReplayMonitorInfo
// Struct Size::0x0038
struct FReplayMonitorInfo
{
    FString                                       Token;                                                        // 0x0000(0x0010)
    FString                                       UploadURL;                                                    // 0x0010(0x0010)
    int64_t                                       StartTime;                                                    // 0x0020(0x0008)
    int64_t                                       EndTime;                                                      // 0x0028(0x0008)
    int64_t                                       Timestamp;                                                    // 0x0030(0x0008)
};


// ScriptStruct  Solarland.SoundContextBase
// Struct Size::0x0020
struct FSoundContextBase
{
    TWeakObjectPtr<ASolarCharacter>               SelfCharacter;                                                // 0x0000(0x0008)
    FString                                       SolarPlayerId;                                                // 0x0008(0x0010)
    enum class ESoundCharacterRelationship        Relationship;                                                 // 0x0018(0x0004)
    int32_t                                       PosInTeam;                                                    // 0x001C(0x0004)
};


// ScriptStruct  Solarland.CharacterVoiceContext
// Struct Size::0x0058
struct FCharacterVoiceContext : public FSoundContextBase
{
    int32_t                                       VoiceType;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       EventName;                                                    // 0x0028(0x0010)
    FString                                       EventNameSecond;                                              // 0x0038(0x0010)
    int32_t                                       LocalizationID;                                               // 0x0048(0x0004)
    enum class ESoundSyncType                     SyncType;                                                     // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    float                                         EffectiveRadius;                                              // 0x0050(0x0004)
    bool                                          bValidEvenInSpectating;                                       // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  Solarland.LocTextParam
// Struct Size::0x0018
struct FLocTextParam
{
    FString                                       ParamName;                                                    // 0x0000(0x0010)
    int32_t                                       LocTextID;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SShotImageInfo
// Struct Size::0x0078
struct FSShotImageInfo
{
    FString                                       UserId;                                                       // 0x0000(0x0010)
    FString                                       PlayerId;                                                     // 0x0010(0x0010)
    FString                                       BattleID;                                                     // 0x0020(0x0010)
    int64_t                                       ScreenshotTime;                                               // 0x0030(0x0008)
    int32_t                                       ImageSize;                                                    // 0x0038(0x0004)
    int32_t                                       ImageWidth;                                                   // 0x003C(0x0004)
    int32_t                                       ImageHeight;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       ImageType;                                                    // 0x0048(0x0010)
    FString                                       ImageBuffer;                                                  // 0x0058(0x0010)
    char                                          pa_0068[0x0010]                                               // 0x0068(0x0010)
};


// ScriptStruct  Solarland.AbilityCooldownTimer
// Struct Size::0x000C
struct FAbilityCooldownTimer
{
    FGameplayTag                                  AbilityCooldownTag;                                           // 0x0000(0x0008)
    float                                         AbilityAppliedTime;                                           // 0x0008(0x0004)
};


// ScriptStruct  Solarland.SolarIgnoreCollisionTypeData
// Struct Size::0x0010
struct FSolarIgnoreCollisionTypeData
{
    TArray<AActor*>                               Actors;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Solarland.NoticeData
// Struct Size::0x00E0
struct FNoticeData
{
    int32_t                                       NoticeID;                                                     // 0x0000(0x0004)
    enum class ECustomNoticeType                  NoticeType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         ConfigShowTime;                                               // 0x0008(0x0004)
    float                                         Duration;                                                     // 0x000C(0x0004)
    float                                         ReceiveTime;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       NoticeText;                                                   // 0x0018(0x0010)
    int32_t                                       Priority;                                                     // 0x0028(0x0004)
    bool                                          bConsumeTimeInQueue;                                          // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FString                                       StartVoiceName;                                               // 0x0030(0x0010)
    FString                                       LoopVoiceName;                                                // 0x0040(0x0010)
    FString                                       EndVoiceName;                                                 // 0x0050(0x0010)
    enum class ECustomNoticeColor                 NoticeColor;                                                  // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    FString                                       NoticeClassPath;                                              // 0x0068(0x0010)
    FString                                       NoticeIconPath;                                               // 0x0078(0x0010)
    TWeakObjectPtr<UUINoticeBase>                 NoticeWidget;                                                 // 0x0088(0x0008)
    TMap<FString,FString>                         Param;                                                        // 0x0090(0x0050)
};


// ScriptStruct  Solarland.InteractionTriggerInfo
// Struct Size::0x0038
struct FInteractionTriggerInfo
{
    FGameplayTag                                  GameplayTag;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0030]                                               // 0x0008(0x0030)
};


// ScriptStruct  Solarland.HUDNoticeParams
// Struct Size::0x0050
struct FHUDNoticeParams
{
    TMap<FString,FString>                         Params;                                                       // 0x0000(0x0050)
};


// ScriptStruct  Solarland.CountDownInfo
// Struct Size::0x0050
struct FCountDownInfo
{
    int32_t                                       TextID;                                                       // 0x0000(0x0004)
    float                                         Time;                                                         // 0x0004(0x0004)
    float                                         RemainingTime;                                                // 0x0008(0x0004)
    bool                                          bShowBtn;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       PassiveTextID;                                                // 0x0010(0x0004)
    int32_t                                       EventStartServerTimeStamp;                                    // 0x0014(0x0004)
    FGameplayTag                                  GameplayTag;                                                  // 0x0018(0x0008)
    char                                          pa_0020[0x0028]                                               // 0x0020(0x0028)
    int32_t                                       ContributorCharacterId;                                       // 0x0048(0x0004)
    enum class ECountDownState                    State;                                                        // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  Solarland.ItemCountsList
// Struct Size::0x0050
struct FItemCountsList
{
    TMap<enum class EPickupItemType,int32_t>      Type2IntMap;                                                  // 0x0000(0x0050)
};


// ScriptStruct  Solarland.KillInfo
// Struct Size::0x0098
struct FKillInfo
{
    FString                                       KillerPlayerID;                                               // 0x0000(0x0010)
    int32_t                                       KillerSkinID;                                                 // 0x0010(0x0004)
    int32_t                                       KillerTeamID;                                                 // 0x0014(0x0004)
    FString                                       KillerName;                                                   // 0x0018(0x0010)
    int32_t                                       KillerFlag;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       VictimPlayerID;                                               // 0x0030(0x0010)
    int32_t                                       VictimSkinID;                                                 // 0x0040(0x0004)
    int32_t                                       VictimTeamID;                                                 // 0x0044(0x0004)
    FString                                       VictimName;                                                   // 0x0048(0x0010)
    int32_t                                       VictimFlag;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       KillIcon;                                                     // 0x0060(0x0010)
    FString                                       KillLeaderID;                                                 // 0x0070(0x0010)
    enum class EKillParamsCompressInfo            KillParamsCompressInfo;                                       // 0x0080(0x0002)
    char                                          pa_0082[0x0002]                                               // 0x0082(0x0002)
    int32_t                                       KillNum;                                                      // 0x0084(0x0004)
    int32_t                                       WeaponSkinID;                                                 // 0x0088(0x0004)
    char                                          KillerVipType;                                                // 0x008C(0x0001)
    char                                          VictimVipType;                                                // 0x008D(0x0001)
    enum class ECommonInputType                   KillerInputType;                                              // 0x008E(0x0001)
    enum class ECommonInputType                   VictimInputType;                                              // 0x008F(0x0001)
    bool                                          bDown;                                                        // 0x0090(0x0001)
    bool                                          bAssit;                                                       // 0x0091(0x0001)
    bool                                          bPlayComboKillSoundEffect;                                    // 0x0092(0x0001)
    char                                          pa_0093[0x0001]                                               // 0x0093(0x0001)
    int32_t                                       KillReportID;                                                 // 0x0094(0x0004)
};


// ScriptStruct  Solarland.SCMReplicateHostData
// Struct Size::0x0048
struct FSCMReplicateHostData
{
    enum class ESCMHostType                       HostType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       HostID;                                                       // 0x0008(0x0010)
    TArray<FSCMRepData>                           RepDataArray;                                                 // 0x0018(0x0010)
    TArray<FSCMRepDataArray>                      RepArrDataArray;                                              // 0x0028(0x0010)
    TArray<FSCMRepDataMap>                        RepMapDataArray;                                              // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SCMRepDataMap
// Struct Size::0x0078
struct FSCMRepDataMap
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    enum class ESCMDataType                       Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<enum class ESCMDataChangeType>         ChangeTypeArray;                                              // 0x0018(0x0010)
    TArray<FString>                               KeyArray;                                                     // 0x0028(0x0010)
    TArray<int32_t>                               VInt;                                                         // 0x0038(0x0010)
    TArray<float>                                 VFloat;                                                       // 0x0048(0x0010)
    TArray<FVector_NetQuantize100>                VVector;                                                      // 0x0058(0x0010)
    TArray<FString>                               VString;                                                      // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SCMRepDataArray
// Struct Size::0x0078
struct FSCMRepDataArray
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    enum class ESCMDataType                       Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<enum class ESCMDataChangeType>         ChangeTypeArray;                                              // 0x0018(0x0010)
    TArray<uint32_t>                              ChangeIndexArray;                                             // 0x0028(0x0010)
    TArray<int32_t>                               VInt;                                                         // 0x0038(0x0010)
    TArray<float>                                 VFloat;                                                       // 0x0048(0x0010)
    TArray<FVector_NetQuantize100>                VVector;                                                      // 0x0058(0x0010)
    TArray<FString>                               VString;                                                      // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SCMRepData
// Struct Size::0x0038
struct FSCMRepData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    enum class ESCMDataType                       Type;                                                         // 0x0010(0x0001)
    enum class ESCMDataChangeType                 DataChangeType;                                               // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       VInt;                                                         // 0x0014(0x0004)
    float                                         VFloat;                                                       // 0x0018(0x0004)
    FVector_NetQuantize100                        VVector;                                                      // 0x001C(0x000C)
    FString                                       VString;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Solarland.BattlePassInfo
// Struct Size::0x0028
struct FBattlePassInfo
{
    TArray<FTaskBriefData>                        tasks;                                                        // 0x0000(0x0010)
    int64_t                                       BattlePassID;                                                 // 0x0010(0x0008)
    int64_t                                       currWeek;                                                     // 0x0018(0x0008)
    int64_t                                       maxWeek;                                                      // 0x0020(0x0008)
};


// ScriptStruct  Solarland.TaskBriefData
// Struct Size::0x0040
struct FTaskBriefData
{
    int64_t                                       TaskID;                                                       // 0x0000(0x0008)
    int64_t                                       BaseValue;                                                    // 0x0008(0x0008)
    int64_t                                       CurValue;                                                     // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    int64_t                                       status;                                                       // 0x0020(0x0008)
    enum class ETaskPage                          page;                                                         // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    int64_t                                       week;                                                         // 0x0030(0x0008)
    bool                                          IsMarked;                                                     // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Solarland.TaskUpdateInfo
// Struct Size::0x0050
struct FTaskUpdateInfo
{
    bool                                          delAllTask;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int64_t>                               delIDs;                                                       // 0x0008(0x0010)
    FBattlePassInfo                               Task;                                                         // 0x0018(0x0028)
    FString                                       PlayerId;                                                     // 0x0040(0x0010)
};


// ScriptStruct  Solarland.WeaponPartsData
// Struct Size::0x0014
struct FWeaponPartsData
{
    int32_t                                       ScopeID;                                                      // 0x0000(0x0004)
    int32_t                                       GripID;                                                       // 0x0004(0x0004)
    int32_t                                       GunStockID;                                                   // 0x0008(0x0004)
    int32_t                                       MuzzleID;                                                     // 0x000C(0x0004)
    int32_t                                       ClipID;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Solarland.BasicUserSettings
// Struct Size::0x0028
struct FBasicUserSettings
{
    bool                                          bOpenUniversalMark;                                           // 0x0000(0x0001)
    enum class EBasicSettingBool                  OpenOffScreen;                                                // 0x0001(0x0001)
    bool                                          bOpenQuickChat;                                               // 0x0002(0x0001)
    bool                                          bAutoOverturn;                                                // 0x0003(0x0001)
    bool                                          bPowerAnim;                                                   // 0x0004(0x0001)
    bool                                          bOpenRecruitRecommend;                                        // 0x0005(0x0001)
    enum class ESolarGyroscopeChooseType          curGyroscpeChooseLevel;                                       // 0x0006(0x0001)
    bool                                          bHorizontalGyroscopeInvert;                                   // 0x0007(0x0001)
    bool                                          bVerticalGyroscopeInvert;                                     // 0x0008(0x0001)
    enum class ESolarDamageTextDisplayModeType    CurrentDamageTextDisplayMode;                                 // 0x0009(0x0001)
    enum class ESolarSkillTriggerMode             CurrentSkillTriggerMode;                                      // 0x000A(0x0001)
    enum class EBasicSettingBool                  OpenHighlightMoment;                                          // 0x000B(0x0001)
    enum class EBasicSettingBool                  OpenOutline;                                                  // 0x000C(0x0001)
    enum class EBasicSettingBool                  OpenEnhanceOutline;                                           // 0x000D(0x0001)
    enum class ESolarEnhanceOutlineMode           CurrentEnhanceOutlineMode;                                    // 0x000E(0x0001)
    bool                                          bShowInputKeyTips;                                            // 0x000F(0x0001)
    enum class EShowInputTipsType                 ShowInputTipsType;                                            // 0x0010(0x0001)
    bool                                          bEnableGamepadInput;                                          // 0x0011(0x0001)
    enum class EBasicSettingBool                  OpenScreenDamageEffect;                                       // 0x0012(0x0001)
    bool                                          bOpenMiniMapRotate;                                           // 0x0013(0x0001)
    bool                                          bOpenDirectionBlood3D;                                        // 0x0014(0x0001)
    enum class ESolarVaultSensitivityMode         VaultSensitivityMode;                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    TArray<FVaultUserSettings>                    VaultUserSettingsPresets;                                     // 0x0018(0x0010)
};


// ScriptStruct  Solarland.VaultUserSettings
// Struct Size::0x0010
struct FVaultUserSettings
{
    FFloatValue                                   JoystickForwardRange;                                         // 0x0000(0x0004)
    FFloatValue                                   MaxFacingAngle2D;                                             // 0x0004(0x0004)
    FFloatValue                                   AutoMaxFacingAngle2D;                                         // 0x0008(0x0004)
    FFloatValue                                   WallRunCameraAngleTolerance;                                  // 0x000C(0x0004)
};


// ScriptStruct  Solarland.FloatValue
// Struct Size::0x0004
struct FFloatValue
{
    float                                         Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Solarland.CharacterVoiceUserSettings
// Struct Size::0x0001
struct FCharacterVoiceUserSettings
{
    enum class ESolarSupportLanguages             CurVoiceLanguage;                                             // 0x0000(0x0001)
};


// ScriptStruct  Solarland.ChatOperatorUserSettings
// Struct Size::0x0002
struct FChatOperatorUserSettings
{
    enum class ESolarChatOperatorType             Speaker;                                                      // 0x0000(0x0001)
    enum class ESolarChatOperatorType             Mic;                                                          // 0x0001(0x0001)
};


// ScriptStruct  Solarland.VehicleControlUserSettings
// Struct Size::0x0005
struct FVehicleControlUserSettings
{
    enum class EWheeledVehicleDriveUserType       WheeledVehicleDriveType;                                      // 0x0000(0x0001)
    bool                                          bCanAdjustInAir;                                              // 0x0001(0x0001)
    bool                                          bCanAutoSteering;                                             // 0x0002(0x0001)
    enum class EWheeledVehicleDriveUserType       LastWheeledVehicleDriveType;                                  // 0x0003(0x0001)
    bool                                          bCanVehicleCameraShake;                                       // 0x0004(0x0001)
};


// ScriptStruct  Solarland.LanguageUserSettings
// Struct Size::0x0003
struct FLanguageUserSettings
{
    enum class ESolarSupportLanguages             CurLanguage;                                                  // 0x0000(0x0001)
    enum class ESolarSupportLanguages             CurCharacterVoiceLanguage;                                    // 0x0001(0x0001)
    bool                                          HasLoadedChinese;                                             // 0x0002(0x0001)
};


// ScriptStruct  Solarland.PersonalityUserSettings
// Struct Size::0x00D0
struct FPersonalityUserSettings
{
    TArray<FColorPreset>                          TeammatePerspectiveColors;                                    // 0x0000(0x0010)
    TArray<FParticlePreset>                       BloodMistColors;                                              // 0x0010(0x0010)
    FColorValue                                   TeammatePerspectiveColor;                                     // 0x0020(0x0010)
    TSoftObjectPtr<UParticleSystem>               BloodMistParticle;                                            // 0x0030(0x0028)
    enum class ESolarSoundVisualMode              CurSoundVisualType;                                           // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    FTileSoundVisual                              Tile;                                                         // 0x005C(0x0014)
    FStretchSoundVisual                           Stretch;                                                      // 0x0070(0x0024)
    FAroundSoundVisual                            Around;                                                       // 0x0094(0x0034)
    int32_t                                       TeammateColor;                                                // 0x00C8(0x0004)
    int32_t                                       BloodMistColor;                                               // 0x00CC(0x0004)
};


// ScriptStruct  Solarland.AroundSoundVisual
// Struct Size::0x0034
struct FAroundSoundVisual
{
    int32_t                                       AlphaValue;                                                   // 0x0000(0x0004)
    int32_t                                       MinAlphaValue;                                                // 0x0004(0x0004)
    int32_t                                       MaxAlphaValue;                                                // 0x0008(0x0004)
    int32_t                                       HeightValue;                                                  // 0x000C(0x0004)
    int32_t                                       MinHeightValue;                                               // 0x0010(0x0004)
    int32_t                                       MaxHeightValue;                                               // 0x0014(0x0004)
    int32_t                                       ScaleValue;                                                   // 0x0018(0x0004)
    int32_t                                       MinScaleValue;                                                // 0x001C(0x0004)
    int32_t                                       MaxScaleValue;                                                // 0x0020(0x0004)
    int32_t                                       AlphaStep;                                                    // 0x0024(0x0004)
    int32_t                                       HeightStep;                                                   // 0x0028(0x0004)
    int32_t                                       ScaleStep;                                                    // 0x002C(0x0004)
    bool                                          bAlphaShowPercent;                                            // 0x0030(0x0001)
    bool                                          bHeightShowPercent;                                           // 0x0031(0x0001)
    bool                                          bScaleShowPercent;                                            // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
};


// ScriptStruct  Solarland.StretchSoundVisual
// Struct Size::0x0024
struct FStretchSoundVisual
{
    int32_t                                       AlphaValue;                                                   // 0x0000(0x0004)
    int32_t                                       MinAlphaValue;                                                // 0x0004(0x0004)
    int32_t                                       MaxAlphaValue;                                                // 0x0008(0x0004)
    int32_t                                       AngleValue;                                                   // 0x000C(0x0004)
    int32_t                                       MinAngleValue;                                                // 0x0010(0x0004)
    int32_t                                       MaxAngleValue;                                                // 0x0014(0x0004)
    int32_t                                       AlphaStep;                                                    // 0x0018(0x0004)
    int32_t                                       AngleStep;                                                    // 0x001C(0x0004)
    bool                                          bAlphaShowPercent;                                            // 0x0020(0x0001)
    bool                                          bAngleShowPercent;                                            // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
};


// ScriptStruct  Solarland.TileSoundVisual
// Struct Size::0x0014
struct FTileSoundVisual
{
    int32_t                                       AlphaValue;                                                   // 0x0000(0x0004)
    int32_t                                       MinAlphaValue;                                                // 0x0004(0x0004)
    int32_t                                       MaxAlphaValue;                                                // 0x0008(0x0004)
    int32_t                                       AlphaStep;                                                    // 0x000C(0x0004)
    bool                                          bAlphaShowPercent;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Solarland.ColorValue
// Struct Size::0x0010
struct FColorValue
{
    FLinearColor                                  Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ParticlePreset
// Struct Size::0x0048
struct FParticlePreset
{
    int32_t                                       ColorID;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TSoftObjectPtr<UParticleSystem>               Particle;                                                     // 0x0008(0x0028)
    FColorValue                                   UIColor;                                                      // 0x0030(0x0010)
    int32_t                                       ColorNameLocalText;                                           // 0x0040(0x0004)
    bool                                          bNotShowDomestic;                                             // 0x0044(0x0001)
    bool                                          bDefault;                                                     // 0x0045(0x0001)
    bool                                          bDefaultDomestic;                                             // 0x0046(0x0001)
    char                                          pa_0047[0x0001]                                               // 0x0047(0x0001)
};


// ScriptStruct  Solarland.ColorPreset
// Struct Size::0x002C
struct FColorPreset
{
    int32_t                                       ColorID;                                                      // 0x0000(0x0004)
    FColorValue                                   ModelColor;                                                   // 0x0004(0x0010)
    FColorValue                                   UIColor;                                                      // 0x0014(0x0010)
    int32_t                                       ColorNameLocalText;                                           // 0x0024(0x0004)
    bool                                          bNotShowDomestic;                                             // 0x0028(0x0001)
    bool                                          bDefault;                                                     // 0x0029(0x0001)
    bool                                          bDefaultDomestic;                                             // 0x002A(0x0001)
    char                                          pa_002B[0x0001]                                               // 0x002B(0x0001)
};


// ScriptStruct  Solarland.PickupUserSettings
// Struct Size::0x0018
struct FPickupUserSettings
{
    bool                                          bAutoPickUp;                                                  // 0x0000(0x0001)
    bool                                          bAutoPickupDroppedScope;                                      // 0x0001(0x0001)
    bool                                          bStopAutoPickupWhenClose;                                     // 0x0002(0x0001)
    bool                                          bUseTileView;                                                 // 0x0003(0x0001)
    bool                                          bAutoShowTileView;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TArray<FPickupItemData>                       PickupItemList;                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.PickupItemData
// Struct Size::0x0008
struct FPickupItemData
{
    int32_t                                       ItemID;                                                       // 0x0000(0x0004)
    int32_t                                       ItemNum;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Solarland.RtcChannelUserSettings
// Struct Size::0x0002
struct FRtcChannelUserSettings
{
    enum class ESolarBattleGroundChatOperatorType Speaker;                                                      // 0x0000(0x0001)
    enum class ESolarBattleGroundChatOperatorType Mic;                                                          // 0x0001(0x0001)
};


// ScriptStruct  Solarland.SensitivityUserSettings
// Struct Size::0x0094
struct FSensitivityUserSettings
{
    enum class ESolarTouchAccMode                 Sensitivity_AccMode;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FFloatValue                                   Sensitivity_CurveScale;                                       // 0x0004(0x0004)
    FFloatValue                                   Sensitivity_Free;                                             // 0x0008(0x0004)
    FFloatValue                                   Sensitivity_SecondarySkills;                                  // 0x000C(0x0004)
    FFloatValue                                   Sensitivity_SuperSkills;                                      // 0x0010(0x0004)
    FCameraSensitivityData                        Sensitivity_NoShoot;                                          // 0x0014(0x0020)
    FCameraSensitivityData                        Sensitivity_Shoot;                                            // 0x0034(0x0020)
    FGyroscopeSensitivityData                     GyroscopeData;                                                // 0x0054(0x0020)
    FFloatValue                                   Sensitivity_VehicleDriver;                                    // 0x0074(0x0004)
    FFloatValue                                   Sensitivity_VehicleFire;                                      // 0x0078(0x0004)
    FVehicleCameraSensitivityData                 Sensitivity_Vehicle_NoShoot;                                  // 0x007C(0x000C)
    FVehicleCameraSensitivityData                 Sensitivity_Vehicle_Shoot;                                    // 0x0088(0x000C)
};


// ScriptStruct  Solarland.VehicleCameraSensitivityData
// Struct Size::0x000C
struct FVehicleCameraSensitivityData
{
    FFloatValue                                   Sensitivity_Lens_Two;                                         // 0x0000(0x0004)
    FFloatValue                                   Sensitivity_Lens_Four;                                        // 0x0004(0x0004)
    FFloatValue                                   Sensitivity_Lens_Eight;                                       // 0x0008(0x0004)
};


// ScriptStruct  Solarland.GyroscopeSensitivityData
// Struct Size::0x0020
struct FGyroscopeSensitivityData
{
    FFloatValue                                   GyroscopeSensitivity_Basic;                                   // 0x0000(0x0004)
    FFloatValue                                   GyroscopeSensitivity_Shoulder;                                // 0x0004(0x0004)
    FFloatValue                                   GyroscopeSensitivity_RedPoint;                                // 0x0008(0x0004)
    FFloatValue                                   GyroscopeSensitivity_Lens_Two;                                // 0x000C(0x0004)
    FFloatValue                                   GyroscopeSensitivity_Lens_Three;                              // 0x0010(0x0004)
    FFloatValue                                   GyroscopeSensitivity_Lens_Four;                               // 0x0014(0x0004)
    FFloatValue                                   GyroscopeSensitivity_Lens_Six;                                // 0x0018(0x0004)
    FFloatValue                                   GyroscopeSensitivity_Lens_Eight;                              // 0x001C(0x0004)
};


// ScriptStruct  Solarland.CameraSensitivityData
// Struct Size::0x0020
struct FCameraSensitivityData
{
    FFloatValue                                   Sensitivity_Basic;                                            // 0x0000(0x0004)
    FFloatValue                                   Sensitivity_Shoulder;                                         // 0x0004(0x0004)
    FFloatValue                                   Sensitivity_RedPoint;                                         // 0x0008(0x0004)
    FFloatValue                                   Sensitivity_Lens_Two;                                         // 0x000C(0x0004)
    FFloatValue                                   Sensitivity_Lens_Three;                                       // 0x0010(0x0004)
    FFloatValue                                   Sensitivity_Lens_Four;                                        // 0x0014(0x0004)
    FFloatValue                                   Sensitivity_Lens_Six;                                         // 0x0018(0x0004)
    FFloatValue                                   Sensitivity_Lens_Eight;                                       // 0x001C(0x0004)
};


// ScriptStruct  Solarland.ShakeUserSettings
// Struct Size::0x0001
struct FShakeUserSettings
{
    enum class ESolarShakeMainType                ShakeMainStatus;                                              // 0x0000(0x0001)
};


// ScriptStruct  Solarland.SoundUserSettings
// Struct Size::0x0060
struct FSoundUserSettings
{
    FConditionValue                               Sound_Global;                                                 // 0x0000(0x0008)
    FConditionValue                               Sound_Action;                                                 // 0x0008(0x0008)
    FConditionValue                               Sound_BackGround;                                             // 0x0010(0x0008)
    FConditionValue                               Sound_Character;                                              // 0x0018(0x0008)
    int32_t                                       MicroPhoneVolume;                                             // 0x0020(0x0004)
    int32_t                                       LoudSpeakerVolume;                                            // 0x0024(0x0004)
    enum class ESolarSoundQuality                 Sound_Quality;                                                // 0x0028(0x0001)
    enum class ESolarAudioMode                    AudioMode;                                                    // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       MicLevel;                                                     // 0x002C(0x0004)
    int32_t                                       SpeakerLevel;                                                 // 0x0030(0x0004)
    int32_t                                       ChooseMicIndex;                                               // 0x0034(0x0004)
    int32_t                                       ChooseSpeakerIndex;                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       MicDeviceID;                                                  // 0x0040(0x0010)
    FString                                       SpeakerDeviceID;                                              // 0x0050(0x0010)
};


// ScriptStruct  Solarland.ConditionValue
// Struct Size::0x0008
struct FConditionValue
{
    bool                                          bOpen;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       CurValue;                                                     // 0x0004(0x0004)
};


// ScriptStruct  Solarland.CustomVaultUserSettings
// Struct Size::0x0010
struct FCustomVaultUserSettings
{
    FVaultUserSettings                            CustomVaultUserSetting;                                       // 0x0000(0x0010)
};


// ScriptStruct  Solarland.WeaponUserSettings
// Struct Size::0x0020
struct FWeaponUserSettings
{
    bool                                          bAimAssist_Global;                                            // 0x0000(0x0001)
    bool                                          bAutoFire_Global;                                             // 0x0001(0x0001)
    bool                                          bVehicleWeaponAutoFire_Global;                                // 0x0002(0x0001)
    bool                                          bEnableRecoilRecovery_Global;                                 // 0x0003(0x0001)
    bool                                          bAutoScope_Global;                                            // 0x0004(0x0001)
    bool                                          bAutoScope_All;                                               // 0x0005(0x0001)
    bool                                          bAutoScope_SpecialButtonGlobal;                               // 0x0006(0x0001)
    bool                                          bAutoScopeRifle_Global;                                       // 0x0007(0x0001)
    bool                                          bAutoScopeSubmachinegun_Global;                               // 0x0008(0x0001)
    bool                                          bAutoScopeShotgunSingle_Global;                               // 0x0009(0x0001)
    bool                                          bAutoScopeShotgunAuto_Global;                                 // 0x000A(0x0001)
    bool                                          bAutoScopeSniperSingle_Global;                                // 0x000B(0x0001)
    bool                                          bAutoScopeSniperAuto_Global;                                  // 0x000C(0x0001)
    bool                                          bAutoScopeSpecial_Global;                                     // 0x000D(0x0001)
    bool                                          bSniperSingleShootOnPressed_Global;                           // 0x000E(0x0001)
    bool                                          bShotgunSingleShootOnPressed_Global;                          // 0x000F(0x0001)
    UCurveFloat*                                  HitEffectDistanceToScaleCurve;                                // 0x0010(0x0008)
    enum class ESolarWeaponDoScopeMode            DoScopeMode_Global;                                           // 0x0018(0x0001)
    bool                                          bOpenVehicleWeaponCrosshair;                                  // 0x0019(0x0001)
    bool                                          bVehicleAutoScope;                                            // 0x001A(0x0001)
    bool                                          bVehicleAutoScope_SpecialButton;                              // 0x001B(0x0001)
    bool                                          bCanScopeButtonRotateView;                                    // 0x001C(0x0001)
    bool                                          bShowQuickChangeScopeButton;                                  // 0x001D(0x0001)
    enum class ESolarWeaponBreakReloadMode        BreakReloadMode;                                              // 0x001E(0x0001)
    bool                                          bAutoSwitchWeaponWhileNoAmmo;                                 // 0x001F(0x0001)
};


// ScriptStruct  Solarland.PickupUserSettingsPC
// Struct Size::0x0001
struct FPickupUserSettingsPC
{
    bool                                          bAutoPickUp;                                                  // 0x0000(0x0001)
};


// ScriptStruct  Solarland.GamepadAdvancedSettings
// Struct Size::0x003C
struct FGamepadAdvancedSettings
{
    FRangeData                                    ScalerRange;                                                  // 0x0000(0x0008)
    FRangeData                                    SpeedUpScalerRange;                                           // 0x0008(0x0008)
    FRangeData                                    SpeedUpDelayRange;                                            // 0x0010(0x0008)
    FRangeData                                    SpeedUpStartRange;                                            // 0x0018(0x0008)
    FFloatValue                                   ScalerX;                                                      // 0x0020(0x0004)
    FFloatValue                                   ScalerY;                                                      // 0x0024(0x0004)
    FFloatValue                                   SpeedUpScalerX;                                               // 0x0028(0x0004)
    FFloatValue                                   SpeedUpScalerY;                                               // 0x002C(0x0004)
    FFloatValue                                   SpeedUpDelayTime;                                             // 0x0030(0x0004)
    FFloatValue                                   SpeedUpStartTime;                                             // 0x0034(0x0004)
    bool                                          bEnableAdsSpeedUp;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  Solarland.RangeData
// Struct Size::0x0008
struct FRangeData
{
    float                                         MinValue;                                                     // 0x0000(0x0004)
    float                                         MaxValue;                                                     // 0x0004(0x0004)
};


// ScriptStruct  Solarland.GamepadSettings
// Struct Size::0x00E0
struct FGamepadSettings
{
    TArray<FSolarAimModeWithLocalText>            AimModeMap;                                                   // 0x0000(0x0010)
    TArray<FSolarSprintModeWithLocalText>         SprintModeMap;                                                // 0x0010(0x0010)
    TArray<FFloatWithLocalText>                   ViewSensitivityMap;                                           // 0x0020(0x0010)
    TArray<FObjectWithLocalText>                  ResponseCurveMap;                                             // 0x0030(0x0010)
    TArray<FFloatWithLocalText>                   LeftStickDeadzoneMap;                                         // 0x0040(0x0010)
    TArray<FFloatWithLocalText>                   RightStickDeadzoneMap;                                        // 0x0050(0x0010)
    TArray<FFloatWithLocalText>                   TriggerDeadzoneMap;                                           // 0x0060(0x0010)
    TArray<FFloatWithLocalText>                   VibrationLevelMap;                                            // 0x0070(0x0010)
    FRangeData                                    CursorSpeedRange;                                             // 0x0080(0x0008)
    TArray<FSolarWheelModeTypeWithLocalText>      WheelModeTypeMap;                                             // 0x0088(0x0010)
    int32_t                                       AimModeID;                                                    // 0x0098(0x0004)
    int32_t                                       SprintModeID;                                                 // 0x009C(0x0004)
    FConditionValue                               MainHorizontalSensitivity;                                    // 0x00A0(0x0008)
    FConditionValue                               MainVerticalSensitivity;                                      // 0x00A8(0x0008)
    int32_t                                       RightStickSensitivityID;                                      // 0x00B0(0x0004)
    int32_t                                       RightStickResponseCurveID;                                    // 0x00B4(0x0004)
    bool                                          bInvertedLook;                                                // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       LeftStickDeadzoneID;                                          // 0x00BC(0x0004)
    int32_t                                       RightStickDeadzoneID;                                         // 0x00C0(0x0004)
    int32_t                                       TriggerDeadzoneID;                                            // 0x00C4(0x0004)
    FFloatValue                                   CursorSpeed;                                                  // 0x00C8(0x0004)
    int32_t                                       VibrationLevelID;                                             // 0x00CC(0x0004)
    bool                                          bEnableAimAssist;                                             // 0x00D0(0x0001)
    bool                                          bEnableClassicWheeledVehicleControlMode;                      // 0x00D1(0x0001)
    char                                          pa_00D2[0x0002]                                               // 0x00D2(0x0002)
    int32_t                                       MedicWheelModeID;                                             // 0x00D4(0x0004)
    int32_t                                       EmojiWheelModeID;                                             // 0x00D8(0x0004)
    bool                                          bShowInputKeyTips;                                            // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
};


// ScriptStruct  Solarland.SolarWheelModeTypeWithLocalText
// Struct Size::0x0008
struct FSolarWheelModeTypeWithLocalText
{
    int32_t                                       LocalText;                                                    // 0x0000(0x0004)
    enum class ESolarWheelModeType                WheelPadMode;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.FloatWithLocalText
// Struct Size::0x0008
struct FFloatWithLocalText
{
    int32_t                                       LocalText;                                                    // 0x0000(0x0004)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ObjectWithLocalText
// Struct Size::0x0020
struct FObjectWithLocalText
{
    int32_t                                       LocalText;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSoftObjectPath                               ObjectPath;                                                   // 0x0008(0x0018)
};


// ScriptStruct  Solarland.SolarSprintModeWithLocalText
// Struct Size::0x0008
struct FSolarSprintModeWithLocalText
{
    int32_t                                       LocalText;                                                    // 0x0000(0x0004)
    enum class ESolarSprintModeType               SprintMode;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.SolarAimModeWithLocalText
// Struct Size::0x0008
struct FSolarAimModeWithLocalText
{
    int32_t                                       LocalText;                                                    // 0x0000(0x0004)
    enum class ESolarWeaponDoScopeMode            AimMode;                                                      // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.MouseAndKeyboardSettings
// Struct Size::0x000C
struct FMouseAndKeyboardSettings
{
    FFloatValue                                   MainSensitivity;                                              // 0x0000(0x0004)
    bool                                          bMouseInvert;                                                 // 0x0004(0x0001)
    enum class ESolarWeaponDoScopeMode            AimMode;                                                      // 0x0005(0x0001)
    enum class ESolarSprintModeType               SprintMode;                                                   // 0x0006(0x0001)
    enum class ESolarWheelModeType                MedicWheelMode;                                               // 0x0007(0x0001)
    enum class ESolarWheelModeType                EmojiWheelMode;                                               // 0x0008(0x0001)
    enum class ESolarITemHUDStyle                 CurrentItemHUDStyle;                                          // 0x0009(0x0001)
    bool                                          UseIndependentKeyInExpandedMode;                              // 0x000A(0x0001)
    bool                                          UseIndependentKeyInActionWheelMode;                           // 0x000B(0x0001)
};


// ScriptStruct  GameplayAbilities.AbilityEndedData
// Struct Size::0x0010
struct FAbilityEndedData
{
    UGameplayAbility*                             AbilityThatEnded;                                             // 0x0000(0x0008)
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0008(0x0004)
    bool                                          bReplicateEndAbility;                                         // 0x000C(0x0001)
    bool                                          bWasCancelled;                                                // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Solarland.DownloadFileInfo
// Struct Size::0x0030
struct FDownloadFileInfo
{
    FString                                       URL;                                                          // 0x0000(0x0010)
    FString                                       Filename;                                                     // 0x0010(0x0010)
    FString                                       HashStr;                                                      // 0x0020(0x0010)
};


// ScriptStruct  Solarland.LocalFileInfo
// Struct Size::0x0020
struct FLocalFileInfo
{
    FString                                       Dir;                                                          // 0x0000(0x0010)
    FString                                       Filename;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Solarland.ScreenEffectGroup
// Struct Size::0x0060
struct FScreenEffectGroup
{
    TMap<int32_t,FScreenEffectInstance>           InstantScreenEffects;                                         // 0x0000(0x0050)
    TArray<FScreenEffectInstance>                 DurationScreenEffects;                                        // 0x0050(0x0010)
};


// ScriptStruct  Solarland.ScreenEffectInstance
// Struct Size::0x0098
struct FScreenEffectInstance
{
    char                                          pa_0000[0x0098]                                               // 0x0000(0x0098)
};


// ScriptStruct  Solarland.BuffEffectActorElemPool
// Struct Size::0x0010
struct FBuffEffectActorElemPool
{
    TArray<UBuffEffectActorElem*>                 PoolInstances;                                                // 0x0000(0x0010)
};


// ScriptStruct  Solarland.BuffParticleEffectInstance
// Struct Size::0x0030
struct FBuffParticleEffectInstance
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TArray<UBuffEffectActorElem*>                 AttachElemList;                                               // 0x0020(0x0010)
};


// ScriptStruct  Solarland.BuffParticleEffectGroup
// Struct Size::0x00B0
struct FBuffParticleEffectGroup
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TMap<FName,FBuffEffectActorElemList>          InstantActorListMap;                                          // 0x0008(0x0050)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    TMap<FName,FBuffEffectActorElemList>          DurationActorListMap;                                         // 0x0060(0x0050)
};


// ScriptStruct  Solarland.BuffEffectActorElemList
// Struct Size::0x0010
struct FBuffEffectActorElemList
{
    TArray<UBuffEffectActorElem*>                 ElemList;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Solarland.InputKeyMappingEntry
// Struct Size::0x0040
struct FInputKeyMappingEntry
{
    bool                                          bValid;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       ActionID;                                                     // 0x0008(0x0010)
    FString                                       ActionName;                                                   // 0x0018(0x0010)
    enum class ESolarTablesEnum_InputActionType   ActionType;                                                   // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         Scale;                                                        // 0x002C(0x0004)
    TArray<FInputKeyMappingPair>                  KeyMappingPairList;                                           // 0x0030(0x0010)
};


// ScriptStruct  Solarland.InputKeyMappingPair
// Struct Size::0x0028
struct FInputKeyMappingPair
{
    FString                                       KeyStr1;                                                      // 0x0000(0x0010)
    FString                                       KeyStr2;                                                      // 0x0010(0x0010)
    enum class ESolarTablesEnum_InputTriggerType  TriggerType;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Solarland.InputDeviceProxy
// Struct Size::0x000C
struct FInputDeviceProxy
{
    enum class ECommonInputType                   InputType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         GamepadType;                                                  // 0x0004(0x0008)
};


// ScriptStruct  Solarland.SoundGroupPlayContextByCharacter
// Struct Size::0x0028
struct FSoundGroupPlayContextByCharacter : public FSoundGroupPlayContext
{
    TWeakObjectPtr<ASolarCharacter>               Self;                                                         // 0x0010(0x0008)
    TWeakObjectPtr<ASolarCharacter>               Instigator;                                                   // 0x0018(0x0008)
    TWeakObjectPtr<ASolarCharacter>               LocalCharacter;                                               // 0x0020(0x0008)
};


// ScriptStruct  Solarland.SolarSummonSoundData
// Struct Size::0x0010
struct FSolarSummonSoundData
{
    TArray<FString>                               SoundNames;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarLandscapeListenerConfig
// Struct Size::0x0010
struct FSolarLandscapeListenerConfig
{
    bool                                          bListenLandscape;                                             // 0x0000(0x0001)
    enum class OnLSModifiedStrategy               LSModifiedStrategy;                                           // 0x0001(0x0001)
    bool                                          bAdjustRotate;                                                // 0x0002(0x0001)
    enum class OnLSDestroyStrategy                LSDestroyStrategy;                                            // 0x0003(0x0001)
    FVector                                       FreeFallBoxExtent;                                            // 0x0004(0x000C)
};


// ScriptStruct  Solarland.SummonItemReplicationTagCountMap
// Struct Size::0x00B0
struct FSummonItemReplicationTagCountMap
{
    char                                          pa_0000[0x00A0]                                               // 0x0000(0x00A0)
    ASummonItemBase*                              Owner;                                                        // 0x00A0(0x0008)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  Solarland.WeaponAssistAimTargetConfig
// Struct Size::0x0048
struct FWeaponAssistAimTargetConfig
{
    FVector2D                                     BaseFollowTriggerExtent;                                      // 0x0000(0x0008)
    FVector2D                                     BaseFollowStopExtent;                                         // 0x0008(0x0008)
    TArray<FBaseFollowExtentByTag>                BaseFollowExtentByTags;                                       // 0x0010(0x0010)
    FVector2D                                     TargetVelocityFollowTriggerExtent;                            // 0x0020(0x0008)
    FVector2D                                     LockAimingExtent;                                             // 0x0028(0x0008)
    FVector2D                                     GlobalSensitivityScaleTriggerExtent;                          // 0x0030(0x0008)
    char                                          pa_0038[0x0010]                                               // 0x0038(0x0010)
};


// ScriptStruct  Solarland.BaseFollowExtentByTag
// Struct Size::0x0060
struct FBaseFollowExtentByTag
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0000(0x0050)
    FVector2D                                     BaseFollowTriggerExtent;                                      // 0x0050(0x0008)
    FVector2D                                     BaseFollowStopExtent;                                         // 0x0058(0x0008)
};


// ScriptStruct  Solarland.SolarSkinnedAsset
// Struct Size::0x0008
struct FSolarSkinnedAsset
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.SolarSkinnedParticleSystem
// Struct Size::0x0070
struct FSolarSkinnedParticleSystem : public FSolarSkinnedAsset
{
    FSoftObjectPath                               DefaultSkinnedParticle;                                       // 0x0008(0x0018)
    TMap<int32_t,FSoftObjectPath>                 SkinnedParticles;                                             // 0x0020(0x0050)
};


// ScriptStruct  Solarland.SolarSkinnedAnimationAsset
// Struct Size::0x0070
struct FSolarSkinnedAnimationAsset : public FSolarSkinnedAsset
{
    FSoftObjectPath                               DefaultSkinnedMontage;                                        // 0x0008(0x0018)
    TMap<int32_t,FSoftObjectPath>                 SkinnedMontages;                                              // 0x0020(0x0050)
};


// ScriptStruct  Engine.DebugTextInfo
// Struct Size::0x0060
struct FDebugTextInfo
{
    AActor*                                       SrcActor;                                                     // 0x0000(0x0008)
    FVector                                       SrcActorOffset;                                               // 0x0008(0x000C)
    FVector                                       SrcActorDesiredOffset;                                        // 0x0014(0x000C)
    FString                                       DebugText;                                                    // 0x0020(0x0010)
    float                                         TimeRemaining;                                                // 0x0030(0x0004)
    float                                         Duration;                                                     // 0x0034(0x0004)
    FColor                                        TextColor;                                                    // 0x0038(0x0004)
    char                                          bAbsoluteLocation;                                            // 0x003C(0x0001)
    char                                          bKeepAttachedToActor;                                         // 0x003C(0x0001)
    char                                          bDrawShadow;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FVector                                       OrigActorLocation;                                            // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    UFont*                                        Font;                                                         // 0x0050(0x0008)
    float                                         FontScale;                                                    // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  SolarUI.SolarWidgetNavigationData
// Struct Size::0x0001
struct FSolarWidgetNavigationData
{
    char                                          bHasNavUp;                                                    // 0x0000(0x0001)
    char                                          bHasNavDown;                                                  // 0x0000(0x0001)
    char                                          bHasNavLeft;                                                  // 0x0000(0x0001)
    char                                          bHasNavRight;                                                 // 0x0000(0x0001)
};


// ScriptStruct  SolarUI.PlayAnimationParams
// Struct Size::0x0040
struct FPlayAnimationParams
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  Solarland.TextSelectionOffset
// Struct Size::0x0010
struct FTextSelectionOffset
{
    FVector2D                                     SelectionStartOffset;                                         // 0x0000(0x0008)
    FVector2D                                     SelectionEndOffset;                                           // 0x0008(0x0008)
};


// ScriptStruct  Solarland.TipsLocationPreset
// Struct Size::0x0020
struct FTipsLocationPreset
{
    FVector2D                                     Position;                                                     // 0x0000(0x0008)
    FVector2D                                     Alignment;                                                    // 0x0008(0x0008)
    FVector2D                                     PositionDesktop;                                              // 0x0010(0x0008)
    FVector2D                                     AlignmentDesktop;                                             // 0x0018(0x0008)
};


// ScriptStruct  Solarland.BattleUpgradeEffectCategoryColorSet
// Struct Size::0x0060
struct FBattleUpgradeEffectCategoryColorSet
{
    FLinearColor                                  BannerCategoryTextColor;                                      // 0x0000(0x0010)
    FLinearColor                                  BannerIconColor;                                              // 0x0010(0x0010)
    FLinearColor                                  BannerBorderColor;                                            // 0x0020(0x0010)
    FLinearColor                                  BannerBackgroundColor;                                        // 0x0030(0x0010)
    FLinearColor                                  BadgeIconColor;                                               // 0x0040(0x0010)
    FLinearColor                                  BadgeBackgroundColor;                                         // 0x0050(0x0010)
};


// ScriptStruct  Solarland.ElectricShopItem
// Struct Size::0x0018
struct FElectricShopItem
{
    int32_t                                       ItemID;                                                       // 0x0000(0x0004)
    float                                         Prize;                                                        // 0x0004(0x0004)
    int32_t                                       Num;                                                          // 0x0008(0x0004)
    int32_t                                       ProductID;                                                    // 0x000C(0x0004)
    float                                         CoolDown;                                                     // 0x0010(0x0004)
    int32_t                                       Generation;                                                   // 0x0014(0x0004)
};


// ScriptStruct  ChaosSolverEngine.ChaosPhysicsCollisionInfo
// Struct Size::0x0070
struct FChaosPhysicsCollisionInfo
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    UPrimitiveComponent*                          OtherComponent;                                               // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FVector                                       Normal;                                                       // 0x001C(0x000C)
    FVector                                       AccumulatedImpulse;                                           // 0x0028(0x000C)
    FVector                                       Velocity;                                                     // 0x0034(0x000C)
    FVector                                       OtherVelocity;                                                // 0x0040(0x000C)
    FVector                                       AngularVelocity;                                              // 0x004C(0x000C)
    FVector                                       OtherAngularVelocity;                                         // 0x0058(0x000C)
    float                                         Mass;                                                         // 0x0064(0x0004)
    float                                         OtherMass;                                                    // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ChaosSolverEngine.ChaosBreakEvent
// Struct Size::0x0030
struct FChaosBreakEvent
{
    UPrimitiveComponent*                          Component;                                                    // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Velocity;                                                     // 0x0014(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0020(0x000C)
    float                                         Mass;                                                         // 0x002C(0x0004)
};


// ScriptStruct  Engine.WalkableSlopeOverride
// Struct Size::0x0010
struct FWalkableSlopeOverride
{
    enum class EWalkableSlopeBehavior             WalkableSlopeBehavior;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         WalkableSlopeAngle;                                           // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.BodyInstance
// Struct Size::0x0130
struct FBodyInstance
{
    char                                          pa_0000[0x0006]                                               // 0x0000(0x0006)
    enum class ECollisionChannel                  ObjectType;                                                   // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0001]                                               // 0x0009(0x0001)
    enum class ESleepFamily                       SleepFamily;                                                  // 0x000A(0x0001)
    enum class EDOFMode                           DOFMode;                                                      // 0x000B(0x0001)
    char                                          bUseCCD;                                                      // 0x000C(0x0001)
    char                                          bIgnoreAnalyticCollisions;                                    // 0x000C(0x0001)
    char                                          bNotifyRigidBodyCollision;                                    // 0x000C(0x0001)
    char                                          bSimulatePhysics;                                             // 0x000C(0x0001)
    char                                          bOverrideMass;                                                // 0x000C(0x0001)
    char                                          bEnableGravity;                                               // 0x000C(0x0001)
    char                                          bAutoWeld;                                                    // 0x000C(0x0001)
    char                                          bStartAwake;                                                  // 0x000D(0x0001)
    char                                          bGenerateWakeEvents;                                          // 0x000D(0x0001)
    char                                          bUpdateMassWhenScaleChanges;                                  // 0x000D(0x0001)
    char                                          bLockTranslation;                                             // 0x000D(0x0001)
    char                                          bLockRotation;                                                // 0x000D(0x0001)
    char                                          bLockXTranslation;                                            // 0x000D(0x0001)
    char                                          bLockYTranslation;                                            // 0x000D(0x0001)
    char                                          bLockZTranslation;                                            // 0x000D(0x0001)
    char                                          bLockXRotation;                                               // 0x000E(0x0001)
    char                                          bLockYRotation;                                               // 0x000E(0x0001)
    char                                          bLockZRotation;                                               // 0x000E(0x0001)
    char                                          bOverrideMaxAngularVelocity;                                  // 0x000E(0x0001)
    char                                          bOverrideMaxDepenetrationVelocity;                            // 0x000E(0x0001)
    char                                          bOverrideWalkableSlopeOnInstance;                             // 0x000E(0x0001)
    char                                          bInterpolateWhenSubStepping;                                  // 0x000F(0x0001)
    char                                          pa_0010[0x000C]                                               // 0x0010(0x000C)
    FName                                         CollisionProfileName;                                         // 0x001C(0x0008)
    char                                          PositionSolverIterationCount;                                 // 0x0024(0x0001)
    char                                          VelocitySolverIterationCount;                                 // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    FCollisionResponse                            CollisionResponses;                                           // 0x0028(0x0030)
    float                                         MaxDepenetrationVelocity;                                     // 0x0058(0x0004)
    float                                         MassInKgOverride;                                             // 0x005C(0x0004)
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
    float                                         LinearDamping;                                                // 0x0068(0x0004)
    float                                         AngularDamping;                                               // 0x006C(0x0004)
    FVector                                       CustomDOFPlaneNormal;                                         // 0x0070(0x000C)
    FVector                                       COMNudge;                                                     // 0x007C(0x000C)
    float                                         MassScale;                                                    // 0x0088(0x0004)
    FVector                                       InertiaTensorScale;                                           // 0x008C(0x000C)
    char                                          pa_0098[0x0010]                                               // 0x0098(0x0010)
    FWalkableSlopeOverride                        WalkableSlopeOverride;                                        // 0x00A8(0x0010)
    UPhysicalMaterial*                            PhysMaterialOverride;                                         // 0x00B8(0x0008)
    float                                         MaxAngularVelocity;                                           // 0x00C0(0x0004)
    float                                         CustomSleepThresholdMultiplier;                               // 0x00C4(0x0004)
    float                                         StabilizationThresholdMultiplier;                             // 0x00C8(0x0004)
    float                                         PhysicsBlendWeight;                                           // 0x00CC(0x0004)
    char                                          pa_00D0[0x0060]                                               // 0x00D0(0x0060)
};


// ScriptStruct  Engine.CollisionResponse
// Struct Size::0x0030
struct FCollisionResponse
{
    FCollisionResponseContainer                   ResponseToChannels;                                           // 0x0000(0x0020)
    TArray<FResponseChannel>                      ResponseArray;                                                // 0x0020(0x0010)
};


// ScriptStruct  Engine.ResponseChannel
// Struct Size::0x000C
struct FResponseChannel
{
    FName                                         Channel;                                                      // 0x0000(0x0008)
    enum class ECollisionResponse                 Response;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.CollisionResponseContainer
// Struct Size::0x0020
struct FCollisionResponseContainer
{
    enum class ECollisionResponse                 WorldStatic;                                                  // 0x0000(0x0001)
    enum class ECollisionResponse                 WorldDynamic;                                                 // 0x0001(0x0001)
    enum class ECollisionResponse                 Pawn;                                                         // 0x0002(0x0001)
    enum class ECollisionResponse                 Visibility;                                                   // 0x0003(0x0001)
    enum class ECollisionResponse                 Camera;                                                       // 0x0004(0x0001)
    enum class ECollisionResponse                 PhysicsBody;                                                  // 0x0005(0x0001)
    enum class ECollisionResponse                 Vehicle;                                                      // 0x0006(0x0001)
    enum class ECollisionResponse                 Destructible;                                                 // 0x0007(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel1;                                          // 0x0008(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel2;                                          // 0x0009(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel3;                                          // 0x000A(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel4;                                          // 0x000B(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel5;                                          // 0x000C(0x0001)
    enum class ECollisionResponse                 EngineTraceChannel6;                                          // 0x000D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel1;                                            // 0x000E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel2;                                            // 0x000F(0x0001)
    enum class ECollisionResponse                 GameTraceChannel3;                                            // 0x0010(0x0001)
    enum class ECollisionResponse                 GameTraceChannel4;                                            // 0x0011(0x0001)
    enum class ECollisionResponse                 GameTraceChannel5;                                            // 0x0012(0x0001)
    enum class ECollisionResponse                 GameTraceChannel6;                                            // 0x0013(0x0001)
    enum class ECollisionResponse                 GameTraceChannel7;                                            // 0x0014(0x0001)
    enum class ECollisionResponse                 GameTraceChannel8;                                            // 0x0015(0x0001)
    enum class ECollisionResponse                 GameTraceChannel9;                                            // 0x0016(0x0001)
    enum class ECollisionResponse                 GameTraceChannel10;                                           // 0x0017(0x0001)
    enum class ECollisionResponse                 GameTraceChannel11;                                           // 0x0018(0x0001)
    enum class ECollisionResponse                 GameTraceChannel12;                                           // 0x0019(0x0001)
    enum class ECollisionResponse                 GameTraceChannel13;                                           // 0x001A(0x0001)
    enum class ECollisionResponse                 GameTraceChannel14;                                           // 0x001B(0x0001)
    enum class ECollisionResponse                 GameTraceChannel15;                                           // 0x001C(0x0001)
    enum class ECollisionResponse                 GameTraceChannel16;                                           // 0x001D(0x0001)
    enum class ECollisionResponse                 GameTraceChannel17;                                           // 0x001E(0x0001)
    enum class ECollisionResponse                 GameTraceChannel18;                                           // 0x001F(0x0001)
};


// ScriptStruct  Engine.CustomPrimitiveData
// Struct Size::0x0010
struct FCustomPrimitiveData
{
    TArray<float>                                 Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.LightingChannels
// Struct Size::0x0001
struct FLightingChannels
{
    char                                          bChannel0;                                                    // 0x0000(0x0001)
    char                                          bChannel1;                                                    // 0x0000(0x0001)
    char                                          bChannel2;                                                    // 0x0000(0x0001)
};


// ScriptStruct  Engine.MultipassAttribute
// Struct Size::0x0010
struct FMultipassAttribute
{
    UMaterialInterface*                           MultipassMaterial;                                            // 0x0000(0x0008)
    bool                                          bUseIndependentAttribute;                                     // 0x0008(0x0001)
    bool                                          bForceFrontFaceCull;                                          // 0x0009(0x0001)
    bool                                          bIgnoreTranslucentSection;                                    // 0x000A(0x0001)
    bool                                          bIgnoreMaskedSection;                                         // 0x000B(0x0001)
    int32_t                                       MultiplePassTranslucencySortPriority;                         // 0x000C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.GeomComponentCacheParameters
// Struct Size::0x0050
struct FGeomComponentCacheParameters
{
    enum class EGeometryCollectionCacheType       CacheMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UGeometryCollectionCache*                     TargetCache;                                                  // 0x0008(0x0008)
    float                                         ReverseCacheBeginTime;                                        // 0x0010(0x0004)
    bool                                          SaveCollisionData;                                            // 0x0014(0x0001)
    bool                                          DoGenerateCollisionData;                                      // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    int32_t                                       CollisionDataSizeMax;                                         // 0x0018(0x0004)
    bool                                          DoCollisionDataSpatialHash;                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         CollisionDataSpatialHashRadius;                               // 0x0020(0x0004)
    int32_t                                       MaxCollisionPerCell;                                          // 0x0024(0x0004)
    bool                                          SaveBreakingData;                                             // 0x0028(0x0001)
    bool                                          DoGenerateBreakingData;                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       BreakingDataSizeMax;                                          // 0x002C(0x0004)
    bool                                          DoBreakingDataSpatialHash;                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         BreakingDataSpatialHashRadius;                                // 0x0034(0x0004)
    int32_t                                       MaxBreakingPerCell;                                           // 0x0038(0x0004)
    bool                                          SaveTrailingData;                                             // 0x003C(0x0001)
    bool                                          DoGenerateTrailingData;                                       // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    int32_t                                       TrailingDataSizeMax;                                          // 0x0040(0x0004)
    float                                         TrailingMinSpeedThreshold;                                    // 0x0044(0x0004)
    float                                         TrailingMinVolumeThreshold;                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventData
// Struct Size::0x0058
struct FChaosCollisionEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Normal;                                                       // 0x000C(0x000C)
    FVector                                       Velocity1;                                                    // 0x0018(0x000C)
    FVector                                       Velocity2;                                                    // 0x0024(0x000C)
    float                                         Mass1;                                                        // 0x0030(0x0004)
    float                                         Mass2;                                                        // 0x0034(0x0004)
    FVector                                       Impulse;                                                      // 0x0038(0x000C)
    char                                          pa_0044[0x0014]                                               // 0x0044(0x0014)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventData
// Struct Size::0x001C
struct FChaosBreakingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    float                                         Mass;                                                         // 0x0018(0x0004)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventData
// Struct Size::0x002C
struct FChaosTrailingEventData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
};


// ScriptStruct  AIModule.AIRequestID
// Struct Size::0x0004
struct FAIRequestID
{
    uint32_t                                      RequestID;                                                    // 0x0000(0x0004)
};


// ScriptStruct  AIModule.AIStimulus
// Struct Size::0x003C
struct FAIStimulus
{
    float                                         Age;                                                          // 0x0000(0x0004)
    float                                         ExpirationAge;                                                // 0x0004(0x0004)
    float                                         Strength;                                                     // 0x0008(0x0004)
    FVector                                       StimulusLocation;                                             // 0x000C(0x000C)
    FVector                                       ReceiverLocation;                                             // 0x0018(0x000C)
    FName                                         Tag;                                                          // 0x0024(0x0008)
    char                                          pa_002C[0x000C]                                               // 0x002C(0x000C)
    char                                          bSuccessfullySensed;                                          // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  Landmass.LandmassBrushEffectsList
// Struct Size::0x0060
struct FLandmassBrushEffectsList
{
    FBrushEffectBlurring                          Blurring;                                                     // 0x0000(0x0008)
    FBrushEffectCurlNoise                         CurlNoise;                                                    // 0x0008(0x0010)
    FBrushEffectDisplacement                      Displacement;                                                 // 0x0018(0x0028)
    FBrushEffectSmoothBlending                    SmoothBlending;                                               // 0x0040(0x0008)
    FBrushEffectTerracing                         Terracing;                                                    // 0x0048(0x0014)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Landmass.BrushEffectTerracing
// Struct Size::0x0014
struct FBrushEffectTerracing
{
    float                                         TerraceAlpha;                                                 // 0x0000(0x0004)
    float                                         TerraceSpacing;                                               // 0x0004(0x0004)
    float                                         TerraceSmoothness;                                            // 0x0008(0x0004)
    float                                         MaskLength;                                                   // 0x000C(0x0004)
    float                                         MaskStartOffset;                                              // 0x0010(0x0004)
};


// ScriptStruct  Landmass.BrushEffectSmoothBlending
// Struct Size::0x0008
struct FBrushEffectSmoothBlending
{
    float                                         InnerSmoothDistance;                                          // 0x0000(0x0004)
    float                                         OuterSmoothDistance;                                          // 0x0004(0x0004)
};


// ScriptStruct  Landmass.BrushEffectDisplacement
// Struct Size::0x0028
struct FBrushEffectDisplacement
{
    float                                         DisplacementHeight;                                           // 0x0000(0x0004)
    float                                         DisplacementTiling;                                           // 0x0004(0x0004)
    UTexture2D*                                   Texture;                                                      // 0x0008(0x0008)
    float                                         Midpoint;                                                     // 0x0010(0x0004)
    FLinearColor                                  Channel;                                                      // 0x0014(0x0010)
    float                                         WeightmapInfluence;                                           // 0x0024(0x0004)
};


// ScriptStruct  Landmass.BrushEffectCurlNoise
// Struct Size::0x0010
struct FBrushEffectCurlNoise
{
    float                                         Curl1Amount;                                                  // 0x0000(0x0004)
    float                                         Curl2Amount;                                                  // 0x0004(0x0004)
    float                                         Curl1Tiling;                                                  // 0x0008(0x0004)
    float                                         Curl2Tiling;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Landmass.BrushEffectBlurring
// Struct Size::0x0008
struct FBrushEffectBlurring
{
    bool                                          bBlurShape;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Radius;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Landmass.BrushEffectCurves
// Struct Size::0x0020
struct FBrushEffectCurves
{
    bool                                          bUseCurveChannel;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UCurveFloat*                                  ElevationCurveAsset;                                          // 0x0008(0x0008)
    float                                         ChannelEdgeOffset;                                            // 0x0010(0x0004)
    float                                         ChannelDepth;                                                 // 0x0014(0x0004)
    float                                         CurveRampWidth;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Landmass.LandmassFalloffSettings
// Struct Size::0x0014
struct FLandmassFalloffSettings
{
    enum class EBrushFalloffMode                  FalloffMode;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FalloffAngle;                                                 // 0x0004(0x0004)
    float                                         FalloffWidth;                                                 // 0x0008(0x0004)
    float                                         EdgeOffset;                                                   // 0x000C(0x0004)
    float                                         ZOffset;                                                      // 0x0010(0x0004)
};


// ScriptStruct  Landmass.LandmassTerrainCarvingSettings
// Struct Size::0x0080
struct FLandmassTerrainCarvingSettings
{
    enum class EBrushBlendType                    BlendMode;                                                    // 0x0000(0x0001)
    bool                                          bInvertShape;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FLandmassFalloffSettings                      FalloffSettings;                                              // 0x0004(0x0014)
    FLandmassBrushEffectsList                     Effects;                                                      // 0x0018(0x0060)
    int32_t                                       Priority;                                                     // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  AnimationBudgetAllocator.AnimationBudgetAllocatorParameters
// Struct Size::0x0054
struct FAnimationBudgetAllocatorParameters
{
    float                                         BudgetInMs;                                                   // 0x0000(0x0004)
    float                                         MinQuality;                                                   // 0x0004(0x0004)
    int32_t                                       MaxTickRate;                                                  // 0x0008(0x0004)
    float                                         WorkUnitSmoothingSpeed;                                       // 0x000C(0x0004)
    float                                         AlwaysTickFalloffAggression;                                  // 0x0010(0x0004)
    float                                         InterpolationFalloffAggression;                               // 0x0014(0x0004)
    int32_t                                       InterpolationMaxRate;                                         // 0x0018(0x0004)
    int32_t                                       MaxInterpolatedComponents;                                    // 0x001C(0x0004)
    float                                         InterpolationTickMultiplier;                                  // 0x0020(0x0004)
    float                                         InitialEstimatedWorkUnitTimeMs;                               // 0x0024(0x0004)
    int32_t                                       MaxTickedOffsreenComponents;                                  // 0x0028(0x0004)
    int32_t                                       StateChangeThrottleInFrames;                                  // 0x002C(0x0004)
    float                                         BudgetFactorBeforeReducedWork;                                // 0x0030(0x0004)
    float                                         BudgetFactorBeforeReducedWorkEpsilon;                         // 0x0034(0x0004)
    float                                         BudgetPressureSmoothingSpeed;                                 // 0x0038(0x0004)
    int32_t                                       ReducedWorkThrottleMinInFrames;                               // 0x003C(0x0004)
    int32_t                                       ReducedWorkThrottleMaxInFrames;                               // 0x0040(0x0004)
    float                                         BudgetFactorBeforeAggressiveReducedWork;                      // 0x0044(0x0004)
    int32_t                                       ReducedWorkThrottleMaxPerFrame;                               // 0x0048(0x0004)
    float                                         BudgetPressureBeforeEmergencyReducedWork;                     // 0x004C(0x0004)
    float                                         AlwaysTickSignificanceThreshold;                              // 0x0050(0x0004)
};


// ScriptStruct  GameplayAbilities.NetSerializeScriptStructCache
// Struct Size::0x0010
struct FNetSerializeScriptStructCache
{
    TArray<UScriptStruct*>                        ScriptStructs;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.TableRowBase
// Struct Size::0x0008
struct FTableRowBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.AttributeMetaData
// Struct Size::0x0030
struct FAttributeMetaData : public FTableRowBase
{
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         MinValue;                                                     // 0x000C(0x0004)
    float                                         MaxValue;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DerivedAttributeInfo;                                         // 0x0018(0x0010)
    bool                                          bCanStack;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAttributeData
// Struct Size::0x0010
struct FGameplayAttributeData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         BaseValue;                                                    // 0x0008(0x0004)
    float                                         CurrentValue;                                                 // 0x000C(0x0004)
};


// ScriptStruct  GameplayAbilities.AbilityTriggerData
// Struct Size::0x000C
struct FAbilityTriggerData
{
    FGameplayTag                                  TriggerTag;                                                   // 0x0000(0x0008)
    enum class EGameplayAbilityTriggerSource      TriggerSource;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityBindInfo
// Struct Size::0x0010
struct FGameplayAbilityBindInfo
{
    enum class EGameplayAbilityInputBinds         Command;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UGameplayAbility*                             GameplayAbilityClass;                                         // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilterHandle
// Struct Size::0x0010
struct FGameplayTargetDataFilterHandle
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayTargetDataFilter
// Struct Size::0x0028
struct FGameplayTargetDataFilter
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SelfActor;                                                    // 0x0008(0x0008)
    enum class ETargetDataFilterSelf              SelfFilter;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    AActor*                                       RequiredActorClass;                                           // 0x0018(0x0008)
    bool                                          bReverseFilter;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData
// Struct Size::0x0008
struct FGameplayAbilityTargetData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData_SingleTargetHit
// Struct Size::0x0098
struct FGameplayAbilityTargetData_SingleTargetHit : public FGameplayAbilityTargetData
{
    FHitResult                                    HitResult;                                                    // 0x0008(0x0088)
    bool                                          bHitReplaced;                                                 // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData_ActorArray
// Struct Size::0x0090
struct FGameplayAbilityTargetData_ActorArray : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x0070)
    TArray<TWeakObjectPtr<AActor>>                TargetActorArray;                                             // 0x0080(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetingLocationInfo
// Struct Size::0x0070
struct FGameplayAbilityTargetingLocationInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    enum class EGameplayAbilityTargetingLocationTypeLocationType;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    LiteralTransform;                                             // 0x0020(0x0030)
    AActor*                                       SourceActor;                                                  // 0x0050(0x0008)
    UMeshComponent*                               SourceComponent;                                              // 0x0058(0x0008)
    UGameplayAbility*                             SourceAbility;                                                // 0x0060(0x0008)
    FName                                         SourceSocketName;                                             // 0x0068(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityTargetData_LocationInfo
// Struct Size::0x00F0
struct FGameplayAbilityTargetData_LocationInfo : public FGameplayAbilityTargetData
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FGameplayAbilityTargetingLocationInfo         SourceLocation;                                               // 0x0010(0x0070)
    FGameplayAbilityTargetingLocationInfo         TargetLocation;                                               // 0x0080(0x0070)
};


// ScriptStruct  GameplayAbilities.GameplayAbilitySpecHandleAndPredictionKey
// Struct Size::0x0008
struct FGameplayAbilitySpecHandleAndPredictionKey
{
    FGameplayAbilitySpecHandle                    AbilityHandle;                                                // 0x0000(0x0004)
    int32_t                                       PredictionKeyAtCreation;                                      // 0x0004(0x0004)
};


// ScriptStruct  GameplayAbilities.AbilityTaskDebugMessage
// Struct Size::0x0018
struct FAbilityTaskDebugMessage
{
    UGameplayTask*                                FromTask;                                                     // 0x0000(0x0008)
    FString                                       Message;                                                      // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayAbilityActorInfo
// Struct Size::0x0048
struct FGameplayAbilityActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        OwnerActor;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        AvatarActor;                                                  // 0x0010(0x0008)
    TWeakObjectPtr<APlayerController>             PlayerController;                                             // 0x0018(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       AbilitySystemComponent;                                       // 0x0020(0x0008)
    TWeakObjectPtr<USkeletalMeshComponent>        SkeletalMeshComponent;                                        // 0x0028(0x0008)
    TWeakObjectPtr<UAnimInstance>                 AnimInstance;                                                 // 0x0030(0x0008)
    TWeakObjectPtr<UMovementComponent>            MovementComponent;                                            // 0x0038(0x0008)
    FName                                         AffectedAnimInstanceTag;                                      // 0x0040(0x0008)
};


// ScriptStruct  GameplayAbilities.WorldReticleParameters
// Struct Size::0x000C
struct FWorldReticleParameters
{
    FVector                                       AOEScale;                                                     // 0x0000(0x000C)
};


// ScriptStruct  GameplayAbilities.PreallocationInfo
// Struct Size::0x0068
struct FPreallocationInfo
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
    TArray<AGameplayCueNotify_Actor*>             ClassesNeedingPreallocation;                                  // 0x0050(0x0010)
    char                                          pa_0060[0x0008]                                               // 0x0060(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCuePendingExecute
// Struct Size::0x0188
struct FGameplayCuePendingExecute
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    FPredictionKey                                PredictionKey;                                                // 0x0018(0x0018)
    enum class EGameplayCuePayloadType            PayloadType;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
    UAbilitySystemComponent*                      OwningComponent;                                              // 0x0038(0x0008)
    FGameplayEffectSpecForRPC                     FromSpec;                                                     // 0x0040(0x0078)
    FGameplayCueParameters                        CueParameters;                                                // 0x00B8(0x00D0)
};


// ScriptStruct  GameplayAbilities.MinimalGameplayCueReplicationProxy
// Struct Size::0x01C0
struct FMinimalGameplayCueReplicationProxy
{
    char                                          pa_0000[0x01B0]                                               // 0x0000(0x01B0)
    UAbilitySystemComponent*                      Owner;                                                        // 0x01B0(0x0008)
    char                                          pa_01B8[0x0008]                                               // 0x01B8(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueTag
// Struct Size::0x0008
struct FGameplayCueTag
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueObjectLibrary
// Struct Size::0x0050
struct FGameplayCueObjectLibrary
{
    TArray<FString>                               Paths;                                                        // 0x0000(0x0010)
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
    UObjectLibrary*                               ActorObjectLibrary;                                           // 0x0030(0x0008)
    UObjectLibrary*                               StaticObjectLibrary;                                          // 0x0038(0x0008)
    UGameplayCueSet*                              CueSet;                                                       // 0x0040(0x0008)
    char                                          pa_0048[0x0004]                                               // 0x0048(0x0004)
    bool                                          bShouldSyncScan;                                              // 0x004C(0x0001)
    bool                                          bShouldAsyncLoad;                                             // 0x004D(0x0001)
    bool                                          bShouldSyncLoad;                                              // 0x004E(0x0001)
    bool                                          bHasBeenInitialized;                                          // 0x004F(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayCueNotifyData
// Struct Size::0x0030
struct FGameplayCueNotifyData
{
    FGameplayTag                                  GameplayCueTag;                                               // 0x0000(0x0008)
    FSoftObjectPath                               GameplayCueNotifyObj;                                         // 0x0008(0x0018)
    UObject*                                      LoadedGameplayCueClass;                                       // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationManager
// Struct Size::0x0080
struct FGameplayCueTranslationManager
{
    TArray<FGameplayCueTranslatorNode>            TranslationLUT;                                               // 0x0000(0x0010)
    TMap<FName,FGameplayCueTranslatorNodeIndex>   TranslationNameToIndexMap;                                    // 0x0010(0x0050)
    UGameplayTagsManager*                         TagManager;                                                   // 0x0060(0x0008)
    char                                          pa_0068[0x0018]                                               // 0x0068(0x0018)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNodeIndex
// Struct Size::0x0004
struct FGameplayCueTranslatorNodeIndex
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslatorNode
// Struct Size::0x0078
struct FGameplayCueTranslatorNode
{
    TArray<FGameplayCueTranslationLink>           Links;                                                        // 0x0000(0x0010)
    FGameplayCueTranslatorNodeIndex               CachedIndex;                                                  // 0x0010(0x0004)
    FGameplayTag                                  CachedGameplayTag;                                            // 0x0014(0x0008)
    FName                                         CachedGameplayTagName;                                        // 0x001C(0x0008)
    char                                          pa_0024[0x0054]                                               // 0x0024(0x0054)
};


// ScriptStruct  GameplayAbilities.GameplayCueTranslationLink
// Struct Size::0x0018
struct FGameplayCueTranslationLink
{
    UGameplayCueTranslator*                       RulesCDO;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  GameplayAbilities.ActiveGameplayEffectQuery
// Struct Size::0x0088
struct FActiveGameplayEffectQuery
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  GameplayAbilities.InheritedTagContainer
// Struct Size::0x0060
struct FInheritedTagContainer
{
    FGameplayTagContainer                         CombinedTags;                                                 // 0x0000(0x0020)
    FGameplayTagContainer                         Added;                                                        // 0x0020(0x0020)
    FGameplayTagContainer                         Removed;                                                      // 0x0040(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCue
// Struct Size::0x0060
struct FGameplayEffectCue
{
    FGameplayAttribute                            MagnitudeAttribute;                                           // 0x0000(0x0038)
    float                                         MinLevel;                                                     // 0x0038(0x0004)
    float                                         MaxLevel;                                                     // 0x003C(0x0004)
    FGameplayTagContainer                         GameplayCueTags;                                              // 0x0040(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayModifierInfo
// Struct Size::0x02B0
struct FGameplayModifierInfo
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FScalableFloat                                Magnitude;                                                    // 0x0040(0x0020)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0060(0x01A8)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x0208(0x0001)
    char                                          pa_0209[0x0007]                                               // 0x0209(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0210(0x0050)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0260(0x0050)
};


// ScriptStruct  GameplayAbilities.GameplayModEvaluationChannelSettings
// Struct Size::0x0001
struct FGameplayModEvaluationChannelSettings
{
    enum class EGameplayModEvaluationChannel      Channel;                                                      // 0x0000(0x0001)
};


// ScriptStruct  GameplayAbilities.GameplayEffectModifierMagnitude
// Struct Size::0x01A8
struct FGameplayEffectModifierMagnitude
{
    enum class EGameplayEffectMagnitudeCalculationMagnitudeCalculationType;                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FScalableFloat                                ScalableFloatMagnitude;                                       // 0x0008(0x0020)
    FAttributeBasedFloat                          AttributeBasedMagnitude;                                      // 0x0028(0x00F8)
    FCustomCalculationBasedFloat                  CustomMagnitude;                                              // 0x0120(0x0078)
    FSetByCallerFloat                             SetByCallerMagnitude;                                         // 0x0198(0x0010)
};


// ScriptStruct  GameplayAbilities.SetByCallerFloat
// Struct Size::0x0010
struct FSetByCallerFloat
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    FGameplayTag                                  DataTag;                                                      // 0x0008(0x0008)
};


// ScriptStruct  GameplayAbilities.CustomCalculationBasedFloat
// Struct Size::0x0078
struct FCustomCalculationBasedFloat
{
    UGameplayModMagnitudeCalculation*             CalculationClassMagnitude;                                    // 0x0000(0x0008)
    FScalableFloat                                Coefficient;                                                  // 0x0008(0x0020)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0028(0x0020)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0048(0x0020)
    FCurveTableRowHandle                          FinalLookupCurve;                                             // 0x0068(0x0010)
};


// ScriptStruct  GameplayAbilities.AttributeBasedFloat
// Struct Size::0x00F8
struct FAttributeBasedFloat
{
    FScalableFloat                                Coefficient;                                                  // 0x0000(0x0020)
    FScalableFloat                                PreMultiplyAdditiveValue;                                     // 0x0020(0x0020)
    FScalableFloat                                PostMultiplyAdditiveValue;                                    // 0x0040(0x0020)
    FGameplayEffectAttributeCaptureDefinition     BackingAttribute;                                             // 0x0060(0x0040)
    FCurveTableRowHandle                          AttributeCurve;                                               // 0x00A0(0x0010)
    enum class EAttributeBasedFloatCalculationTypeAttributeCalculationType;                                     // 0x00B0(0x0001)
    enum class EGameplayModEvaluationChannel      FinalChannel;                                                 // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
    FGameplayTagContainer                         SourceTagFilter;                                              // 0x00B8(0x0020)
    FGameplayTagContainer                         TargetTagFilter;                                              // 0x00D8(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionDefinition
// Struct Size::0x0058
struct FGameplayEffectExecutionDefinition
{
    UGameplayEffectExecutionCalculation*          CalculationClass;                                             // 0x0000(0x0008)
    FGameplayTagContainer                         PassedInTags;                                                 // 0x0008(0x0020)
    TArray<FGameplayEffectExecutionScopedModifierInfo>CalculationModifiers;                                     // 0x0028(0x0010)
    TArray<UGameplayEffect*>                      ConditionalGameplayEffectClasses;                             // 0x0038(0x0010)
    TArray<FConditionalGameplayEffect>            ConditionalGameplayEffects;                                   // 0x0048(0x0010)
};


// ScriptStruct  GameplayAbilities.ConditionalGameplayEffect
// Struct Size::0x0028
struct FConditionalGameplayEffect
{
    UGameplayEffect*                              EffectClass;                                                  // 0x0000(0x0008)
    FGameplayTagContainer                         RequiredSourceTags;                                           // 0x0008(0x0020)
};


// ScriptStruct  GameplayAbilities.GameplayEffectExecutionScopedModifierInfo
// Struct Size::0x02A0
struct FGameplayEffectExecutionScopedModifierInfo
{
    FGameplayEffectAttributeCaptureDefinition     CapturedAttribute;                                            // 0x0000(0x0040)
    FGameplayTag                                  TransientAggregatorIdentifier;                                // 0x0040(0x0008)
    enum class EGameplayEffectScopedModifierAggregatorTypeAggregatorType;                                       // 0x0048(0x0001)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
    FGameplayEffectModifierMagnitude              ModifierMagnitude;                                            // 0x0050(0x01A8)
    FGameplayModEvaluationChannelSettings         EvaluationChannelSettings;                                    // 0x01F8(0x0001)
    char                                          pa_01F9[0x0007]                                               // 0x01F9(0x0007)
    FGameplayTagRequirements                      SourceTags;                                                   // 0x0200(0x0050)
    FGameplayTagRequirements                      TargetTags;                                                   // 0x0250(0x0050)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionOutput
// Struct Size::0x0018
struct FGameplayEffectCustomExecutionOutput
{
    TArray<FGameplayModifierEvaluatedData>        OutputModifiers;                                              // 0x0000(0x0010)
    char                                          bTriggerConditionalGameplayEffects;                           // 0x0010(0x0001)
    char                                          bHandledStackCountManually;                                   // 0x0010(0x0001)
    char                                          bHandledGameplayCuesManually;                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayModifierEvaluatedData
// Struct Size::0x0050
struct FGameplayModifierEvaluatedData
{
    FGameplayAttribute                            Attribute;                                                    // 0x0000(0x0038)
    enum class EGameplayModOp                     ModifierOp;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Magnitude;                                                    // 0x003C(0x0004)
    FActiveGameplayEffectHandle                   Handle;                                                       // 0x0040(0x0008)
    bool                                          IsValid;                                                      // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  GameplayAbilities.GameplayEffectCustomExecutionParameters
// Struct Size::0x00F8
struct FGameplayEffectCustomExecutionParameters
{
    char                                          pa_0000[0x00F8]                                               // 0x0000(0x00F8)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMap
// Struct Size::0x0020
struct FGameplayTagBlueprintPropertyMap
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FGameplayTagBlueprintPropertyMapping>  PropertyMappings;                                             // 0x0010(0x0010)
};


// ScriptStruct  GameplayAbilities.GameplayTagBlueprintPropertyMapping
// Struct Size::0x0048
struct FGameplayTagBlueprintPropertyMapping
{
    FGameplayTag                                  TagToMap;                                                     // 0x0000(0x0008)
    *                                             PropertyToEdit;                                               // 0x0008(0x0020)
    FName                                         PropertyName;                                                 // 0x0028(0x0008)
    FGuid                                         PropertyGuid;                                                 // 0x0030(0x0010)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  GameplayAbilities.GameplayEffectContext
// Struct Size::0x0070
struct FGameplayEffectContext
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0008(0x0008)
    TWeakObjectPtr<AActor>                        EffectCauser;                                                 // 0x0010(0x0008)
    TWeakObjectPtr<UGameplayAbility>              AbilityCDO;                                                   // 0x0018(0x0008)
    TWeakObjectPtr<UGameplayAbility>              AbilityInstanceNotReplicated;                                 // 0x0020(0x0008)
    int32_t                                       AbilityLevel;                                                 // 0x0028(0x0004)
    TWeakObjectPtr<UObject>                       SourceObject;                                                 // 0x002C(0x0008)
    TWeakObjectPtr<UAbilitySystemComponent>       InstigatorAbilitySystemComponent;                             // 0x0034(0x0008)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<TWeakObjectPtr<AActor>>                Actors;                                                       // 0x0040(0x0010)
    char                                          pa_0050[0x0010]                                               // 0x0050(0x0010)
    FVector                                       WorldOrigin;                                                  // 0x0060(0x000C)
    char                                          bHasWorldOrigin;                                              // 0x006C(0x0001)
    char                                          bReplicateSourceObject;                                       // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  GameplayAbilities.GameplayTagResponseTableEntry
// Struct Size::0x0050
struct FGameplayTagResponseTableEntry
{
    FGameplayTagReponsePair                       Positive;                                                     // 0x0000(0x0028)
    FGameplayTagReponsePair                       Negative;                                                     // 0x0028(0x0028)
};


// ScriptStruct  GameplayAbilities.GameplayTagReponsePair
// Struct Size::0x0028
struct FGameplayTagReponsePair
{
    FGameplayTag                                  Tag;                                                          // 0x0000(0x0008)
    UGameplayEffect*                              ResponseGameplayEffect;                                       // 0x0008(0x0008)
    TArray<UGameplayEffect*>                      ResponseGameplayEffects;                                      // 0x0010(0x0010)
    int32_t                                       SoftCountCap;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ReplicationGraph.ConnectionAlwaysRelevantNodePair
// Struct Size::0x0010
struct FConnectionAlwaysRelevantNodePair
{
    UNetConnection*                               NetConnection;                                                // 0x0000(0x0008)
    UReplicationGraphNode_AlwaysRelevant_ForConnection*Node;                                                    // 0x0008(0x0008)
};


// ScriptStruct  ReplicationGraph.LastLocationGatherInfo
// Struct Size::0x0020
struct FLastLocationGatherInfo
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    FVector                                       LastLocation;                                                 // 0x0008(0x000C)
    FVector                                       LastOutOfRangeLocationCheck;                                  // 0x0014(0x000C)
};


// ScriptStruct  ReplicationGraph.TearOffActorInfo
// Struct Size::0x0018
struct FTearOffActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       Actor;                                                        // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ReplicationGraph.ClassExtraReplicatedInfo
// Struct Size::0x0050
struct FClassExtraReplicatedInfo
{
    TMap<UObject*,int32_t>                        ClassActorsMaxReplicatedNum;                                  // 0x0000(0x0050)
};


// ScriptStruct  ReplicationGraph.AlwaysRelevantActorInfo
// Struct Size::0x0018
struct FAlwaysRelevantActorInfo
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    AActor*                                       LastViewer;                                                   // 0x0008(0x0008)
    AActor*                                       LastViewTarget;                                               // 0x0010(0x0008)
};


// ScriptStruct  ReplicationGraph.ClassReplicationInfo
// Struct Size::0x0070
struct FClassReplicationInfo
{
    float                                         DistancePriorityScale;                                        // 0x0000(0x0004)
    float                                         StarvationPriorityScale;                                      // 0x0004(0x0004)
    float                                         AccumulatedNetPriorityBias;                                   // 0x0008(0x0004)
    uint16_t                                      ReplicationPeriodFrame;                                       // 0x000C(0x0002)
    uint16_t                                      FastPath_ReplicationPeriodFrame;                              // 0x000E(0x0002)
    uint16_t                                      ActorChannelFrameTimeout;                                     // 0x0010(0x0002)
    char                                          pa_0012[0x0056]                                               // 0x0012(0x0056)
    float                                         CullDistance;                                                 // 0x0068(0x0004)
    float                                         CullDistanceSquared;                                          // 0x006C(0x0004)
};


// ScriptStruct  Engine.ActorComponentInstanceData
// Struct Size::0x0058
struct FActorComponentInstanceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      SourceComponentTemplate;                                      // 0x0008(0x0008)
    enum class EComponentCreationMethod           SourceComponentCreationMethod;                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       SourceComponentTypeSerializedIndex;                           // 0x0014(0x0004)
    TArray<char>                                  SavedProperties;                                              // 0x0018(0x0010)
    TArray<FActorComponentDuplicatedObjectData>   DuplicatedObjects;                                            // 0x0028(0x0010)
    TArray<UObject*>                              ReferencedObjects;                                            // 0x0038(0x0010)
    TArray<FName>                                 ReferencedNames;                                              // 0x0048(0x0010)
};


// ScriptStruct  Engine.ActorComponentDuplicatedObjectData
// Struct Size::0x0010
struct FActorComponentDuplicatedObjectData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniAssetBlueprintInstanceData
// Struct Size::0x0110
struct FHoudiniAssetBlueprintInstanceData : public FActorComponentInstanceData
{
    UHoudiniAsset*                                HoudiniAsset;                                                 // 0x0058(0x0008)
    int32_t                                       AssetId;                                                      // 0x0060(0x0004)
    enum class EHoudiniAssetState                 AssetState;                                                   // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    uint32_t                                      SubAssetIndex;                                                // 0x0068(0x0004)
    uint32_t                                      AssetCookCount;                                               // 0x006C(0x0004)
    bool                                          bHasBeenLoaded;                                               // 0x0070(0x0001)
    bool                                          bHasBeenDuplicated;                                           // 0x0071(0x0001)
    bool                                          bPendingDelete;                                               // 0x0072(0x0001)
    bool                                          bRecookRequested;                                             // 0x0073(0x0001)
    bool                                          bRebuildRequested;                                            // 0x0074(0x0001)
    bool                                          bEnableCooking;                                               // 0x0075(0x0001)
    bool                                          bForceNeedUpdate;                                             // 0x0076(0x0001)
    bool                                          bLastCookSuccess;                                             // 0x0077(0x0001)
    FGuid                                         ComponentGUID;                                                // 0x0078(0x0010)
    FGuid                                         HapiGUID;                                                     // 0x0088(0x0010)
    bool                                          bRegisteredComponentTemplate;                                 // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    FString                                       SourceName;                                                   // 0x00A0(0x0010)
    TMap<FHoudiniOutputObjectIdentifier,FHoudiniAssetBlueprintOutput>Outputs;                                   // 0x00B0(0x0050)
    TArray<UHoudiniInput*>                        Inputs;                                                       // 0x0100(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniOutputObjectIdentifier
// Struct Size::0x0040
struct FHoudiniOutputObjectIdentifier
{
    int32_t                                       ObjectId;                                                     // 0x0000(0x0004)
    int32_t                                       GeoId;                                                        // 0x0004(0x0004)
    int32_t                                       PartID;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SplitIdentifier;                                              // 0x0010(0x0010)
    FString                                       PartName;                                                     // 0x0020(0x0010)
    int32_t                                       PrimitiveIndex;                                               // 0x0030(0x0004)
    int32_t                                       PointIndex;                                                   // 0x0034(0x0004)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniAssetBlueprintOutput
// Struct Size::0x0100
struct FHoudiniAssetBlueprintOutput
{
    int32_t                                       OutputIndex;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FHoudiniOutputObject                          OutputObject;                                                 // 0x0008(0x00F8)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniOutputObject
// Struct Size::0x00F8
struct FHoudiniOutputObject
{
    UObject*                                      OutputObject;                                                 // 0x0000(0x0008)
    UObject*                                      OutputComponent;                                              // 0x0008(0x0008)
    UObject*                                      ProxyObject;                                                  // 0x0010(0x0008)
    UObject*                                      ProxyComponent;                                               // 0x0018(0x0008)
    bool                                          bProxyIsCurrent;                                              // 0x0020(0x0001)
    bool                                          bIsImplicit;                                                  // 0x0021(0x0001)
    bool                                          bIsGeometryCollectionPiece;                                   // 0x0022(0x0001)
    char                                          pa_0023[0x0005]                                               // 0x0023(0x0005)
    FString                                       GeometryCollectionPieceName;                                  // 0x0028(0x0010)
    FString                                       BakeName;                                                     // 0x0038(0x0010)
    FHoudiniCurveOutputProperties                 CurveOutputProperty;                                          // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TMap<FString,FString>                         CachedAttributes;                                             // 0x0058(0x0050)
    TMap<FString,FString>                         CachedTokens;                                                 // 0x00A8(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniCurveOutputProperties
// Struct Size::0x000C
struct FHoudiniCurveOutputProperties
{
    enum class EHoudiniCurveOutputType            CurveOutputType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       NumPoints;                                                    // 0x0004(0x0004)
    bool                                          bClosed;                                                      // 0x0008(0x0001)
    enum class EHoudiniCurveType                  CurveType;                                                    // 0x0009(0x0001)
    enum class EHoudiniCurveMethod                CurveMethod;                                                  // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGenericAttribute
// Struct Size::0x0050
struct FHoudiniGenericAttribute
{
    FString                                       AttributeName;                                                // 0x0000(0x0010)
    enum class EAttribStorageType                 AttributeType;                                                // 0x0010(0x0001)
    enum class EAttribOwner                       AttributeOwner;                                               // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       AttributeCount;                                               // 0x0014(0x0004)
    int32_t                                       AttributeTupleSize;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<double>                                DoubleValues;                                                 // 0x0020(0x0010)
    TArray<int64_t>                               IntValues;                                                    // 0x0030(0x0010)
    TArray<FString>                               StringValues;                                                 // 0x0040(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGenericAttributeChangedProperty
// Struct Size::0x0098
struct FHoudiniGenericAttributeChangedProperty
{
    UObject*                                      Object;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0090]                                               // 0x0008(0x0090)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGeoPartObject
// Struct Size::0x0230
struct FHoudiniGeoPartObject
{
    int32_t                                       AssetId;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       AssetName;                                                    // 0x0008(0x0010)
    int32_t                                       ObjectId;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ObjectName;                                                   // 0x0020(0x0010)
    int32_t                                       GeoId;                                                        // 0x0030(0x0004)
    int32_t                                       PartID;                                                       // 0x0034(0x0004)
    FString                                       PartName;                                                     // 0x0038(0x0010)
    bool                                          bHasCustomPartName;                                           // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<FString>                               SplitGroups;                                                  // 0x0050(0x0010)
    FTransform                                    TransformMatrix;                                              // 0x0060(0x0030)
    FString                                       NodePath;                                                     // 0x0090(0x0010)
    enum class EHoudiniPartType                   Type;                                                         // 0x00A0(0x0001)
    enum class EHoudiniInstancerType              InstancerType;                                                // 0x00A1(0x0001)
    char                                          pa_00A2[0x0006]                                               // 0x00A2(0x0006)
    FString                                       VolumeName;                                                   // 0x00A8(0x0010)
    bool                                          bHasEditLayers;                                               // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FString                                       VolumeLayerName;                                              // 0x00C0(0x0010)
    int32_t                                       VolumeTileIndex;                                              // 0x00D0(0x0004)
    bool                                          bIsVisible;                                                   // 0x00D4(0x0001)
    bool                                          bIsEditable;                                                  // 0x00D5(0x0001)
    bool                                          bIsTemplated;                                                 // 0x00D6(0x0001)
    bool                                          bIsInstanced;                                                 // 0x00D7(0x0001)
    bool                                          bHasGeoChanged;                                               // 0x00D8(0x0001)
    bool                                          bHasPartChanged;                                              // 0x00D9(0x0001)
    bool                                          bHasTransformChanged;                                         // 0x00DA(0x0001)
    bool                                          bHasMaterialsChanged;                                         // 0x00DB(0x0001)
    char                                          pa_00DC[0x0144]                                               // 0x00DC(0x0144)
    TArray<FHoudiniMeshSocket>                    AllMeshSockets;                                               // 0x0220(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniMeshSocket
// Struct Size::0x0060
struct FHoudiniMeshSocket
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniCurveInfo
// Struct Size::0x001C
struct FHoudiniCurveInfo
{
    char                                          pa_0000[0x001C]                                               // 0x0000(0x001C)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniVolumeInfo
// Struct Size::0x0080
struct FHoudiniVolumeInfo
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniPartInfo
// Struct Size::0x0048
struct FHoudiniPartInfo
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniGeoInfo
// Struct Size::0x0030
struct FHoudiniGeoInfo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniObjectInfo
// Struct Size::0x0028
struct FHoudiniObjectInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBrushInfo
// Struct Size::0x0070
struct FHoudiniBrushInfo
{
    TWeakObjectPtr<ABrush>                        BrushActor;                                                   // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    CachedTransform;                                              // 0x0010(0x0030)
    FVector                                       CachedOrigin;                                                 // 0x0040(0x000C)
    FVector                                       CachedExtent;                                                 // 0x004C(0x000C)
    enum class EBrushType                         CachedBrushType;                                              // 0x0058(0x0001)
    char                                          pa_0059[0x0007]                                               // 0x0059(0x0007)
    uint64_t                                      CachedSurfaceHash;                                            // 0x0060(0x0008)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniInputLandscapeTransferParams
// Struct Size::0x00C8
struct FHoudiniInputLandscapeTransferParams
{
    enum class ETransferHeightMode                TransferHeightMode;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSet<FName>                                   HeightSpecifiedLayerNames;                                    // 0x0008(0x0050)
    FName                                         HeightUnderSpecifiedLayerName;                                // 0x0058(0x0008)
    enum class ETransferLayerMode                 TransferLayerMode;                                            // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    TSet<FName>                                   LayerSpecifiedLayerNames;                                     // 0x0068(0x0050)
    FName                                         LayerUnderSpecifiedLayerName;                                 // 0x00B8(0x0008)
    bool                                          bTransferWeightmap;                                           // 0x00C0(0x0001)
    char                                          pa_00C1[0x0007]                                               // 0x00C1(0x0007)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBakedOutput
// Struct Size::0x0050
struct FHoudiniBakedOutput
{
    TMap<FHoudiniBakedOutputObjectIdentifier,FHoudiniBakedOutputObject>BakedOutputObjects;                      // 0x0000(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBakedOutputObjectIdentifier
// Struct Size::0x0018
struct FHoudiniBakedOutputObjectIdentifier
{
    int32_t                                       PartID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       SplitIdentifier;                                              // 0x0008(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniBakedOutputObject
// Struct Size::0x00B8
struct FHoudiniBakedOutputObject
{
    FString                                       Actor;                                                        // 0x0000(0x0010)
    FString                                       Blueprint;                                                    // 0x0010(0x0010)
    FName                                         ActorBakeName;                                                // 0x0020(0x0008)
    FString                                       BakedObject;                                                  // 0x0028(0x0010)
    FString                                       BakedComponent;                                               // 0x0038(0x0010)
    TArray<FString>                               InstancedActors;                                              // 0x0048(0x0010)
    TArray<FString>                               InstancedComponents;                                          // 0x0058(0x0010)
    TMap<FName,FString>                           LandscapeLayers;                                              // 0x0068(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniInstancedOutput
// Struct Size::0x0088
struct FHoudiniInstancedOutput
{
    TSoftObjectPtr<UObject>                       OriginalObject;                                               // 0x0000(0x0028)
    int32_t                                       OriginalObjectIndex;                                          // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FTransform>                            OriginalTransforms;                                           // 0x0030(0x0010)
    TArray<TSoftObjectPtr<UObject>>               VariationObjects;                                             // 0x0040(0x0010)
    TArray<FTransform>                            VariationTransformOffsets;                                    // 0x0050(0x0010)
    TArray<int32_t>                               TransformVariationIndices;                                    // 0x0060(0x0010)
    TArray<int32_t>                               OriginalInstanceIndices;                                      // 0x0070(0x0010)
    bool                                          bChanged;                                                     // 0x0080(0x0001)
    bool                                          bStale;                                                       // 0x0081(0x0001)
    char                                          pa_0082[0x0006]                                               // 0x0082(0x0006)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniPDGWorkResultObjectBakedOutput
// Struct Size::0x0010
struct FHoudiniPDGWorkResultObjectBakedOutput
{
    TArray<FHoudiniBakedOutput>                   BakedOutputs;                                                 // 0x0000(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.WorkItemTallyBase
// Struct Size::0x0008
struct FWorkItemTallyBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.AggregatedWorkItemTally
// Struct Size::0x0028
struct FAggregatedWorkItemTally : public FWorkItemTallyBase
{
    int32_t                                       TotalWorkItems;                                               // 0x0008(0x0004)
    int32_t                                       WaitingWorkItems;                                             // 0x000C(0x0004)
    int32_t                                       ScheduledWorkItems;                                           // 0x0010(0x0004)
    int32_t                                       CookingWorkItems;                                             // 0x0014(0x0004)
    int32_t                                       CookedWorkItems;                                              // 0x0018(0x0004)
    int32_t                                       ErroredWorkItems;                                             // 0x001C(0x0004)
    int32_t                                       CookCancelledWorkItems;                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  HoudiniEngineRuntime.WorkItemTally
// Struct Size::0x0238
struct FWorkItemTally : public FWorkItemTallyBase
{
    TSet<int32_t>                                 AllWorkItems;                                                 // 0x0008(0x0050)
    TSet<int32_t>                                 WaitingWorkItems;                                             // 0x0058(0x0050)
    TSet<int32_t>                                 ScheduledWorkItems;                                           // 0x00A8(0x0050)
    TSet<int32_t>                                 CookingWorkItems;                                             // 0x00F8(0x0050)
    TSet<int32_t>                                 CookedWorkItems;                                              // 0x0148(0x0050)
    TSet<int32_t>                                 ErroredWorkItems;                                             // 0x0198(0x0050)
    TSet<int32_t>                                 CookCancelledWorkItems;                                       // 0x01E8(0x0050)
};


// ScriptStruct  HoudiniEngineRuntime.TOPWorkResult
// Struct Size::0x0018
struct FTOPWorkResult
{
    int32_t                                       WorkItemIndex;                                                // 0x0000(0x0004)
    int32_t                                       WorkItemID;                                                   // 0x0004(0x0004)
    TArray<FTOPWorkResultObject>                  ResultObjects;                                                // 0x0008(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.TOPWorkResultObject
// Struct Size::0x0058
struct FTOPWorkResultObject
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FString                                       Name;                                                         // 0x0008(0x0010)
    FString                                       FilePath;                                                     // 0x0018(0x0010)
    enum class EPDGWorkResultState                State;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       WorkItemResultInfoIndex;                                      // 0x002C(0x0004)
    TArray<UHoudiniOutput*>                       ResultOutputs;                                                // 0x0030(0x0010)
    bool                                          bAutoBakedSinceLastLoad;                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FOutputActorOwner                             OutputActorOwner;                                             // 0x0048(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.OutputActorOwner
// Struct Size::0x0010
struct FOutputActorOwner
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       OutputActor;                                                  // 0x0008(0x0008)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniStaticMeshGenerationProperties
// Struct Size::0x0180
struct FHoudiniStaticMeshGenerationProperties
{
    char                                          bGeneratedDoubleSidedGeometry;                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UPhysicalMaterial*                            GeneratedPhysMaterial;                                        // 0x0008(0x0008)
    FBodyInstance                                 DefaultBodyInstance;                                          // 0x0010(0x0130)
    enum class ECollisionTraceFlag                GeneratedCollisionTraceFlag;                                  // 0x0140(0x0001)
    char                                          pa_0141[0x0003]                                               // 0x0141(0x0003)
    int32_t                                       GeneratedLightMapResolution;                                  // 0x0144(0x0004)
    FWalkableSlopeOverride                        GeneratedWalkableSlopeOverride;                               // 0x0148(0x0010)
    int32_t                                       GeneratedLightMapCoordinateIndex;                             // 0x0158(0x0004)
    char                                          bGeneratedUseMaximumStreamingTexelRatio;                      // 0x015C(0x0001)
    char                                          pa_015D[0x0003]                                               // 0x015D(0x0003)
    float                                         GeneratedStreamingDistanceMultiplier;                         // 0x0160(0x0004)
    char                                          pa_0164[0x0004]                                               // 0x0164(0x0004)
    UFoliageType_InstancedStaticMesh*             GeneratedFoliageDefaultSettings;                              // 0x0168(0x0008)
    TArray<UAssetUserData*>                       GeneratedAssetUserData;                                       // 0x0170(0x0010)
};


// ScriptStruct  HoudiniEngineRuntime.HoudiniSplineComponentInstanceData
// Struct Size::0x0088
struct FHoudiniSplineComponentInstanceData : public FActorComponentInstanceData
{
    TArray<FTransform>                            CurvePoints;                                                  // 0x0058(0x0010)
    TArray<FVector>                               DisplayPoints;                                                // 0x0068(0x0010)
    TArray<int32_t>                               DisplayPointIndexDivider;                                     // 0x0078(0x0010)
};


// ScriptStruct  MotionWarping.MotionWarpingWindowData
// Struct Size::0x0010
struct FMotionWarpingWindowData
{
    UAnimNotifyState_MotionWarping*               AnimNotify;                                                   // 0x0000(0x0008)
    float                                         StartTime;                                                    // 0x0008(0x0004)
    float                                         EndTime;                                                      // 0x000C(0x0004)
};


// ScriptStruct  MotionWarping.MotionWarpingTarget
// Struct Size::0x0050
struct FMotionWarpingTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    TWeakObjectPtr<USceneComponent>               Component;                                                    // 0x0030(0x0008)
    FName                                         BoneName;                                                     // 0x0038(0x0008)
    bool                                          bFollowComponent;                                             // 0x0040(0x0001)
    char                                          pa_0041[0x000F]                                               // 0x0041(0x000F)
};


// ScriptStruct  MotionWarping.MotionDeltaTrackContainer
// Struct Size::0x0010
struct FMotionDeltaTrackContainer
{
    TArray<FMotionDeltaTrack>                     Tracks;                                                       // 0x0000(0x0010)
};


// ScriptStruct  MotionWarping.MotionDeltaTrack
// Struct Size::0x0048
struct FMotionDeltaTrack
{
    TArray<FTransform>                            BoneTransformTrack;                                           // 0x0000(0x0010)
    TArray<FVector>                               DeltaTranslationTrack;                                        // 0x0010(0x0010)
    TArray<FRotator>                              DeltaRotationTrack;                                           // 0x0020(0x0010)
    FVector                                       TotalTranslation;                                             // 0x0030(0x000C)
    FRotator                                      TotalRotation;                                                // 0x003C(0x000C)
};


// ScriptStruct  EditableMesh.AdaptorPolygon2Group
// Struct Size::0x0048
struct FAdaptorPolygon2Group
{
    uint32_t                                      RenderingSectionIndex;                                        // 0x0000(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x0004(0x0004)
    int32_t                                       MaxTriangles;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x003C]                                               // 0x000C(0x003C)
};


// ScriptStruct  EditableMesh.AdaptorPolygon
// Struct Size::0x0018
struct FAdaptorPolygon
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FAdaptorTriangleID>                    TriangulatedPolygonTriangleIndices;                           // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.ElementID
// Struct Size::0x0004
struct FElementID
{
    int32_t                                       IDValue;                                                      // 0x0000(0x0004)
};


// ScriptStruct  EditableMesh.AdaptorTriangleID
// Struct Size::0x0004
struct FAdaptorTriangleID : public FElementID
{
};


// ScriptStruct  MeshDescription.PolygonGroupID
// Struct Size::0x0004
struct FPolygonGroupID : public FElementID
{
};


// ScriptStruct  EditableMesh.PolygonGroupForPolygon
// Struct Size::0x0008
struct FPolygonGroupForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0004(0x0004)
};


// ScriptStruct  MeshDescription.PolygonID
// Struct Size::0x0004
struct FPolygonID : public FElementID
{
};


// ScriptStruct  EditableMesh.PolygonGroupToCreate
// Struct Size::0x0018
struct FPolygonGroupToCreate
{
    FMeshElementAttributeList                     PolygonGroupAttributes;                                       // 0x0000(0x0010)
    FPolygonGroupID                               OriginalPolygonGroupID;                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EditableMesh.MeshElementAttributeList
// Struct Size::0x0010
struct FMeshElementAttributeList
{
    TArray<FMeshElementAttributeData>             Attributes;                                                   // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.MeshElementAttributeData
// Struct Size::0x0060
struct FMeshElementAttributeData
{
    FName                                         AttributeName;                                                // 0x0000(0x0008)
    int32_t                                       AttributeIndex;                                               // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FMeshElementAttributeValue                    AttributeValue;                                               // 0x0010(0x0050)
};


// ScriptStruct  EditableMesh.MeshElementAttributeValue
// Struct Size::0x0050
struct FMeshElementAttributeValue
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  EditableMesh.VertexToMove
// Struct Size::0x0010
struct FVertexToMove
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    FVector                                       NewVertexPosition;                                            // 0x0004(0x000C)
};


// ScriptStruct  MeshDescription.VertexID
// Struct Size::0x0004
struct FVertexID : public FElementID
{
};


// ScriptStruct  EditableMesh.ChangeVertexInstancesForPolygon
// Struct Size::0x0028
struct FChangeVertexInstancesForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexIndexAndInstanceID>             PerimeterVertexIndicesAndInstanceIDs;                         // 0x0008(0x0010)
    TArray<FVertexInstancesForPolygonHole>        VertexIndicesAndInstanceIDsForEachHole;                       // 0x0018(0x0010)
};


// ScriptStruct  EditableMesh.VertexInstancesForPolygonHole
// Struct Size::0x0010
struct FVertexInstancesForPolygonHole
{
    TArray<FVertexIndexAndInstanceID>             VertexIndicesAndInstanceIDs;                                  // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.VertexIndexAndInstanceID
// Struct Size::0x0008
struct FVertexIndexAndInstanceID
{
    int32_t                                       ContourIndex;                                                 // 0x0000(0x0004)
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0004(0x0004)
};


// ScriptStruct  MeshDescription.VertexInstanceID
// Struct Size::0x0004
struct FVertexInstanceID : public FElementID
{
};


// ScriptStruct  EditableMesh.VertexAttributesForPolygon
// Struct Size::0x0028
struct FVertexAttributesForPolygon
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMeshElementAttributeList>             PerimeterVertexAttributeLists;                                // 0x0008(0x0010)
    TArray<FVertexAttributesForPolygonHole>       VertexAttributeListsForEachHole;                              // 0x0018(0x0010)
};


// ScriptStruct  EditableMesh.VertexAttributesForPolygonHole
// Struct Size::0x0010
struct FVertexAttributesForPolygonHole
{
    TArray<FMeshElementAttributeList>             VertexAttributeList;                                          // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.AttributesForEdge
// Struct Size::0x0018
struct FAttributesForEdge
{
    FEdgeID                                       EdgeID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     EdgeAttributes;                                               // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.EdgeID
// Struct Size::0x0004
struct FEdgeID : public FElementID
{
};


// ScriptStruct  EditableMesh.AttributesForVertexInstance
// Struct Size::0x0018
struct FAttributesForVertexInstance
{
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexInstanceAttributes;                                     // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.AttributesForVertex
// Struct Size::0x0018
struct FAttributesForVertex
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexAttributes;                                             // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.PolygonToSplit
// Struct Size::0x0018
struct FPolygonToSplit
{
    FPolygonID                                    PolygonID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexPair>                           VertexPairsToSplitAt;                                         // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.VertexPair
// Struct Size::0x0008
struct FVertexPair
{
    FVertexID                                     VertexID0;                                                    // 0x0000(0x0004)
    FVertexID                                     VertexID1;                                                    // 0x0004(0x0004)
};


// ScriptStruct  EditableMesh.PolygonToCreate
// Struct Size::0x0020
struct FPolygonToCreate
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVertexAndAttributes>                  PerimeterVertices;                                            // 0x0008(0x0010)
    FPolygonID                                    OriginalPolygonID;                                            // 0x0018(0x0004)
    enum class EPolygonEdgeHardness               PolygonEdgeHardness;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  EditableMesh.VertexAndAttributes
// Struct Size::0x0018
struct FVertexAndAttributes
{
    FVertexInstanceID                             VertexInstanceID;                                             // 0x0000(0x0004)
    FVertexID                                     VertexID;                                                     // 0x0004(0x0004)
    FMeshElementAttributeList                     PolygonVertexAttributes;                                      // 0x0008(0x0010)
};


// ScriptStruct  EditableMesh.EdgeToCreate
// Struct Size::0x0020
struct FEdgeToCreate
{
    FVertexID                                     VertexID0;                                                    // 0x0000(0x0004)
    FVertexID                                     VertexID1;                                                    // 0x0004(0x0004)
    FMeshElementAttributeList                     EdgeAttributes;                                               // 0x0008(0x0010)
    FEdgeID                                       OriginalEdgeID;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  EditableMesh.VertexInstanceToCreate
// Struct Size::0x0020
struct FVertexInstanceToCreate
{
    FVertexID                                     VertexID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMeshElementAttributeList                     VertexInstanceAttributes;                                     // 0x0008(0x0010)
    FVertexInstanceID                             OriginalVertexInstanceID;                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  EditableMesh.VertexToCreate
// Struct Size::0x0018
struct FVertexToCreate
{
    FMeshElementAttributeList                     VertexAttributes;                                             // 0x0000(0x0010)
    FVertexID                                     OriginalVertexID;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EditableMesh.SubdivisionLimitData
// Struct Size::0x0030
struct FSubdivisionLimitData
{
    TArray<FVector>                               VertexPositions;                                              // 0x0000(0x0010)
    TArray<FSubdivisionLimitSection>              Sections;                                                     // 0x0010(0x0010)
    TArray<FSubdividedWireEdge>                   SubdividedWireEdges;                                          // 0x0020(0x0010)
};


// ScriptStruct  EditableMesh.SubdividedWireEdge
// Struct Size::0x000C
struct FSubdividedWireEdge
{
    int32_t                                       EdgeVertex0PositionIndex;                                     // 0x0000(0x0004)
    int32_t                                       EdgeVertex1PositionIndex;                                     // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  EditableMesh.SubdivisionLimitSection
// Struct Size::0x0010
struct FSubdivisionLimitSection
{
    TArray<FSubdividedQuad>                       SubdividedQuads;                                              // 0x0000(0x0010)
};


// ScriptStruct  EditableMesh.SubdividedQuad
// Struct Size::0x00D0
struct FSubdividedQuad
{
    FSubdividedQuadVertex                         QuadVertex0;                                                  // 0x0000(0x0034)
    FSubdividedQuadVertex                         QuadVertex1;                                                  // 0x0034(0x0034)
    FSubdividedQuadVertex                         QuadVertex2;                                                  // 0x0068(0x0034)
    FSubdividedQuadVertex                         QuadVertex3;                                                  // 0x009C(0x0034)
};


// ScriptStruct  EditableMesh.SubdividedQuadVertex
// Struct Size::0x0034
struct FSubdividedQuadVertex
{
    int32_t                                       VertexPositionIndex;                                          // 0x0000(0x0004)
    FVector2D                                     TextureCoordinate0;                                           // 0x0004(0x0008)
    FVector2D                                     TextureCoordinate1;                                           // 0x000C(0x0008)
    FColor                                        VertexColor;                                                  // 0x0014(0x0004)
    FVector                                       VertexNormal;                                                 // 0x0018(0x000C)
    FVector                                       VertexTangent;                                                // 0x0024(0x000C)
    float                                         VertexBinormalSign;                                           // 0x0030(0x0004)
};


// ScriptStruct  EditableMesh.RenderingPolygonGroup
// Struct Size::0x0048
struct FRenderingPolygonGroup
{
    uint32_t                                      RenderingSectionIndex;                                        // 0x0000(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x0004(0x0004)
    int32_t                                       MaxTriangles;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x003C]                                               // 0x000C(0x003C)
};


// ScriptStruct  EditableMesh.RenderingPolygon
// Struct Size::0x0018
struct FRenderingPolygon
{
    FPolygonGroupID                               PolygonGroupID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTriangleID>                           TriangulatedPolygonTriangleIndices;                           // 0x0008(0x0010)
};


// ScriptStruct  MeshDescription.TriangleID
// Struct Size::0x0004
struct FTriangleID : public FElementID
{
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionParams
// Struct Size::0x0030
struct FMovieSceneGeometryCollectionParams
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FSoftObjectPath                               GeometryCollectionCache;                                      // 0x0008(0x0018)
    FFrameNumber                                  StartFrameOffset;                                             // 0x0020(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0024(0x0004)
    float                                         PlayRate;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplateBase
// Struct Size::0x0010
struct FMovieSceneEvalTemplateBase
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplate
// Struct Size::0x0020
struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    TWeakObjectPtr<UMovieSceneSection>            SourceSectionPtr;                                             // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplate
// Struct Size::0x0058
struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGeometryCollectionSectionTemplateParametersParams;                                               // 0x0020(0x0038)
};


// ScriptStruct  GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplateParameters
// Struct Size::0x0038
struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0030(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0034(0x0004)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshSection
// Struct Size::0x0040
struct FProcMeshSection
{
    TArray<FProcMeshVertex>                       ProcVertexBuffer;                                             // 0x0000(0x0010)
    TArray<uint32_t>                              ProcIndexBuffer;                                              // 0x0010(0x0010)
    FBox                                          SectionLocalBox;                                              // 0x0020(0x001C)
    bool                                          bEnableCollision;                                             // 0x003C(0x0001)
    bool                                          bSectionVisible;                                              // 0x003D(0x0001)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshVertex
// Struct Size::0x004C
struct FProcMeshVertex
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FVector                                       Normal;                                                       // 0x000C(0x000C)
    FProcMeshTangent                              Tangent;                                                      // 0x0018(0x0010)
    FColor                                        Color;                                                        // 0x0028(0x0004)
    FVector2D                                     UV0;                                                          // 0x002C(0x0008)
    FVector2D                                     UV1;                                                          // 0x0034(0x0008)
    FVector2D                                     UV2;                                                          // 0x003C(0x0008)
    FVector2D                                     UV3;                                                          // 0x0044(0x0008)
};


// ScriptStruct  ProceduralMeshComponent.ProcMeshTangent
// Struct Size::0x0010
struct FProcMeshTangent
{
    FVector                                       TangentX;                                                     // 0x0000(0x000C)
    bool                                          bFlipTangentY;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  DatasmithContent.DatasmithCameraLookatTrackingSettingsTemplate
// Struct Size::0x0030
struct FDatasmithCameraLookatTrackingSettingsTemplate
{
    char                                          bEnableLookAtTracking;                                        // 0x0000(0x0001)
    char                                          bAllowRoll;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0008(0x0028)
};


// ScriptStruct  DatasmithContent.DatasmithPostProcessSettingsTemplate
// Struct Size::0x0040
struct FDatasmithPostProcessSettingsTemplate
{
    char                                          bOverride_WhiteTemp;                                          // 0x0000(0x0001)
    char                                          bOverride_ColorSaturation;                                    // 0x0000(0x0001)
    char                                          bOverride_VignetteIntensity;                                  // 0x0000(0x0001)
    char                                          bOverride_FilmWhitePoint;                                     // 0x0000(0x0001)
    char                                          bOverride_AutoExposureMethod;                                 // 0x0000(0x0001)
    char                                          bOverride_CameraISO;                                          // 0x0000(0x0001)
    char                                          bOverride_CameraShutterSpeed;                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    char                                          bOverride_DepthOfFieldFstop;                                  // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         WhiteTemp;                                                    // 0x0008(0x0004)
    float                                         VignetteIntensity;                                            // 0x000C(0x0004)
    FLinearColor                                  FilmWhitePoint;                                               // 0x0010(0x0010)
    FVector4                                      ColorSaturation;                                              // 0x0020(0x0010)
    enum class EAutoExposureMethod                AutoExposureMethod;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         CameraISO;                                                    // 0x0034(0x0004)
    float                                         CameraShutterSpeed;                                           // 0x0038(0x0004)
    float                                         DepthOfFieldFstop;                                            // 0x003C(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithCameraFocusSettingsTemplate
// Struct Size::0x0008
struct FDatasmithCameraFocusSettingsTemplate
{
    enum class ECameraFocusMethod                 FocusMethod;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ManualFocusDistance;                                          // 0x0004(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithCameraLensSettingsTemplate
// Struct Size::0x0004
struct FDatasmithCameraLensSettingsTemplate
{
    float                                         MaxFStop;                                                     // 0x0000(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithCameraFilmbackSettingsTemplate
// Struct Size::0x0008
struct FDatasmithCameraFilmbackSettingsTemplate
{
    float                                         SensorWidth;                                                  // 0x0000(0x0004)
    float                                         SensorHeight;                                                 // 0x0004(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithTessellationOptions
// Struct Size::0x0010
struct FDatasmithTessellationOptions
{
    float                                         ChordTolerance;                                               // 0x0000(0x0004)
    float                                         MaxEdgeLength;                                                // 0x0004(0x0004)
    float                                         NormalTolerance;                                              // 0x0008(0x0004)
    enum class EDatasmithCADStitchingTechnique    StitchingTechnique;                                           // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  DatasmithContent.DatasmithImportBaseOptions
// Struct Size::0x0014
struct FDatasmithImportBaseOptions
{
    enum class EDatasmithImportScene              SceneHandling;                                                // 0x0000(0x0001)
    bool                                          bIncludeGeometry;                                             // 0x0001(0x0001)
    bool                                          bIncludeMaterial;                                             // 0x0002(0x0001)
    bool                                          bIncludeLight;                                                // 0x0003(0x0001)
    bool                                          bIncludeCamera;                                               // 0x0004(0x0001)
    bool                                          bIncludeAnimation;                                            // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FDatasmithAssetImportOptions                  AssetOptions;                                                 // 0x0008(0x0008)
    FDatasmithStaticMeshImportOptions             StaticMeshOptions;                                            // 0x0010(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithStaticMeshImportOptions
// Struct Size::0x0004
struct FDatasmithStaticMeshImportOptions
{
    enum class EDatasmithImportLightmapMin        MinLightmapResolution;                                        // 0x0000(0x0001)
    enum class EDatasmithImportLightmapMax        MaxLightmapResolution;                                        // 0x0001(0x0001)
    bool                                          bGenerateLightmapUVs;                                         // 0x0002(0x0001)
    bool                                          bRemoveDegenerates;                                           // 0x0003(0x0001)
};


// ScriptStruct  DatasmithContent.DatasmithAssetImportOptions
// Struct Size::0x0008
struct FDatasmithAssetImportOptions
{
    FName                                         PackagePath;                                                  // 0x0000(0x0008)
};


// ScriptStruct  DatasmithContent.DatasmithReimportOptions
// Struct Size::0x0002
struct FDatasmithReimportOptions
{
    bool                                          bUpdateActors;                                                // 0x0000(0x0001)
    bool                                          bRespawnDeletedActors;                                        // 0x0001(0x0001)
};


// ScriptStruct  DatasmithContent.DatasmithStaticParameterSetTemplate
// Struct Size::0x0050
struct FDatasmithStaticParameterSetTemplate
{
    TMap<FName,bool>                              StaticSwitchParameters;                                       // 0x0000(0x0050)
};


// ScriptStruct  DatasmithContent.DatasmithMeshSectionInfoMapTemplate
// Struct Size::0x0050
struct FDatasmithMeshSectionInfoMapTemplate
{
    TMap<uint32_t,FDatasmithMeshSectionInfoTemplate>Map;                                                        // 0x0000(0x0050)
};


// ScriptStruct  DatasmithContent.DatasmithMeshSectionInfoTemplate
// Struct Size::0x0004
struct FDatasmithMeshSectionInfoTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
};


// ScriptStruct  DatasmithContent.DatasmithStaticMaterialTemplate
// Struct Size::0x0010
struct FDatasmithStaticMaterialTemplate
{
    FName                                         MaterialSlotName;                                             // 0x0000(0x0008)
    UMaterialInterface*                           MaterialInterface;                                            // 0x0008(0x0008)
};


// ScriptStruct  DatasmithContent.DatasmithMeshBuildSettingsTemplate
// Struct Size::0x0010
struct FDatasmithMeshBuildSettingsTemplate
{
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bBuildAdjacencyBuffer;                                        // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0000(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       MinLightmapResolution;                                        // 0x0004(0x0004)
    int32_t                                       SrcLightmapIndex;                                             // 0x0008(0x0004)
    int32_t                                       DstLightmapIndex;                                             // 0x000C(0x0004)
};


// ScriptStruct  VariantManagerContent.FunctionCaller
// Struct Size::0x0008
struct FFunctionCaller
{
    FName                                         FunctionName;                                                 // 0x0000(0x0008)
};


// ScriptStruct  VariantManagerContent.CapturedPropSegment
// Struct Size::0x0028
struct FCapturedPropSegment
{
    FString                                       PropertyName;                                                 // 0x0000(0x0010)
    int32_t                                       PropertyIndex;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ComponentName;                                                // 0x0018(0x0010)
};


// ScriptStruct  LimNativeWidget.ChatLogicMessageData
// Struct Size::0x0010
struct FChatLogicMessageData
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FLimNativeDataObjectBase                      BizObj;                                                       // 0x0008(0x0008)
};


// ScriptStruct  LimNativeWidget.NertcUserUpdateData
// Struct Size::0x0010
struct FNertcUserUpdateData
{
    TArray<FString>                               UserList;                                                     // 0x0000(0x0010)
};


// ScriptStruct  LimNative.LimNativeOnMsgLogicReceivedData
// Struct Size::0x0038
struct FLimNativeOnMsgLogicReceivedData : public FLimNativeDataCallBackDataBase
{
    TArray<FLimNativeCommonMsg>                   CommonMessage;                                                // 0x0028(0x0010)
};


// ScriptStruct  LimNative.LimNativeBizObjFriendBase
// Struct Size::0x0048
struct FLimNativeBizObjFriendBase : public FLimNativeDataObjectBase
{
    FString                                       Uid;                                                          // 0x0008(0x0010)
    FString                                       NickName;                                                     // 0x0018(0x0010)
    FString                                       AvatarUrl;                                                    // 0x0028(0x0010)
    FString                                       AvatarFrameUrl;                                               // 0x0038(0x0010)
};


// ScriptStruct  LimNative.LimNativeBizObjRefreshFriend
// Struct Size::0x0058
struct FLimNativeBizObjRefreshFriend : public FLimNativeBizObjFriendBase
{
    FString                                       EmblemUrls;                                                   // 0x0048(0x0010)
};


// ScriptStruct  LimNative.LimNativeBizObjFriendRequest
// Struct Size::0x0098
struct FLimNativeBizObjFriendRequest : public FLimNativeBizObjFriendBase
{
    FString                                       RequestID;                                                    // 0x0048(0x0010)
    FString                                       RequestMsg;                                                   // 0x0058(0x0010)
    FString                                       RequestSource;                                                // 0x0068(0x0010)
    FString                                       Timestamp;                                                    // 0x0078(0x0010)
    FString                                       Lang;                                                         // 0x0088(0x0010)
};


// ScriptStruct  LimNative.LimNativeBizObjGroupBase
// Struct Size::0x0018
struct FLimNativeBizObjGroupBase : public FLimNativeDataObjectBase
{
    FString                                       groupid;                                                      // 0x0008(0x0010)
};


// ScriptStruct  LimNative.LimNativeBizObjExitGroup
// Struct Size::0x0030
struct FLimNativeBizObjExitGroup : public FLimNativeBizObjGroupBase
{
    enum class ELimNativeGroupType                Type;                                                         // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       Uid;                                                          // 0x0020(0x0010)
};


// ScriptStruct  LimNative.LimNativeBizObjGroupPerms
// Struct Size::0x0028
struct FLimNativeBizObjGroupPerms : public FLimNativeBizObjGroupBase
{
    FString                                       Perms;                                                        // 0x0018(0x0010)
};


// ScriptStruct  LimNative.LimNativeIMNotificationMessage
// Struct Size::0x0068
struct FLimNativeIMNotificationMessage : public FLimNativeIMChatMessageBase
{
    FString                                       Text;                                                         // 0x0058(0x0010)
};


// ScriptStruct  LimNative.LimNativeEventDataBase
// Struct Size::0x0040
struct FLimNativeEventDataBase : public FLimNativeDataObjectBase
{
    FString                                       JsonData;                                                     // 0x0008(0x0010)
    FString                                       ErrorCode;                                                    // 0x0018(0x0010)
    FString                                       Message;                                                      // 0x0028(0x0010)
    enum class ELimNativeEventType                EventCode;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  LLHSDK.LLHSDKCustomerServiceExtra
// Struct Size::0x0060
struct FLLHSDKCustomerServiceExtra
{
    TArray<FString>                               Tags;                                                         // 0x0000(0x0010)
    TMap<FString,FString>                         CustomParams;                                                 // 0x0010(0x0050)
};


// ScriptStruct  LLHSDK.LLHSDKLocaleInfo
// Struct Size::0x0020
struct FLLHSDKLocaleInfo
{
    FString                                       Language;                                                     // 0x0000(0x0010)
    FString                                       Region;                                                       // 0x0010(0x0010)
};


// ScriptStruct  LLHSDK.LLHSDKGenericSkuSubItemsDetailList
// Struct Size::0x0010
struct FLLHSDKGenericSkuSubItemsDetailList
{
    TArray<FLLHSDKGoogleSkuSubItemDetail>         Items;                                                        // 0x0000(0x0010)
};


// ScriptStruct  LLHSDK.LLHSDKGoogleSkuSubItemDetail
// Struct Size::0x0050
struct FLLHSDKGoogleSkuSubItemDetail
{
    enum class ELLHSDKPayGenericSkuItemType       ItemType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Title;                                                        // 0x0008(0x0010)
    FString                                       Desc;                                                         // 0x0018(0x0010)
    FString                                       Sku;                                                          // 0x0028(0x0010)
    int32_t                                       SubGoodsSize;                                                 // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<FLLHSDKGoogleSkuSubGood>               SubGoods;                                                     // 0x0040(0x0010)
};


// ScriptStruct  LLHSDK.LLHSDKGoogleSkuSubGood
// Struct Size::0x0038
struct FLLHSDKGoogleSkuSubGood
{
    FString                                       OfferToken;                                                   // 0x0000(0x0010)
    int32_t                                       CombineSize;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FLLHSDKGoogleSubCombineItem>           CombineItems;                                                 // 0x0018(0x0010)
    TArray<FString>                               OfferTags;                                                    // 0x0028(0x0010)
};


// ScriptStruct  LLHSDK.LLHSDKGoogleSubCombineItem
// Struct Size::0x0070
struct FLLHSDKGoogleSubCombineItem
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       ProductID;                                                    // 0x0008(0x0010)
    FString                                       CombineItemName1;                                             // 0x0018(0x0010)
    FString                                       CombineItemName2;                                             // 0x0028(0x0010)
    FString                                       Price;                                                        // 0x0038(0x0010)
    FString                                       Currency;                                                     // 0x0048(0x0010)
    int32_t                                       PriceAmountMicros;                                            // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       SdkConvertSymbol;                                             // 0x0060(0x0010)
};


// ScriptStruct  OnlineSubsystem.NamedInterfaceDef
// Struct Size::0x0018
struct FNamedInterfaceDef
{
    FName                                         InterfaceName;                                                // 0x0000(0x0008)
    FString                                       InterfaceClassName;                                           // 0x0008(0x0010)
};


// ScriptStruct  OnlineSubsystem.NamedInterface
// Struct Size::0x0010
struct FNamedInterface
{
    FName                                         InterfaceName;                                                // 0x0000(0x0008)
    UObject*                                      InterfaceObject;                                              // 0x0008(0x0008)
};


// ScriptStruct  OnlineSubsystem.InAppPurchaseProductRequest
// Struct Size::0x0018
struct FInAppPurchaseProductRequest
{
    FString                                       ProductIdentifier;                                            // 0x0000(0x0010)
    bool                                          bIsConsumable;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseReceiptInfo
// Struct Size::0x0030
struct FInAppPurchaseReceiptInfo
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemID;                                                       // 0x0010(0x0010)
    FString                                       ValidationInfo;                                               // 0x0020(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductInfo2
// Struct Size::0x00F8
struct FInAppPurchaseProductInfo2
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       TransactionIdentifier;                                        // 0x0010(0x0010)
    FString                                       DisplayName;                                                  // 0x0020(0x0010)
    FString                                       DisplayDescription;                                           // 0x0030(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0040(0x0010)
    float                                         RawPrice;                                                     // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       CurrencyCode;                                                 // 0x0058(0x0010)
    FString                                       CurrencySymbol;                                               // 0x0068(0x0010)
    FString                                       DecimalSeparator;                                             // 0x0078(0x0010)
    FString                                       GroupingSeparator;                                            // 0x0088(0x0010)
    FString                                       ReceiptData;                                                  // 0x0098(0x0010)
    TMap<FString,FString>                         DynamicFields;                                                // 0x00A8(0x0050)
};


// ScriptStruct  OnlineSubsystemUtils.InAppPurchaseProductRequest2
// Struct Size::0x0018
struct FInAppPurchaseProductRequest2
{
    FString                                       ProductIdentifier;                                            // 0x0000(0x0010)
    bool                                          bIsConsumable;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  OnlineSubsystemUtils.PlayerReservation
// Struct Size::0x0050
struct FPlayerReservation
{
    FUniqueNetIdRepl                              UniqueId;                                                     // 0x0000(0x0028)
    FString                                       ValidationStr;                                                // 0x0028(0x0010)
    FString                                       Platform;                                                     // 0x0038(0x0010)
    bool                                          bAllowCrossplay;                                              // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         ElapsedTime;                                                  // 0x004C(0x0004)
};


// ScriptStruct  OnlineSubsystemUtils.PIELoginSettingsInternal
// Struct Size::0x0040
struct FPIELoginSettingsInternal
{
    FString                                       ID;                                                           // 0x0000(0x0010)
    FString                                       Token;                                                        // 0x0010(0x0010)
    FString                                       Type;                                                         // 0x0020(0x0010)
    TArray<char>                                  TokenBytes;                                                   // 0x0030(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.PartyReservation
// Struct Size::0x0050
struct FPartyReservation
{
    int32_t                                       TeamNum;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FUniqueNetIdRepl                              PartyLeader;                                                  // 0x0008(0x0028)
    TArray<FPlayerReservation>                    PartyMembers;                                                 // 0x0030(0x0010)
    TArray<FPlayerReservation>                    RemovedPartyMembers;                                          // 0x0040(0x0010)
};


// ScriptStruct  OnlineSubsystemUtils.SpectatorReservation
// Struct Size::0x0078
struct FSpectatorReservation
{
    FUniqueNetIdRepl                              SpectatorId;                                                  // 0x0000(0x0028)
    FPlayerReservation                            Spectator;                                                    // 0x0028(0x0050)
};


// ScriptStruct  SolarUtils.SolarAggregationTickFunction
// Struct Size::0x0030
struct FSolarAggregationTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  UnLua.PropertyCollector
// Struct Size::0x0001
struct FPropertyCollector
{
    FTutorialTableRow                             None;                                                         // 0x0000(0x0098)
    FInputKeyMappingEntry                         None;                                                         // 0x0000(0x0040)
};


// ScriptStruct  UnLua.InSightEvent
// Struct Size::0x0001
struct FInSightEvent
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  CommonUI.CommonInputActionHandlerData
// Struct Size::0x0020
struct FCommonInputActionHandlerData
{
    FDataTableRowHandle                           InputActionRow;                                               // 0x0000(0x0010)
    enum class EInputActionState                  State;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
};


// ScriptStruct  CommonUI.CommonButtonStyleOptionalSlateSound
// Struct Size::0x0020
struct FCommonButtonStyleOptionalSlateSound
{
    bool                                          bHasSound;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSlateSound                                   Sound;                                                        // 0x0008(0x0018)
};


// ScriptStruct  CommonUI.CommonAnalogCursorSettings
// Struct Size::0x0028
struct FCommonAnalogCursorSettings
{
    int32_t                                       PreprocessorPriority;                                         // 0x0000(0x0004)
    bool                                          bEnableCursorAcceleration;                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         CursorAcceleration;                                           // 0x0008(0x0004)
    float                                         CursorMaxSpeed;                                               // 0x000C(0x0004)
    float                                         CursorDeadZone;                                               // 0x0010(0x0004)
    float                                         CursorRadius;                                                 // 0x0014(0x0004)
    float                                         HoverSlowdownFactor;                                          // 0x0018(0x0004)
    float                                         ScrollDeadZone;                                               // 0x001C(0x0004)
    float                                         ScrollUpdatePeriod;                                           // 0x0020(0x0004)
    float                                         ScrollMultiplier;                                             // 0x0024(0x0004)
};


// ScriptStruct  CommonUI.UIInputAction
// Struct Size::0x0030
struct FUIInputAction
{
    FUIActionTag                                  ActionTag;                                                    // 0x0000(0x0008)
    FText                                         DefaultDisplayName;                                           // 0x0008(0x0018)
    TArray<FUIActionKeyMapping>                   KeyMappings;                                                  // 0x0020(0x0010)
};


// ScriptStruct  CommonUI.UIActionKeyMapping
// Struct Size::0x0020
struct FUIActionKeyMapping
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    float                                         HoldTime;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  CommonUI.UITag
// Struct Size::0x0008
struct FUITag : public FGameplayTag
{
};


// ScriptStruct  CommonUI.UIActionTag
// Struct Size::0x0008
struct FUIActionTag : public FUITag
{
};


// ScriptStruct  CommonUI.RichTextIconData
// Struct Size::0x0050
struct FRichTextIconData : public FTableRowBase
{
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    TSoftObjectPtr<UObject>                       ResourceObject;                                               // 0x0020(0x0028)
    FVector2D                                     ImageSize;                                                    // 0x0048(0x0008)
};


// ScriptStruct  CommonUI.CommonInputActionDataBase
// Struct Size::0x03C0
struct FCommonInputActionDataBase : public FTableRowBase
{
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    FText                                         HoldDisplayName;                                              // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FCommonInputTypeInfo                          KeyboardInputTypeInfo;                                        // 0x0040(0x0110)
    FCommonInputTypeInfo                          DefaultGamepadInputTypeInfo;                                  // 0x0150(0x0110)
    TMap<FName,FCommonInputTypeInfo>              GamepadInputOverrides;                                        // 0x0260(0x0050)
    FCommonInputTypeInfo                          TouchInputTypeInfo;                                           // 0x02B0(0x0110)
};


// ScriptStruct  CommonUI.CommonInputTypeInfo
// Struct Size::0x0110
struct FCommonInputTypeInfo
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    enum class EInputActionState                  OverrrideState;                                               // 0x0018(0x0001)
    bool                                          bActionRequiresHold;                                          // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         HoldTime;                                                     // 0x001C(0x0004)
    FSlateBrush                                   OverrideBrush;                                                // 0x0020(0x00F0)
};


// ScriptStruct  CommonInput.CommonInputPlatformBaseData
// Struct Size::0x0048
struct FCommonInputPlatformBaseData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    bool                                          bSupported;                                                   // 0x0008(0x0001)
    enum class ECommonInputType                   DefaultInputType;                                             // 0x0009(0x0001)
    bool                                          bSupportsMouseAndKeyboard;                                    // 0x000A(0x0001)
    bool                                          bSupportsGamepad;                                             // 0x000B(0x0001)
    FName                                         DefaultGamepadName;                                           // 0x000C(0x0008)
    bool                                          bCanChangeGamepadType;                                        // 0x0014(0x0001)
    bool                                          bSupportsTouch;                                               // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    TArray<TSoftClassPtr<UObject>>                ControllerData;                                               // 0x0018(0x0010)
    TArray<UCommonInputBaseControllerData*>       ControllerDataClasses;                                        // 0x0028(0x0010)
    TArray<FCommonInputControllerSimpleData>      ControllerSimpleData;                                         // 0x0038(0x0010)
};


// ScriptStruct  CommonInput.CommonInputControllerSimpleData
// Struct Size::0x0018
struct FCommonInputControllerSimpleData
{
    FName                                         GamepadName;                                                  // 0x0000(0x0008)
    TArray<FInputDeviceIdentifierPair>            GamepadHardwareIdMapping;                                     // 0x0008(0x0010)
};


// ScriptStruct  CommonInput.InputDeviceIdentifierPair
// Struct Size::0x0018
struct FInputDeviceIdentifierPair
{
    FName                                         InputDeviceName;                                              // 0x0000(0x0008)
    FString                                       HardwareDeviceIdentifier;                                     // 0x0008(0x0010)
};


// ScriptStruct  CommonInput.CommonInputKeySetBrushConfiguration
// Struct Size::0x0100
struct FCommonInputKeySetBrushConfiguration
{
    TArray<FKey>                                  Keys;                                                         // 0x0000(0x0010)
    FSlateBrush                                   KeyBrush;                                                     // 0x0010(0x00F0)
};


// ScriptStruct  CommonInput.CommonInputKeyBrushConfiguration
// Struct Size::0x0110
struct FCommonInputKeyBrushConfiguration
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FSlateBrush                                   KeyBrush;                                                     // 0x0020(0x00F0)
};


// ScriptStruct  SolarWebBrowser.WebJSCallbackBase
// Struct Size::0x0020
struct FWebJSCallbackBase
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  SolarWebBrowser.WebJSResponse
// Struct Size::0x0020
struct FWebJSResponse : public FWebJSCallbackBase
{
};


// ScriptStruct  SolarWebBrowser.WebJSFunction
// Struct Size::0x0020
struct FWebJSFunction : public FWebJSCallbackBase
{
};


// ScriptStruct  RawInput.RegisteredDeviceInfo
// Struct Size::0x0020
struct FRegisteredDeviceInfo
{
    int32_t                                       Handle;                                                       // 0x0000(0x0004)
    int32_t                                       VendorID;                                                     // 0x0004(0x0004)
    int32_t                                       ProductID;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       DeviceName;                                                   // 0x0010(0x0010)
};


// ScriptStruct  RawInput.RawInputDeadzoneConfiguration
// Struct Size::0x0018
struct FRawInputDeadzoneConfiguration
{
    float                                         Deadzone;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FKey>                                  Keys;                                                         // 0x0008(0x0010)
};


// ScriptStruct  RawInput.RawInputDeviceConfiguration
// Struct Size::0x0040
struct FRawInputDeviceConfiguration
{
    FString                                       VendorID;                                                     // 0x0000(0x0010)
    FString                                       ProductID;                                                    // 0x0010(0x0010)
    TArray<FRawInputDeviceAxisProperties>         AxisProperties;                                               // 0x0020(0x0010)
    TArray<FRawInputDeviceButtonProperties>       ButtonProperties;                                             // 0x0030(0x0010)
};


// ScriptStruct  RawInput.RawInputDeviceButtonProperties
// Struct Size::0x0020
struct FRawInputDeviceButtonProperties
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FKey                                          Key;                                                          // 0x0008(0x0018)
};


// ScriptStruct  RawInput.RawInputDeviceAxisProperties
// Struct Size::0x0028
struct FRawInputDeviceAxisProperties
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FKey                                          Key;                                                          // 0x0008(0x0018)
    char                                          bInverted;                                                    // 0x0020(0x0001)
    char                                          bGamepadStick;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Offset;                                                       // 0x0024(0x0004)
};


// ScriptStruct  AnimationCore.NodeHierarchyWithUserData
// Struct Size::0x0078
struct FNodeHierarchyWithUserData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FNodeHierarchyData                            Hierarchy;                                                    // 0x0008(0x0070)
};


// ScriptStruct  AnimationCore.NodeHierarchyData
// Struct Size::0x0070
struct FNodeHierarchyData
{
    TArray<FNodeObject>                           Nodes;                                                        // 0x0000(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0010(0x0010)
    TMap<FName,int32_t>                           NodeNameToIndexMapping;                                       // 0x0020(0x0050)
};


// ScriptStruct  AnimationCore.NodeObject
// Struct Size::0x0010
struct FNodeObject
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         ParentName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.AnimationHierarchy
// Struct Size::0x0088
struct FAnimationHierarchy : public FNodeHierarchyWithUserData
{
    TArray<FConstraintNodeData>                   UserData;                                                     // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.ConstraintNodeData
// Struct Size::0x00B0
struct FConstraintNodeData
{
    FTransform                                    RelativeParent;                                               // 0x0000(0x0030)
    FConstraintOffset                             ConstraintOffset;                                             // 0x0030(0x0060)
    FName                                         LinkedNode;                                                   // 0x0090(0x0008)
    TArray<FTransformConstraint>                  Constraints;                                                  // 0x0098(0x0010)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  AnimationCore.TransformConstraint
// Struct Size::0x0028
struct FTransformConstraint
{
    FConstraintDescription                        Operator;                                                     // 0x0000(0x000D)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         SourceNode;                                                   // 0x0010(0x0008)
    FName                                         TargetNode;                                                   // 0x0018(0x0008)
    float                                         Weight;                                                       // 0x0020(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AnimationCore.ConstraintDescription
// Struct Size::0x000D
struct FConstraintDescription
{
    bool                                          bTranslation;                                                 // 0x0000(0x0001)
    bool                                          bRotation;                                                    // 0x0001(0x0001)
    bool                                          bScale;                                                       // 0x0002(0x0001)
    bool                                          bParent;                                                      // 0x0003(0x0001)
    FFilterOptionPerAxis                          TranslationAxes;                                              // 0x0004(0x0003)
    FFilterOptionPerAxis                          RotationAxes;                                                 // 0x0007(0x0003)
    FFilterOptionPerAxis                          ScaleAxes;                                                    // 0x000A(0x0003)
};


// ScriptStruct  AnimationCore.FilterOptionPerAxis
// Struct Size::0x0003
struct FFilterOptionPerAxis
{
    bool                                          bX;                                                           // 0x0000(0x0001)
    bool                                          bY;                                                           // 0x0001(0x0001)
    bool                                          bZ;                                                           // 0x0002(0x0001)
};


// ScriptStruct  AnimationCore.ConstraintOffset
// Struct Size::0x0060
struct FConstraintOffset
{
    FVector                                       Translation;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FVector                                       Scale;                                                        // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Parent;                                                       // 0x0030(0x0030)
};


// ScriptStruct  Engine.AnimNode_Base
// Struct Size::0x0010
struct FAnimNode_Base
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNode_CustomProperty
// Struct Size::0x0058
struct FAnimNode_CustomProperty : public FAnimNode_Base
{
    TArray<FName>                                 SourcePropertyNames;                                          // 0x0010(0x0010)
    TArray<FName>                                 DestPropertyNames;                                            // 0x0020(0x0010)
    UObject*                                      TargetInstance;                                               // 0x0030(0x0008)
    char                                          pa_0038[0x0020]                                               // 0x0038(0x0020)
};


// ScriptStruct  ControlRig.AnimNode_ControlRigBase
// Struct Size::0x0170
struct FAnimNode_ControlRigBase : public FAnimNode_CustomProperty
{
    FPoseLink                                     Source;                                                       // 0x0058(0x0010)
    TMap<FName,uint16_t>                          ControlRigBoneMapping;                                        // 0x0068(0x0050)
    TMap<FName,uint16_t>                          ControlRigCurveMapping;                                       // 0x00B8(0x0050)
    TMap<FName,uint16_t>                          InputToCurveMappingUIDs;                                      // 0x0108(0x0050)
    TWeakObjectPtr<UNodeMappingContainer>         NodeMappingContainer;                                         // 0x0158(0x0008)
    FControlRigIOSettings                         InputSettings;                                                // 0x0160(0x0002)
    FControlRigIOSettings                         OutputSettings;                                               // 0x0162(0x0002)
    bool                                          bExecute;                                                     // 0x0164(0x0001)
    char                                          pa_0165[0x000B]                                               // 0x0165(0x000B)
};


// ScriptStruct  ControlRig.ControlRigIOSettings
// Struct Size::0x0002
struct FControlRigIOSettings
{
    bool                                          bUpdatePose;                                                  // 0x0000(0x0001)
    bool                                          bUpdateCurves;                                                // 0x0001(0x0001)
};


// ScriptStruct  Engine.PoseLinkBase
// Struct Size::0x0010
struct FPoseLinkBase
{
    int32_t                                       LinkID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
};


// ScriptStruct  Engine.PoseLink
// Struct Size::0x0010
struct FPoseLink : public FPoseLinkBase
{
};


// ScriptStruct  ControlRig.AnimNode_ControlRig
// Struct Size::0x0360
struct FAnimNode_ControlRig : public FAnimNode_ControlRigBase
{
    UControlRig*                                  ControlRigClass;                                              // 0x0170(0x0008)
    UControlRig*                                  ControlRig;                                                   // 0x0178(0x0008)
    float                                         Alpha;                                                        // 0x0180(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0184(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0185(0x0001)
    char                                          pa_0186[0x0002]                                               // 0x0186(0x0002)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0188(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0190(0x0048)
    FName                                         AlphaCurveName;                                               // 0x01D8(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x01E0(0x0030)
    TMap<FName,FName>                             InputMapping;                                                 // 0x0210(0x0050)
    TMap<FName,FName>                             OutputMapping;                                                // 0x0260(0x0050)
    char                                          pa_02B0[0x00B0]                                               // 0x02B0(0x00B0)
};


// ScriptStruct  Engine.InputScaleBiasClamp
// Struct Size::0x0030
struct FInputScaleBiasClamp
{
    bool                                          bMapRange;                                                    // 0x0000(0x0001)
    bool                                          bClampResult;                                                 // 0x0001(0x0001)
    bool                                          bInterpResult;                                                // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FInputRange                                   InRange;                                                      // 0x0004(0x0008)
    FInputRange                                   OutRange;                                                     // 0x000C(0x0008)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    float                                         ClampMin;                                                     // 0x001C(0x0004)
    float                                         ClampMax;                                                     // 0x0020(0x0004)
    float                                         InterpSpeedIncreasing;                                        // 0x0024(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.InputRange
// Struct Size::0x0008
struct FInputRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.InputAlphaBoolBlend
// Struct Size::0x0048
struct FInputAlphaBoolBlend
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0008(0x0001)
    bool                                          bInitialized;                                                 // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    UCurveFloat*                                  CustomCurve;                                                  // 0x0010(0x0008)
    FAlphaBlend                                   AlphaBlend;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.AlphaBlend
// Struct Size::0x0030
struct FAlphaBlend
{
    UCurveFloat*                                  CustomCurve;                                                  // 0x0000(0x0008)
    float                                         BlendTime;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0018]                                               // 0x000C(0x0018)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x000B]                                               // 0x0025(0x000B)
};


// ScriptStruct  Engine.InputScaleBias
// Struct Size::0x0008
struct FInputScaleBias
{
    float                                         Scale;                                                        // 0x0000(0x0004)
    float                                         Bias;                                                         // 0x0004(0x0004)
};


// ScriptStruct  ControlRig.AnimNode_ControlRig_ExternalSource
// Struct Size::0x0178
struct FAnimNode_ControlRig_ExternalSource : public FAnimNode_ControlRigBase
{
    TWeakObjectPtr<UControlRig>                   ControlRig;                                                   // 0x0170(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSpawnSectionTemplate
// Struct Size::0x00B0
struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneBoolChannel                        Curve;                                                        // 0x0020(0x0090)
};


// ScriptStruct  MovieScene.MovieSceneChannel
// Struct Size::0x0008
struct FMovieSceneChannel
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneBoolChannel
// Struct Size::0x0090
struct FMovieSceneBoolChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    bool                                          DefaultValue;                                                 // 0x0018(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<bool>                                  Values;                                                       // 0x0020(0x0010)
    char                                          pa_0030[0x0060]                                               // 0x0030(0x0060)
};


// ScriptStruct  ControlRig.ControlRigBindingTemplate
// Struct Size::0x00B0
struct FControlRigBindingTemplate : public FMovieSceneSpawnSectionTemplate
{
};


// ScriptStruct  ControlRig.ControlRigComponentInstanceData
// Struct Size::0x0060
struct FControlRigComponentInstanceData : public FActorComponentInstanceData
{
    UControlRig*                                  AnimControlRig;                                               // 0x0058(0x0008)
};


// ScriptStruct  RigVM.RigVMExecuteContext
// Struct Size::0x0010
struct FRigVMExecuteContext
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.ControlRigExecuteContext
// Struct Size::0x0018
struct FControlRigExecuteContext : public FRigVMExecuteContext
{
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ControlRig.ControlRigDrawContainer
// Struct Size::0x0010
struct FControlRigDrawContainer
{
    TArray<FControlRigDrawInstruction>            Instructions;                                                 // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.ControlRigDrawInstruction
// Struct Size::0x0070
struct FControlRigDrawInstruction
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EControlRigDrawSettings            PrimitiveType;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FVector>                               Positions;                                                    // 0x0010(0x0010)
    FLinearColor                                  Color;                                                        // 0x0020(0x0010)
    float                                         Thickness;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FTransform                                    Transform;                                                    // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.ControlRigDrawInterface
// Struct Size::0x0018
struct FControlRigDrawInterface : public FControlRigDrawContainer
{
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  ControlRig.ControlRigGizmoDefinition
// Struct Size::0x0060
struct FControlRigGizmoDefinition
{
    FName                                         GizmoName;                                                    // 0x0000(0x0008)
    TSoftObjectPtr<UStaticMesh>                   StaticMesh;                                                   // 0x0008(0x0028)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
};


// ScriptStruct  Engine.AnimInstanceProxy
// Struct Size::0x06E0
struct FAnimInstanceProxy
{
    char                                          pa_0000[0x06E0]                                               // 0x0000(0x06E0)
};


// ScriptStruct  ControlRig.ControlRigLayerInstanceProxy
// Struct Size::0x0780
struct FControlRigLayerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_06E0[0x00A0]                                               // 0x06E0(0x00A0)
};


// ScriptStruct  ControlRig.AnimNode_ControlRigInputPose
// Struct Size::0x0030
struct FAnimNode_ControlRigInputPose : public FAnimNode_Base
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.CRFourPointBezier
// Struct Size::0x0030
struct FCRFourPointBezier
{
    FVector                                       A;                                                            // 0x0000(0x000C)
    FVector                                       B;                                                            // 0x000C(0x000C)
    FVector                                       C;                                                            // 0x0018(0x000C)
    FVector                                       D;                                                            // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferenceMap
// Struct Size::0x0020
struct FControlRigSequenceObjectReferenceMap
{
    TArray<FGuid>                                 BindingIds;                                                   // 0x0000(0x0010)
    TArray<FControlRigSequenceObjectReferences>   References;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReferences
// Struct Size::0x0010
struct FControlRigSequenceObjectReferences
{
    TArray<FControlRigSequenceObjectReference>    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.ControlRigSequenceObjectReference
// Struct Size::0x0008
struct FControlRigSequenceObjectReference
{
    UControlRig*                                  ControlRigClass;                                              // 0x0000(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimSequencerInstanceProxy
// Struct Size::0x0930
struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_06E0[0x0250]                                               // 0x06E0(0x0250)
};


// ScriptStruct  ControlRig.ControlRigSequencerAnimInstanceProxy
// Struct Size::0x0BE0
struct FControlRigSequencerAnimInstanceProxy : public FAnimSequencerInstanceProxy
{
    char                                          pa_0930[0x02B0]                                               // 0x0930(0x02B0)
};


// ScriptStruct  ControlRig.CRSimContainer
// Struct Size::0x0018
struct FCRSimContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         TimeStep;                                                     // 0x0008(0x0004)
    float                                         AccumulatedTime;                                              // 0x000C(0x0004)
    float                                         TimeLeftForStep;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.CRSimLinearSpring
// Struct Size::0x0010
struct FCRSimLinearSpring
{
    int32_t                                       SubjectA;                                                     // 0x0000(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0004(0x0004)
    float                                         Coefficient;                                                  // 0x0008(0x0004)
    float                                         Equilibrium;                                                  // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.CRSimPoint
// Struct Size::0x0028
struct FCRSimPoint
{
    float                                         Mass;                                                         // 0x0000(0x0004)
    float                                         Size;                                                         // 0x0004(0x0004)
    float                                         LinearDamping;                                                // 0x0008(0x0004)
    float                                         InheritMotion;                                                // 0x000C(0x0004)
    FVector                                       Position;                                                     // 0x0010(0x000C)
    FVector                                       LinearVelocity;                                               // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.CRSimPointConstraint
// Struct Size::0x0024
struct FCRSimPointConstraint
{
    enum class ECRSimConstraintType               Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SubjectA;                                                     // 0x0004(0x0004)
    int32_t                                       SubjectB;                                                     // 0x0008(0x0004)
    FVector                                       DataA;                                                        // 0x000C(0x000C)
    FVector                                       DataB;                                                        // 0x0018(0x000C)
};


// ScriptStruct  ControlRig.CRSimPointContainer
// Struct Size::0x0078
struct FCRSimPointContainer : public FCRSimContainer
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0018(0x0010)
    TArray<FCRSimLinearSpring>                    Springs;                                                      // 0x0028(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0038(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x0048(0x0010)
    TArray<FCRSimPointConstraint>                 Constraints;                                                  // 0x0058(0x0010)
    TArray<FCRSimPoint>                           PreviousStep;                                                 // 0x0068(0x0010)
};


// ScriptStruct  ControlRig.CRSimSoftCollision
// Struct Size::0x0050
struct FCRSimSoftCollision
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    enum class ECRSimSoftCollisionType            ShapeType;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         MinimumDistance;                                              // 0x0034(0x0004)
    float                                         MaximumDistance;                                              // 0x0038(0x0004)
    enum class EControlRigAnimEasingType          FalloffType;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         Coefficient;                                                  // 0x0040(0x0004)
    bool                                          bInverted;                                                    // 0x0044(0x0001)
    char                                          pa_0045[0x000B]                                               // 0x0045(0x000B)
};


// ScriptStruct  ControlRig.CRSimPointForce
// Struct Size::0x0018
struct FCRSimPointForce
{
    enum class ECRSimPointForceType               ForceType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       Vector;                                                       // 0x0004(0x000C)
    float                                         Coefficient;                                                  // 0x0010(0x0004)
    bool                                          bNormalize;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceData
// Struct Size::0x0008
struct FMovieSceneSequenceInstanceData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.MovieSceneControlRigInstanceData
// Struct Size::0x00D8
struct FMovieSceneControlRigInstanceData : public FMovieSceneSequenceInstanceData
{
    bool                                          bAdditive;                                                    // 0x0008(0x0001)
    bool                                          bApplyBoneFilter;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FInputBlendPose                               BoneFilter;                                                   // 0x0010(0x0010)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0020(0x00A0)
    FMovieSceneEvaluationOperand                  Operand;                                                      // 0x00C0(0x0014)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationOperand
// Struct Size::0x0014
struct FMovieSceneEvaluationOperand
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0010(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceID
// Struct Size::0x0004
struct FMovieSceneSequenceID
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneFloatChannel
// Struct Size::0x00A0
struct FMovieSceneFloatChannel : public FMovieSceneChannel
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0008(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    TArray<FFrameNumber>                          Times;                                                        // 0x0010(0x0010)
    TArray<FMovieSceneFloatValue>                 Values;                                                       // 0x0020(0x0010)
    float                                         DefaultValue;                                                 // 0x0030(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FMovieSceneKeyHandleMap                       KeyHandles;                                                   // 0x0038(0x0060)
    FFrameRate                                    TickResolution;                                               // 0x0098(0x0008)
};


// ScriptStruct  Engine.KeyHandleLookupTable
// Struct Size::0x0060
struct FKeyHandleLookupTable
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneKeyHandleMap
// Struct Size::0x0060
struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
{
};


// ScriptStruct  MovieScene.MovieSceneFloatValue
// Struct Size::0x001C
struct FMovieSceneFloatValue
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FMovieSceneTangentData                        Tangent;                                                      // 0x0004(0x0014)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0018(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0019(0x0001)
    char                                          PaddingByte;                                                  // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneTangentData
// Struct Size::0x0014
struct FMovieSceneTangentData
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    float                                         ArriveTangentWeight;                                          // 0x0008(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x000C(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.InputBlendPose
// Struct Size::0x0010
struct FInputBlendPose
{
    TArray<FBranchFilter>                         BranchFilters;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.BranchFilter
// Struct Size::0x000C
struct FBranchFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    int32_t                                       BlendDepth;                                                   // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.ChannelMapInfo
// Struct Size::0x0008
struct FChannelMapInfo
{
    int32_t                                       ControlIndex;                                                 // 0x0000(0x0004)
    int32_t                                       ChannelIndex;                                                 // 0x0004(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
{
    TArray<FScalarParameterNameAndCurve>          Scalars;                                                      // 0x0020(0x0010)
    TArray<FBoolParameterNameAndCurve>            Bools;                                                        // 0x0030(0x0010)
    TArray<FVector2DParameterNameAndCurves>       Vector2Ds;                                                    // 0x0040(0x0010)
    TArray<FVectorParameterNameAndCurves>         Vectors;                                                      // 0x0050(0x0010)
    TArray<FColorParameterNameAndCurves>          Colors;                                                       // 0x0060(0x0010)
    TArray<FTransformParameterNameAndCurves>      Transforms;                                                   // 0x0070(0x0010)
};


// ScriptStruct  MovieSceneTracks.TransformParameterNameAndCurves
// Struct Size::0x05A8
struct FTransformParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       Translation;                                                  // 0x0008(0x00A0)
    char                                          pa_00A8[0x0140]                                               // 0x00A8(0x0140)
    FMovieSceneFloatChannel                       Rotation;                                                     // 0x01E8(0x00A0)
    char                                          pa_0288[0x0140]                                               // 0x0288(0x0140)
    FMovieSceneFloatChannel                       Scale;                                                        // 0x03C8(0x00A0)
    char                                          pa_0468[0x0140]                                               // 0x0468(0x0140)
};


// ScriptStruct  MovieSceneTracks.ColorParameterNameAndCurves
// Struct Size::0x0288
struct FColorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       RedCurve;                                                     // 0x0008(0x00A0)
    FMovieSceneFloatChannel                       GreenCurve;                                                   // 0x00A8(0x00A0)
    FMovieSceneFloatChannel                       BlueCurve;                                                    // 0x0148(0x00A0)
    FMovieSceneFloatChannel                       AlphaCurve;                                                   // 0x01E8(0x00A0)
};


// ScriptStruct  MovieSceneTracks.VectorParameterNameAndCurves
// Struct Size::0x01E8
struct FVectorParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0008(0x00A0)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x00A8(0x00A0)
    FMovieSceneFloatChannel                       ZCurve;                                                       // 0x0148(0x00A0)
};


// ScriptStruct  MovieSceneTracks.Vector2DParameterNameAndCurves
// Struct Size::0x0148
struct FVector2DParameterNameAndCurves
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       XCurve;                                                       // 0x0008(0x00A0)
    FMovieSceneFloatChannel                       YCurve;                                                       // 0x00A8(0x00A0)
};


// ScriptStruct  MovieSceneTracks.BoolParameterNameAndCurve
// Struct Size::0x0098
struct FBoolParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneBoolChannel                        ParameterCurve;                                               // 0x0008(0x0090)
};


// ScriptStruct  MovieSceneTracks.ScalarParameterNameAndCurve
// Struct Size::0x00A8
struct FScalarParameterNameAndCurve
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FMovieSceneFloatChannel                       ParameterCurve;                                               // 0x0008(0x00A0)
};


// ScriptStruct  ControlRig.MovieSceneControlRigParameterTemplate
// Struct Size::0x0080
struct FMovieSceneControlRigParameterTemplate : public FMovieSceneParameterSectionTemplate
{
};


// ScriptStruct  ControlRig.RigBoneHierarchy
// Struct Size::0x0070
struct FRigBoneHierarchy
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FRigBone>                              Bones;                                                        // 0x0008(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0018(0x0050)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigElement
// Struct Size::0x0018
struct FRigElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         Name;                                                         // 0x0008(0x0008)
    int32_t                                       Index;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigBone
// Struct Size::0x00E0
struct FRigBone : public FRigElement
{
    FName                                         ParentName;                                                   // 0x0018(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0030)
    FTransform                                    GlobalTransform;                                              // 0x0060(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0090(0x0030)
    TArray<int32_t>                               Dependents;                                                   // 0x00C0(0x0010)
    enum class ERigBoneType                       Type;                                                         // 0x00D0(0x0001)
    char                                          pa_00D1[0x000F]                                               // 0x00D1(0x000F)
};


// ScriptStruct  ControlRig.RigControlHierarchy
// Struct Size::0x0068
struct FRigControlHierarchy
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FRigControl>                           Controls;                                                     // 0x0008(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0018(0x0050)
};


// ScriptStruct  ControlRig.RigControl
// Struct Size::0x0180
struct FRigControl : public FRigElement
{
    enum class ERigControlType                    ControlType;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         ParentName;                                                   // 0x001C(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0024(0x0004)
    FName                                         SpaceName;                                                    // 0x0028(0x0008)
    int32_t                                       SpaceIndex;                                                   // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FRigControlValue                              InitialValue;                                                 // 0x0040(0x0030)
    FRigControlValue                              Value;                                                        // 0x0070(0x0030)
    enum class ERigControlAxis                    PrimaryAxis;                                                  // 0x00A0(0x0001)
    bool                                          bIsCurve;                                                     // 0x00A1(0x0001)
    bool                                          bAnimatable;                                                  // 0x00A2(0x0001)
    bool                                          bLimitTranslation;                                            // 0x00A3(0x0001)
    bool                                          bLimitRotation;                                               // 0x00A4(0x0001)
    bool                                          bLimitScale;                                                  // 0x00A5(0x0001)
    bool                                          bDrawLimits;                                                  // 0x00A6(0x0001)
    char                                          pa_00A7[0x0009]                                               // 0x00A7(0x0009)
    FRigControlValue                              MinimumValue;                                                 // 0x00B0(0x0030)
    FRigControlValue                              MaximumValue;                                                 // 0x00E0(0x0030)
    bool                                          bGizmoEnabled;                                                // 0x0110(0x0001)
    char                                          pa_0111[0x0003]                                               // 0x0111(0x0003)
    FName                                         GizmoName;                                                    // 0x0114(0x0008)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
    FTransform                                    GizmoTransform;                                               // 0x0120(0x0030)
    FLinearColor                                  GizmoColor;                                                   // 0x0150(0x0010)
    TArray<int32_t>                               Dependents;                                                   // 0x0160(0x0010)
    bool                                          bIsTransientControl;                                          // 0x0170(0x0001)
    char                                          pa_0171[0x000F]                                               // 0x0171(0x000F)
};


// ScriptStruct  ControlRig.RigControlValue
// Struct Size::0x0030
struct FRigControlValue
{
    FTransform                                    Storage;                                                      // 0x0000(0x0030)
};


// ScriptStruct  ControlRig.RigCurveContainer
// Struct Size::0x0070
struct FRigCurveContainer
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FRigCurve>                             Curves;                                                       // 0x0008(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0018(0x0050)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigCurve
// Struct Size::0x0020
struct FRigCurve : public FRigElement
{
    float                                         Value;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigHierarchyRef
// Struct Size::0x0001
struct FRigHierarchyRef
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  ControlRig.RigHierarchyContainer
// Struct Size::0x01B0
struct FRigHierarchyContainer
{
    FRigBoneHierarchy                             BoneHierarchy;                                                // 0x0000(0x0070)
    FRigSpaceHierarchy                            SpaceHierarchy;                                               // 0x0070(0x0068)
    FRigControlHierarchy                          ControlHierarchy;                                             // 0x00D8(0x0068)
    FRigCurveContainer                            CurveContainer;                                               // 0x0140(0x0070)
};


// ScriptStruct  ControlRig.RigSpaceHierarchy
// Struct Size::0x0068
struct FRigSpaceHierarchy
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<FRigSpace>                             Spaces;                                                       // 0x0008(0x0010)
    TMap<FName,int32_t>                           NameToIndexMapping;                                           // 0x0018(0x0050)
};


// ScriptStruct  ControlRig.RigSpace
// Struct Size::0x0090
struct FRigSpace : public FRigElement
{
    enum class ERigSpaceType                      SpaceType;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         ParentName;                                                   // 0x001C(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    InitialTransform;                                             // 0x0030(0x0030)
    FTransform                                    LocalTransform;                                               // 0x0060(0x0030)
};


// ScriptStruct  ControlRig.RigHierarchyCopyPasteContent
// Struct Size::0x0040
struct FRigHierarchyCopyPasteContent
{
    TArray<enum class ERigElementType>            Types;                                                        // 0x0000(0x0010)
    TArray<FString>                               Contents;                                                     // 0x0010(0x0010)
    TArray<FTransform>                            LocalTransforms;                                              // 0x0020(0x0010)
    TArray<FTransform>                            GlobalTransforms;                                             // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigElementKey
// Struct Size::0x000C
struct FRigElementKey
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ERigElementType                    Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  RigVM.RigVMStruct
// Struct Size::0x0008
struct FRigVMStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  ControlRig.RigUnit
// Struct Size::0x0008
struct FRigUnit : public FRigVMStruct
{
};


// ScriptStruct  ControlRig.RigUnitMutable
// Struct Size::0x0020
struct FRigUnitMutable : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0018)
};


// ScriptStruct  ControlRig.RigUnit_SimBase
// Struct Size::0x0008
struct FRigUnit_SimBase : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit_AccumulateVectorRange
// Struct Size::0x0048
struct FRigUnit_AccumulateVectorRange : public FRigUnit_SimBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Minimum;                                                      // 0x0014(0x000C)
    FVector                                       Maximum;                                                      // 0x0020(0x000C)
    FVector                                       AccumulatedMinimum;                                           // 0x002C(0x000C)
    FVector                                       AccumulatedMaximum;                                           // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateFloatRange
// Struct Size::0x0020
struct FRigUnit_AccumulateFloatRange : public FRigUnit_SimBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         AccumulatedMinimum;                                           // 0x0014(0x0004)
    float                                         AccumulatedMaximum;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateTransformLerp
// Struct Size::0x00E0
struct FRigUnit_AccumulateTransformLerp : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    TargetValue;                                                  // 0x0010(0x0030)
    FTransform                                    InitialValue;                                                 // 0x0040(0x0030)
    float                                         Blend;                                                        // 0x0070(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
    FTransform                                    AccumulatedValue;                                             // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateQuatLerp
// Struct Size::0x0060
struct FRigUnit_AccumulateQuatLerp : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         TargetValue;                                                  // 0x0010(0x0010)
    FQuat                                         InitialValue;                                                 // 0x0020(0x0010)
    float                                         Blend;                                                        // 0x0030(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x000B]                                               // 0x0035(0x000B)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
    FQuat                                         AccumulatedValue;                                             // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateVectorLerp
// Struct Size::0x0040
struct FRigUnit_AccumulateVectorLerp : public FRigUnit_SimBase
{
    FVector                                       TargetValue;                                                  // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    float                                         Blend;                                                        // 0x0020(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       Result;                                                       // 0x0028(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateFloatLerp
// Struct Size::0x0020
struct FRigUnit_AccumulateFloatLerp : public FRigUnit_SimBase
{
    float                                         TargetValue;                                                  // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    float                                         Blend;                                                        // 0x0010(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         AccumulatedValue;                                             // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateTransformMul
// Struct Size::0x00E0
struct FRigUnit_AccumulateTransformMul : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Multiplier;                                                   // 0x0010(0x0030)
    FTransform                                    InitialValue;                                                 // 0x0040(0x0030)
    bool                                          bFlipOrder;                                                   // 0x0070(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x0071(0x0001)
    char                                          pa_0072[0x000E]                                               // 0x0072(0x000E)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
    FTransform                                    AccumulatedValue;                                             // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateQuatMul
// Struct Size::0x0060
struct FRigUnit_AccumulateQuatMul : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Multiplier;                                                   // 0x0010(0x0010)
    FQuat                                         InitialValue;                                                 // 0x0020(0x0010)
    bool                                          bFlipOrder;                                                   // 0x0030(0x0001)
    bool                                          bIntegrateDeltaTime;                                          // 0x0031(0x0001)
    char                                          pa_0032[0x000E]                                               // 0x0032(0x000E)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
    FQuat                                         AccumulatedValue;                                             // 0x0050(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateVectorMul
// Struct Size::0x0040
struct FRigUnit_AccumulateVectorMul : public FRigUnit_SimBase
{
    FVector                                       Multiplier;                                                   // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    bool                                          bIntegrateDeltaTime;                                          // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateFloatMul
// Struct Size::0x0020
struct FRigUnit_AccumulateFloatMul : public FRigUnit_SimBase
{
    float                                         Multiplier;                                                   // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateVectorAdd
// Struct Size::0x0040
struct FRigUnit_AccumulateVectorAdd : public FRigUnit_SimBase
{
    FVector                                       Increment;                                                    // 0x0008(0x000C)
    FVector                                       InitialValue;                                                 // 0x0014(0x000C)
    bool                                          bIntegrateDeltaTime;                                          // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
    FVector                                       AccumulatedValue;                                             // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AccumulateFloatAdd
// Struct Size::0x0020
struct FRigUnit_AccumulateFloatAdd : public FRigUnit_SimBase
{
    float                                         Increment;                                                    // 0x0008(0x0004)
    float                                         InitialValue;                                                 // 0x000C(0x0004)
    bool                                          bIntegrateDeltaTime;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Result;                                                       // 0x0014(0x0004)
    float                                         AccumulatedValue;                                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AddBoneTransform
// Struct Size::0x0070
struct FRigUnit_AddBoneTransform : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    float                                         Weight;                                                       // 0x0060(0x0004)
    bool                                          bPostMultiply;                                                // 0x0064(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x0065(0x0001)
    char                                          pa_0066[0x0002]                                               // 0x0066(0x0002)
    int32_t                                       CachedBoneIndex;                                              // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_HighlevelBaseMutable
// Struct Size::0x0020
struct FRigUnit_HighlevelBaseMutable : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit_AimBone
// Struct Size::0x00E0
struct FRigUnit_AimBone : public FRigUnit_HighlevelBaseMutable
{
    FName                                         Bone;                                                         // 0x0020(0x0008)
    FRigUnit_AimBone_Target                       Primary;                                                      // 0x0028(0x0028)
    FRigUnit_AimBone_Target                       Secondary;                                                    // 0x0050(0x0028)
    float                                         Weight;                                                       // 0x0078(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    FRigUnit_AimBone_DebugSettings                DebugSettings;                                                // 0x0080(0x0040)
    int32_t                                       BoneIndex;                                                    // 0x00C0(0x0004)
    FName                                         PrimaryCachedSpaceName;                                       // 0x00C4(0x0008)
    int32_t                                       PrimaryCachedSpaceIndex;                                      // 0x00CC(0x0004)
    FName                                         SecondaryCachedSpaceName;                                     // 0x00D0(0x0008)
    int32_t                                       SecondaryCachedSpaceIndex;                                    // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AimBone_DebugSettings
// Struct Size::0x0040
struct FRigUnit_AimBone_DebugSettings
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_AimBone_Target
// Struct Size::0x0028
struct FRigUnit_AimBone_Target
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    FVector                                       Axis;                                                         // 0x0004(0x000C)
    FVector                                       Target;                                                       // 0x0010(0x000C)
    enum class EControlRigVectorKind              Kind;                                                         // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FName                                         Space;                                                        // 0x0020(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_AimConstraint
// Struct Size::0x0078
struct FRigUnit_AimConstraint : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0020(0x0008)
    enum class EAimMode                           AimMode;                                                      // 0x0028(0x0001)
    enum class EAimMode                           UpMode;                                                       // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    FVector                                       AimVector;                                                    // 0x002C(0x000C)
    FVector                                       UpVector;                                                     // 0x0038(0x000C)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FAimTarget>                            AimTargets;                                                   // 0x0048(0x0010)
    TArray<FAimTarget>                            UpTargets;                                                    // 0x0058(0x0010)
    char                                          pa_0068[0x0010]                                               // 0x0068(0x0010)
};


// ScriptStruct  ControlRig.AimTarget
// Struct Size::0x0050
struct FAimTarget
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       AlignVector;                                                  // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AlphaInterpVector
// Struct Size::0x0088
struct FRigUnit_AlphaInterpVector : public FRigUnit_SimBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Scale;                                                        // 0x0014(0x0004)
    float                                         Bias;                                                         // 0x0018(0x0004)
    bool                                          bMapRange;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FInputRange                                   InRange;                                                      // 0x0020(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0028(0x0008)
    bool                                          bClampResult;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ClampMin;                                                     // 0x0034(0x0004)
    float                                         ClampMax;                                                     // 0x0038(0x0004)
    bool                                          bInterpResult;                                                // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x0040(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x0044(0x0004)
    FVector                                       Result;                                                       // 0x0048(0x000C)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0054(0x0030)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AlphaInterp
// Struct Size::0x0078
struct FRigUnit_AlphaInterp : public FRigUnit_SimBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Scale;                                                        // 0x000C(0x0004)
    float                                         Bias;                                                         // 0x0010(0x0004)
    bool                                          bMapRange;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FInputRange                                   InRange;                                                      // 0x0018(0x0008)
    FInputRange                                   OutRange;                                                     // 0x0020(0x0008)
    bool                                          bClampResult;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ClampMin;                                                     // 0x002C(0x0004)
    float                                         ClampMax;                                                     // 0x0030(0x0004)
    bool                                          bInterpResult;                                                // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         InterpSpeedIncreasing;                                        // 0x0038(0x0004)
    float                                         InterpSpeedDecreasing;                                        // 0x003C(0x0004)
    float                                         Result;                                                       // 0x0040(0x0004)
    FInputScaleBiasClamp                          ScaleBiasClamp;                                               // 0x0044(0x0030)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AnimBase
// Struct Size::0x0008
struct FRigUnit_AnimBase : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit_AnimEasing
// Struct Size::0x0028
struct FRigUnit_AnimEasing : public FRigUnit_AnimBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    enum class EControlRigAnimEasingType          Type;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SourceMinimum;                                                // 0x0010(0x0004)
    float                                         SourceMaximum;                                                // 0x0014(0x0004)
    float                                         TargetMinimum;                                                // 0x0018(0x0004)
    float                                         TargetMaximum;                                                // 0x001C(0x0004)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AnimEasingType
// Struct Size::0x0010
struct FRigUnit_AnimEasingType : public FRigUnit_AnimBase
{
    enum class EControlRigAnimEasingType          Type;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_AnimEvalRichCurve
// Struct Size::0x00B0
struct FRigUnit_AnimEvalRichCurve : public FRigUnit_AnimBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0010(0x0088)
    float                                         SourceMinimum;                                                // 0x0098(0x0004)
    float                                         SourceMaximum;                                                // 0x009C(0x0004)
    float                                         TargetMinimum;                                                // 0x00A0(0x0004)
    float                                         TargetMaximum;                                                // 0x00A4(0x0004)
    float                                         Result;                                                       // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_AnimRichCurve
// Struct Size::0x0090
struct FRigUnit_AnimRichCurve : public FRigUnit_AnimBase
{
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  ControlRig.RigUnit_ApplyFK
// Struct Size::0x00B0
struct FRigUnit_ApplyFK : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    FTransformFilter                              Filter;                                                       // 0x0060(0x0009)
    enum class EApplyTransformMode                ApplyTransformMode;                                           // 0x0069(0x0001)
    enum class ETransformSpaceMode                ApplyTransformSpace;                                          // 0x006A(0x0001)
    char                                          pa_006B[0x0005]                                               // 0x006B(0x0005)
    FTransform                                    BaseTransform;                                                // 0x0070(0x0030)
    FName                                         BaseJoint;                                                    // 0x00A0(0x0008)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  AnimationCore.TransformFilter
// Struct Size::0x0009
struct FTransformFilter
{
    FFilterOptionPerAxis                          TranslationFilter;                                            // 0x0000(0x0003)
    FFilterOptionPerAxis                          RotationFilter;                                               // 0x0003(0x0003)
    FFilterOptionPerAxis                          ScaleFilter;                                                  // 0x0006(0x0003)
};


// ScriptStruct  ControlRig.RigUnit_BeginExecution
// Struct Size::0x0020
struct FRigUnit_BeginExecution : public FRigUnit
{
    FControlRigExecuteContext                     ExecuteContext;                                               // 0x0008(0x0018)
};


// ScriptStruct  ControlRig.RigUnit_BlendTransform
// Struct Size::0x0080
struct FRigUnit_BlendTransform : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Source;                                                       // 0x0010(0x0030)
    TArray<FBlendTarget>                          Targets;                                                      // 0x0040(0x0010)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
};


// ScriptStruct  ControlRig.BlendTarget
// Struct Size::0x0040
struct FBlendTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    float                                         Weight;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_BoneHarmonics
// Struct Size::0x00A0
struct FRigUnit_BoneHarmonics : public FRigUnit_HighlevelBaseMutable
{
    TArray<FRigUnit_BoneHarmonics_BoneTarget>     Bones;                                                        // 0x0020(0x0010)
    FVector                                       WaveSpeed;                                                    // 0x0030(0x000C)
    FVector                                       WaveFrequency;                                                // 0x003C(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0048(0x000C)
    FVector                                       WaveOffset;                                                   // 0x0054(0x000C)
    FVector                                       WaveNoise;                                                    // 0x0060(0x000C)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    float                                         WaveMinimum;                                                  // 0x0070(0x0004)
    float                                         WaveMaximum;                                                  // 0x0074(0x0004)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0078(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
    FRigUnit_BoneHarmonics_WorkData               WorkData;                                                     // 0x0080(0x0020)
};


// ScriptStruct  ControlRig.RigUnit_BoneHarmonics_WorkData
// Struct Size::0x0020
struct FRigUnit_BoneHarmonics_WorkData
{
    TArray<int32_t>                               BoneIndices;                                                  // 0x0000(0x0010)
    FVector                                       WaveTime;                                                     // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_BoneHarmonics_BoneTarget
// Struct Size::0x000C
struct FRigUnit_BoneHarmonics_BoneTarget
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    float                                         Ratio;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_ControlName
// Struct Size::0x0010
struct FRigUnit_ControlName : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_SpaceName
// Struct Size::0x0010
struct FRigUnit_SpaceName : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_BoneName
// Struct Size::0x0010
struct FRigUnit_BoneName : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_CCDIK
// Struct Size::0x00E0
struct FRigUnit_CCDIK : public FRigUnit_HighlevelBaseMutable
{
    FName                                         StartBone;                                                    // 0x0020(0x0008)
    FName                                         EffectorBone;                                                 // 0x0028(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0030(0x0030)
    float                                         Precision;                                                    // 0x0060(0x0004)
    float                                         Weight;                                                       // 0x0064(0x0004)
    int32_t                                       MaxIterations;                                                // 0x0068(0x0004)
    bool                                          bStartFromTail;                                               // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    float                                         BaseRotationLimit;                                            // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<FRigUnit_CCDIK_RotationLimit>          RotationLimits;                                               // 0x0078(0x0010)
    bool                                          bPropagateToChildren;                                         // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
    FRigUnit_CCDIK_WorkData                       WorkData;                                                     // 0x0090(0x0048)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_CCDIK_WorkData
// Struct Size::0x0048
struct FRigUnit_CCDIK_WorkData
{
    TArray<FCCDIKChainLink>                       Chain;                                                        // 0x0000(0x0010)
    TArray<int32_t>                               BoneIndices;                                                  // 0x0010(0x0010)
    TArray<int32_t>                               RotationLimitIndex;                                           // 0x0020(0x0010)
    TArray<float>                                 RotationLimitsPerBone;                                        // 0x0030(0x0010)
    int32_t                                       EffectorIndex;                                                // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  AnimationCore.CCDIKChainLink
// Struct Size::0x0080
struct FCCDIKChainLink
{
    char                                          pa_0000[0x0080]                                               // 0x0000(0x0080)
};


// ScriptStruct  ControlRig.RigUnit_CCDIK_RotationLimit
// Struct Size::0x000C
struct FRigUnit_CCDIK_RotationLimit
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    float                                         Limit;                                                        // 0x0008(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_ChainHarmonics
// Struct Size::0x0230
struct FRigUnit_ChainHarmonics : public FRigUnit_HighlevelBaseMutable
{
    FName                                         ChainRoot;                                                    // 0x0020(0x0008)
    FVector                                       Speed;                                                        // 0x0028(0x000C)
    FRigUnit_ChainHarmonics_Reach                 Reach;                                                        // 0x0034(0x0028)
    FRigUnit_ChainHarmonics_Wave                  Wave;                                                         // 0x005C(0x0040)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FRuntimeFloatCurve                            WaveCurve;                                                    // 0x00A0(0x0088)
    FRigUnit_ChainHarmonics_Pendulum              Pendulum;                                                     // 0x0128(0x003C)
    bool                                          bDrawDebug;                                                   // 0x0164(0x0001)
    char                                          pa_0165[0x000B]                                               // 0x0165(0x000B)
    FTransform                                    DrawWorldOffset;                                              // 0x0170(0x0030)
    FRigUnit_ChainHarmonics_WorkData              WorkData;                                                     // 0x01A0(0x0090)
};


// ScriptStruct  ControlRig.RigUnit_ChainHarmonics_WorkData
// Struct Size::0x0090
struct FRigUnit_ChainHarmonics_WorkData
{
    FVector                                       Time;                                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<int32_t>                               Bones;                                                        // 0x0010(0x0010)
    TArray<float>                                 Ratio;                                                        // 0x0020(0x0010)
    TArray<FVector>                               LocalTip;                                                     // 0x0030(0x0010)
    TArray<FVector>                               PendulumTip;                                                  // 0x0040(0x0010)
    TArray<FVector>                               PendulumPosition;                                             // 0x0050(0x0010)
    TArray<FVector>                               PendulumVelocity;                                             // 0x0060(0x0010)
    TArray<FVector>                               HierarchyLine;                                                // 0x0070(0x0010)
    TArray<FVector>                               VelocityLines;                                                // 0x0080(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_ChainHarmonics_Pendulum
// Struct Size::0x003C
struct FRigUnit_ChainHarmonics_Pendulum
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         PendulumStiffness;                                            // 0x0004(0x0004)
    FVector                                       PendulumGravity;                                              // 0x0008(0x000C)
    float                                         PendulumBlend;                                                // 0x0014(0x0004)
    float                                         PendulumDrag;                                                 // 0x0018(0x0004)
    float                                         PendulumMinimum;                                              // 0x001C(0x0004)
    float                                         PendulumMaximum;                                              // 0x0020(0x0004)
    enum class EControlRigAnimEasingType          PendulumEase;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       UnwindAxis;                                                   // 0x0028(0x000C)
    float                                         UnwindMinimum;                                                // 0x0034(0x0004)
    float                                         UnwindMaximum;                                                // 0x0038(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_ChainHarmonics_Wave
// Struct Size::0x0040
struct FRigUnit_ChainHarmonics_Wave
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       WaveFrequency;                                                // 0x0004(0x000C)
    FVector                                       WaveAmplitude;                                                // 0x0010(0x000C)
    FVector                                       WaveOffset;                                                   // 0x001C(0x000C)
    FVector                                       WaveNoise;                                                    // 0x0028(0x000C)
    float                                         WaveMinimum;                                                  // 0x0034(0x0004)
    float                                         WaveMaximum;                                                  // 0x0038(0x0004)
    enum class EControlRigAnimEasingType          WaveEase;                                                     // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  ControlRig.RigUnit_ChainHarmonics_Reach
// Struct Size::0x0028
struct FRigUnit_ChainHarmonics_Reach
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       ReachTarget;                                                  // 0x0004(0x000C)
    FVector                                       ReachAxis;                                                    // 0x0010(0x000C)
    float                                         ReachMinimum;                                                 // 0x001C(0x0004)
    float                                         ReachMaximum;                                                 // 0x0020(0x0004)
    enum class EControlRigAnimEasingType          ReachEase;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.RigUnit_Control
// Struct Size::0x00D0
struct FRigUnit_Control : public FRigUnit
{
    FEulerTransform                               Transform;                                                    // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Base;                                                         // 0x0030(0x0030)
    FTransform                                    InitTransform;                                                // 0x0060(0x0030)
    FTransform                                    Result;                                                       // 0x0090(0x0030)
    FTransformFilter                              Filter;                                                       // 0x00C0(0x0009)
    char                                          pa_00C9[0x0007]                                               // 0x00C9(0x0007)
};


// ScriptStruct  AnimationCore.EulerTransform
// Struct Size::0x0024
struct FEulerTransform
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FVector                                       Scale;                                                        // 0x0018(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_Control_StaticMesh
// Struct Size::0x0100
struct FRigUnit_Control_StaticMesh : public FRigUnit_Control
{
    FTransform                                    MeshTransform;                                                // 0x00D0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_ToSwingAndTwist
// Struct Size::0x0050
struct FRigUnit_ToSwingAndTwist : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Swing;                                                        // 0x0030(0x0010)
    FQuat                                         Twist;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_ConvertQuaternionToVector
// Struct Size::0x0030
struct FRigUnit_ConvertQuaternionToVector : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_ConvertRotationToVector
// Struct Size::0x0020
struct FRigUnit_ConvertRotationToVector : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x000C)
    FVector                                       Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_ConvertVectorToQuaternion
// Struct Size::0x0030
struct FRigUnit_ConvertVectorToQuaternion : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_ConvertVectorToRotation
// Struct Size::0x0020
struct FRigUnit_ConvertVectorToRotation : public FRigUnit
{
    FVector                                       Input;                                                        // 0x0008(0x000C)
    FRotator                                      Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_ConvertQuaternion
// Struct Size::0x0030
struct FRigUnit_ConvertQuaternion : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FRotator                                      Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_ConvertRotation
// Struct Size::0x0030
struct FRigUnit_ConvertRotation : public FRigUnit
{
    FRotator                                      Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_ConvertVectorRotation
// Struct Size::0x0030
struct FRigUnit_ConvertVectorRotation : public FRigUnit_ConvertRotation
{
};


// ScriptStruct  ControlRig.RigUnit_ConvertEulerTransform
// Struct Size::0x0060
struct FRigUnit_ConvertEulerTransform : public FRigUnit
{
    FEulerTransform                               Input;                                                        // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Result;                                                       // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_ConvertTransform
// Struct Size::0x0070
struct FRigUnit_ConvertTransform : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Input;                                                        // 0x0010(0x0030)
    FEulerTransform                               Result;                                                       // 0x0040(0x0024)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_DebugBaseMutable
// Struct Size::0x0020
struct FRigUnit_DebugBaseMutable : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit_DebugBase
// Struct Size::0x0008
struct FRigUnit_DebugBase : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit_DebugBezier
// Struct Size::0x00C0
struct FRigUnit_DebugBezier : public FRigUnit_DebugBaseMutable
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0020(0x0030)
    float                                         MinimumU;                                                     // 0x0050(0x0004)
    float                                         MaximumU;                                                     // 0x0054(0x0004)
    FLinearColor                                  Color;                                                        // 0x0058(0x0010)
    float                                         Thickness;                                                    // 0x0068(0x0004)
    int32_t                                       Detail;                                                       // 0x006C(0x0004)
    FName                                         Space;                                                        // 0x0070(0x0008)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0080(0x0030)
    bool                                          bEnabled;                                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x000F]                                               // 0x00B1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugHierarchy
// Struct Size::0x0080
struct FRigUnit_DebugHierarchy : public FRigUnit_DebugBaseMutable
{
    enum class EControlRigDrawHierarchyMode       Mode;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Scale;                                                        // 0x0024(0x0004)
    FLinearColor                                  Color;                                                        // 0x0028(0x0010)
    float                                         Thickness;                                                    // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0040(0x0030)
    bool                                          bEnabled;                                                     // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugLine
// Struct Size::0x00A0
struct FRigUnit_DebugLine : public FRigUnit_DebugBaseMutable
{
    FVector                                       A;                                                            // 0x0020(0x000C)
    FVector                                       B;                                                            // 0x002C(0x000C)
    FLinearColor                                  Color;                                                        // 0x0038(0x0010)
    float                                         Thickness;                                                    // 0x0048(0x0004)
    FName                                         Space;                                                        // 0x004C(0x0008)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0060(0x0030)
    bool                                          bEnabled;                                                     // 0x0090(0x0001)
    char                                          pa_0091[0x000F]                                               // 0x0091(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugLineStrip
// Struct Size::0x0090
struct FRigUnit_DebugLineStrip : public FRigUnit_DebugBaseMutable
{
    TArray<FVector>                               Points;                                                       // 0x0020(0x0010)
    FLinearColor                                  Color;                                                        // 0x0030(0x0010)
    float                                         Thickness;                                                    // 0x0040(0x0004)
    FName                                         Space;                                                        // 0x0044(0x0008)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0050(0x0030)
    bool                                          bEnabled;                                                     // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugPointMutable
// Struct Size::0x0090
struct FRigUnit_DebugPointMutable : public FRigUnit_DebugBaseMutable
{
    FVector                                       Vector;                                                       // 0x0020(0x000C)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FLinearColor                                  Color;                                                        // 0x0030(0x0010)
    float                                         Scale;                                                        // 0x0040(0x0004)
    float                                         Thickness;                                                    // 0x0044(0x0004)
    FName                                         Space;                                                        // 0x0048(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0050(0x0030)
    bool                                          bEnabled;                                                     // 0x0080(0x0001)
    char                                          pa_0081[0x000F]                                               // 0x0081(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugPoint
// Struct Size::0x0080
struct FRigUnit_DebugPoint : public FRigUnit_DebugBase
{
    FVector                                       Vector;                                                       // 0x0008(0x000C)
    enum class ERigUnitDebugPointMode             Mode;                                                         // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Scale;                                                        // 0x0028(0x0004)
    float                                         Thickness;                                                    // 0x002C(0x0004)
    FName                                         Space;                                                        // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0040(0x0030)
    bool                                          bEnabled;                                                     // 0x0070(0x0001)
    char                                          pa_0071[0x000F]                                               // 0x0071(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugArc
// Struct Size::0x00C0
struct FRigUnit_DebugArc : public FRigUnit_DebugBaseMutable
{
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FLinearColor                                  Color;                                                        // 0x0050(0x0010)
    float                                         Radius;                                                       // 0x0060(0x0004)
    float                                         MinimumDegrees;                                               // 0x0064(0x0004)
    float                                         MaximumDegrees;                                               // 0x0068(0x0004)
    float                                         Thickness;                                                    // 0x006C(0x0004)
    int32_t                                       Detail;                                                       // 0x0070(0x0004)
    FName                                         Space;                                                        // 0x0074(0x0008)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FTransform                                    WorldOffset;                                                  // 0x0080(0x0030)
    bool                                          bEnabled;                                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x000F]                                               // 0x00B1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugRectangle
// Struct Size::0x00B0
struct FRigUnit_DebugRectangle : public FRigUnit_DebugBaseMutable
{
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FLinearColor                                  Color;                                                        // 0x0050(0x0010)
    float                                         Scale;                                                        // 0x0060(0x0004)
    float                                         Thickness;                                                    // 0x0064(0x0004)
    FName                                         Space;                                                        // 0x0068(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0070(0x0030)
    bool                                          bEnabled;                                                     // 0x00A0(0x0001)
    char                                          pa_00A1[0x000F]                                               // 0x00A1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugTransformArrayMutable
// Struct Size::0x00B0
struct FRigUnit_DebugTransformArrayMutable : public FRigUnit_DebugBaseMutable
{
    TArray<FTransform>                            Transforms;                                                   // 0x0020(0x0010)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FLinearColor                                  Color;                                                        // 0x0034(0x0010)
    float                                         Thickness;                                                    // 0x0044(0x0004)
    float                                         Scale;                                                        // 0x0048(0x0004)
    FName                                         Space;                                                        // 0x004C(0x0008)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0060(0x0030)
    bool                                          bEnabled;                                                     // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FRigUnit_DebugTransformArrayMutable_WorkData  WorkData;                                                     // 0x0098(0x0010)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_DebugTransformArrayMutable_WorkData
// Struct Size::0x0010
struct FRigUnit_DebugTransformArrayMutable_WorkData
{
    TArray<FTransform>                            DrawTransforms;                                               // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_DebugTransformMutable
// Struct Size::0x00C0
struct FRigUnit_DebugTransformMutable : public FRigUnit_DebugBaseMutable
{
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FLinearColor                                  Color;                                                        // 0x0054(0x0010)
    float                                         Thickness;                                                    // 0x0064(0x0004)
    float                                         Scale;                                                        // 0x0068(0x0004)
    FName                                         Space;                                                        // 0x006C(0x0008)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0080(0x0030)
    bool                                          bEnabled;                                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x000F]                                               // 0x00B1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DebugTransform
// Struct Size::0x00B0
struct FRigUnit_DebugTransform : public FRigUnit_DebugBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    enum class ERigUnitDebugTransformMode         Mode;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FLinearColor                                  Color;                                                        // 0x0044(0x0010)
    float                                         Thickness;                                                    // 0x0054(0x0004)
    float                                         Scale;                                                        // 0x0058(0x0004)
    FName                                         Space;                                                        // 0x005C(0x0008)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
    FTransform                                    WorldOffset;                                                  // 0x0070(0x0030)
    bool                                          bEnabled;                                                     // 0x00A0(0x0001)
    char                                          pa_00A1[0x000F]                                               // 0x00A1(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_DeltaFromPreviousTransform
// Struct Size::0x00D0
struct FRigUnit_DeltaFromPreviousTransform : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FTransform                                    Delta;                                                        // 0x0040(0x0030)
    FTransform                                    PreviousValue;                                                // 0x0070(0x0030)
    FTransform                                    Cache;                                                        // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_DeltaFromPreviousQuat
// Struct Size::0x0050
struct FRigUnit_DeltaFromPreviousQuat : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FQuat                                         Delta;                                                        // 0x0020(0x0010)
    FQuat                                         PreviousValue;                                                // 0x0030(0x0010)
    FQuat                                         Cache;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_DeltaFromPreviousVector
// Struct Size::0x0038
struct FRigUnit_DeltaFromPreviousVector : public FRigUnit_SimBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Delta;                                                        // 0x0014(0x000C)
    FVector                                       PreviousValue;                                                // 0x0020(0x000C)
    FVector                                       Cache;                                                        // 0x002C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_DeltaFromPreviousFloat
// Struct Size::0x0018
struct FRigUnit_DeltaFromPreviousFloat : public FRigUnit_SimBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Delta;                                                        // 0x000C(0x0004)
    float                                         PreviousValue;                                                // 0x0010(0x0004)
    float                                         Cache;                                                        // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_DistributeRotation
// Struct Size::0x0098
struct FRigUnit_DistributeRotation : public FRigUnit_HighlevelBaseMutable
{
    FName                                         StartBone;                                                    // 0x0020(0x0008)
    FName                                         EndBone;                                                      // 0x0028(0x0008)
    TArray<FRigUnit_DistributeRotation_Rotation>  Rotations;                                                    // 0x0030(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x0040(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x0041(0x0001)
    char                                          pa_0042[0x0006]                                               // 0x0042(0x0006)
    FRigUnit_DistributeRotation_WorkData          WorkData;                                                     // 0x0048(0x0050)
};


// ScriptStruct  ControlRig.RigUnit_DistributeRotation_WorkData
// Struct Size::0x0050
struct FRigUnit_DistributeRotation_WorkData
{
    TArray<int32_t>                               BoneIndices;                                                  // 0x0000(0x0010)
    TArray<int32_t>                               BoneRotationA;                                                // 0x0010(0x0010)
    TArray<int32_t>                               BoneRotationB;                                                // 0x0020(0x0010)
    TArray<float>                                 BoneRotationT;                                                // 0x0030(0x0010)
    TArray<FTransform>                            BoneLocalTransforms;                                          // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_DistributeRotation_Rotation
// Struct Size::0x0020
struct FRigUnit_DistributeRotation_Rotation
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_DrawContainerSetTransform
// Struct Size::0x0060
struct FRigUnit_DrawContainerSetTransform : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_DrawContainerSetThickness
// Struct Size::0x0030
struct FRigUnit_DrawContainerSetThickness : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0020(0x0008)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_DrawContainerSetColor
// Struct Size::0x0038
struct FRigUnit_DrawContainerSetColor : public FRigUnitMutable
{
    FName                                         InstructionName;                                              // 0x0020(0x0008)
    FLinearColor                                  Color;                                                        // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_DrawContainerGetInstruction
// Struct Size::0x0050
struct FRigUnit_DrawContainerGetInstruction : public FRigUnit
{
    FName                                         InstructionName;                                              // 0x0008(0x0008)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_FABRIK
// Struct Size::0x00A0
struct FRigUnit_FABRIK : public FRigUnit_HighlevelBaseMutable
{
    FName                                         StartBone;                                                    // 0x0020(0x0008)
    FName                                         EffectorBone;                                                 // 0x0028(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x0030(0x0030)
    float                                         Precision;                                                    // 0x0060(0x0004)
    float                                         Weight;                                                       // 0x0064(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       MaxIterations;                                                // 0x006C(0x0004)
    FRigUnit_FABRIK_WorkData                      WorkData;                                                     // 0x0070(0x0028)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_FABRIK_WorkData
// Struct Size::0x0028
struct FRigUnit_FABRIK_WorkData
{
    TArray<FFABRIKChainLink>                      Chain;                                                        // 0x0000(0x0010)
    TArray<int32_t>                               BoneIndices;                                                  // 0x0010(0x0010)
    int32_t                                       EffectorIndex;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AnimationCore.FABRIKChainLink
// Struct Size::0x0038
struct FFABRIKChainLink
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  ControlRig.RigUnit_FitChainToCurve
// Struct Size::0x01B0
struct FRigUnit_FitChainToCurve : public FRigUnit_HighlevelBaseMutable
{
    FName                                         StartBone;                                                    // 0x0020(0x0008)
    FName                                         EndBone;                                                      // 0x0028(0x0008)
    FCRFourPointBezier                            Bezier;                                                       // 0x0030(0x0030)
    enum class EControlRigCurveAlignment          Alignment;                                                    // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         Minimum;                                                      // 0x0064(0x0004)
    float                                         Maximum;                                                      // 0x0068(0x0004)
    int32_t                                       SamplingPrecision;                                            // 0x006C(0x0004)
    FVector                                       PrimaryAxis;                                                  // 0x0070(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x007C(0x000C)
    FVector                                       PoleVectorPosition;                                           // 0x0088(0x000C)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    TArray<FRigUnit_FitChainToCurve_Rotation>     Rotations;                                                    // 0x0098(0x0010)
    enum class EControlRigAnimEasingType          RotationEaseType;                                             // 0x00A8(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x00A9(0x0001)
    char                                          pa_00AA[0x0006]                                               // 0x00AA(0x0006)
    FRigUnit_FitChainToCurve_DebugSettings        DebugSettings;                                                // 0x00B0(0x0060)
    FRigUnit_FitChainToCurve_WorkData             WorkData;                                                     // 0x0110(0x0098)
    char                                          pa_01A8[0x0008]                                               // 0x01A8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_FitChainToCurve_WorkData
// Struct Size::0x0098
struct FRigUnit_FitChainToCurve_WorkData
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVector>                               BonePositions;                                                // 0x0008(0x0010)
    TArray<float>                                 BoneSegments;                                                 // 0x0018(0x0010)
    TArray<FVector>                               CurvePositions;                                               // 0x0028(0x0010)
    TArray<float>                                 CurveSegments;                                                // 0x0038(0x0010)
    TArray<int32_t>                               BoneIndices;                                                  // 0x0048(0x0010)
    TArray<int32_t>                               BoneRotationA;                                                // 0x0058(0x0010)
    TArray<int32_t>                               BoneRotationB;                                                // 0x0068(0x0010)
    TArray<float>                                 BoneRotationT;                                                // 0x0078(0x0010)
    TArray<FTransform>                            BoneLocalTransforms;                                          // 0x0088(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_FitChainToCurve_DebugSettings
// Struct Size::0x0060
struct FRigUnit_FitChainToCurve_DebugSettings
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  CurveColor;                                                   // 0x0008(0x0010)
    FLinearColor                                  SegmentsColor;                                                // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_FitChainToCurve_Rotation
// Struct Size::0x0020
struct FRigUnit_FitChainToCurve_Rotation
{
    FQuat                                         Rotation;                                                     // 0x0000(0x0010)
    float                                         Ratio;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MapRange_Float
// Struct Size::0x0020
struct FRigUnit_MapRange_Float : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         MinIn;                                                        // 0x000C(0x0004)
    float                                         MaxIn;                                                        // 0x0010(0x0004)
    float                                         MinOut;                                                       // 0x0014(0x0004)
    float                                         MaxOut;                                                       // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_Clamp_Float
// Struct Size::0x0018
struct FRigUnit_Clamp_Float : public FRigUnit
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Min;                                                          // 0x000C(0x0004)
    float                                         Max;                                                          // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_BinaryFloatOp
// Struct Size::0x0018
struct FRigUnit_BinaryFloatOp : public FRigUnit
{
    float                                         Argument0;                                                    // 0x0008(0x0004)
    float                                         Argument1;                                                    // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_Divide_FloatFloat
// Struct Size::0x0018
struct FRigUnit_Divide_FloatFloat : public FRigUnit_BinaryFloatOp
{
};


// ScriptStruct  ControlRig.RigUnit_Subtract_FloatFloat
// Struct Size::0x0018
struct FRigUnit_Subtract_FloatFloat : public FRigUnit_BinaryFloatOp
{
};


// ScriptStruct  ControlRig.RigUnit_Add_FloatFloat
// Struct Size::0x0018
struct FRigUnit_Add_FloatFloat : public FRigUnit_BinaryFloatOp
{
};


// ScriptStruct  ControlRig.RigUnit_Multiply_FloatFloat
// Struct Size::0x0018
struct FRigUnit_Multiply_FloatFloat : public FRigUnit_BinaryFloatOp
{
};


// ScriptStruct  ControlRig.RigUnit_GetBoneTransform
// Struct Size::0x0060
struct FRigUnit_GetBoneTransform : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    int32_t                                       CachedBoneIndex;                                              // 0x0050(0x0004)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_GetControlInitialTransform
// Struct Size::0x0060
struct FRigUnit_GetControlInitialTransform : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    int32_t                                       CachedControlIndex;                                           // 0x0050(0x0004)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_GetControlTransform
// Struct Size::0x00C0
struct FRigUnit_GetControlTransform : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    FTransform                                    Minimum;                                                      // 0x0050(0x0030)
    FTransform                                    Maximum;                                                      // 0x0080(0x0030)
    int32_t                                       CachedControlIndex;                                           // 0x00B0(0x0004)
    char                                          pa_00B4[0x000C]                                               // 0x00B4(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_GetControlRotator
// Struct Size::0x0040
struct FRigUnit_GetControlRotator : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FRotator                                      Rotator;                                                      // 0x0014(0x000C)
    FRotator                                      Minimum;                                                      // 0x0020(0x000C)
    FRotator                                      Maximum;                                                      // 0x002C(0x000C)
    int32_t                                       CachedControlIndex;                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_GetControlVector
// Struct Size::0x0040
struct FRigUnit_GetControlVector : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector                                       Vector;                                                       // 0x0014(0x000C)
    FVector                                       Minimum;                                                      // 0x0020(0x000C)
    FVector                                       Maximum;                                                      // 0x002C(0x000C)
    int32_t                                       CachedControlIndex;                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_GetControlVector2D
// Struct Size::0x0030
struct FRigUnit_GetControlVector2D : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    FVector2D                                     Vector;                                                       // 0x0010(0x0008)
    FVector2D                                     Minimum;                                                      // 0x0018(0x0008)
    FVector2D                                     Maximum;                                                      // 0x0020(0x0008)
    int32_t                                       CachedControlIndex;                                           // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_GetControlFloat
// Struct Size::0x0020
struct FRigUnit_GetControlFloat : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    float                                         FloatValue;                                                   // 0x0010(0x0004)
    float                                         Minimum;                                                      // 0x0014(0x0004)
    float                                         Maximum;                                                      // 0x0018(0x0004)
    int32_t                                       CachedControlIndex;                                           // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_GetControlBool
// Struct Size::0x0018
struct FRigUnit_GetControlBool : public FRigUnit
{
    FName                                         Control;                                                      // 0x0008(0x0008)
    bool                                          BoolValue;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       CachedControlIndex;                                           // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_GetCurveValue
// Struct Size::0x0018
struct FRigUnit_GetCurveValue : public FRigUnit
{
    FName                                         Curve;                                                        // 0x0008(0x0008)
    float                                         Value;                                                        // 0x0010(0x0004)
    int32_t                                       CachedCurveIndex;                                             // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_GetDeltaTime
// Struct Size::0x0010
struct FRigUnit_GetDeltaTime : public FRigUnit_AnimBase
{
    float                                         Result;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_GetInitialBoneTransform
// Struct Size::0x0060
struct FRigUnit_GetInitialBoneTransform : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    int32_t                                       CachedBoneIndex;                                              // 0x0050(0x0004)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_GetJointTransform
// Struct Size::0x00A0
struct FRigUnit_GetJointTransform : public FRigUnitMutable
{
    FName                                         Joint;                                                        // 0x0020(0x0008)
    enum class ETransformGetterType               Type;                                                         // 0x0028(0x0001)
    enum class ETransformSpaceMode                TransformSpace;                                               // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
    FTransform                                    BaseTransform;                                                // 0x0030(0x0030)
    FName                                         BaseJoint;                                                    // 0x0060(0x0008)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
    FTransform                                    Output;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_GetRelativeBoneTransform
// Struct Size::0x0060
struct FRigUnit_GetRelativeBoneTransform : public FRigUnit
{
    FName                                         Bone;                                                         // 0x0008(0x0008)
    FName                                         Space;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    int32_t                                       CachedBoneIndex;                                              // 0x0050(0x0004)
    int32_t                                       CachedSpaceIndex;                                             // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_GetSpaceTransform
// Struct Size::0x0060
struct FRigUnit_GetSpaceTransform : public FRigUnit
{
    FName                                         Space;                                                        // 0x0008(0x0008)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x000F]                                               // 0x0011(0x000F)
    FTransform                                    Transform;                                                    // 0x0020(0x0030)
    int32_t                                       CachedSpaceIndex;                                             // 0x0050(0x0004)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_GetWorldTime
// Struct Size::0x0028
struct FRigUnit_GetWorldTime : public FRigUnit_AnimBase
{
    float                                         Year;                                                         // 0x0008(0x0004)
    float                                         Month;                                                        // 0x000C(0x0004)
    float                                         Day;                                                          // 0x0010(0x0004)
    float                                         WeekDay;                                                      // 0x0014(0x0004)
    float                                         Hours;                                                        // 0x0018(0x0004)
    float                                         Minutes;                                                      // 0x001C(0x0004)
    float                                         Seconds;                                                      // 0x0020(0x0004)
    float                                         OverallSeconds;                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_HighlevelBase
// Struct Size::0x0008
struct FRigUnit_HighlevelBase : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit_KalmanTransform
// Struct Size::0x00A0
struct FRigUnit_KalmanTransform : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    int32_t                                       BufferSize;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x000C]                                               // 0x0044(0x000C)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
    TArray<FTransform>                            Buffer;                                                       // 0x0080(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0090(0x0004)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_KalmanVector
// Struct Size::0x0040
struct FRigUnit_KalmanVector : public FRigUnit_SimBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    int32_t                                       BufferSize;                                                   // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FVector>                               Buffer;                                                       // 0x0028(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_KalmanFloat
// Struct Size::0x0030
struct FRigUnit_KalmanFloat : public FRigUnit_SimBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    int32_t                                       BufferSize;                                                   // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0018(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathBase
// Struct Size::0x0008
struct FRigUnit_MathBase : public FRigUnit
{
};


// ScriptStruct  ControlRig.RigUnit_MathBoolBase
// Struct Size::0x0008
struct FRigUnit_MathBoolBase : public FRigUnit_MathBase
{
};


// ScriptStruct  ControlRig.RigUnit_MathBoolNotEquals
// Struct Size::0x0010
struct FRigUnit_MathBoolNotEquals : public FRigUnit_MathBoolBase
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit_MathBoolEquals
// Struct Size::0x0010
struct FRigUnit_MathBoolEquals : public FRigUnit_MathBoolBase
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit_MathBoolBinaryOp
// Struct Size::0x0010
struct FRigUnit_MathBoolBinaryOp : public FRigUnit_MathBoolBase
{
    bool                                          A;                                                            // 0x0008(0x0001)
    bool                                          B;                                                            // 0x0009(0x0001)
    bool                                          Result;                                                       // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  ControlRig.RigUnit_MathBoolOr
// Struct Size::0x0010
struct FRigUnit_MathBoolOr : public FRigUnit_MathBoolBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathBoolNand
// Struct Size::0x0010
struct FRigUnit_MathBoolNand : public FRigUnit_MathBoolBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathBoolAnd
// Struct Size::0x0010
struct FRigUnit_MathBoolAnd : public FRigUnit_MathBoolBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathBoolUnaryOp
// Struct Size::0x0010
struct FRigUnit_MathBoolUnaryOp : public FRigUnit_MathBoolBase
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    bool                                          Result;                                                       // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  ControlRig.RigUnit_MathBoolNot
// Struct Size::0x0010
struct FRigUnit_MathBoolNot : public FRigUnit_MathBoolUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathBoolConstant
// Struct Size::0x0010
struct FRigUnit_MathBoolConstant : public FRigUnit_MathBoolBase
{
    bool                                          Value;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathBoolConstFalse
// Struct Size::0x0010
struct FRigUnit_MathBoolConstFalse : public FRigUnit_MathBoolConstant
{
};


// ScriptStruct  ControlRig.RigUnit_MathBoolConstTrue
// Struct Size::0x0010
struct FRigUnit_MathBoolConstTrue : public FRigUnit_MathBoolConstant
{
};


// ScriptStruct  ControlRig.RigUnit_MathColorBase
// Struct Size::0x0008
struct FRigUnit_MathColorBase : public FRigUnit_MathBase
{
};


// ScriptStruct  ControlRig.RigUnit_MathColorLerp
// Struct Size::0x0040
struct FRigUnit_MathColorLerp : public FRigUnit_MathColorBase
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    float                                         T;                                                            // 0x0028(0x0004)
    FLinearColor                                  Result;                                                       // 0x002C(0x0010)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathColorBinaryOp
// Struct Size::0x0038
struct FRigUnit_MathColorBinaryOp : public FRigUnit_MathColorBase
{
    FLinearColor                                  A;                                                            // 0x0008(0x0010)
    FLinearColor                                  B;                                                            // 0x0018(0x0010)
    FLinearColor                                  Result;                                                       // 0x0028(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathColorMul
// Struct Size::0x0038
struct FRigUnit_MathColorMul : public FRigUnit_MathColorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathColorSub
// Struct Size::0x0038
struct FRigUnit_MathColorSub : public FRigUnit_MathColorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathColorAdd
// Struct Size::0x0038
struct FRigUnit_MathColorAdd : public FRigUnit_MathColorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathColorFromFloat
// Struct Size::0x0020
struct FRigUnit_MathColorFromFloat : public FRigUnit_MathColorBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    FLinearColor                                  Result;                                                       // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatBase
// Struct Size::0x0008
struct FRigUnit_MathFloatBase : public FRigUnit_MathBase
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatLawOfCosine
// Struct Size::0x0028
struct FRigUnit_MathFloatLawOfCosine : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         C;                                                            // 0x0010(0x0004)
    float                                         AlphaAngle;                                                   // 0x0014(0x0004)
    float                                         BetaAngle;                                                    // 0x0018(0x0004)
    float                                         GammaAngle;                                                   // 0x001C(0x0004)
    bool                                          bValid;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatUnaryOp
// Struct Size::0x0010
struct FRigUnit_MathFloatUnaryOp : public FRigUnit_MathFloatBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Result;                                                       // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatAtan
// Struct Size::0x0010
struct FRigUnit_MathFloatAtan : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatAcos
// Struct Size::0x0010
struct FRigUnit_MathFloatAcos : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatAsin
// Struct Size::0x0010
struct FRigUnit_MathFloatAsin : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatTan
// Struct Size::0x0010
struct FRigUnit_MathFloatTan : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatCos
// Struct Size::0x0010
struct FRigUnit_MathFloatCos : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatSin
// Struct Size::0x0010
struct FRigUnit_MathFloatSin : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatRad
// Struct Size::0x0010
struct FRigUnit_MathFloatRad : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatDeg
// Struct Size::0x0010
struct FRigUnit_MathFloatDeg : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatSelectBool
// Struct Size::0x0018
struct FRigUnit_MathFloatSelectBool : public FRigUnit_MathFloatBase
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         IfTrue;                                                       // 0x000C(0x0004)
    float                                         IfFalse;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatIsNearlyEqual
// Struct Size::0x0018
struct FRigUnit_MathFloatIsNearlyEqual : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Tolerance;                                                    // 0x0010(0x0004)
    bool                                          Result;                                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatIsNearlyZero
// Struct Size::0x0018
struct FRigUnit_MathFloatIsNearlyZero : public FRigUnit_MathFloatBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Tolerance;                                                    // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatLessEqual
// Struct Size::0x0018
struct FRigUnit_MathFloatLessEqual : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatGreaterEqual
// Struct Size::0x0018
struct FRigUnit_MathFloatGreaterEqual : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatLess
// Struct Size::0x0018
struct FRigUnit_MathFloatLess : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatGreater
// Struct Size::0x0018
struct FRigUnit_MathFloatGreater : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatNotEquals
// Struct Size::0x0018
struct FRigUnit_MathFloatNotEquals : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatEquals
// Struct Size::0x0018
struct FRigUnit_MathFloatEquals : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    bool                                          Result;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatRemap
// Struct Size::0x0028
struct FRigUnit_MathFloatRemap : public FRigUnit_MathFloatBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SourceMinimum;                                                // 0x000C(0x0004)
    float                                         SourceMaximum;                                                // 0x0010(0x0004)
    float                                         TargetMinimum;                                                // 0x0014(0x0004)
    float                                         TargetMaximum;                                                // 0x0018(0x0004)
    bool                                          bClamp;                                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatLerp
// Struct Size::0x0018
struct FRigUnit_MathFloatLerp : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         T;                                                            // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatClamp
// Struct Size::0x0018
struct FRigUnit_MathFloatClamp : public FRigUnit_MathFloatBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatSign
// Struct Size::0x0010
struct FRigUnit_MathFloatSign : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatRound
// Struct Size::0x0010
struct FRigUnit_MathFloatRound : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatCeil
// Struct Size::0x0010
struct FRigUnit_MathFloatCeil : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatFloor
// Struct Size::0x0010
struct FRigUnit_MathFloatFloor : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatAbs
// Struct Size::0x0010
struct FRigUnit_MathFloatAbs : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatNegate
// Struct Size::0x0010
struct FRigUnit_MathFloatNegate : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatSqrt
// Struct Size::0x0010
struct FRigUnit_MathFloatSqrt : public FRigUnit_MathFloatUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatBinaryOp
// Struct Size::0x0018
struct FRigUnit_MathFloatBinaryOp : public FRigUnit_MathFloatBase
{
    float                                         A;                                                            // 0x0008(0x0004)
    float                                         B;                                                            // 0x000C(0x0004)
    float                                         Result;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatPow
// Struct Size::0x0018
struct FRigUnit_MathFloatPow : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatMax
// Struct Size::0x0018
struct FRigUnit_MathFloatMax : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatMin
// Struct Size::0x0018
struct FRigUnit_MathFloatMin : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatMod
// Struct Size::0x0018
struct FRigUnit_MathFloatMod : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatDiv
// Struct Size::0x0018
struct FRigUnit_MathFloatDiv : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatMul
// Struct Size::0x0018
struct FRigUnit_MathFloatMul : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatSub
// Struct Size::0x0018
struct FRigUnit_MathFloatSub : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatAdd
// Struct Size::0x0018
struct FRigUnit_MathFloatAdd : public FRigUnit_MathFloatBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatConstant
// Struct Size::0x0010
struct FRigUnit_MathFloatConstant : public FRigUnit_MathFloatBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathFloatConstTwoPi
// Struct Size::0x0010
struct FRigUnit_MathFloatConstTwoPi : public FRigUnit_MathFloatConstant
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatConstHalfPi
// Struct Size::0x0010
struct FRigUnit_MathFloatConstHalfPi : public FRigUnit_MathFloatConstant
{
};


// ScriptStruct  ControlRig.RigUnit_MathFloatConstPi
// Struct Size::0x0010
struct FRigUnit_MathFloatConstPi : public FRigUnit_MathFloatConstant
{
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionRotationOrder
// Struct Size::0x0010
struct FRigUnit_MathQuaternionRotationOrder : public FRigUnit_MathBase
{
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionBase
// Struct Size::0x0008
struct FRigUnit_MathQuaternionBase : public FRigUnit_MathBase
{
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionSwingTwist
// Struct Size::0x0050
struct FRigUnit_MathQuaternionSwingTwist : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Input;                                                        // 0x0010(0x0010)
    FVector                                       TwistAxis;                                                    // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Swing;                                                        // 0x0030(0x0010)
    FQuat                                         Twist;                                                        // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionGetAxis
// Struct Size::0x0030
struct FRigUnit_MathQuaternionGetAxis : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    enum class EAxis                              Axis;                                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionRotateVector
// Struct Size::0x0040
struct FRigUnit_MathQuaternionRotateVector : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    FVector                                       Vector;                                                       // 0x0020(0x000C)
    FVector                                       Result;                                                       // 0x002C(0x000C)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionUnaryOp
// Struct Size::0x0030
struct FRigUnit_MathQuaternionUnaryOp : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionUnit
// Struct Size::0x0030
struct FRigUnit_MathQuaternionUnit : public FRigUnit_MathQuaternionUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionDot
// Struct Size::0x0040
struct FRigUnit_MathQuaternionDot : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    float                                         Result;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionSelectBool
// Struct Size::0x0040
struct FRigUnit_MathQuaternionSelectBool : public FRigUnit_MathQuaternionBase
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FQuat                                         IfTrue;                                                       // 0x0010(0x0010)
    FQuat                                         IfFalse;                                                      // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionNotEquals
// Struct Size::0x0040
struct FRigUnit_MathQuaternionNotEquals : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    bool                                          Result;                                                       // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionEquals
// Struct Size::0x0040
struct FRigUnit_MathQuaternionEquals : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    bool                                          Result;                                                       // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionSlerp
// Struct Size::0x0050
struct FRigUnit_MathQuaternionSlerp : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    float                                         T;                                                            // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FQuat                                         Result;                                                       // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionInverse
// Struct Size::0x0030
struct FRigUnit_MathQuaternionInverse : public FRigUnit_MathQuaternionUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionBinaryOp
// Struct Size::0x0040
struct FRigUnit_MathQuaternionBinaryOp : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         A;                                                            // 0x0010(0x0010)
    FQuat                                         B;                                                            // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionMul
// Struct Size::0x0040
struct FRigUnit_MathQuaternionMul : public FRigUnit_MathQuaternionBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionToRotator
// Struct Size::0x0030
struct FRigUnit_MathQuaternionToRotator : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FRotator                                      Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionToEuler
// Struct Size::0x0030
struct FRigUnit_MathQuaternionToEuler : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionToAxisAndAngle
// Struct Size::0x0030
struct FRigUnit_MathQuaternionToAxisAndAngle : public FRigUnit_MathQuaternionBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    FVector                                       Axis;                                                         // 0x0020(0x000C)
    float                                         Angle;                                                        // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionFromTwoVectors
// Struct Size::0x0030
struct FRigUnit_MathQuaternionFromTwoVectors : public FRigUnit_MathQuaternionBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionFromRotator
// Struct Size::0x0030
struct FRigUnit_MathQuaternionFromRotator : public FRigUnit_MathQuaternionBase
{
    FRotator                                      Rotator;                                                      // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionFromEuler
// Struct Size::0x0030
struct FRigUnit_MathQuaternionFromEuler : public FRigUnit_MathQuaternionBase
{
    FVector                                       Euler;                                                        // 0x0008(0x000C)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathQuaternionFromAxisAndAngle
// Struct Size::0x0030
struct FRigUnit_MathQuaternionFromAxisAndAngle : public FRigUnit_MathQuaternionBase
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    float                                         Angle;                                                        // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformBase
// Struct Size::0x0008
struct FRigUnit_MathTransformBase : public FRigUnit_MathBase
{
};


// ScriptStruct  ControlRig.RigUnit_MathTransformClampSpatially
// Struct Size::0x00D0
struct FRigUnit_MathTransformClampSpatially : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    enum class EAxis                              Axis;                                                         // 0x0040(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    float                                         Minimum;                                                      // 0x0044(0x0004)
    float                                         Maximum;                                                      // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Space;                                                        // 0x0050(0x0030)
    bool                                          bDrawDebug;                                                   // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0084(0x0010)
    float                                         DebugThickness;                                               // 0x0094(0x0004)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FTransform                                    Result;                                                       // 0x00A0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformFromSRT
// Struct Size::0x0090
struct FRigUnit_MathTransformFromSRT : public FRigUnit_MathTransformBase
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Rotation;                                                     // 0x0014(0x000C)
    enum class EControlRigRotationOrder           RotationOrder;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector                                       Scale;                                                        // 0x0024(0x000C)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    FEulerTransform                               EulerTransform;                                               // 0x0060(0x0024)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformTransformVector
// Struct Size::0x0060
struct FRigUnit_MathTransformTransformVector : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       Location;                                                     // 0x0040(0x000C)
    FVector                                       Result;                                                       // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformRotateVector
// Struct Size::0x0060
struct FRigUnit_MathTransformRotateVector : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FVector                                       Direction;                                                    // 0x0040(0x000C)
    FVector                                       Result;                                                       // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformSelectBool
// Struct Size::0x00A0
struct FRigUnit_MathTransformSelectBool : public FRigUnit_MathTransformBase
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FTransform                                    IfTrue;                                                       // 0x0010(0x0030)
    FTransform                                    IfFalse;                                                      // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformLerp
// Struct Size::0x00B0
struct FRigUnit_MathTransformLerp : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0030)
    FTransform                                    B;                                                            // 0x0040(0x0030)
    float                                         T;                                                            // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    Result;                                                       // 0x0080(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformUnaryOp
// Struct Size::0x0070
struct FRigUnit_MathTransformUnaryOp : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FTransform                                    Result;                                                       // 0x0040(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformInverse
// Struct Size::0x0070
struct FRigUnit_MathTransformInverse : public FRigUnit_MathTransformUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathTransformMakeAbsolute
// Struct Size::0x00A0
struct FRigUnit_MathTransformMakeAbsolute : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Local;                                                        // 0x0010(0x0030)
    FTransform                                    Parent;                                                       // 0x0040(0x0030)
    FTransform                                    Global;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformMakeRelative
// Struct Size::0x00A0
struct FRigUnit_MathTransformMakeRelative : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Global;                                                       // 0x0010(0x0030)
    FTransform                                    Parent;                                                       // 0x0040(0x0030)
    FTransform                                    Local;                                                        // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformBinaryOp
// Struct Size::0x00A0
struct FRigUnit_MathTransformBinaryOp : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    A;                                                            // 0x0010(0x0030)
    FTransform                                    B;                                                            // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformMul
// Struct Size::0x00A0
struct FRigUnit_MathTransformMul : public FRigUnit_MathTransformBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathTransformToEulerTransform
// Struct Size::0x0070
struct FRigUnit_MathTransformToEulerTransform : public FRigUnit_MathTransformBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    FEulerTransform                               Result;                                                       // 0x0040(0x0024)
    char                                          pa_0064[0x000C]                                               // 0x0064(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathTransformFromEulerTransform
// Struct Size::0x0060
struct FRigUnit_MathTransformFromEulerTransform : public FRigUnit_MathTransformBase
{
    FEulerTransform                               EulerTransform;                                               // 0x0008(0x0024)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Result;                                                       // 0x0030(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorBase
// Struct Size::0x0008
struct FRigUnit_MathVectorBase : public FRigUnit_MathBase
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorClampSpatially
// Struct Size::0x0080
struct FRigUnit_MathVectorClampSpatially : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    enum class EAxis                              Axis;                                                         // 0x0014(0x0001)
    enum class EControlRigClampSpatialMode        Type;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    float                                         Minimum;                                                      // 0x0018(0x0004)
    float                                         Maximum;                                                      // 0x001C(0x0004)
    FTransform                                    Space;                                                        // 0x0020(0x0030)
    bool                                          bDrawDebug;                                                   // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FLinearColor                                  DebugColor;                                                   // 0x0054(0x0010)
    float                                         DebugThickness;                                               // 0x0064(0x0004)
    FVector                                       Result;                                                       // 0x0068(0x000C)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorMakeBezierFourPoint
// Struct Size::0x0038
struct FRigUnit_MathVectorMakeBezierFourPoint : public FRigUnit_MathVectorBase
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorBezierFourPoint
// Struct Size::0x0058
struct FRigUnit_MathVectorBezierFourPoint : public FRigUnit_MathVectorBase
{
    FCRFourPointBezier                            Bezier;                                                       // 0x0008(0x0030)
    float                                         T;                                                            // 0x0038(0x0004)
    FVector                                       Result;                                                       // 0x003C(0x000C)
    FVector                                       Tangent;                                                      // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorOrthogonal
// Struct Size::0x0028
struct FRigUnit_MathVectorOrthogonal : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorParallel
// Struct Size::0x0028
struct FRigUnit_MathVectorParallel : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorAngle
// Struct Size::0x0028
struct FRigUnit_MathVectorAngle : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorMirror
// Struct Size::0x0030
struct FRigUnit_MathVectorMirror : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Normal;                                                       // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorClampLength
// Struct Size::0x0028
struct FRigUnit_MathVectorClampLength : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         MinimumLength;                                                // 0x0014(0x0004)
    float                                         MaximumLength;                                                // 0x0018(0x0004)
    FVector                                       Result;                                                       // 0x001C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorSetLength
// Struct Size::0x0028
struct FRigUnit_MathVectorSetLength : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Length;                                                       // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorUnaryOp
// Struct Size::0x0020
struct FRigUnit_MathVectorUnaryOp : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Result;                                                       // 0x0014(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorUnit
// Struct Size::0x0020
struct FRigUnit_MathVectorUnit : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorDot
// Struct Size::0x0028
struct FRigUnit_MathVectorDot : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorBinaryOp
// Struct Size::0x0030
struct FRigUnit_MathVectorBinaryOp : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorCross
// Struct Size::0x0030
struct FRigUnit_MathVectorCross : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorDistance
// Struct Size::0x0028
struct FRigUnit_MathVectorDistance : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorLength
// Struct Size::0x0018
struct FRigUnit_MathVectorLength : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorLengthSquared
// Struct Size::0x0018
struct FRigUnit_MathVectorLengthSquared : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Result;                                                       // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorRad
// Struct Size::0x0020
struct FRigUnit_MathVectorRad : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorDeg
// Struct Size::0x0020
struct FRigUnit_MathVectorDeg : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorSelectBool
// Struct Size::0x0030
struct FRigUnit_MathVectorSelectBool : public FRigUnit_MathVectorBase
{
    bool                                          Condition;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector                                       IfTrue;                                                       // 0x000C(0x000C)
    FVector                                       IfFalse;                                                      // 0x0018(0x000C)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorIsNearlyEqual
// Struct Size::0x0028
struct FRigUnit_MathVectorIsNearlyEqual : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         Tolerance;                                                    // 0x0020(0x0004)
    bool                                          Result;                                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorIsNearlyZero
// Struct Size::0x0020
struct FRigUnit_MathVectorIsNearlyZero : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Tolerance;                                                    // 0x0014(0x0004)
    bool                                          Result;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorNotEquals
// Struct Size::0x0028
struct FRigUnit_MathVectorNotEquals : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorEquals
// Struct Size::0x0028
struct FRigUnit_MathVectorEquals : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    bool                                          Result;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorRemap
// Struct Size::0x0058
struct FRigUnit_MathVectorRemap : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       SourceMinimum;                                                // 0x0014(0x000C)
    FVector                                       SourceMaximum;                                                // 0x0020(0x000C)
    FVector                                       TargetMinimum;                                                // 0x002C(0x000C)
    FVector                                       TargetMaximum;                                                // 0x0038(0x000C)
    bool                                          bClamp;                                                       // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    FVector                                       Result;                                                       // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorLerp
// Struct Size::0x0030
struct FRigUnit_MathVectorLerp : public FRigUnit_MathVectorBase
{
    FVector                                       A;                                                            // 0x0008(0x000C)
    FVector                                       B;                                                            // 0x0014(0x000C)
    float                                         T;                                                            // 0x0020(0x0004)
    FVector                                       Result;                                                       // 0x0024(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorClamp
// Struct Size::0x0038
struct FRigUnit_MathVectorClamp : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    FVector                                       Minimum;                                                      // 0x0014(0x000C)
    FVector                                       Maximum;                                                      // 0x0020(0x000C)
    FVector                                       Result;                                                       // 0x002C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorSign
// Struct Size::0x0020
struct FRigUnit_MathVectorSign : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorRound
// Struct Size::0x0020
struct FRigUnit_MathVectorRound : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorCeil
// Struct Size::0x0020
struct FRigUnit_MathVectorCeil : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorFloor
// Struct Size::0x0020
struct FRigUnit_MathVectorFloor : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorAbs
// Struct Size::0x0020
struct FRigUnit_MathVectorAbs : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorNegate
// Struct Size::0x0020
struct FRigUnit_MathVectorNegate : public FRigUnit_MathVectorUnaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorMax
// Struct Size::0x0030
struct FRigUnit_MathVectorMax : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorMin
// Struct Size::0x0030
struct FRigUnit_MathVectorMin : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorMod
// Struct Size::0x0030
struct FRigUnit_MathVectorMod : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorDiv
// Struct Size::0x0030
struct FRigUnit_MathVectorDiv : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorScale
// Struct Size::0x0028
struct FRigUnit_MathVectorScale : public FRigUnit_MathVectorBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         Factor;                                                       // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_MathVectorMul
// Struct Size::0x0030
struct FRigUnit_MathVectorMul : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorSub
// Struct Size::0x0030
struct FRigUnit_MathVectorSub : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorAdd
// Struct Size::0x0030
struct FRigUnit_MathVectorAdd : public FRigUnit_MathVectorBinaryOp
{
};


// ScriptStruct  ControlRig.RigUnit_MathVectorFromFloat
// Struct Size::0x0018
struct FRigUnit_MathVectorFromFloat : public FRigUnit_MathVectorBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    FVector                                       Result;                                                       // 0x000C(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_ModifyBoneTransforms
// Struct Size::0x0050
struct FRigUnit_ModifyBoneTransforms : public FRigUnit_HighlevelBaseMutable
{
    TArray<FRigUnit_ModifyBoneTransforms_PerBone> BoneToModify;                                                 // 0x0020(0x0010)
    float                                         Weight;                                                       // 0x0030(0x0004)
    float                                         WeightMinimum;                                                // 0x0034(0x0004)
    float                                         WeightMaximum;                                                // 0x0038(0x0004)
    enum class EControlRigModifyBoneMode          Mode;                                                         // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    FRigUnit_ModifyBoneTransforms_WorkData        WorkData;                                                     // 0x0040(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_ModifyBoneTransforms_WorkData
// Struct Size::0x0010
struct FRigUnit_ModifyBoneTransforms_WorkData
{
    TArray<int32_t>                               CachedBoneIndices;                                            // 0x0000(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_ModifyBoneTransforms_PerBone
// Struct Size::0x0040
struct FRigUnit_ModifyBoneTransforms_PerBone
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_MultiFABRIK
// Struct Size::0x00A8
struct FRigUnit_MultiFABRIK : public FRigUnit_HighlevelBaseMutable
{
    FName                                         RootBone;                                                     // 0x0020(0x0008)
    TArray<FRigUnit_MultiFABRIK_EndEffector>      Effectors;                                                    // 0x0028(0x0010)
    float                                         Precision;                                                    // 0x0038(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    int32_t                                       MaxIterations;                                                // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FRigUnit_MultiFABRIK_WorkData                 WorkData;                                                     // 0x0048(0x0060)
};


// ScriptStruct  ControlRig.RigUnit_MultiFABRIK_WorkData
// Struct Size::0x0060
struct FRigUnit_MultiFABRIK_WorkData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  ControlRig.RigUnit_MultiFABRIK_EndEffector
// Struct Size::0x0014
struct FRigUnit_MultiFABRIK_EndEffector
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    FVector                                       Location;                                                     // 0x0008(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_NoiseVector
// Struct Size::0x0050
struct FRigUnit_NoiseVector : public FRigUnit_MathBase
{
    FVector                                       Position;                                                     // 0x0008(0x000C)
    FVector                                       Speed;                                                        // 0x0014(0x000C)
    FVector                                       Frequency;                                                    // 0x0020(0x000C)
    float                                         Minimum;                                                      // 0x002C(0x0004)
    float                                         Maximum;                                                      // 0x0030(0x0004)
    FVector                                       Result;                                                       // 0x0034(0x000C)
    FVector                                       Time;                                                         // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_NoiseFloat
// Struct Size::0x0028
struct FRigUnit_NoiseFloat : public FRigUnit_MathBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         Speed;                                                        // 0x000C(0x0004)
    float                                         Frequency;                                                    // 0x0010(0x0004)
    float                                         Minimum;                                                      // 0x0014(0x0004)
    float                                         Maximum;                                                      // 0x0018(0x0004)
    float                                         Result;                                                       // 0x001C(0x0004)
    float                                         Time;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SimBaseMutable
// Struct Size::0x0020
struct FRigUnit_SimBaseMutable : public FRigUnitMutable
{
};


// ScriptStruct  ControlRig.RigUnit_PointSimulation
// Struct Size::0x01B0
struct FRigUnit_PointSimulation : public FRigUnit_SimBaseMutable
{
    TArray<FCRSimPoint>                           Points;                                                       // 0x0020(0x0010)
    TArray<FCRSimLinearSpring>                    Links;                                                        // 0x0030(0x0010)
    TArray<FCRSimPointForce>                      Forces;                                                       // 0x0040(0x0010)
    TArray<FCRSimSoftCollision>                   CollisionVolumes;                                             // 0x0050(0x0010)
    float                                         SimulatedStepsPerSecond;                                      // 0x0060(0x0004)
    enum class ECRSimPointIntegrateType           IntegratorType;                                               // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    float                                         VerletBlend;                                                  // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<FRigUnit_PointSimulation_BoneTarget>   BoneTargets;                                                  // 0x0070(0x0010)
    bool                                          bLimitLocalPosition;                                          // 0x0080(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x0081(0x0001)
    char                                          pa_0082[0x0002]                                               // 0x0082(0x0002)
    FVector                                       PrimaryAimAxis;                                               // 0x0084(0x000C)
    FVector                                       SecondaryAimAxis;                                             // 0x0090(0x000C)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FRigUnit_PointSimulation_DebugSettings        DebugSettings;                                                // 0x00A0(0x0050)
    FCRFourPointBezier                            Bezier;                                                       // 0x00F0(0x0030)
    FRigUnit_PointSimulation_WorkData             WorkData;                                                     // 0x0120(0x0088)
    char                                          pa_01A8[0x0008]                                               // 0x01A8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_PointSimulation_WorkData
// Struct Size::0x0088
struct FRigUnit_PointSimulation_WorkData
{
    FCRSimPointContainer                          Simulation;                                                   // 0x0000(0x0078)
    TArray<int32_t>                               BoneIndices;                                                  // 0x0078(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_PointSimulation_DebugSettings
// Struct Size::0x0050
struct FRigUnit_PointSimulation_DebugSettings
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    float                                         CollisionScale;                                               // 0x0008(0x0004)
    bool                                          bDrawPointsAsSpheres;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FLinearColor                                  Color;                                                        // 0x0010(0x0010)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_PointSimulation_BoneTarget
// Struct Size::0x0014
struct FRigUnit_PointSimulation_BoneTarget
{
    FName                                         Bone;                                                         // 0x0000(0x0008)
    int32_t                                       TranslationPoint;                                             // 0x0008(0x0004)
    int32_t                                       PrimaryAimPoint;                                              // 0x000C(0x0004)
    int32_t                                       SecondaryAimPoint;                                            // 0x0010(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_EndProfilingTimer
// Struct Size::0x0040
struct FRigUnit_EndProfilingTimer : public FRigUnit_DebugBaseMutable
{
    int32_t                                       NumberOfMeasurements;                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       Prefix;                                                       // 0x0028(0x0010)
    float                                         AccumulatedTime;                                              // 0x0038(0x0004)
    int32_t                                       MeasurementsLeft;                                             // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_StartProfilingTimer
// Struct Size::0x0020
struct FRigUnit_StartProfilingTimer : public FRigUnit_DebugBaseMutable
{
};


// ScriptStruct  ControlRig.RigUnit_QuaternionToAngle
// Struct Size::0x0040
struct FRigUnit_QuaternionToAngle : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FQuat                                         Argument;                                                     // 0x0020(0x0010)
    float                                         Angle;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_QuaternionFromAxisAndAngle
// Struct Size::0x0030
struct FRigUnit_QuaternionFromAxisAndAngle : public FRigUnit
{
    FVector                                       Axis;                                                         // 0x0008(0x000C)
    float                                         Angle;                                                        // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_QuaternionToAxisAndAngle
// Struct Size::0x0030
struct FRigUnit_QuaternionToAxisAndAngle : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0010)
    FVector                                       Axis;                                                         // 0x0020(0x000C)
    float                                         Angle;                                                        // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_UnaryQuaternionOp
// Struct Size::0x0030
struct FRigUnit_UnaryQuaternionOp : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument;                                                     // 0x0010(0x0010)
    FQuat                                         Result;                                                       // 0x0020(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_InverseQuaterion
// Struct Size::0x0030
struct FRigUnit_InverseQuaterion : public FRigUnit_UnaryQuaternionOp
{
};


// ScriptStruct  ControlRig.RigUnit_BinaryQuaternionOp
// Struct Size::0x0040
struct FRigUnit_BinaryQuaternionOp : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Argument0;                                                    // 0x0010(0x0010)
    FQuat                                         Argument1;                                                    // 0x0020(0x0010)
    FQuat                                         Result;                                                       // 0x0030(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_MultiplyQuaternion
// Struct Size::0x0040
struct FRigUnit_MultiplyQuaternion : public FRigUnit_BinaryQuaternionOp
{
};


// ScriptStruct  ControlRig.RigUnit_RandomVector
// Struct Size::0x0038
struct FRigUnit_RandomVector : public FRigUnit_MathBase
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    FVector                                       Result;                                                       // 0x0018(0x000C)
    FVector                                       LastResult;                                                   // 0x0024(0x000C)
    int32_t                                       LastSeed;                                                     // 0x0030(0x0004)
    float                                         TimeLeft;                                                     // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_RandomFloat
// Struct Size::0x0028
struct FRigUnit_RandomFloat : public FRigUnit_MathBase
{
    int32_t                                       Seed;                                                         // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    float                                         LastResult;                                                   // 0x001C(0x0004)
    int32_t                                       LastSeed;                                                     // 0x0020(0x0004)
    float                                         TimeLeft;                                                     // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetBoneRotation
// Struct Size::0x0050
struct FRigUnit_SetBoneRotation : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FQuat                                         Rotation;                                                     // 0x0030(0x0010)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Weight;                                                       // 0x0044(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    int32_t                                       CachedBoneIndex;                                              // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetBoneTransform
// Struct Size::0x0070
struct FRigUnit_SetBoneTransform : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         Weight;                                                       // 0x0064(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       CachedBoneIndex;                                              // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetBoneTranslation
// Struct Size::0x0048
struct FRigUnit_SetBoneTranslation : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0020(0x0008)
    FVector                                       Translation;                                                  // 0x0028(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         Weight;                                                       // 0x0038(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    int32_t                                       CachedBoneIndex;                                              // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetControlColor
// Struct Size::0x0040
struct FRigUnit_SetControlColor : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0020(0x0008)
    FLinearColor                                  Color;                                                        // 0x0028(0x0010)
    int32_t                                       CachedControlIndex;                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetControlTransform
// Struct Size::0x0070
struct FRigUnit_SetControlTransform : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0020(0x0008)
    float                                         Weight;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       CachedControlIndex;                                           // 0x0064(0x0004)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_SetControlRotator
// Struct Size::0x0040
struct FRigUnit_SetControlRotator : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0020(0x0008)
    float                                         Weight;                                                       // 0x0028(0x0004)
    FRotator                                      Rotator;                                                      // 0x002C(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       CachedControlIndex;                                           // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetControlVector
// Struct Size::0x0040
struct FRigUnit_SetControlVector : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0020(0x0008)
    float                                         Weight;                                                       // 0x0028(0x0004)
    FVector                                       Vector;                                                       // 0x002C(0x000C)
    enum class EBoneGetterSetterMode              Space;                                                        // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       CachedControlIndex;                                           // 0x003C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetControlVector2D
// Struct Size::0x0038
struct FRigUnit_SetControlVector2D : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0020(0x0008)
    float                                         Weight;                                                       // 0x0028(0x0004)
    FVector2D                                     Vector;                                                       // 0x002C(0x0008)
    int32_t                                       CachedControlIndex;                                           // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetControlFloat
// Struct Size::0x0038
struct FRigUnit_SetControlFloat : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0020(0x0008)
    float                                         Weight;                                                       // 0x0028(0x0004)
    float                                         FloatValue;                                                   // 0x002C(0x0004)
    int32_t                                       CachedControlIndex;                                           // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetControlBool
// Struct Size::0x0030
struct FRigUnit_SetControlBool : public FRigUnitMutable
{
    FName                                         Control;                                                      // 0x0020(0x0008)
    bool                                          BoolValue;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       CachedControlIndex;                                           // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetCurveValue
// Struct Size::0x0030
struct FRigUnit_SetCurveValue : public FRigUnitMutable
{
    FName                                         Curve;                                                        // 0x0020(0x0008)
    float                                         Value;                                                        // 0x0028(0x0004)
    int32_t                                       CachedCurveIndex;                                             // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetRelativeBoneTransform
// Struct Size::0x0070
struct FRigUnit_SetRelativeBoneTransform : public FRigUnitMutable
{
    FName                                         Bone;                                                         // 0x0020(0x0008)
    FName                                         Space;                                                        // 0x0028(0x0008)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    float                                         Weight;                                                       // 0x0060(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    int32_t                                       CachedBoneIndex;                                              // 0x0068(0x0004)
    int32_t                                       CachedSpaceIndex;                                             // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_SetSpaceTransform
// Struct Size::0x0070
struct FRigUnit_SetSpaceTransform : public FRigUnitMutable
{
    FName                                         Space;                                                        // 0x0020(0x0008)
    float                                         Weight;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FTransform                                    Transform;                                                    // 0x0030(0x0030)
    enum class EBoneGetterSetterMode              SpaceType;                                                    // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       CachedSpaceIndex;                                             // 0x0064(0x0004)
    char                                          pa_0068[0x0008]                                               // 0x0068(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_SlideChain
// Struct Size::0x0080
struct FRigUnit_SlideChain : public FRigUnit_HighlevelBaseMutable
{
    FName                                         StartBone;                                                    // 0x0020(0x0008)
    FName                                         EndBone;                                                      // 0x0028(0x0008)
    float                                         SlideAmount;                                                  // 0x0030(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FRigUnit_SlideChain_WorkData                  WorkData;                                                     // 0x0038(0x0048)
};


// ScriptStruct  ControlRig.RigUnit_SlideChain_WorkData
// Struct Size::0x0048
struct FRigUnit_SlideChain_WorkData
{
    float                                         ChainLength;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 BoneSegments;                                                 // 0x0008(0x0010)
    TArray<int32_t>                               BoneIndices;                                                  // 0x0018(0x0010)
    TArray<FTransform>                            Transforms;                                                   // 0x0028(0x0010)
    TArray<FTransform>                            BlendedTransforms;                                            // 0x0038(0x0010)
};


// ScriptStruct  ControlRig.RigUnit_SpringIK
// Struct Size::0x0180
struct FRigUnit_SpringIK : public FRigUnit_HighlevelBaseMutable
{
    FName                                         StartBone;                                                    // 0x0020(0x0008)
    FName                                         EndBone;                                                      // 0x0028(0x0008)
    float                                         HierarchyStrength;                                            // 0x0030(0x0004)
    float                                         EffectorStrength;                                             // 0x0034(0x0004)
    float                                         EffectorRatio;                                                // 0x0038(0x0004)
    float                                         RootStrength;                                                 // 0x003C(0x0004)
    float                                         RootRatio;                                                    // 0x0040(0x0004)
    float                                         Damping;                                                      // 0x0044(0x0004)
    FVector                                       PoleVector;                                                   // 0x0048(0x000C)
    bool                                          bFlipPolePlane;                                               // 0x0054(0x0001)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x0055(0x0001)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
    FName                                         PoleVectorSpace;                                              // 0x0058(0x0008)
    FVector                                       PrimaryAxis;                                                  // 0x0060(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x006C(0x000C)
    bool                                          bLiveSimulation;                                              // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    int32_t                                       Iterations;                                                   // 0x007C(0x0004)
    bool                                          bLimitLocalPosition;                                          // 0x0080(0x0001)
    bool                                          bPropagateToChildren;                                         // 0x0081(0x0001)
    char                                          pa_0082[0x000E]                                               // 0x0082(0x000E)
    FRigUnit_SpringIK_DebugSettings               DebugSettings;                                                // 0x0090(0x0050)
    FRigUnit_SpringIK_WorkData                    WorkData;                                                     // 0x00E0(0x00A0)
};


// ScriptStruct  ControlRig.RigUnit_SpringIK_WorkData
// Struct Size::0x00A0
struct FRigUnit_SpringIK_WorkData
{
    TArray<int32_t>                               BoneIndices;                                                  // 0x0000(0x0010)
    int32_t                                       PoleVectorIndex;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FTransform>                            Transforms;                                                   // 0x0018(0x0010)
    FCRSimPointContainer                          Simulation;                                                   // 0x0028(0x0078)
};


// ScriptStruct  ControlRig.RigUnit_SpringIK_DebugSettings
// Struct Size::0x0050
struct FRigUnit_SpringIK_DebugSettings
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0020(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_Timeline
// Struct Size::0x0018
struct FRigUnit_Timeline : public FRigUnit_SimBase
{
    float                                         Speed;                                                        // 0x0008(0x0004)
    float                                         Time;                                                         // 0x000C(0x0004)
    float                                         AccumulatedValue;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_TimeOffsetTransform
// Struct Size::0x00B0
struct FRigUnit_TimeOffsetTransform : public FRigUnit_SimBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    float                                         SecondsAgo;                                                   // 0x0040(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0044(0x0004)
    float                                         TimeRange;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Result;                                                       // 0x0050(0x0030)
    TArray<FTransform>                            Buffer;                                                       // 0x0080(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0090(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x00A0(0x0004)
    int32_t                                       UpperBound;                                                   // 0x00A4(0x0004)
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_TimeOffsetVector
// Struct Size::0x0058
struct FRigUnit_TimeOffsetVector : public FRigUnit_SimBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    float                                         SecondsAgo;                                                   // 0x0014(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0018(0x0004)
    float                                         TimeRange;                                                    // 0x001C(0x0004)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<FVector>                               Buffer;                                                       // 0x0030(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0040(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0050(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0054(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_TimeOffsetFloat
// Struct Size::0x0048
struct FRigUnit_TimeOffsetFloat : public FRigUnit_SimBase
{
    float                                         Value;                                                        // 0x0008(0x0004)
    float                                         SecondsAgo;                                                   // 0x000C(0x0004)
    int32_t                                       BufferSize;                                                   // 0x0010(0x0004)
    float                                         TimeRange;                                                    // 0x0014(0x0004)
    float                                         Result;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<float>                                 Buffer;                                                       // 0x0020(0x0010)
    TArray<float>                                 DeltaTimes;                                                   // 0x0030(0x0010)
    int32_t                                       LastInsertIndex;                                              // 0x0040(0x0004)
    int32_t                                       UpperBound;                                                   // 0x0044(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_BinaryTransformOp
// Struct Size::0x00A0
struct FRigUnit_BinaryTransformOp : public FRigUnit
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Argument0;                                                    // 0x0010(0x0030)
    FTransform                                    Argument1;                                                    // 0x0040(0x0030)
    FTransform                                    Result;                                                       // 0x0070(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_GetRelativeTransform
// Struct Size::0x00A0
struct FRigUnit_GetRelativeTransform : public FRigUnit_BinaryTransformOp
{
};


// ScriptStruct  ControlRig.RigUnit_MultiplyTransform
// Struct Size::0x00A0
struct FRigUnit_MultiplyTransform : public FRigUnit_BinaryTransformOp
{
};


// ScriptStruct  ControlRig.RigUnit_TransformConstraint
// Struct Size::0x00E0
struct FRigUnit_TransformConstraint : public FRigUnit_HighlevelBaseMutable
{
    FName                                         Bone;                                                         // 0x0020(0x0008)
    enum class ETransformSpaceMode                BaseTransformSpace;                                           // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FTransform                                    BaseTransform;                                                // 0x0030(0x0030)
    FName                                         BaseBone;                                                     // 0x0060(0x0008)
    TArray<FConstraintTarget>                     Targets;                                                      // 0x0068(0x0010)
    FRigUnit_TransformConstraint_WorkData         WorkData;                                                     // 0x0078(0x0060)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
};


// ScriptStruct  ControlRig.RigUnit_TransformConstraint_WorkData
// Struct Size::0x0060
struct FRigUnit_TransformConstraint_WorkData
{
    TArray<FConstraintData>                       ConstraintData;                                               // 0x0000(0x0010)
    TMap<int32_t,int32_t>                         ConstraintDataToTargets;                                      // 0x0010(0x0050)
};


// ScriptStruct  AnimationCore.ConstraintData
// Struct Size::0x0080
struct FConstraintData
{
    FConstraintDescriptor                         Constraint;                                                   // 0x0000(0x0010)
    float                                         Weight;                                                       // 0x0010(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x000B]                                               // 0x0015(0x000B)
    FTransform                                    Offset;                                                       // 0x0020(0x0030)
    FTransform                                    CurrentTransform;                                             // 0x0050(0x0030)
};


// ScriptStruct  AnimationCore.ConstraintDescriptor
// Struct Size::0x0010
struct FConstraintDescriptor
{
    enum class EConstraintType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
};


// ScriptStruct  ControlRig.ConstraintTarget
// Struct Size::0x0040
struct FConstraintTarget
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    float                                         Weight;                                                       // 0x0030(0x0004)
    bool                                          bMaintainOffset;                                              // 0x0034(0x0001)
    FTransformFilter                              Filter;                                                       // 0x0035(0x0009)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
};


// ScriptStruct  ControlRig.RigUnit_TwoBoneIKFK
// Struct Size::0x01D0
struct FRigUnit_TwoBoneIKFK : public FRigUnitMutable
{
    FName                                         StartJoint;                                                   // 0x0020(0x0008)
    FName                                         EndJoint;                                                     // 0x0028(0x0008)
    FVector                                       PoleTarget;                                                   // 0x0030(0x000C)
    float                                         Spin;                                                         // 0x003C(0x0004)
    FTransform                                    EndEffector;                                                  // 0x0040(0x0030)
    float                                         IKBlend;                                                      // 0x0070(0x0004)
    char                                          pa_0074[0x000C]                                               // 0x0074(0x000C)
    FTransform                                    StartJointFKTransform;                                        // 0x0080(0x0030)
    FTransform                                    MidJointFKTransform;                                          // 0x00B0(0x0030)
    FTransform                                    EndJointFKTransform;                                          // 0x00E0(0x0030)
    float                                         PreviousFKIKBlend;                                            // 0x0110(0x0004)
    char                                          pa_0114[0x000C]                                               // 0x0114(0x000C)
    FTransform                                    StartJointIKTransform;                                        // 0x0120(0x0030)
    FTransform                                    MidJointIKTransform;                                          // 0x0150(0x0030)
    FTransform                                    EndJointIKTransform;                                          // 0x0180(0x0030)
    int32_t                                       StartJointIndex;                                              // 0x01B0(0x0004)
    int32_t                                       MidJointIndex;                                                // 0x01B4(0x0004)
    int32_t                                       EndJointIndex;                                                // 0x01B8(0x0004)
    float                                         UpperLimbLength;                                              // 0x01BC(0x0004)
    float                                         LowerLimbLength;                                              // 0x01C0(0x0004)
    char                                          pa_01C4[0x000C]                                               // 0x01C4(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_TwoBoneIKSimpleTransforms
// Struct Size::0x00E0
struct FRigUnit_TwoBoneIKSimpleTransforms : public FRigUnit_HighlevelBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Root;                                                         // 0x0010(0x0030)
    FVector                                       PoleVector;                                                   // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FTransform                                    Effector;                                                     // 0x0050(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x0080(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x008C(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x0098(0x0004)
    bool                                          bEnableStretch;                                               // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    float                                         StretchStartRatio;                                            // 0x00A0(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x00A4(0x0004)
    float                                         BoneALength;                                                  // 0x00A8(0x0004)
    float                                         BoneBLength;                                                  // 0x00AC(0x0004)
    FTransform                                    Elbow;                                                        // 0x00B0(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_TwoBoneIKSimpleVectors
// Struct Size::0x0050
struct FRigUnit_TwoBoneIKSimpleVectors : public FRigUnit_HighlevelBase
{
    FVector                                       Root;                                                         // 0x0008(0x000C)
    FVector                                       PoleVector;                                                   // 0x0014(0x000C)
    FVector                                       Effector;                                                     // 0x0020(0x000C)
    bool                                          bEnableStretch;                                               // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         StretchStartRatio;                                            // 0x0030(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x0034(0x0004)
    float                                         BoneALength;                                                  // 0x0038(0x0004)
    float                                         BoneBLength;                                                  // 0x003C(0x0004)
    FVector                                       Elbow;                                                        // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_TwoBoneIKSimple
// Struct Size::0x0110
struct FRigUnit_TwoBoneIKSimple : public FRigUnit_HighlevelBaseMutable
{
    FName                                         BoneA;                                                        // 0x0020(0x0008)
    FName                                         BoneB;                                                        // 0x0028(0x0008)
    FName                                         EffectorBone;                                                 // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FTransform                                    Effector;                                                     // 0x0040(0x0030)
    FVector                                       PrimaryAxis;                                                  // 0x0070(0x000C)
    FVector                                       SecondaryAxis;                                                // 0x007C(0x000C)
    float                                         SecondaryAxisWeight;                                          // 0x0088(0x0004)
    FVector                                       PoleVector;                                                   // 0x008C(0x000C)
    enum class EControlRigVectorKind              PoleVectorKind;                                               // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    FName                                         PoleVectorSpace;                                              // 0x009C(0x0008)
    bool                                          bEnableStretch;                                               // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
    float                                         StretchStartRatio;                                            // 0x00A8(0x0004)
    float                                         StretchMaximumRatio;                                          // 0x00AC(0x0004)
    float                                         Weight;                                                       // 0x00B0(0x0004)
    float                                         BoneALength;                                                  // 0x00B4(0x0004)
    float                                         BoneBLength;                                                  // 0x00B8(0x0004)
    bool                                          bPropagateToChildren;                                         // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    FRigUnit_TwoBoneIKSimple_DebugSettings        DebugSettings;                                                // 0x00C0(0x0040)
    int32_t                                       BoneAIndex;                                                   // 0x0100(0x0004)
    int32_t                                       BoneBIndex;                                                   // 0x0104(0x0004)
    int32_t                                       EffectorBoneIndex;                                            // 0x0108(0x0004)
    int32_t                                       PoleVectorSpaceIndex;                                         // 0x010C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_TwoBoneIKSimple_DebugSettings
// Struct Size::0x0040
struct FRigUnit_TwoBoneIKSimple_DebugSettings
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Scale;                                                        // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    WorldOffset;                                                  // 0x0010(0x0030)
};


// ScriptStruct  ControlRig.RigUnit_Distance_VectorVector
// Struct Size::0x0028
struct FRigUnit_Distance_VectorVector : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x000C)
    FVector                                       Argument1;                                                    // 0x0014(0x000C)
    float                                         Result;                                                       // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_BinaryVectorOp
// Struct Size::0x0030
struct FRigUnit_BinaryVectorOp : public FRigUnit
{
    FVector                                       Argument0;                                                    // 0x0008(0x000C)
    FVector                                       Argument1;                                                    // 0x0014(0x000C)
    FVector                                       Result;                                                       // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_Divide_VectorVector
// Struct Size::0x0030
struct FRigUnit_Divide_VectorVector : public FRigUnit_BinaryVectorOp
{
};


// ScriptStruct  ControlRig.RigUnit_Subtract_VectorVector
// Struct Size::0x0030
struct FRigUnit_Subtract_VectorVector : public FRigUnit_BinaryVectorOp
{
};


// ScriptStruct  ControlRig.RigUnit_Add_VectorVector
// Struct Size::0x0030
struct FRigUnit_Add_VectorVector : public FRigUnit_BinaryVectorOp
{
};


// ScriptStruct  ControlRig.RigUnit_Multiply_VectorVector
// Struct Size::0x0030
struct FRigUnit_Multiply_VectorVector : public FRigUnit_BinaryVectorOp
{
};


// ScriptStruct  ControlRig.RigUnit_VerletIntegrateVector
// Struct Size::0x0070
struct FRigUnit_VerletIntegrateVector : public FRigUnit_SimBase
{
    FVector                                       Target;                                                       // 0x0008(0x000C)
    float                                         Strength;                                                     // 0x0014(0x0004)
    float                                         Damp;                                                         // 0x0018(0x0004)
    float                                         Blend;                                                        // 0x001C(0x0004)
    FVector                                       Position;                                                     // 0x0020(0x000C)
    FVector                                       Velocity;                                                     // 0x002C(0x000C)
    FVector                                       Acceleration;                                                 // 0x0038(0x000C)
    FCRSimPoint                                   Point;                                                        // 0x0044(0x0028)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  ControlRig.RigUnit_VisualDebugTransform
// Struct Size::0x0060
struct FRigUnit_VisualDebugTransform : public FRigUnit_DebugBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Value;                                                        // 0x0010(0x0030)
    bool                                          bEnabled;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Thickness;                                                    // 0x0044(0x0004)
    float                                         Scale;                                                        // 0x0048(0x0004)
    FName                                         BoneSpace;                                                    // 0x004C(0x0008)
    char                                          pa_0054[0x000C]                                               // 0x0054(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_VisualDebugQuat
// Struct Size::0x0040
struct FRigUnit_VisualDebugQuat : public FRigUnit_DebugBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FQuat                                         Value;                                                        // 0x0010(0x0010)
    bool                                          bEnabled;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         Thickness;                                                    // 0x0024(0x0004)
    float                                         Scale;                                                        // 0x0028(0x0004)
    FName                                         BoneSpace;                                                    // 0x002C(0x0008)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  ControlRig.RigUnit_VisualDebugVector
// Struct Size::0x0038
struct FRigUnit_VisualDebugVector : public FRigUnit_DebugBase
{
    FVector                                       Value;                                                        // 0x0008(0x000C)
    bool                                          bEnabled;                                                     // 0x0014(0x0001)
    enum class ERigUnitVisualDebugPointMode       Mode;                                                         // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         Scale;                                                        // 0x002C(0x0004)
    FName                                         BoneSpace;                                                    // 0x0030(0x0008)
};


// ScriptStruct  ControlRig.StructReference
// Struct Size::0x0008
struct FStructReference
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  EnhancedInput.EnhancedActionKeyMapping
// Struct Size::0x0048
struct FEnhancedActionKeyMapping
{
    UInputAction*                                 Action;                                                       // 0x0000(0x0008)
    FKey                                          Key;                                                          // 0x0008(0x0018)
    char                                          bShouldBeIgnored;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<UInputTrigger*>                        Triggers;                                                     // 0x0028(0x0010)
    TArray<UInputModifier*>                       Modifiers;                                                    // 0x0038(0x0010)
};


// ScriptStruct  EnhancedInput.BlueprintEnhancedInputActionBinding
// Struct Size::0x0018
struct FBlueprintEnhancedInputActionBinding
{
    UInputAction*                                 InputAction;                                                  // 0x0000(0x0008)
    enum class ETriggerEvent                      TriggerEvent;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  EnhancedInput.InputActionInstance
// Struct Size::0x0088
struct FInputActionInstance
{
    UInputAction*                                 SourceAction;                                                 // 0x0000(0x0008)
    FKey                                          FromKey;                                                      // 0x0008(0x0018)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
    TArray<UInputTrigger*>                        Triggers;                                                     // 0x0028(0x0010)
    TArray<UInputModifier*>                       Modifiers;                                                    // 0x0038(0x0010)
    TArray<UInputModifier*>                       PerInputModifiers;                                            // 0x0048(0x0010)
    TArray<UInputModifier*>                       FinalValueModifiers;                                          // 0x0058(0x0010)
    char                                          pa_0068[0x0010]                                               // 0x0068(0x0010)
    float                                         ElapsedProcessedTime;                                         // 0x0078(0x0004)
    float                                         ElapsedTriggeredTime;                                         // 0x007C(0x0004)
    enum class ETriggerEvent                      TriggerEvent;                                                 // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
};


// ScriptStruct  EnhancedInput.BlueprintInputDebugKeyDelegateBinding
// Struct Size::0x0030
struct FBlueprintInputDebugKeyDelegateBinding
{
    FInputChord                                   InputChord;                                                   // 0x0000(0x0020)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0024(0x0008)
    bool                                          bExecuteWhenPaused;                                           // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  EnhancedInput.MappingQueryIssue
// Struct Size::0x0018
struct FMappingQueryIssue
{
    enum class EMappingQueryIssue                 Issue;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UInputMappingContext*                         BlockingContext;                                              // 0x0008(0x0008)
    UInputAction*                                 BlockingAction;                                               // 0x0010(0x0008)
};


// ScriptStruct  ProtectBase.SShotImageInfo2
// Struct Size::0x0078
struct FSShotImageInfo2
{
    FString                                       UserId;                                                       // 0x0000(0x0010)
    FString                                       PlayerId;                                                     // 0x0010(0x0010)
    FString                                       BattleID;                                                     // 0x0020(0x0010)
    int64_t                                       ScreenshotTime;                                               // 0x0030(0x0008)
    int32_t                                       ImageSize;                                                    // 0x0038(0x0004)
    int32_t                                       ImageWidth;                                                   // 0x003C(0x0004)
    int32_t                                       ImageHeight;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       ImageType;                                                    // 0x0048(0x0010)
    FString                                       ImageBuffer;                                                  // 0x0058(0x0010)
    char                                          pa_0068[0x0010]                                               // 0x0068(0x0010)
};


// ScriptStruct  CascadeExtensionPlugin.ForcePoints
// Struct Size::0x0020
struct FForcePoints
{
    float                                         Intensity;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVector>                               PointLocations;                                               // 0x0008(0x0010)
    enum class EDistanceWeight                    SeparationDistanceWeight;                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         DistanceScale;                                                // 0x001C(0x0004)
};


// ScriptStruct  CascadeExtensionPlugin.MeshTriangleData
// Struct Size::0x0020
struct FMeshTriangleData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FTriangleIndices>                      Indices;                                                      // 0x0010(0x0010)
};


// ScriptStruct  CascadeExtensionPlugin.TriangleIndices
// Struct Size::0x000C
struct FTriangleIndices
{
    int32_t                                       v0;                                                           // 0x0000(0x0004)
    int32_t                                       v1;                                                           // 0x0004(0x0004)
    int32_t                                       v2;                                                           // 0x0008(0x0004)
};


// ScriptStruct  CascadeExtensionPlugin.ParticleProperties
// Struct Size::0x0044
struct FParticleProperties
{
    int32_t                                       ParticleId;                                                   // 0x0000(0x0004)
    float                                         RelativeTime;                                                 // 0x0004(0x0004)
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FVector                                       Velocity;                                                     // 0x0014(0x000C)
    FVector                                       Size;                                                         // 0x0020(0x000C)
    FLinearColor                                  Color;                                                        // 0x002C(0x0010)
    float                                         Rotation;                                                     // 0x003C(0x0004)
    float                                         RotationRate;                                                 // 0x0040(0x0004)
};


// ScriptStruct  DownloaderTool.DownloaderTaskInfo
// Struct Size::0x00A8
struct FDownloaderTaskInfo
{
    FString                                       NecessaryURL;                                                 // 0x0000(0x0010)
    TArray<FString>                               BaseCDNUrlList;                                               // 0x0010(0x0010)
    FString                                       JsonRequestStr;                                               // 0x0020(0x0010)
    FString                                       HashStr;                                                      // 0x0030(0x0010)
    int32_t                                       MaxRetryTime;                                                 // 0x0040(0x0004)
    int32_t                                       FileSize;                                                     // 0x0044(0x0004)
    bool                                          bUsingResumeTrans;                                            // 0x0048(0x0001)
    bool                                          bClearSubTaskCache;                                           // 0x0049(0x0001)
    bool                                          bAsyncWrite;                                                  // 0x004A(0x0001)
    bool                                          bAsyncMerge;                                                  // 0x004B(0x0001)
    bool                                          bAsyncHashCheck;                                              // 0x004C(0x0001)
    bool                                          bUseBackgroundDownload;                                       // 0x004D(0x0001)
    bool                                          bForceRedownload;                                             // 0x004E(0x0001)
    bool                                          bForceWrite;                                                  // 0x004F(0x0001)
    bool                                          bNeedHashCheck;                                               // 0x0050(0x0001)
    bool                                          bEnableTimeOutFailed;                                         // 0x0051(0x0001)
    char                                          pa_0052[0x0002]                                               // 0x0052(0x0002)
    float                                         TimeOutSeconds;                                               // 0x0054(0x0004)
    bool                                          bCallBackWithRawData;                                         // 0x0058(0x0001)
    bool                                          bCutInLine;                                                   // 0x0059(0x0001)
    char                                          pa_005A[0x0006]                                               // 0x005A(0x0006)
    FString                                       FileDirectory;                                                // 0x0060(0x0010)
    FString                                       Filename;                                                     // 0x0070(0x0010)
    FString                                       FileExtension;                                                // 0x0080(0x0010)
    bool                                          bCompleted;                                                   // 0x0090(0x0001)
    bool                                          bSuccessful;                                                  // 0x0091(0x0001)
    char                                          pa_0092[0x0006]                                               // 0x0092(0x0006)
    int64_t                                       StartTimeStamp;                                               // 0x0098(0x0008)
    int64_t                                       CompleteTimeStamp;                                            // 0x00A0(0x0008)
};


// ScriptStruct  DownloaderTool.UrlTaskRecordInfo
// Struct Size::0x0010
struct FUrlTaskRecordInfo
{
    bool                                          bUrlTaskSuccess;                                              // 0x0000(0x0001)
    bool                                          bHashCheckSuccess;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       TotalDownloadSize;                                            // 0x0004(0x0004)
    int32_t                                       SubTaskChunkSize;                                             // 0x0008(0x0004)
    int32_t                                       CachedWritedSize;                                             // 0x000C(0x0004)
};


// ScriptStruct  DownloaderTool.DownloaderReqJson
// Struct Size::0x00B8
struct FDownloaderReqJson
{
    enum class EDownloaderHttpMethod              Verb;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TMap<FString,FString>                         Headers;                                                      // 0x0008(0x0050)
    TMap<FString,FString>                         Queries;                                                      // 0x0058(0x0050)
    FString                                       Body;                                                         // 0x00A8(0x0010)
};


// ScriptStruct  OnlineSubsystemEOS.ArtifactSettings
// Struct Size::0x0070
struct FArtifactSettings
{
    FString                                       ArtifactName;                                                 // 0x0000(0x0010)
    FString                                       ClientId;                                                     // 0x0010(0x0010)
    FString                                       ClientSecret;                                                 // 0x0020(0x0010)
    FString                                       ProductID;                                                    // 0x0030(0x0010)
    FString                                       SandboxId;                                                    // 0x0040(0x0010)
    FString                                       DeploymentId;                                                 // 0x0050(0x0010)
    FString                                       EncryptionKey;                                                // 0x0060(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_SkeletalControlBase
// Struct Size::0x00C8
struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0020(0x0004)
    float                                         ActualAlpha;                                                  // 0x0024(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0028(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    float                                         Alpha;                                                        // 0x002C(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0030(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0038(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0080(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0088(0x0030)
    char                                          pa_00B8[0x0010]                                               // 0x00B8(0x0010)
};


// ScriptStruct  Engine.ComponentSpacePoseLink
// Struct Size::0x0010
struct FComponentSpacePoseLink : public FPoseLinkBase
{
};


// ScriptStruct  KawaiiPhysics.AnimNode_KawaiiPhysics
// Struct Size::0x02F0
struct FAnimNode_KawaiiPhysics : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                RootBone;                                                     // 0x00C8(0x0010)
    TArray<FBoneReference>                        ExcludeBones;                                                 // 0x00D8(0x0010)
    int32_t                                       TargetFramerate;                                              // 0x00E8(0x0004)
    bool                                          OverrideTargetFramerate;                                      // 0x00EC(0x0001)
    char                                          pa_00ED[0x0003]                                               // 0x00ED(0x0003)
    float                                         MinCalculateDeltaTime;                                        // 0x00F0(0x0004)
    bool                                          OverrideMinCalculateDeltaTime;                                // 0x00F4(0x0001)
    bool                                          bUseCalculatedTransform;                                      // 0x00F5(0x0001)
    bool                                          bUseIndependentPhysicsSetting;                                // 0x00F6(0x0001)
    char                                          pa_00F7[0x0001]                                               // 0x00F7(0x0001)
    TMap<FName,FKawaiiBonePhysicsSettings>        BoneIndependentPhysicsSettings;                               // 0x00F8(0x0050)
    FKawaiiPhysicsSettings                        PhysicsSettings;                                              // 0x0148(0x0018)
    UCurveFloat*                                  DampingCurve;                                                 // 0x0160(0x0008)
    UCurveFloat*                                  WorldDampingLocationCurve;                                    // 0x0168(0x0008)
    UCurveFloat*                                  WorldDampingRotationCurve;                                    // 0x0170(0x0008)
    UCurveFloat*                                  StiffnessCurve;                                               // 0x0178(0x0008)
    UCurveFloat*                                  RadiusCurve;                                                  // 0x0180(0x0008)
    UCurveFloat*                                  LimitAngleCurve;                                              // 0x0188(0x0008)
    bool                                          bUpdatePhysicsSettingsInGame;                                 // 0x0190(0x0001)
    char                                          pa_0191[0x0003]                                               // 0x0191(0x0003)
    float                                         DummyBoneLength;                                              // 0x0194(0x0004)
    enum class EBoneForwardAxis                   BoneForwardAxis;                                              // 0x0198(0x0001)
    enum class EPlanarConstraint                  PlanarConstraint;                                             // 0x0199(0x0001)
    char                                          pa_019A[0x0006]                                               // 0x019A(0x0006)
    TArray<FSphericalLimit>                       SphericalLimits;                                              // 0x01A0(0x0010)
    TArray<FCapsuleLimit>                         CapsuleLimits;                                                // 0x01B0(0x0010)
    TArray<FPlanarLimit>                          PlanarLimits;                                                 // 0x01C0(0x0010)
    UKawaiiPhysicsLimitsDataAsset*                LimitsDataAsset;                                              // 0x01D0(0x0008)
    TArray<FSphericalLimit>                       SphericalLimitsData;                                          // 0x01D8(0x0010)
    TArray<FCapsuleLimit>                         CapsuleLimitsData;                                            // 0x01E8(0x0010)
    TArray<FPlanarLimit>                          PlanarLimitsData;                                             // 0x01F8(0x0010)
    float                                         TeleportDistanceThreshold;                                    // 0x0208(0x0004)
    float                                         TeleportRotationThreshold;                                    // 0x020C(0x0004)
    FVector                                       Gravity;                                                      // 0x0210(0x000C)
    bool                                          bEnableWind;                                                  // 0x021C(0x0001)
    char                                          pa_021D[0x0003]                                               // 0x021D(0x0003)
    float                                         WindScale;                                                    // 0x0220(0x0004)
    char                                          pa_0224[0x0004]                                               // 0x0224(0x0004)
    TArray<FKawaiiPhysicsModifyBone>              ModifyBones;                                                  // 0x0228(0x0010)
    float                                         TotalBoneLength;                                              // 0x0238(0x0004)
    char                                          pa_023C[0x0004]                                               // 0x023C(0x0004)
    FTransform                                    PreSkelCompTransform;                                         // 0x0240(0x0030)
    bool                                          bInitPhysicsSettings;                                         // 0x0270(0x0001)
    char                                          pa_0271[0x007F]                                               // 0x0271(0x007F)
};


// ScriptStruct  KawaiiPhysics.KawaiiPhysicsModifyBone
// Struct Size::0x00F0
struct FKawaiiPhysicsModifyBone
{
    FBoneReference                                BoneRef;                                                      // 0x0000(0x0010)
    int32_t                                       ParentIndex;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               ChildIndexs;                                                  // 0x0018(0x0010)
    FKawaiiPhysicsSettings                        PhysicsSettings;                                              // 0x0028(0x0018)
    FVector                                       Location;                                                     // 0x0040(0x000C)
    FVector                                       PrevLocation;                                                 // 0x004C(0x000C)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FQuat                                         PrevRotation;                                                 // 0x0060(0x0010)
    FVector                                       PoseLocation;                                                 // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    FQuat                                         PoseRotation;                                                 // 0x0080(0x0010)
    FVector                                       OriginPoseLocation;                                           // 0x0090(0x000C)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FQuat                                         OriginPoseRotation;                                           // 0x00A0(0x0010)
    FVector                                       PoseScale;                                                    // 0x00B0(0x000C)
    float                                         LengthFromRoot;                                               // 0x00BC(0x0004)
    bool                                          bDummy;                                                       // 0x00C0(0x0001)
    char                                          pa_00C1[0x002F]                                               // 0x00C1(0x002F)
};


// ScriptStruct  KawaiiPhysics.KawaiiPhysicsSettings
// Struct Size::0x0018
struct FKawaiiPhysicsSettings
{
    float                                         Damping;                                                      // 0x0000(0x0004)
    float                                         WorldDampingLocation;                                         // 0x0004(0x0004)
    float                                         WorldDampingRotation;                                         // 0x0008(0x0004)
    float                                         Stiffness;                                                    // 0x000C(0x0004)
    float                                         Radius;                                                       // 0x0010(0x0004)
    float                                         LimitAngle;                                                   // 0x0014(0x0004)
};


// ScriptStruct  Engine.BoneReference
// Struct Size::0x0010
struct FBoneReference
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  KawaiiPhysics.CollisionLimitBase
// Struct Size::0x0050
struct FCollisionLimitBase
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FVector                                       OffsetLocation;                                               // 0x0010(0x000C)
    FRotator                                      OffsetRotation;                                               // 0x001C(0x000C)
    FVector                                       Location;                                                     // 0x0028(0x000C)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    FQuat                                         Rotation;                                                     // 0x0040(0x0010)
};


// ScriptStruct  KawaiiPhysics.PlanarLimit
// Struct Size::0x0060
struct FPlanarLimit : public FCollisionLimitBase
{
    FPlane                                        Plane;                                                        // 0x0050(0x0010)
};


// ScriptStruct  KawaiiPhysics.CapsuleLimit
// Struct Size::0x0060
struct FCapsuleLimit : public FCollisionLimitBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    float                                         Length;                                                       // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  KawaiiPhysics.SphericalLimit
// Struct Size::0x0060
struct FSphericalLimit : public FCollisionLimitBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0054(0x0001)
    char                                          pa_0055[0x000B]                                               // 0x0055(0x000B)
};


// ScriptStruct  KawaiiPhysics.KawaiiBonePhysicsSettings
// Struct Size::0x001C
struct FKawaiiBonePhysicsSettings
{
    FKawaiiPhysicsSettings                        PhysicsSetting;                                               // 0x0000(0x0018)
    bool                                          OverridePhysicsSetting;                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  KawaiiPhysics.CollisionLimitDataBase
// Struct Size::0x0050
struct FCollisionLimitDataBase
{
    FName                                         DrivingBoneName;                                              // 0x0000(0x0008)
    FVector                                       OffsetLocation;                                               // 0x0008(0x000C)
    FRotator                                      OffsetRotation;                                               // 0x0014(0x000C)
    FVector                                       Location;                                                     // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0030(0x0010)
    FGuid                                         Guid;                                                         // 0x0040(0x0010)
};


// ScriptStruct  KawaiiPhysics.PlanarLimitData
// Struct Size::0x0060
struct FPlanarLimitData : public FCollisionLimitDataBase
{
    FPlane                                        Plane;                                                        // 0x0050(0x0010)
};


// ScriptStruct  KawaiiPhysics.CapsuleLimitData
// Struct Size::0x0060
struct FCapsuleLimitData : public FCollisionLimitDataBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    float                                         Length;                                                       // 0x0054(0x0004)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
};


// ScriptStruct  KawaiiPhysics.SphericalLimitData
// Struct Size::0x0060
struct FSphericalLimitData : public FCollisionLimitDataBase
{
    float                                         Radius;                                                       // 0x0050(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0054(0x0001)
    char                                          pa_0055[0x000B]                                               // 0x0055(0x000B)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettings
// Struct Size::0x002C
struct FAkAdvancedInitializationSettings
{
    uint32_t                                      IO_MemorySize;                                                // 0x0000(0x0004)
    uint32_t                                      IO_Granularity;                                               // 0x0004(0x0004)
    float                                         TargetAutoStreamBufferLength;                                 // 0x0008(0x0004)
    bool                                          UseStreamCache;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    uint32_t                                      MaximumPinnedBytesInCache;                                    // 0x0010(0x0004)
    bool                                          EnableGameSyncPreparation;                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    uint32_t                                      ContinuousPlaybackLookAhead;                                  // 0x0018(0x0004)
    uint32_t                                      MonitorQueuePoolSize;                                         // 0x001C(0x0004)
    uint32_t                                      MaximumHardwareTimeoutMs;                                     // 0x0020(0x0004)
    bool                                          DebugOutOfRangeCheckEnabled;                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         DebugOutOfRangeLimit;                                         // 0x0028(0x0004)
};


// ScriptStruct  AkAudio.AkAdvancedInitializationSettingsWithMultiCoreRendering
// Struct Size::0x0030
struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : public FAkAdvancedInitializationSettings
{
    bool                                          EnableMultiCoreRendering;                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AkAudio.AkAndroidAdvancedInitializationSettings
// Struct Size::0x0038
struct FAkAndroidAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint32_t                                      AudioAPI;                                                     // 0x0030(0x0004)
    bool                                          RoundFrameSizeToHardwareSize;                                 // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  AkAudio.AkAudioSession
// Struct Size::0x000C
struct FAkAudioSession
{
    enum class EAkAudioSessionCategory            AudioSessionCategory;                                         // 0x0000(0x0004)
    uint32_t                                      AudioSessionCategoryOptions;                                  // 0x0004(0x0004)
    enum class EAkAudioSessionMode                AudioSessionMode;                                             // 0x0008(0x0004)
};


// ScriptStruct  AkAudio.AkExternalSourceInfo
// Struct Size::0x0038
struct FAkExternalSourceInfo
{
    FString                                       ExternalSrcName;                                              // 0x0000(0x0010)
    enum class AkCodecId                          CodecID;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Filename;                                                     // 0x0018(0x0010)
    UAkExternalMediaAsset*                        ExternalSourceAsset;                                          // 0x0028(0x0008)
    bool                                          IsStreamed;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AkAudio.AkSegmentInfo
// Struct Size::0x0024
struct FAkSegmentInfo
{
    int32_t                                       CurrentPosition;                                              // 0x0000(0x0004)
    int32_t                                       PreEntryDuration;                                             // 0x0004(0x0004)
    int32_t                                       ActiveDuration;                                               // 0x0008(0x0004)
    int32_t                                       PostExitDuration;                                             // 0x000C(0x0004)
    int32_t                                       RemainingLookAheadTime;                                       // 0x0010(0x0004)
    float                                         BeatDuration;                                                 // 0x0014(0x0004)
    float                                         BarDuration;                                                  // 0x0018(0x0004)
    float                                         GridDuration;                                                 // 0x001C(0x0004)
    float                                         GridOffset;                                                   // 0x0020(0x0004)
};


// ScriptStruct  AkAudio.AkMidiEventBase
// Struct Size::0x0002
struct FAkMidiEventBase
{
    enum class EAkMidiEventType                   Type;                                                         // 0x0000(0x0001)
    char                                          Chan;                                                         // 0x0001(0x0001)
};


// ScriptStruct  AkAudio.AkMidiProgramChange
// Struct Size::0x0003
struct FAkMidiProgramChange : public FAkMidiEventBase
{
    char                                          ProgramNum;                                                   // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkMidiChannelAftertouch
// Struct Size::0x0003
struct FAkMidiChannelAftertouch : public FAkMidiEventBase
{
    char                                          Value;                                                        // 0x0002(0x0001)
};


// ScriptStruct  AkAudio.AkMidiNoteAftertouch
// Struct Size::0x0004
struct FAkMidiNoteAftertouch : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiPitchBend
// Struct Size::0x0008
struct FAkMidiPitchBend : public FAkMidiEventBase
{
    char                                          ValueLsb;                                                     // 0x0002(0x0001)
    char                                          ValueMsb;                                                     // 0x0003(0x0001)
    int32_t                                       FullValue;                                                    // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkMidiCc
// Struct Size::0x0004
struct FAkMidiCc : public FAkMidiEventBase
{
    enum class EAkMidiCcValues                    Cc;                                                           // 0x0002(0x0001)
    char                                          Value;                                                        // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiNoteOnOff
// Struct Size::0x0004
struct FAkMidiNoteOnOff : public FAkMidiEventBase
{
    char                                          Note;                                                         // 0x0002(0x0001)
    char                                          Velocity;                                                     // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkMidiGeneric
// Struct Size::0x0004
struct FAkMidiGeneric : public FAkMidiEventBase
{
    char                                          Param1;                                                       // 0x0002(0x0001)
    char                                          Param2;                                                       // 0x0003(0x0001)
};


// ScriptStruct  AkAudio.AkOutputSettings
// Struct Size::0x0018
struct FAkOutputSettings
{
    FString                                       AudioDeviceSharesetName;                                      // 0x0000(0x0010)
    int32_t                                       IdDevice;                                                     // 0x0010(0x0004)
    enum class PanningRule                        PanRule;                                                      // 0x0014(0x0001)
    enum class AkChannelConfiguration             ChannelConfig;                                                // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
};


// ScriptStruct  AkAudio.AkChannelMask
// Struct Size::0x0004
struct FAkChannelMask
{
    int32_t                                       ChannelMask;                                                  // 0x0000(0x0004)
};


// ScriptStruct  AkAudio.AkGeometrySurfaceOverride
// Struct Size::0x0018
struct FAkGeometrySurfaceOverride
{
    UAkAcousticTexture*                           AcousticTexture;                                              // 0x0000(0x0008)
    char                                          bEnableOcclusionOverride;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         OcclusionValue;                                               // 0x000C(0x0004)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkGeometryData
// Struct Size::0x0050
struct FAkGeometryData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FAkAcousticSurface>                    Surfaces;                                                     // 0x0010(0x0010)
    TArray<FAkTriangle>                           Triangles;                                                    // 0x0020(0x0010)
    TArray<UPhysicalMaterial*>                    ToOverrideAcousticTexture;                                    // 0x0030(0x0010)
    TArray<UPhysicalMaterial*>                    ToOverrideOcclusion;                                          // 0x0040(0x0010)
};


// ScriptStruct  AkAudio.AkTriangle
// Struct Size::0x0008
struct FAkTriangle
{
    uint16_t                                      Point0;                                                       // 0x0000(0x0002)
    uint16_t                                      Point1;                                                       // 0x0002(0x0002)
    uint16_t                                      Point2;                                                       // 0x0004(0x0002)
    uint16_t                                      Surface;                                                      // 0x0006(0x0002)
};


// ScriptStruct  AkAudio.AkAcousticSurface
// Struct Size::0x0018
struct FAkAcousticSurface
{
    uint32_t                                      Texture;                                                      // 0x0000(0x0004)
    float                                         Occlusion;                                                    // 0x0004(0x0004)
    FString                                       Name;                                                         // 0x0008(0x0010)
};


// ScriptStruct  AkAudio.AkHololensAdvancedInitializationSettings
// Struct Size::0x0034
struct FAkHololensAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  AkAudio.AkPluginInfo
// Struct Size::0x0028
struct FAkPluginInfo
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    uint32_t                                      PluginID;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       dll;                                                          // 0x0018(0x0010)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettings
// Struct Size::0x0060
struct FAkCommonInitializationSettings
{
    uint32_t                                      MaximumNumberOfMemoryPools;                                   // 0x0000(0x0004)
    uint32_t                                      MaximumNumberOfPositioningPaths;                              // 0x0004(0x0004)
    uint32_t                                      CommandQueueSize;                                             // 0x0008(0x0004)
    uint32_t                                      SamplesPerFrame;                                              // 0x000C(0x0004)
    FAkMainOutputSettings                         MainOutputSettings;                                           // 0x0010(0x0028)
    float                                         StreamingLookAheadRatio;                                      // 0x0038(0x0004)
    uint16_t                                      NumberOfRefillsInVoice;                                       // 0x003C(0x0002)
    char                                          pa_003E[0x0002]                                               // 0x003E(0x0002)
    FAkSpatialAudioSettings                       SpatialAudioSettings;                                         // 0x0040(0x0020)
};


// ScriptStruct  AkAudio.AkSpatialAudioSettings
// Struct Size::0x0020
struct FAkSpatialAudioSettings
{
    uint32_t                                      MaxSoundPropagationDepth;                                     // 0x0000(0x0004)
    float                                         MovementThreshold;                                            // 0x0004(0x0004)
    uint32_t                                      NumberOfPrimaryRays;                                          // 0x0008(0x0004)
    uint32_t                                      ReflectionOrder;                                              // 0x000C(0x0004)
    float                                         MaximumPathLength;                                            // 0x0010(0x0004)
    float                                         CPULimitPercentage;                                           // 0x0014(0x0004)
    bool                                          EnableDiffractionOnReflections;                               // 0x0018(0x0001)
    bool                                          EnableGeometricDiffractionAndTransmission;                    // 0x0019(0x0001)
    bool                                          CalcEmitterVirtualPosition;                                   // 0x001A(0x0001)
    bool                                          UseObstruction;                                               // 0x001B(0x0001)
    bool                                          UseOcclusion;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  AkAudio.AkMainOutputSettings
// Struct Size::0x0028
struct FAkMainOutputSettings
{
    FString                                       AudioDeviceShareset;                                          // 0x0000(0x0010)
    uint32_t                                      DeviceID;                                                     // 0x0010(0x0004)
    enum class EAkPanningRule                     PanningRule;                                                  // 0x0014(0x0004)
    enum class EAkChannelConfigType               ChannelConfigType;                                            // 0x0018(0x0004)
    uint32_t                                      ChannelMask;                                                  // 0x001C(0x0004)
    uint32_t                                      NumberOfChannels;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AkAudio.AkCommonInitializationSettingsWithSampleRate
// Struct Size::0x0068
struct FAkCommonInitializationSettingsWithSampleRate : public FAkCommonInitializationSettings
{
    uint32_t                                      SampleRate;                                                   // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  AkAudio.AkCommunicationSettings
// Struct Size::0x0020
struct FAkCommunicationSettings
{
    uint32_t                                      PoolSize;                                                     // 0x0000(0x0004)
    uint16_t                                      DiscoveryBroadcastPort;                                       // 0x0004(0x0002)
    uint16_t                                      CommandPort;                                                  // 0x0006(0x0002)
    uint16_t                                      NotificationPort;                                             // 0x0008(0x0002)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FString                                       NetworkName;                                                  // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithCommSelection
// Struct Size::0x0028
struct FAkCommunicationSettingsWithCommSelection : public FAkCommunicationSettings
{
    enum class EAkCommSystem                      CommunicationSystem;                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AkAudio.AkCommunicationSettingsWithSystemInitialization
// Struct Size::0x0028
struct FAkCommunicationSettingsWithSystemInitialization : public FAkCommunicationSettings
{
    bool                                          InitializeSystemComms;                                        // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  AkAudio.AkBoolPropertyToControl
// Struct Size::0x0010
struct FAkBoolPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkPropertyToControl
// Struct Size::0x0010
struct FAkPropertyToControl
{
    FString                                       ItemProperty;                                                 // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkPS4AdvancedInitializationSettings
// Struct Size::0x0038
struct FAkPS4AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint32_t                                      ACPBatchBufferSize;                                           // 0x0030(0x0004)
    bool                                          UseHardwareCodecLowLatencyMode;                               // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  AkAudio.AkReverbDescriptor
// Struct Size::0x0028
struct FAkReverbDescriptor
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  AkAudio.AkAcousticTextureParams
// Struct Size::0x0020
struct FAkAcousticTextureParams
{
    FVector4                                      AbsorptionValues;                                             // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.AkGeometrySurfacePropertiesToMap
// Struct Size::0x0030
struct FAkGeometrySurfacePropertiesToMap
{
    TSoftObjectPtr<UAkAcousticTexture>            AcousticTexture;                                              // 0x0000(0x0028)
    float                                         OcclusionValue;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  AkAudio.AkWwiseItemToControl
// Struct Size::0x0040
struct FAkWwiseItemToControl
{
    FAkWwiseObjectDetails                         ItemPicked;                                                   // 0x0000(0x0030)
    FString                                       ItemPath;                                                     // 0x0030(0x0010)
};


// ScriptStruct  AkAudio.AkWwiseObjectDetails
// Struct Size::0x0030
struct FAkWwiseObjectDetails
{
    FString                                       ItemName;                                                     // 0x0000(0x0010)
    FString                                       ItemPath;                                                     // 0x0010(0x0010)
    FString                                       ItemID;                                                       // 0x0020(0x0010)
};


// ScriptStruct  AkAudio.AkSurfaceProperties
// Struct Size::0x0040
struct FAkSurfaceProperties
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  AkAudio.AkEdgeInfo
// Struct Size::0x0028
struct FAkEdgeInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  AkAudio.AkPoly
// Struct Size::0x0018
struct FAkPoly
{
    UAkAcousticTexture*                           Texture;                                                      // 0x0000(0x0008)
    float                                         Occlusion;                                                    // 0x0008(0x0004)
    bool                                          EnableSurface;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         SurfaceArea;                                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  AkAudio.AkWaapiFieldNames
// Struct Size::0x0010
struct FAkWaapiFieldNames
{
    FString                                       FieldName;                                                    // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWaapiUri
// Struct Size::0x0010
struct FAkWaapiUri
{
    FString                                       Uri;                                                          // 0x0000(0x0010)
};


// ScriptStruct  AkAudio.AkWindowsAdvancedInitializationSettings
// Struct Size::0x0038
struct FAkWindowsAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    bool                                          UseHeadMountedDisplayAudioDevice;                             // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    uint32_t                                      MaxSystemAudioObjects;                                        // 0x0034(0x0004)
};


// ScriptStruct  AkAudio.AkXboxOneApuHeapInitializationSettings
// Struct Size::0x0008
struct FAkXboxOneApuHeapInitializationSettings
{
    uint32_t                                      CachedSize;                                                   // 0x0000(0x0004)
    uint32_t                                      NonCachedSize;                                                // 0x0004(0x0004)
};


// ScriptStruct  AkAudio.AkXboxOneAdvancedInitializationSettings
// Struct Size::0x0034
struct FAkXboxOneAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
{
    uint16_t                                      MaximumNumberOfXMAVoices;                                     // 0x0030(0x0002)
    bool                                          UseHardwareCodecLowLatencyMode;                               // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
};


// ScriptStruct  AkAudio.EventCooldownData
// Struct Size::0x0050
struct FEventCooldownData
{
    TMap<FString,float>                           Data;                                                         // 0x0000(0x0050)
};


// ScriptStruct  AkAudio.CachedGameSyncData
// Struct Size::0x00A0
struct FCachedGameSyncData
{
    TMap<FString,float>                           RTPCData;                                                     // 0x0000(0x0050)
    TMap<FString,FString>                         SwitchData;                                                   // 0x0050(0x0050)
};


// ScriptStruct  AkAudio.AkAudioEventTrackKey
// Struct Size::0x0020
struct FAkAudioEventTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAkAudioEvent*                                AkAudioEvent;                                                 // 0x0008(0x0008)
    FString                                       EventName;                                                    // 0x0010(0x0010)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioEventTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAkAudioEventSection*               Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneAkAudioRTPCTemplate
// Struct Size::0x0028
struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAkAudioRTPCSection*                Section;                                                      // 0x0020(0x0008)
};


// ScriptStruct  AkAudio.MovieSceneFloatChannelSerializationHelper
// Struct Size::0x0030
struct FMovieSceneFloatChannelSerializationHelper
{
    enum class ERichCurveExtrapolation            PreInfinityExtrap;                                            // 0x0000(0x0001)
    enum class ERichCurveExtrapolation            PostInfinityExtrap;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<int32_t>                               Times;                                                        // 0x0008(0x0010)
    TArray<FMovieSceneFloatValueSerializationHelper>Values;                                                     // 0x0018(0x0010)
    float                                         DefaultValue;                                                 // 0x0028(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AkAudio.MovieSceneFloatValueSerializationHelper
// Struct Size::0x001C
struct FMovieSceneFloatValueSerializationHelper
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0004(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FMovieSceneTangentDataSerializationHelper     Tangent;                                                      // 0x0008(0x0014)
};


// ScriptStruct  AkAudio.MovieSceneTangentDataSerializationHelper
// Struct Size::0x0014
struct FMovieSceneTangentDataSerializationHelper
{
    float                                         ArriveTangent;                                                // 0x0000(0x0004)
    float                                         LeaveTangent;                                                 // 0x0004(0x0004)
    enum class ERichCurveTangentWeightMode        TangentWeightMode;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ArriveTangentWeight;                                          // 0x000C(0x0004)
    float                                         LeaveTangentWeight;                                           // 0x0010(0x0004)
};


// ScriptStruct  AkAudio.WwiseDataRow
// Struct Size::0x0068
struct FWwiseDataRow : public FTableRowBase
{
    FString                                       SoundbankName;                                                // 0x0008(0x0010)
    FString                                       EventName;                                                    // 0x0018(0x0010)
    TSoftObjectPtr<UAkAudioEvent>                 RealAkEvent;                                                  // 0x0028(0x0028)
    FGuid                                         EventGuid;                                                    // 0x0050(0x0010)
    bool                                          HasReference;                                                 // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Paper2D.IntMargin
// Struct Size::0x0010
struct FIntMargin
{
    int32_t                                       Left;                                                         // 0x0000(0x0004)
    int32_t                                       Top;                                                          // 0x0004(0x0004)
    int32_t                                       Right;                                                        // 0x0008(0x0004)
    int32_t                                       Bottom;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.PaperFlipbookKeyFrame
// Struct Size::0x0010
struct FPaperFlipbookKeyFrame
{
    UPaperSprite*                                 Sprite;                                                       // 0x0000(0x0008)
    int32_t                                       FrameRun;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.SpriteInstanceData
// Struct Size::0x0050
struct FSpriteInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0040)
    UPaperSprite*                                 SourceSprite;                                                 // 0x0040(0x0008)
    FColor                                        VertexColor;                                                  // 0x0048(0x0004)
    int32_t                                       MaterialIndex;                                                // 0x004C(0x0004)
};


// ScriptStruct  Paper2D.PaperSpriteData
// Struct Size::0x0028
struct FPaperSpriteData
{
    FVector2D                                     SourceUV;                                                     // 0x0000(0x0008)
    FVector2D                                     SourceDimension;                                              // 0x0008(0x0008)
    int32_t                                       AlternateMaterialSplitIndex;                                  // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FVector4>                              BakedRenderData;                                              // 0x0018(0x0010)
};


// ScriptStruct  Paper2D.PaperSpriteSocket
// Struct Size::0x0040
struct FPaperSpriteSocket
{
    FTransform                                    LocalTransform;                                               // 0x0000(0x0030)
    FName                                         SocketName;                                                   // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Paper2D.PaperSpriteAtlasSlot
// Struct Size::0x0040
struct FPaperSpriteAtlasSlot
{
    TSoftObjectPtr<UPaperSprite>                  SpriteRef;                                                    // 0x0000(0x0028)
    int32_t                                       AtlasIndex;                                                   // 0x0028(0x0004)
    int32_t                                       X;                                                            // 0x002C(0x0004)
    int32_t                                       Y;                                                            // 0x0030(0x0004)
    int32_t                                       Width;                                                        // 0x0034(0x0004)
    int32_t                                       Height;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Paper2D.PaperTerrainMaterialRule
// Struct Size::0x0038
struct FPaperTerrainMaterialRule
{
    UPaperSprite*                                 StartCap;                                                     // 0x0000(0x0008)
    TArray<UPaperSprite*>                         Body;                                                         // 0x0008(0x0010)
    UPaperSprite*                                 EndCap;                                                       // 0x0018(0x0008)
    float                                         MinimumAngle;                                                 // 0x0020(0x0004)
    float                                         MaximumAngle;                                                 // 0x0024(0x0004)
    bool                                          bEnableCollision;                                             // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         CollisionOffset;                                              // 0x002C(0x0004)
    int32_t                                       DrawOrder;                                                    // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Paper2D.PaperTileInfo
// Struct Size::0x0010
struct FPaperTileInfo
{
    UPaperTileSet*                                TileSet;                                                      // 0x0000(0x0008)
    int32_t                                       PackedTileIndex;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Paper2D.PaperTileSetTerrain
// Struct Size::0x0018
struct FPaperTileSetTerrain
{
    FString                                       TerrainName;                                                  // 0x0000(0x0010)
    int32_t                                       CenterTileIndex;                                              // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Paper2D.PaperTileMetadata
// Struct Size::0x0040
struct FPaperTileMetadata
{
    FName                                         UserDataName;                                                 // 0x0000(0x0008)
    FSpriteGeometryCollection                     CollisionData;                                                // 0x0008(0x0030)
    char                                          TerrainMembership;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Paper2D.SpriteGeometryCollection
// Struct Size::0x0030
struct FSpriteGeometryCollection
{
    TArray<FSpriteGeometryShape>                  Shapes;                                                       // 0x0000(0x0010)
    enum class ESpritePolygonMode                 GeometryType;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       PixelsPerSubdivisionX;                                        // 0x0014(0x0004)
    int32_t                                       PixelsPerSubdivisionY;                                        // 0x0018(0x0004)
    bool                                          bAvoidVertexMerging;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         AlphaThreshold;                                               // 0x0020(0x0004)
    float                                         DetailAmount;                                                 // 0x0024(0x0004)
    float                                         SimplifyEpsilon;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Paper2D.SpriteGeometryShape
// Struct Size::0x0030
struct FSpriteGeometryShape
{
    enum class ESpriteShapeType                   ShapeType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FVector2D>                             Vertices;                                                     // 0x0008(0x0010)
    FVector2D                                     BoxSize;                                                      // 0x0018(0x0008)
    FVector2D                                     BoxPosition;                                                  // 0x0020(0x0008)
    float                                         Rotation;                                                     // 0x0028(0x0004)
    bool                                          bNegativeWinding;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Paper2D.SpriteDrawCallRecord
// Struct Size::0x00D0
struct FSpriteDrawCallRecord
{
    FVector                                       Destination;                                                  // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UTexture*                                     BaseTexture;                                                  // 0x0010(0x0008)
    char                                          pa_0018[0x0030]                                               // 0x0018(0x0030)
    FColor                                        Color;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0084]                                               // 0x004C(0x0084)
};


// ScriptStruct  Paper2D.SpriteAssetInitParameters
// Struct Size::0x0040
struct FSpriteAssetInitParameters
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  SolarUI.WidgetOverrideParam
// Struct Size::0x0150
struct FWidgetOverrideParam
{
    enum class EWidgetOverrideParamType           Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ChildName;                                                    // 0x0004(0x0008)
    bool                                          bEnableLocText;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FText                                         Text;                                                         // 0x0010(0x0018)
    int32_t                                       LocTextID;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FSlateBrush                                   Brush;                                                        // 0x0030(0x00F0)
    FString                                       CustomParameter;                                              // 0x0120(0x0010)
    FGameplayTag                                  GameplayTag;                                                  // 0x0130(0x0008)
    TArray<FString>                               MetaData;                                                     // 0x0138(0x0010)
    char                                          pa_0148[0x0008]                                               // 0x0148(0x0008)
};


// ScriptStruct  SolarUI.SolarUIMapPanelSlotAdapterEntry
// Struct Size::0x0010
struct FSolarUIMapPanelSlotAdapterEntry
{
    UPanelSlot*                                   SrcPanelSlotClass;                                            // 0x0000(0x0008)
    USolarPanelSlotAdapter*                       DstPanelSlotClass;                                            // 0x0008(0x0008)
};


// ScriptStruct  SolarUI.SolarUIMapWidgetAdapterEntry
// Struct Size::0x0010
struct FSolarUIMapWidgetAdapterEntry
{
    UWidget*                                      SrcWidgetClass;                                               // 0x0000(0x0008)
    USolarWidgetAdapter*                          DstWidgetClass;                                               // 0x0008(0x0008)
};


// ScriptStruct  DTBPJson.DTStruct
// Struct Size::0x0001
struct FDTStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  FarlightPatchRuntime.PakEntryInfo
// Struct Size::0x0040
struct FPakEntryInfo
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
    FString                                       MountPoint;                                                   // 0x0010(0x0010)
    int64_t                                       Size;                                                         // 0x0020(0x0008)
    int64_t                                       Offset;                                                       // 0x0028(0x0008)
    FString                                       Hash;                                                         // 0x0030(0x0010)
};


// ScriptStruct  HotPatcherRuntime.AssetDependenciesDetail
// Struct Size::0x0060
struct FAssetDependenciesDetail
{
    FString                                       ModuleCategory;                                               // 0x0000(0x0010)
    TMap<FString,FAssetDetail>                    AssetDependencyDetails;                                       // 0x0010(0x0050)
};


// ScriptStruct  HotPatcherRuntime.AssetDetail
// Struct Size::0x0018
struct FAssetDetail
{
    FName                                         PackagePath;                                                  // 0x0000(0x0008)
    FName                                         AssetType;                                                    // 0x0008(0x0008)
    FName                                         Guid;                                                         // 0x0010(0x0008)
};


// ScriptStruct  HotPatcherRuntime.AssetDependenciesInfo
// Struct Size::0x0050
struct FAssetDependenciesInfo
{
    TMap<FString,FAssetDependenciesDetail>        AssetsDependenciesMap;                                        // 0x0000(0x0050)
};


// ScriptStruct  HotPatcherRuntime.BinariesPatchConfig
// Struct Size::0x0050
struct FBinariesPatchConfig
{
    enum class EBinariesPatchFeature              BinariesPatchType;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0017]                                               // 0x0001(0x0017)
    FPakEncryptSettings                           EncryptSettings;                                              // 0x0018(0x0018)
    TArray<FPlatformBasePak>                      BaseVersionPaks;                                              // 0x0030(0x0010)
    TArray<FMatchRule>                            MatchRules;                                                   // 0x0040(0x0010)
};


// ScriptStruct  HotPatcherRuntime.MatchRule
// Struct Size::0x0028
struct FMatchRule
{
    enum class EMatchRule                         Rule;                                                         // 0x0000(0x0001)
    enum class EMatchOperator                     Operator;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Size;                                                         // 0x0004(0x0004)
    TArray<FString>                               Formaters;                                                    // 0x0008(0x0010)
    TArray<FString>                               AssetTypes;                                                   // 0x0018(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PlatformBasePak
// Struct Size::0x0018
struct FPlatformBasePak
{
    enum class ETargetPlatform                    Platform;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FFilePath>                             Paks;                                                         // 0x0008(0x0010)
};


// ScriptStruct  Engine.FilePath
// Struct Size::0x0010
struct FFilePath
{
    FString                                       FilePath;                                                     // 0x0000(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PakEncryptSettings
// Struct Size::0x0018
struct FPakEncryptSettings
{
    bool                                          bUseDefaultCryptoIni;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FFilePath                                     CryptoKeys;                                                   // 0x0008(0x0010)
};


// ScriptStruct  HotPatcherRuntime.ChunkAssetDescribe
// Struct Size::0x0148
struct FChunkAssetDescribe
{
    char                                          pa_0000[0x0148]                                               // 0x0000(0x0148)
};


// ScriptStruct  HotPatcherRuntime.ChunkPakCommand
// Struct Size::0x0040
struct FChunkPakCommand
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  HotPatcherRuntime.ChunkInfo
// Struct Size::0x0088
struct FChunkInfo
{
    FString                                       ChunkName;                                                    // 0x0000(0x0010)
    bool                                          bMonolithic;                                                  // 0x0010(0x0001)
    enum class EMonolithicPathMode                MonolithicPathMode;                                           // 0x0011(0x0001)
    bool                                          bStorageUnrealPakList;                                        // 0x0012(0x0001)
    bool                                          bStorageIoStorePakList;                                       // 0x0013(0x0001)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FDirectoryPath>                        AssetIncludeFilters;                                          // 0x0018(0x0010)
    TArray<FDirectoryPath>                        AssetIgnoreFilters;                                           // 0x0028(0x0010)
    bool                                          bAnalysisFilterDependencies;                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TArray<enum class EAssetRegistryDependencyTypeEx>AssetRegistryDependencyTypes;                              // 0x0040(0x0010)
    TArray<FPatcherSpecifyAsset>                  IncludeSpecifyAssets;                                         // 0x0050(0x0010)
    TArray<FPlatformExternAssets>                 AddExternAssetsToPlatform;                                    // 0x0060(0x0010)
    FPakInternalInfo                              InternalFiles;                                                // 0x0070(0x0006)
    char                                          pa_0076[0x0012]                                               // 0x0076(0x0012)
};


// ScriptStruct  HotPatcherRuntime.PakInternalInfo
// Struct Size::0x0006
struct FPakInternalInfo
{
    char                                          pa_0000[0x0003]                                               // 0x0000(0x0003)
    bool                                          bIncludeEngineIni;                                            // 0x0003(0x0001)
    bool                                          bIncludePluginIni;                                            // 0x0004(0x0001)
    bool                                          bIncludeProjectIni;                                           // 0x0005(0x0001)
};


// ScriptStruct  HotPatcherRuntime.PlatformExternAssets
// Struct Size::0x0028
struct FPlatformExternAssets
{
    enum class ETargetPlatform                    TargetPlatform;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FExternFileInfo>                       AddExternFileToPak;                                           // 0x0008(0x0010)
    TArray<FExternDirectoryInfo>                  AddExternDirectoryToPak;                                      // 0x0018(0x0010)
};


// ScriptStruct  HotPatcherRuntime.ExternDirectoryInfo
// Struct Size::0x0020
struct FExternDirectoryInfo
{
    FDirectoryPath                                DirectoryPath;                                                // 0x0000(0x0010)
    FString                                       MountPoint;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.DirectoryPath
// Struct Size::0x0010
struct FDirectoryPath
{
    FString                                       Path;                                                         // 0x0000(0x0010)
};


// ScriptStruct  HotPatcherRuntime.ExternFileInfo
// Struct Size::0x0038
struct FExternFileInfo
{
    FFilePath                                     FilePath;                                                     // 0x0000(0x0010)
    FString                                       MountPath;                                                    // 0x0010(0x0010)
    FString                                       FileHash;                                                     // 0x0020(0x0010)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  HotPatcherRuntime.PatcherSpecifyAsset
// Struct Size::0x0030
struct FPatcherSpecifyAsset
{
    FSoftObjectPath                               Asset;                                                        // 0x0000(0x0018)
    bool                                          bAnalysisAssetDependencies;                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<enum class EAssetRegistryDependencyTypeEx>AssetRegistryDependencyTypes;                              // 0x0020(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PakFileProxy
// Struct Size::0x0068
struct FPakFileProxy
{
    FString                                       ChunkStoreName;                                               // 0x0000(0x0010)
    enum class ETargetPlatform                    Platform;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       StorageDirectory;                                             // 0x0018(0x0010)
    FString                                       PakCommandSavePath;                                           // 0x0028(0x0010)
    FString                                       PakSavePath;                                                  // 0x0038(0x0010)
    TArray<FPakCommand>                           PakCommands;                                                  // 0x0048(0x0010)
    TArray<FString>                               IoStoreCommands;                                              // 0x0058(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PakCommand
// Struct Size::0x0058
struct FPakCommand
{
    FString                                       ChunkName;                                                    // 0x0000(0x0010)
    FString                                       MountPath;                                                    // 0x0010(0x0010)
    FString                                       AssetPackage;                                                 // 0x0020(0x0010)
    TArray<FString>                               PakCommands;                                                  // 0x0030(0x0010)
    TArray<FString>                               IoStoreCommands;                                              // 0x0040(0x0010)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  HotPatcherRuntime.CookerConfig
// Struct Size::0x0088
struct FCookerConfig
{
    FString                                       EngineBin;                                                    // 0x0000(0x0010)
    FString                                       ProjectPath;                                                  // 0x0010(0x0010)
    FString                                       EngineParams;                                                 // 0x0020(0x0010)
    TArray<FString>                               CookPlatforms;                                                // 0x0030(0x0010)
    bool                                          bCookAllMap;                                                  // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    TArray<FString>                               CookMaps;                                                     // 0x0048(0x0010)
    TArray<FString>                               CookFilter;                                                   // 0x0058(0x0010)
    TArray<FString>                               CookSettings;                                                 // 0x0068(0x0010)
    FString                                       options;                                                      // 0x0078(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PatcherEntitySettingBase
// Struct Size::0x0008
struct FPatcherEntitySettingBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  HotPatcherRuntime.HotPatcherSettingBase
// Struct Size::0x0038
struct FHotPatcherSettingBase : public FPatcherEntitySettingBase
{
    bool                                          bStorageConfig;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FDirectoryPath                                SavePath;                                                     // 0x0010(0x0010)
    bool                                          bStandaloneMode;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FString>                               AdditionalCommandletArgs;                                     // 0x0028(0x0010)
};


// ScriptStruct  HotPatcherRuntime.ExportPatchSettings
// Struct Size::0x0328
struct FExportPatchSettings : public FHotPatcherSettingBase
{
    bool                                          bByBaseVersion;                                               // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FFilePath                                     BaseVersion;                                                  // 0x0040(0x0010)
    FString                                       VersionId;                                                    // 0x0050(0x0010)
    bool                                          bBinariesPatch;                                               // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    FBinariesPatchConfig                          BinariesPatchConfig;                                          // 0x0068(0x0050)
    TArray<FDirectoryPath>                        AssetIncludeFilters;                                          // 0x00B8(0x0010)
    TArray<FDirectoryPath>                        AssetIgnoreFilters;                                           // 0x00C8(0x0010)
    bool                                          bForceSkipContent;                                            // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
    TArray<FDirectoryPath>                        ForceSkipContentRules;                                        // 0x00E0(0x0010)
    TArray<FSoftObjectPath>                       ForceSkipAssets;                                              // 0x00F0(0x0010)
    bool                                          bIncludeHasRefAssetsOnly;                                     // 0x0100(0x0001)
    bool                                          bAnalysisFilterDependencies;                                  // 0x0101(0x0001)
    bool                                          bAnalysisDiffAssetDependenciesOnly;                           // 0x0102(0x0001)
    char                                          pa_0103[0x0005]                                               // 0x0103(0x0005)
    TArray<enum class EAssetRegistryDependencyTypeEx>AssetRegistryDependencyTypes;                              // 0x0108(0x0010)
    TArray<FPatcherSpecifyAsset>                  IncludeSpecifyAssets;                                         // 0x0118(0x0010)
    bool                                          bRecursiveWidgetTree;                                         // 0x0128(0x0001)
    bool                                          bPackageTracker;                                              // 0x0129(0x0001)
    char                                          pa_012A[0x0004]                                               // 0x012A(0x0004)
    bool                                          bIncludeEngineIni;                                            // 0x012E(0x0001)
    bool                                          bIncludePluginIni;                                            // 0x012F(0x0001)
    bool                                          bIncludeProjectIni;                                           // 0x0130(0x0001)
    bool                                          bEnableExternFilesDiff;                                       // 0x0131(0x0001)
    char                                          pa_0132[0x0006]                                               // 0x0132(0x0006)
    TArray<FString>                               IgnoreDeletionModulesAsset;                                   // 0x0138(0x0010)
    char                                          pa_0148[0x0020]                                               // 0x0148(0x0020)
    TArray<FPlatformExternAssets>                 AddExternAssetsToPlatform;                                    // 0x0168(0x0010)
    char                                          pa_0178[0x0018]                                               // 0x0178(0x0018)
    bool                                          bEnableChunk;                                                 // 0x0190(0x0001)
    bool                                          bCreateDefaultChunk;                                          // 0x0191(0x0001)
    char                                          pa_0192[0x0006]                                               // 0x0192(0x0006)
    TArray<FChunkInfo>                            ChunkInfos;                                                   // 0x0198(0x0010)
    bool                                          bCookPatchAssets;                                             // 0x01A8(0x0001)
    char                                          pa_01A9[0x0007]                                               // 0x01A9(0x0007)
    FCookShaderOptions                            CookShaderOptions;                                            // 0x01B0(0x0028)
    FAssetRegistryOptions                         SerializeAssetRegistryOptions;                                // 0x01D8(0x0030)
    FIoStoreSettings                              IoStoreSettings;                                              // 0x0208(0x0080)
    FUnrealPakSettings                            UnrealPakSettings;                                            // 0x0288(0x0028)
    TArray<FString>                               DefaultPakListOptions;                                        // 0x02B0(0x0010)
    TArray<FString>                               DefaultCommandletOptions;                                     // 0x02C0(0x0010)
    FPakEncryptSettings                           EncryptSettings;                                              // 0x02D0(0x0018)
    TArray<FReplaceText>                          ReplacePakListTexts;                                          // 0x02E8(0x0010)
    TArray<enum class ETargetPlatform>            PakTargetPlatforms;                                           // 0x02F8(0x0010)
    bool                                          bCustomPakNameRegular;                                        // 0x0308(0x0001)
    char                                          pa_0309[0x0007]                                               // 0x0309(0x0007)
    FString                                       PakNameRegular;                                               // 0x0310(0x0010)
    bool                                          bStorageNewRelease;                                           // 0x0320(0x0001)
    bool                                          bStoragePakFileInfo;                                          // 0x0321(0x0001)
    bool                                          bIgnoreDeleatedAssetsInfo;                                    // 0x0322(0x0001)
    bool                                          bStorageDeletedAssetsToNewReleaseJson;                        // 0x0323(0x0001)
    bool                                          bStorageDiffAnalysisResults;                                  // 0x0324(0x0001)
    bool                                          bBackupMetadata;                                              // 0x0325(0x0001)
    char                                          pa_0326[0x0001]                                               // 0x0326(0x0001)
    bool                                          bEnableProfiling;                                             // 0x0327(0x0001)
};


// ScriptStruct  HotPatcherRuntime.ReplaceText
// Struct Size::0x0028
struct FReplaceText
{
    FString                                       From;                                                         // 0x0000(0x0010)
    FString                                       To;                                                           // 0x0010(0x0010)
    enum class ESearchCaseMode                    SearchCase;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  HotPatcherRuntime.UnrealPakSettings
// Struct Size::0x0028
struct FUnrealPakSettings
{
    TArray<FString>                               UnrealPakListOptions;                                         // 0x0000(0x0010)
    TArray<FString>                               UnrealCommandletOptions;                                      // 0x0010(0x0010)
    bool                                          bStoragePakList;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  HotPatcherRuntime.IoStoreSettings
// Struct Size::0x0080
struct FIoStoreSettings
{
    bool                                          bIoStore;                                                     // 0x0000(0x0001)
    bool                                          bAllowBulkDataInIoStore;                                      // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FString>                               IoStorePakListOptions;                                        // 0x0008(0x0010)
    TArray<FString>                               IoStoreCommandletOptions;                                     // 0x0018(0x0010)
    TMap<enum class ETargetPlatform,FIoStorePlatformContainers>PlatformContainers;                              // 0x0028(0x0050)
    bool                                          bStoragePakList;                                              // 0x0078(0x0001)
    bool                                          bStorageBulkDataInfo;                                         // 0x0079(0x0001)
    char                                          pa_007A[0x0006]                                               // 0x007A(0x0006)
};


// ScriptStruct  HotPatcherRuntime.IoStorePlatformContainers
// Struct Size::0x0038
struct FIoStorePlatformContainers
{
    FDirectoryPath                                BasePackageStagedRootDir;                                     // 0x0000(0x0010)
    bool                                          bGenerateDiffPatch;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FFilePath                                     GlobalContainersOverride;                                     // 0x0018(0x0010)
    FFilePath                                     PatchSourceOverride;                                          // 0x0028(0x0010)
};


// ScriptStruct  HotPatcherRuntime.AssetRegistryOptions
// Struct Size::0x0030
struct FAssetRegistryOptions
{
    bool                                          bSerializeAssetRegistry;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       AssetRegistryMountPointRegular;                               // 0x0008(0x0010)
    enum class EAssetRegistryRule                 AssetRegistryRule;                                            // 0x0018(0x0001)
    bool                                          bCustomAssetRegistryName;                                     // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    FString                                       AssetRegistryNameRegular;                                     // 0x0020(0x0010)
};


// ScriptStruct  HotPatcherRuntime.CookShaderOptions
// Struct Size::0x0028
struct FCookShaderOptions
{
    bool                                          bSharedShaderLibrary;                                         // 0x0000(0x0001)
    bool                                          bNativeShader;                                                // 0x0001(0x0001)
    char                                          pa_0002[0x0001]                                               // 0x0002(0x0001)
    enum class EShaderLibNameRule                 ShaderNameRule;                                               // 0x0003(0x0001)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       CustomShaderName;                                             // 0x0008(0x0010)
    FString                                       ShderLibMountPointRegular;                                    // 0x0018(0x0010)
};


// ScriptStruct  HotPatcherRuntime.ExportReleaseSettings
// Struct Size::0x0100
struct FExportReleaseSettings : public FHotPatcherSettingBase
{
    FString                                       VersionId;                                                    // 0x0038(0x0010)
    bool                                          ByPakList;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<FPlatformPakListFiles>                 PlatformsPakListFiles;                                        // 0x0050(0x0010)
    TArray<FDirectoryPath>                        AssetIncludeFilters;                                          // 0x0060(0x0010)
    TArray<FDirectoryPath>                        AssetIgnoreFilters;                                           // 0x0070(0x0010)
    bool                                          bAnalysisFilterDependencies;                                  // 0x0080(0x0001)
    char                                          pa_0081[0x0007]                                               // 0x0081(0x0007)
    TArray<enum class EAssetRegistryDependencyTypeEx>AssetRegistryDependencyTypes;                              // 0x0088(0x0010)
    bool                                          bIncludeHasRefAssetsOnly;                                     // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    TArray<FPatcherSpecifyAsset>                  IncludeSpecifyAssets;                                         // 0x00A0(0x0010)
    char                                          pa_00B0[0x0020]                                               // 0x00B0(0x0020)
    TArray<FPlatformExternAssets>                 AddExternAssetsToPlatform;                                    // 0x00D0(0x0010)
    bool                                          bBackupMetadata;                                              // 0x00E0(0x0001)
    bool                                          bBackupProjectConfig;                                         // 0x00E1(0x0001)
    char                                          pa_00E2[0x0006]                                               // 0x00E2(0x0006)
    TArray<enum class ETargetPlatform>            BackupMetadataPlatforms;                                      // 0x00E8(0x0010)
    bool                                          bNoShaderCompile;                                             // 0x00F8(0x0001)
    char                                          pa_00F9[0x0007]                                               // 0x00F9(0x0007)
};


// ScriptStruct  HotPatcherRuntime.PlatformPakListFiles
// Struct Size::0x0038
struct FPlatformPakListFiles
{
    enum class ETargetPlatform                    TargetPlatform;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FFilePath>                             PakResponseFiles;                                             // 0x0008(0x0010)
    TArray<FFilePath>                             PakFiles;                                                     // 0x0018(0x0010)
    FString                                       AESKey;                                                       // 0x0028(0x0010)
};


// ScriptStruct  HotPatcherRuntime.HotPatcherAssetDependency
// Struct Size::0x0038
struct FHotPatcherAssetDependency
{
    FAssetDetail                                  Asset;                                                        // 0x0000(0x0018)
    TArray<FAssetDetail>                          AssetReference;                                               // 0x0018(0x0010)
    TArray<FAssetDetail>                          AssetDependency;                                              // 0x0028(0x0010)
};


// ScriptStruct  HotPatcherRuntime.HotPatcherVersion
// Struct Size::0x0118
struct FHotPatcherVersion
{
    FString                                       VersionId;                                                    // 0x0000(0x0010)
    FString                                       BaseVersionId;                                                // 0x0010(0x0010)
    FString                                       Date;                                                         // 0x0020(0x0010)
    char                                          pa_0030[0x0048]                                               // 0x0030(0x0048)
    FAssetDependenciesInfo                        AssetInfo;                                                    // 0x0078(0x0050)
    TMap<enum class ETargetPlatform,FPlatformExternAssets>PlatformAssets;                                       // 0x00C8(0x0050)
};


// ScriptStruct  HotPatcherRuntime.PackageInfo
// Struct Size::0x0020
struct FPackageInfo
{
    FString                                       AssetName;                                                    // 0x0000(0x0010)
    FString                                       AssetGuid;                                                    // 0x0010(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PakEncryptionKeys
// Struct Size::0x0088
struct FPakEncryptionKeys
{
    FEncryptionKeyEntry                           EncryptionKey;                                                // 0x0000(0x0030)
    TArray<FEncryptionKeyEntry>                   SecondaryEncryptionKeys;                                      // 0x0030(0x0010)
    bool                                          bEnablePakIndexEncryption;                                    // 0x0040(0x0001)
    bool                                          bEnablePakIniEncryption;                                      // 0x0041(0x0001)
    bool                                          bEnablePakUAssetEncryption;                                   // 0x0042(0x0001)
    bool                                          bEnablePakFullAssetEncryption;                                // 0x0043(0x0001)
    bool                                          bDataCryptoRequired;                                          // 0x0044(0x0001)
    bool                                          PakEncryptionRequired;                                        // 0x0045(0x0001)
    bool                                          PakSigningRequired;                                           // 0x0046(0x0001)
    bool                                          bEnablePakSigning;                                            // 0x0047(0x0001)
    FSignKeyEntry                                 SigningKey;                                                   // 0x0048(0x0040)
};


// ScriptStruct  HotPatcherRuntime.SignKeyEntry
// Struct Size::0x0040
struct FSignKeyEntry
{
    FSignKeyItem                                  PublicKey;                                                    // 0x0000(0x0020)
    FSignKeyItem                                  PrivateKey;                                                   // 0x0020(0x0020)
};


// ScriptStruct  HotPatcherRuntime.SignKeyItem
// Struct Size::0x0020
struct FSignKeyItem
{
    FString                                       Exponent;                                                     // 0x0000(0x0010)
    FString                                       Modulus;                                                      // 0x0010(0x0010)
};


// ScriptStruct  HotPatcherRuntime.EncryptionKeyEntry
// Struct Size::0x0030
struct FEncryptionKeyEntry
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Guid;                                                         // 0x0010(0x0010)
    FString                                       Key;                                                          // 0x0020(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PakFilesMap
// Struct Size::0x0050
struct FPakFilesMap
{
    TMap<FString,FPakFileArray>                   PakFilesMap;                                                  // 0x0000(0x0050)
};


// ScriptStruct  HotPatcherRuntime.PakFileArray
// Struct Size::0x0010
struct FPakFileArray
{
    TArray<FPakFileInfo>                          PakFileInfos;                                                 // 0x0000(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PakFileInfo
// Struct Size::0x0028
struct FPakFileInfo
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
    FString                                       Hash;                                                         // 0x0010(0x0010)
    int32_t                                       FileSize;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  HotPatcherRuntime.PakVersion
// Struct Size::0x0040
struct FPakVersion
{
    FString                                       VersionId;                                                    // 0x0000(0x0010)
    FString                                       BaseVersionId;                                                // 0x0010(0x0010)
    FString                                       Date;                                                         // 0x0020(0x0010)
    FString                                       CheckCode;                                                    // 0x0030(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PatchVersionAssetDiff
// Struct Size::0x00F0
struct FPatchVersionAssetDiff
{
    FAssetDependenciesInfo                        AddAssetDependInfo;                                           // 0x0000(0x0050)
    FAssetDependenciesInfo                        ModifyAssetDependInfo;                                        // 0x0050(0x0050)
    FAssetDependenciesInfo                        DeleteAssetDependInfo;                                        // 0x00A0(0x0050)
};


// ScriptStruct  HotPatcherRuntime.PatchVersionDiff
// Struct Size::0x0140
struct FPatchVersionDiff
{
    FPatchVersionAssetDiff                        AssetDiffInfo;                                                // 0x0000(0x00F0)
    TMap<enum class ETargetPlatform,FPatchVersionExternDiff>PlatformExternDiffInfo;                             // 0x00F0(0x0050)
};


// ScriptStruct  HotPatcherRuntime.PatchVersionExternDiff
// Struct Size::0x0038
struct FPatchVersionExternDiff
{
    enum class ETargetPlatform                    Platform;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FExternFileInfo>                       AddExternalFiles;                                             // 0x0008(0x0010)
    TArray<FExternFileInfo>                       ModifyExternalFiles;                                          // 0x0018(0x0010)
    TArray<FExternFileInfo>                       DeleteExternalFiles;                                          // 0x0028(0x0010)
};


// ScriptStruct  HotPatcherRuntime.PlatformExternFiles
// Struct Size::0x0018
struct FPlatformExternFiles
{
    enum class ETargetPlatform                    Platform;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FExternFileInfo>                       ExternFiles;                                                  // 0x0008(0x0010)
};


// ScriptStruct  HotPatcherRuntime.HotPatcherContext
// Struct Size::0x0058
struct FHotPatcherContext
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
    UScopedSlowTaskContext*                       UnrealPakSlowTask;                                            // 0x0040(0x0008)
    char                                          pa_0048[0x0010]                                               // 0x0048(0x0010)
};


// ScriptStruct  HotPatcherRuntime.HotPatcherReleaseContext
// Struct Size::0x0170
struct FHotPatcherReleaseContext : public FHotPatcherContext
{
    FHotPatcherVersion                            NewReleaseVersion;                                            // 0x0058(0x0118)
};


// ScriptStruct  HotPatcherRuntime.HotPatcherPatchContext
// Struct Size::0x05E0
struct FHotPatcherPatchContext : public FHotPatcherContext
{
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FHotPatcherVersion                            BaseVersion;                                                  // 0x0060(0x0118)
    FHotPatcherVersion                            CurrentVersion;                                               // 0x0178(0x0118)
    FPatchVersionDiff                             VersionDiff;                                                  // 0x0290(0x0140)
    FHotPatcherVersion                            NewReleaseVersion;                                            // 0x03D0(0x0118)
    FChunkInfo                                    NewVersionChunk;                                              // 0x04E8(0x0088)
    TArray<FChunkInfo>                            PakChunks;                                                    // 0x0570(0x0010)
    TArray<FPakCommand>                           AdditionalFileToPak;                                          // 0x0580(0x0010)
    char                                          pa_0590[0x0050]                                               // 0x0590(0x0050)
};


// ScriptStruct  FoliageNetRuntime.FoliageNetNodeData
// Struct Size::0x0050
struct FFoliageNetNodeData
{
    TArray<FFoliageNetNodeObject>                 AssetObject;                                                  // 0x0000(0x0010)
    float                                         Density;                                                      // 0x0010(0x0004)
    float                                         MinPointCont;                                                 // 0x0014(0x0004)
    float                                         MaxPointCont;                                                 // 0x0018(0x0004)
    float                                         MinAssetScale;                                                // 0x001C(0x0004)
    float                                         MaxAssetScale;                                                // 0x0020(0x0004)
    float                                         RootSize;                                                     // 0x0024(0x0004)
    float                                         SelfMinDistance;                                              // 0x0028(0x0004)
    float                                         MinDistanceFormParent;                                        // 0x002C(0x0004)
    float                                         MaxDistanceFormParent;                                        // 0x0030(0x0004)
    float                                         MixNormal;                                                    // 0x0034(0x0004)
    float                                         RandomUp;                                                     // 0x0038(0x0004)
    float                                         RandomYaw;                                                    // 0x003C(0x0004)
    int32_t                                       Probablity;                                                   // 0x0040(0x0004)
    int32_t                                       BirthOrder;                                                   // 0x0044(0x0004)
    int32_t                                       ChildrenCount;                                                // 0x0048(0x0004)
    bool                                          bIsParent;                                                    // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  FoliageNetRuntime.FoliageNetNodeObject
// Struct Size::0x0028
struct FFoliageNetNodeObject
{
    FSoftObjectPath                               AssetObject;                                                  // 0x0000(0x0018)
    int32_t                                       Proportion;                                                   // 0x0018(0x0004)
    float                                         RootSizeScale;                                                // 0x001C(0x0004)
    float                                         CustomData;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  FoliageNetRuntime.FoliageNodeInfo
// Struct Size::0x0010
struct FFoliageNodeInfo
{
    FName                                         NodeLable;                                                    // 0x0000(0x0008)
    FName                                         NodeTypeName;                                                 // 0x0008(0x0008)
};


// ScriptStruct  FoliageNetRuntime.FoliageNodePinInfo
// Struct Size::0x0028
struct FFoliageNodePinInfo
{
    FName                                         PinCategory;                                                  // 0x0000(0x0008)
    FName                                         PinName;                                                      // 0x0008(0x0008)
    TArray<FFoliageNodeOutputPinConnectInfo>      OutConnectsInfo;                                              // 0x0010(0x0010)
    FFoliageNodeInputPinConnectInfo               InputConnectInfo;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  FoliageNetRuntime.FoliageNodeInputPinConnectInfo
// Struct Size::0x0001
struct FFoliageNodeInputPinConnectInfo
{
    enum class EInputState                        InputState;                                                   // 0x0000(0x0001)
};


// ScriptStruct  FoliageNetRuntime.FoliageNodeOutputPinConnectInfo
// Struct Size::0x0010
struct FFoliageNodeOutputPinConnectInfo
{
    UFoliageNetFunLib*                            ConnectNextLib;                                               // 0x0000(0x0008)
    int32_t                                       ConnectIndex;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  LM_LandscapeRuntime.LMTilePixelData
// Struct Size::0x0008
struct FLMTilePixelData
{
    uint16_t                                      Data;                                                         // 0x0000(0x0002)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       Len;                                                          // 0x0004(0x0004)
};


// ScriptStruct  LunarMariaArea.AreaGroupSet
// Struct Size::0x0010
struct FAreaGroupSet
{
    TArray<FName>                                 LayerNames;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LunarMariaArea.AreaLayerData
// Struct Size::0x0140
struct FAreaLayerData
{
    FName                                         LayerName;                                                    // 0x0000(0x0008)
    FString                                       Asset;                                                        // 0x0008(0x0010)
    FString                                       AssetShort;                                                   // 0x0018(0x0010)
    bool                                          bIsBitMask;                                                   // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TMap<char,FAreaBitLayerConfig>                BitLayers;                                                    // 0x0030(0x0050)
    TSet<FName>                                   BitMaskNames;                                                 // 0x0080(0x0050)
    TMap<FIntPoint,UTexture2D*>                   ComponentWeightMapTextures;                                   // 0x00D0(0x0050)
    FName                                         GroupName;                                                    // 0x0120(0x0008)
    int32_t                                       Index;                                                        // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
    UTextureRenderTarget2D*                       BitDisplayColorTexture;                                       // 0x0130(0x0008)
    enum class EAreaResolutionRatio               ResolutionRatio;                                              // 0x0138(0x0001)
    char                                          pa_0139[0x0003]                                               // 0x0139(0x0003)
    int32_t                                       ComponentSizeQuads;                                           // 0x013C(0x0004)
};


// ScriptStruct  LunarMariaArea.AreaBitLayerConfig
// Struct Size::0x0040
struct FAreaBitLayerConfig
{
    FName                                         LayerName;                                                    // 0x0000(0x0008)
    FString                                       Asset;                                                        // 0x0008(0x0010)
    FString                                       AssetShort;                                                   // 0x0018(0x0010)
    char                                          BitMask;                                                      // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FLinearColor                                  DisplayColor;                                                 // 0x002C(0x0010)
    bool                                          bIsVisible;                                                   // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  LunarMariaArea.AreaTileLayerData
// Struct Size::0x0050
struct FAreaTileLayerData
{
    TMap<FIntPoint,UTexture2D*>                   ComponentWeightMapTextures;                                   // 0x0000(0x0050)
};


// ScriptStruct  UdiniInputActor.UdiniAssetData
// Struct Size::0x0028
struct FUdiniAssetData : public FTableRowBase
{
    bool                                          bIsDebug;                                                     // 0x0008(0x0001)
    enum class EUdiniTableType                    TableType;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FString                                       PackegPath;                                                   // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  UdiniInputActor.UdiniTableDatas
// Struct Size::0x0110
struct FUdiniTableDatas
{
    char                                          pa_0000[0x0110]                                               // 0x0000(0x0110)
};


// ScriptStruct  UdiniInputActor.UdiniTextureName
// Struct Size::0x0040
struct FUdiniTextureName
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  UdiniInputActor.BackTextureData
// Struct Size::0x0060
struct FBackTextureData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  UdiniInputActor.StaticmeshDTData
// Struct Size::0x0018
struct FStaticmeshDTData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  UdiniInputActor.UdiniTaskDatableCore
// Struct Size::0x0008
struct FUdiniTaskDatableCore : public FTableRowBase
{
};


// ScriptStruct  UdiniInputActor.UdiniBuildTaskData
// Struct Size::0x0090
struct FUdiniBuildTaskData : public FUdiniTaskDatableCore
{
    TSoftObjectPtr<UWorld>                        MainLevel;                                                    // 0x0008(0x0028)
    TArray<FString>                               SubLevelPathNameInclude;                                      // 0x0030(0x0010)
    TArray<FString>                               SublevelExcludeString;                                        // 0x0040(0x0010)
    TArray<FString>                               UdiniSubOpNames;                                              // 0x0050(0x0010)
    TArray<FString>                               HipFiles;                                                     // 0x0060(0x0010)
    TArray<FString>                               SaveAsssetPathNameInclude;                                    // 0x0070(0x0010)
    TArray<FString>                               SaveAsssetPathNameExclude;                                    // 0x0080(0x0010)
};


// ScriptStruct  UdiniInputActor.UdiniFoliageTypeDataTable
// Struct Size::0x0098
struct FUdiniFoliageTypeDataTable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UFoliageType_InstancedStaticMesh*>     FoliageTypes;                                                 // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  UdiniInputActor.UdiniHeightFieldDatable
// Struct Size::0x0098
struct FUdiniHeightFieldDatable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UHeightFieldTexture*>                  TextureList;                                                  // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  UdiniInputActor.InputDataList
// Struct Size::0x0050
struct FInputDataList
{
    TMap<FString,FManOpData>                      ManOpDatasList;                                               // 0x0000(0x0050)
};


// ScriptStruct  UdiniInputActor.ManOpData
// Struct Size::0x0070
struct FManOpData
{
    FString                                       MainOpName;                                                   // 0x0000(0x0010)
    FString                                       Icon;                                                         // 0x0010(0x0010)
    TMap<FString,FSubOpData>                      SubOpDatas;                                                   // 0x0020(0x0050)
};


// ScriptStruct  UdiniInputActor.SubOpData
// Struct Size::0x0310
struct FSubOpData
{
    FString                                       Icon;                                                         // 0x0000(0x0010)
    FString                                       SubOpName;                                                    // 0x0010(0x0010)
    FString                                       MainOpName;                                                   // 0x0020(0x0010)
    FString                                       Parent;                                                       // 0x0030(0x0010)
    FString                                       SubOpToolTip;                                                 // 0x0040(0x0010)
    FString                                       HdaTypeName;                                                  // 0x0050(0x0010)
    FString                                       CurveType;                                                    // 0x0060(0x0010)
    int32_t                                       CoodOnPaintEnd;                                               // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       SecondHdaTypeName;                                            // 0x0078(0x0010)
    bool                                          IsClosedCurve;                                                // 0x0088(0x0001)
    bool                                          IsPoint;                                                      // 0x0089(0x0001)
    char                                          pa_008A[0x0002]                                               // 0x008A(0x0002)
    float                                         SnapGridSize;                                                 // 0x008C(0x0004)
    float                                         SnapGridNum;                                                  // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       OperationModeType;                                            // 0x0098(0x0010)
    FString                                       OutputTypeClassName;                                          // 0x00A8(0x0010)
    FString                                       ActorOwnerClassName;                                          // 0x00B8(0x0010)
    FString                                       ImportClassName;                                              // 0x00C8(0x0010)
    FString                                       HelpURL;                                                      // 0x00D8(0x0010)
    FString                                       LevelName;                                                    // 0x00E8(0x0010)
    FString                                       LevelFolderName;                                              // 0x00F8(0x0010)
    int32_t                                       EnableResetMeshPart;                                          // 0x0108(0x0004)
    int32_t                                       EnableResetPolyLinePart;                                      // 0x010C(0x0004)
    int32_t                                       EnableResetHeightFieldPart;                                   // 0x0110(0x0004)
    int32_t                                       EnableResetPointPart;                                         // 0x0114(0x0004)
    FString                                       AutoUpdateHdaName;                                            // 0x0118(0x0010)
    FString                                       ModifyLandscapeLayer;                                         // 0x0128(0x0010)
    FString                                       CurveEditMode;                                                // 0x0138(0x0010)
    float                                         CurveSnapDistance;                                            // 0x0148(0x0004)
    float                                         DefaultCurveWith;                                             // 0x014C(0x0004)
    float                                         PerDrawPointAddHeight;                                        // 0x0150(0x0004)
    int32_t                                       EnableCookForActorMove;                                       // 0x0154(0x0004)
    float                                         SplineResolution;                                             // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    FString                                       LMLayerRootPath;                                              // 0x0160(0x0010)
    FString                                       CustomHotKeyList;                                             // 0x0170(0x0010)
    TMap<FString,FHoudiniParmData>                SubCurveAttribute;                                            // 0x0180(0x0050)
    TMap<FString,FHoudiniParmData>                SubCoutrlAttribute;                                           // 0x01D0(0x0050)
    TMap<FString,FHoudiniParmData>                SubPointAttribute;                                            // 0x0220(0x0050)
    TMap<FString,FHoudiniParmData>                SubPrimAttribute;                                             // 0x0270(0x0050)
    TMap<FString,FHoudiniParmData>                SubDetailAttribute;                                           // 0x02C0(0x0050)
};


// ScriptStruct  UdiniInputActor.HoudiniParmData
// Struct Size::0x00F8
struct FHoudiniParmData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       help;                                                         // 0x0010(0x0010)
    enum class EUdiniAttributeType                AttributeType;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       TupleSize;                                                    // 0x0024(0x0004)
    TArray<float>                                 FloatValue;                                                   // 0x0028(0x0010)
    TArray<int32_t>                               IntValue;                                                     // 0x0038(0x0010)
    TArray<FString>                               StringValue;                                                  // 0x0048(0x0010)
    TArray<float>                                 DefaultFloatValue;                                            // 0x0058(0x0010)
    TArray<int32_t>                               DefaultFIntValue;                                             // 0x0068(0x0010)
    TArray<FString>                               DefaultFStringValue;                                          // 0x0078(0x0010)
    TArray<FString>                               ChoseListStringLable;                                         // 0x0088(0x0010)
    TArray<FString>                               ChoseListStringValue;                                         // 0x0098(0x0010)
    TArray<FString>                               ChoseListStringIcon;                                          // 0x00A8(0x0010)
    TArray<int32_t>                               ChoseListIntValue;                                            // 0x00B8(0x0010)
    float                                         MaxValue;                                                     // 0x00C8(0x0004)
    float                                         MinValue;                                                     // 0x00CC(0x0004)
    bool                                          bIsHide;                                                      // 0x00D0(0x0001)
    bool                                          hasMin;                                                       // 0x00D1(0x0001)
    bool                                          hasMax;                                                       // 0x00D2(0x0001)
    bool                                          hasUIMin;                                                     // 0x00D3(0x0001)
    bool                                          hasUIMax;                                                     // 0x00D4(0x0001)
    char                                          pa_00D5[0x0003]                                               // 0x00D5(0x0003)
    float                                         UIMax;                                                        // 0x00D8(0x0004)
    float                                         UIMin;                                                        // 0x00DC(0x0004)
    char                                          pa_00E0[0x0008]                                               // 0x00E0(0x0008)
    FString                                       VisibilityCondition;                                          // 0x00E8(0x0010)
};


// ScriptStruct  UdiniInputActor.InputDynamicData
// Struct Size::0x0340
struct FInputDynamicData
{
    float                                         PaintScale;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSubOpData                                    StaticSubOpData;                                              // 0x0008(0x0310)
    FString                                       PaintAttValue;                                                // 0x0318(0x0010)
    FString                                       PaintAttName;                                                 // 0x0328(0x0010)
    bool                                          bIsUsePaintDir;                                               // 0x0338(0x0001)
    char                                          pa_0339[0x0007]                                               // 0x0339(0x0007)
};


// ScriptStruct  UdiniInputActor.UdiniRootDatable
// Struct Size::0x0098
struct FUdiniRootDatable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UDataTable*>                           UdiniDatableList;                                             // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  UdiniInputActor.UdiniStaticmeshTextureDatable
// Struct Size::0x00D0
struct FUdiniStaticmeshTextureDatable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UStaticMesh*>                          StaticMesh;                                                   // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
    TArray<int32_t>                               MatSlotIndexs;                                                // 0x0098(0x0010)
    TArray<FString>                               MatTextureParmValues;                                         // 0x00A8(0x0010)
    char                                          pa_00B8[0x0008]                                               // 0x00B8(0x0008)
    FVector4                                      EnableRGBA;                                                   // 0x00C0(0x0010)
};


// ScriptStruct  UdiniInputActor.UdiniTextureDatable
// Struct Size::0x0098
struct FUdiniTextureDatable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UTexture2D*>                           TextureList;                                                  // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  UdiniInputActor.HeightFieldData
// Struct Size::0x0070
struct FHeightFieldData
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int32_t                                       XLength;                                                      // 0x0010(0x0004)
    int32_t                                       YLength;                                                      // 0x0014(0x0004)
    TArray<float>                                 HeightData;                                                   // 0x0018(0x0010)
    TArray<FString>                               MaskNames;                                                    // 0x0028(0x0010)
    FVector                                       CenterPos;                                                    // 0x0038(0x000C)
    FVector                                       BoundSize;                                                    // 0x0044(0x000C)
    float                                         PixSize;                                                      // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TArray<FLinearColor>                          MaskColors;                                                   // 0x0058(0x0010)
    bool                                          bIsBitMast;                                                   // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  UdiniInputActor.UdiniDataTable
// Struct Size::0x0098
struct FUdiniDataTable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UStaticMesh*>                          StaticMesh;                                                   // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  UdiniInputActor.UdiniMatDatable
// Struct Size::0x0098
struct FUdiniMatDatable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UMaterialInstance*>                    MatInstance;                                                  // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  UdiniInputActor.LoopEdgPoint
// Struct Size::0x0038
struct FLoopEdgPoint
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  UdiniInputActor.OnePoly
// Struct Size::0x0038
struct FOnePoly
{
    TArray<int32_t>                               polyPosIndex;                                                 // 0x0000(0x0010)
    TArray<int32_t>                               polyNonSharedEdgeArray;                                       // 0x0010(0x0010)
    TArray<int32_t>                               polyTrianglePrimIndex;                                        // 0x0020(0x0010)
    int32_t                                       __Primitive_Id_;                                              // 0x0030(0x0004)
    bool                                          bIsHid;                                                       // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  UdiniInputActor.UdiniOtherUobjectDataTable
// Struct Size::0x0098
struct FUdiniOtherUobjectDataTable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UObject*>                              ActorInstance;                                                // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
};


// ScriptStruct  UdiniInputActor.SnapPoint
// Struct Size::0x0010
struct FSnapPoint
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  UdiniInputActor.UdiniLandscapeLayer
// Struct Size::0x0038
struct FUdiniLandscapeLayer
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    int32_t                                       XSize;                                                        // 0x0010(0x0004)
    int32_t                                       YSize;                                                        // 0x0014(0x0004)
    FVector2D                                     StartPosition;                                                // 0x0018(0x0008)
    FVector2D                                     EndPosition;                                                  // 0x0020(0x0008)
    char                                          pa_0028[0x0010]                                               // 0x0028(0x0010)
};


// ScriptStruct  UdiniInputActor.UdiniLandscapeHeight
// Struct Size::0x0058
struct FUdiniLandscapeHeight
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       PathName;                                                     // 0x0010(0x0010)
    int32_t                                       XSize;                                                        // 0x0020(0x0004)
    int32_t                                       YSize;                                                        // 0x0024(0x0004)
    FVector2D                                     StartPosition;                                                // 0x0028(0x0008)
    FVector2D                                     EndPosition;                                                  // 0x0030(0x0008)
    TArray<float>                                 Data;                                                         // 0x0038(0x0010)
    FVector                                       Center;                                                       // 0x0048(0x000C)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  UdiniInputActor.UdiniOpParmSelf
// Struct Size::0x0005
struct FUdiniOpParmSelf
{
    bool                                          EnableShowBackGround;                                         // 0x0000(0x0001)
    bool                                          ShowAttributeValueAsText;                                     // 0x0001(0x0001)
    bool                                          ShowAttributeValueAsDir;                                      // 0x0002(0x0001)
    bool                                          EnableShowBackGroundText;                                     // 0x0003(0x0001)
    bool                                          EnableShowColor;                                              // 0x0004(0x0001)
};


// ScriptStruct  UdiniInputActor.OneLine
// Struct Size::0x0018
struct FOneLine
{
    TArray<int32_t>                               polyPosIndex;                                                 // 0x0000(0x0010)
    bool                                          bIsHid;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  UdiniInputActor.IndexCluster
// Struct Size::0x0010
struct FIndexCluster
{
    TArray<int32_t>                               Indexs;                                                       // 0x0000(0x0010)
};


// ScriptStruct  UdiniInputActor.UdiniStaticMeshDataTable
// Struct Size::0x00D0
struct FUdiniStaticMeshDataTable : public FUdiniAssetData
{
    FString                                       RowName;                                                      // 0x0028(0x0010)
    TArray<UStaticMesh*>                          StaticMesh;                                                   // 0x0038(0x0010)
    TMap<FString,FString>                         Attributes;                                                   // 0x0048(0x0050)
    TArray<FString>                               MatLayerName;                                                 // 0x0098(0x0010)
    TArray<int32_t>                               MatIndex;                                                     // 0x00A8(0x0010)
    FVector2D                                     ImageSize;                                                    // 0x00B8(0x0008)
    FVector4                                      EnableRGBA;                                                   // 0x00C0(0x0010)
};


// ScriptStruct  UdiniInputActor.UdiniInstanceData
// Struct Size::0x0068
struct FUdiniInstanceData
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  UdiniInputActor.OutPutContext
// Struct Size::0x0018
struct FOutPutContext
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  UdiniInputActor.HoudiniPartData
// Struct Size::0x0020
struct FHoudiniPartData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  SpinePlugin.SpineEvent
// Struct Size::0x0030
struct FSpineEvent
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       StringValue;                                                  // 0x0010(0x0010)
    int32_t                                       IntValue;                                                     // 0x0020(0x0004)
    float                                         FloatValue;                                                   // 0x0024(0x0004)
    float                                         Time;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  SpinePlugin.SpineAnimationStateMixData
// Struct Size::0x0028
struct FSpineAnimationStateMixData
{
    FString                                       From;                                                         // 0x0000(0x0010)
    FString                                       To;                                                           // 0x0010(0x0010)
    float                                         Mix;                                                          // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  AnimationSharing.TickAnimationSharingFunction
// Struct Size::0x0030
struct FTickAnimationSharingFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  AnimationSharing.AnimationSharingScalability
// Struct Size::0x0010
struct FAnimationSharingScalability
{
    FPerPlatformBool                              UseBlendTransitions;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FPerPlatformFloat                             BlendSignificanceValue;                                       // 0x0004(0x0004)
    FPerPlatformInt                               MaximumNumberConcurrentBlends;                                // 0x0008(0x0004)
    FPerPlatformFloat                             TickSignificanceValue;                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.PerPlatformFloat
// Struct Size::0x0004
struct FPerPlatformFloat
{
    float                                         Default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  Engine.PerPlatformInt
// Struct Size::0x0004
struct FPerPlatformInt
{
    int32_t                                       Default;                                                      // 0x0000(0x0004)
};


// ScriptStruct  Engine.PerPlatformBool
// Struct Size::0x0001
struct FPerPlatformBool
{
    bool                                          Default;                                                      // 0x0000(0x0001)
};


// ScriptStruct  AnimationSharing.PerSkeletonAnimationSharingSetup
// Struct Size::0x0038
struct FPerSkeletonAnimationSharingSetup
{
    USkeleton*                                    Skeleton;                                                     // 0x0000(0x0008)
    USkeletalMesh*                                SkeletalMesh;                                                 // 0x0008(0x0008)
    UAnimSharingTransitionInstance*               BlendAnimBlueprint;                                           // 0x0010(0x0008)
    UAnimSharingAdditiveInstance*                 AdditiveAnimBlueprint;                                        // 0x0018(0x0008)
    UAnimationSharingStateProcessor*              StateProcessorClass;                                          // 0x0020(0x0008)
    TArray<FAnimationStateEntry>                  AnimationStates;                                              // 0x0028(0x0010)
};


// ScriptStruct  AnimationSharing.AnimationStateEntry
// Struct Size::0x0030
struct FAnimationStateEntry
{
    char                                          State;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FAnimationSetup>                       AnimationSetups;                                              // 0x0008(0x0010)
    bool                                          bOnDemand;                                                    // 0x0018(0x0001)
    bool                                          bAdditive;                                                    // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         BlendTime;                                                    // 0x001C(0x0004)
    bool                                          bReturnToPreviousState;                                       // 0x0020(0x0001)
    bool                                          bSetNextState;                                                // 0x0021(0x0001)
    char                                          NextState;                                                    // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    FPerPlatformInt                               MaximumNumberOfConcurrentInstances;                           // 0x0024(0x0004)
    float                                         WiggleTimePercentage;                                         // 0x0028(0x0004)
    bool                                          bRequiresCurves;                                              // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AnimationSharing.AnimationSetup
// Struct Size::0x0018
struct FAnimationSetup
{
    UAnimSequence*                                AnimSequence;                                                 // 0x0000(0x0008)
    UAnimSharingStateInstance*                    AnimBlueprint;                                                // 0x0008(0x0008)
    FPerPlatformInt                               NumRandomizedInstances;                                       // 0x0010(0x0004)
    FPerPlatformBool                              Enabled;                                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  UObjectPlugin.MyPluginStruct
// Struct Size::0x0010
struct FMyPluginStruct
{
    FString                                       TestString;                                                   // 0x0000(0x0010)
};


// ScriptStruct  GeometryCache.TrackRenderData
// Struct Size::0x0070
struct FTrackRenderData
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  GeometryCache.GeometryCacheMeshData
// Struct Size::0x00A8
struct FGeometryCacheMeshData
{
    char                                          pa_0000[0x00A8]                                               // 0x0000(0x00A8)
};


// ScriptStruct  GeometryCache.GeometryCacheVertexInfo
// Struct Size::0x0008
struct FGeometryCacheVertexInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  GeometryCache.GeometryCacheMeshBatchInfo
// Struct Size::0x000C
struct FGeometryCacheMeshBatchInfo
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheParams
// Struct Size::0x0040
struct FMovieSceneGeometryCacheParams
{
    UGeometryCache*                               GeometryCacheAsset;                                           // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         StartOffset;                                                  // 0x001C(0x0004)
    float                                         EndOffset;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FSoftObjectPath                               GeometryCache;                                                // 0x0028(0x0018)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplate
// Struct Size::0x0068
struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneGeometryCacheSectionTemplateParametersParams;                                                    // 0x0020(0x0048)
};


// ScriptStruct  GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplateParameters
// Struct Size::0x0048
struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionTemplate
// Struct Size::0x0048
struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0028)
};


// ScriptStruct  MovieScene.MovieScenePropertySectionData
// Struct Size::0x0028
struct FMovieScenePropertySectionData
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    FString                                       PropertyPath;                                                 // 0x0008(0x0010)
    FName                                         FunctionName;                                                 // 0x0018(0x0008)
    FName                                         NotifyFunctionName;                                           // 0x0020(0x0008)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaPlayerPropertySectionTemplate
// Struct Size::0x0058
struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    UMediaSource*                                 MediaSource;                                                  // 0x0048(0x0008)
    FFrameNumber                                  SectionStartFrame;                                            // 0x0050(0x0004)
    bool                                          bLoop;                                                        // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaSectionTemplate
// Struct Size::0x0050
struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneMediaSectionParams                 Params;                                                       // 0x0020(0x0030)
};


// ScriptStruct  MediaCompositing.MovieSceneMediaSectionParams
// Struct Size::0x0030
struct FMovieSceneMediaSectionParams
{
    UMediaSoundComponent*                         MediaSoundComponent;                                          // 0x0000(0x0008)
    UMediaSource*                                 MediaSource;                                                  // 0x0008(0x0008)
    UMediaTexture*                                MediaTexture;                                                 // 0x0010(0x0008)
    UMediaPlayer*                                 MediaPlayer;                                                  // 0x0018(0x0008)
    FFrameNumber                                  SectionStartFrame;                                            // 0x0020(0x0004)
    FFrameNumber                                  SectionEndFrame;                                              // 0x0024(0x0004)
    bool                                          bLooping;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FFrameNumber                                  StartFrameOffset;                                             // 0x002C(0x0004)
};


// ScriptStruct  UdpMessaging.UdpMockMessage
// Struct Size::0x0010
struct FUdpMockMessage
{
    TArray<char>                                  Data;                                                         // 0x0000(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReferenceMap
// Struct Size::0x0020
struct FActorSequenceObjectReferenceMap
{
    TArray<FGuid>                                 BindingIds;                                                   // 0x0000(0x0010)
    TArray<FActorSequenceObjectReferences>        References;                                                   // 0x0010(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReferences
// Struct Size::0x0010
struct FActorSequenceObjectReferences
{
    TArray<FActorSequenceObjectReference>         Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  ActorSequence.ActorSequenceObjectReference
// Struct Size::0x0028
struct FActorSequenceObjectReference
{
    enum class EActorSequenceObjectReferenceType  Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FGuid                                         ActorId;                                                      // 0x0004(0x0010)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       PathToComponent;                                              // 0x0018(0x0010)
};


// ScriptStruct  TemplateSequence.TemplateSequenceBindingOverrideData
// Struct Size::0x000C
struct FTemplateSequenceBindingOverrideData
{
    TWeakObjectPtr<UObject>                       Object;                                                       // 0x0000(0x0008)
    bool                                          bOverridesDefault;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  TemplateSequence.TemplateSequenceInstanceData
// Struct Size::0x0020
struct FTemplateSequenceInstanceData : public FMovieSceneSequenceInstanceData
{
    FMovieSceneEvaluationOperand                  Operand;                                                      // 0x0008(0x0014)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  TemplateSequence.TemplateSequenceSectionTemplate
// Struct Size::0x0048
struct FTemplateSequenceSectionTemplate : public FMovieSceneEvalTemplate
{
    FFrameNumber                                  SectionStartTime;                                             // 0x0020(0x0004)
    FGuid                                         OuterBindingId;                                               // 0x0024(0x0010)
    FMovieSceneEvaluationOperand                  InnerOperand;                                                 // 0x0034(0x0014)
};


// ScriptStruct  CustomMeshComponent.CustomMeshTriangle
// Struct Size::0x0024
struct FCustomMeshTriangle
{
    FVector                                       Vertex0;                                                      // 0x0000(0x000C)
    FVector                                       Vertex1;                                                      // 0x000C(0x000C)
    FVector                                       Vertex2;                                                      // 0x0018(0x000C)
};


// ScriptStruct  Synthesis.ModularSynthPresetBankEntry
// Struct Size::0x00F0
struct FModularSynthPresetBankEntry
{
    FString                                       PresetName;                                                   // 0x0000(0x0010)
    FModularSynthPreset                           Preset;                                                       // 0x0010(0x00E0)
};


// ScriptStruct  Synthesis.ModularSynthPreset
// Struct Size::0x00E0
struct FModularSynthPreset : public FTableRowBase
{
    char                                          bEnablePolyphony;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    enum class ESynth1OscType                     Osc1Type;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         Osc1Gain;                                                     // 0x0010(0x0004)
    float                                         Osc1Octave;                                                   // 0x0014(0x0004)
    float                                         Osc1Semitones;                                                // 0x0018(0x0004)
    float                                         Osc1Cents;                                                    // 0x001C(0x0004)
    float                                         Osc1PulseWidth;                                               // 0x0020(0x0004)
    enum class ESynth1OscType                     Osc2Type;                                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Osc2Gain;                                                     // 0x0028(0x0004)
    float                                         Osc2Octave;                                                   // 0x002C(0x0004)
    float                                         Osc2Semitones;                                                // 0x0030(0x0004)
    float                                         Osc2Cents;                                                    // 0x0034(0x0004)
    float                                         Osc2PulseWidth;                                               // 0x0038(0x0004)
    float                                         Portamento;                                                   // 0x003C(0x0004)
    char                                          bEnableUnison;                                                // 0x0040(0x0001)
    char                                          bEnableOscillatorSync;                                        // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         Spread;                                                       // 0x0044(0x0004)
    float                                         Pan;                                                          // 0x0048(0x0004)
    float                                         LFO1Frequency;                                                // 0x004C(0x0004)
    float                                         LFO1Gain;                                                     // 0x0050(0x0004)
    enum class ESynthLFOType                      LFO1Type;                                                     // 0x0054(0x0001)
    enum class ESynthLFOMode                      LFO1Mode;                                                     // 0x0055(0x0001)
    enum class ESynthLFOPatchType                 LFO1PatchType;                                                // 0x0056(0x0001)
    char                                          pa_0057[0x0001]                                               // 0x0057(0x0001)
    float                                         LFO2Frequency;                                                // 0x0058(0x0004)
    float                                         LFO2Gain;                                                     // 0x005C(0x0004)
    enum class ESynthLFOType                      LFO2Type;                                                     // 0x0060(0x0001)
    enum class ESynthLFOMode                      LFO2Mode;                                                     // 0x0061(0x0001)
    enum class ESynthLFOPatchType                 LFO2PatchType;                                                // 0x0062(0x0001)
    char                                          pa_0063[0x0001]                                               // 0x0063(0x0001)
    float                                         GainDb;                                                       // 0x0064(0x0004)
    float                                         AttackTime;                                                   // 0x0068(0x0004)
    float                                         DecayTime;                                                    // 0x006C(0x0004)
    float                                         SustainGain;                                                  // 0x0070(0x0004)
    float                                         ReleaseTime;                                                  // 0x0074(0x0004)
    enum class ESynthModEnvPatch                  ModEnvPatchType;                                              // 0x0078(0x0001)
    enum class ESynthModEnvBiasPatch              ModEnvBiasPatchType;                                          // 0x0079(0x0001)
    char                                          pa_007A[0x0002]                                               // 0x007A(0x0002)
    char                                          bInvertModulationEnvelope;                                    // 0x007C(0x0001)
    char                                          bInvertModulationEnvelopeBias;                                // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    float                                         ModulationEnvelopeDepth;                                      // 0x0080(0x0004)
    float                                         ModulationEnvelopeAttackTime;                                 // 0x0084(0x0004)
    float                                         ModulationEnvelopeDecayTime;                                  // 0x0088(0x0004)
    float                                         ModulationEnvelopeSustainGain;                                // 0x008C(0x0004)
    float                                         ModulationEnvelopeReleaseTime;                                // 0x0090(0x0004)
    char                                          bLegato;                                                      // 0x0094(0x0001)
    char                                          bRetrigger;                                                   // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    float                                         FilterFrequency;                                              // 0x0098(0x0004)
    float                                         FilterQ;                                                      // 0x009C(0x0004)
    enum class ESynthFilterType                   FilterType;                                                   // 0x00A0(0x0001)
    enum class ESynthFilterAlgorithm              FilterAlgorithm;                                              // 0x00A1(0x0001)
    char                                          pa_00A2[0x0002]                                               // 0x00A2(0x0002)
    char                                          bStereoDelayEnabled;                                          // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
    enum class ESynthStereoDelayMode              StereoDelayMode;                                              // 0x00A8(0x0001)
    char                                          pa_00A9[0x0003]                                               // 0x00A9(0x0003)
    float                                         StereoDelayTime;                                              // 0x00AC(0x0004)
    float                                         StereoDelayFeedback;                                          // 0x00B0(0x0004)
    float                                         StereoDelayWetlevel;                                          // 0x00B4(0x0004)
    float                                         StereoDelayRatio;                                             // 0x00B8(0x0004)
    char                                          bChorusEnabled;                                               // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         ChorusDepth;                                                  // 0x00C0(0x0004)
    float                                         ChorusFeedback;                                               // 0x00C4(0x0004)
    float                                         ChorusFrequency;                                              // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    TArray<FEpicSynth1Patch>                      Patches;                                                      // 0x00D0(0x0010)
};


// ScriptStruct  Synthesis.EpicSynth1Patch
// Struct Size::0x0018
struct FEpicSynth1Patch
{
    enum class ESynth1PatchSource                 PatchSource;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<FSynth1PatchCable>                     PatchCables;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Synthesis.Synth1PatchCable
// Struct Size::0x0008
struct FSynth1PatchCable
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    enum class ESynth1PatchDestination            Destination;                                                  // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Synthesis.PatchId
// Struct Size::0x0004
struct FPatchId
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectBitCrusherSettings
// Struct Size::0x0008
struct FSourceEffectBitCrusherSettings
{
    float                                         CrushedSampleRate;                                            // 0x0000(0x0004)
    float                                         CrushedBits;                                                  // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectChorusSettings
// Struct Size::0x0018
struct FSourceEffectChorusSettings
{
    float                                         Depth;                                                        // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         WetLevel;                                                     // 0x000C(0x0004)
    float                                         DryLevel;                                                     // 0x0010(0x0004)
    float                                         Spread;                                                       // 0x0014(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectDynamicsProcessorSettings
// Struct Size::0x0028
struct FSourceEffectDynamicsProcessorSettings
{
    enum class ESourceEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESourceEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LookAheadMsec;                                                // 0x0004(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0008(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x000C(0x0004)
    float                                         ThresholdDb;                                                  // 0x0010(0x0004)
    float                                         Ratio;                                                        // 0x0014(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0018(0x0004)
    float                                         InputGainDb;                                                  // 0x001C(0x0004)
    float                                         OutputGainDb;                                                 // 0x0020(0x0004)
    char                                          bStereoLinked;                                                // 0x0024(0x0001)
    char                                          bAnalogMode;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectEnvelopeFollowerSettings
// Struct Size::0x000C
struct FSourceEffectEnvelopeFollowerSettings
{
    float                                         AttackTime;                                                   // 0x0000(0x0004)
    float                                         ReleaseTime;                                                  // 0x0004(0x0004)
    enum class EEnvelopeFollowerPeakMode          PeakMode;                                                     // 0x0008(0x0001)
    bool                                          bIsAnalogMode;                                                // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Synthesis.SourceEffectEQSettings
// Struct Size::0x0010
struct FSourceEffectEQSettings
{
    TArray<FSourceEffectEQBand>                   EQBands;                                                      // 0x0000(0x0010)
};


// ScriptStruct  Synthesis.SourceEffectEQBand
// Struct Size::0x0010
struct FSourceEffectEQBand
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Bandwidth;                                                    // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
    char                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectFilterSettings
// Struct Size::0x000C
struct FSourceEffectFilterSettings
{
    enum class ESourceEffectFilterCircuit         FilterCircuit;                                                // 0x0000(0x0001)
    enum class ESourceEffectFilterType            FilterType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         CutoffFrequency;                                              // 0x0004(0x0004)
    float                                         FilterQ;                                                      // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectFoldbackDistortionSettings
// Struct Size::0x000C
struct FSourceEffectFoldbackDistortionSettings
{
    float                                         InputGainDb;                                                  // 0x0000(0x0004)
    float                                         ThresholdDb;                                                  // 0x0004(0x0004)
    float                                         OutputGainDb;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectMidSideSpreaderSettings
// Struct Size::0x000C
struct FSourceEffectMidSideSpreaderSettings
{
    enum class EStereoChannelMode                 InputMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         SpreadAmount;                                                 // 0x0004(0x0004)
    enum class EStereoChannelMode                 OutputMode;                                                   // 0x0008(0x0001)
    bool                                          bEqualPower;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Synthesis.SourceEffectPannerSettings
// Struct Size::0x0008
struct FSourceEffectPannerSettings
{
    float                                         Spread;                                                       // 0x0000(0x0004)
    float                                         Pan;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectPhaserSettings
// Struct Size::0x0010
struct FSourceEffectPhaserSettings
{
    float                                         WetLevel;                                                     // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    enum class EPhaserLFOType                     LFOType;                                                      // 0x000C(0x0001)
    bool                                          UseQuadraturePhase;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Synthesis.SourceEffectRingModulationSettings
// Struct Size::0x0014
struct FSourceEffectRingModulationSettings
{
    enum class ERingModulatorTypeSourceEffect     ModulatorType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    float                                         Depth;                                                        // 0x0008(0x0004)
    float                                         DryLevel;                                                     // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectSimpleDelaySettings
// Struct Size::0x0018
struct FSourceEffectSimpleDelaySettings
{
    float                                         SpeedOfSound;                                                 // 0x0000(0x0004)
    float                                         DelayAmount;                                                  // 0x0004(0x0004)
    float                                         DryAmount;                                                    // 0x0008(0x0004)
    float                                         WetAmount;                                                    // 0x000C(0x0004)
    float                                         Feedback;                                                     // 0x0010(0x0004)
    char                                          bDelayBasedOnDistance;                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Synthesis.SourceEffectStereoDelaySettings
// Struct Size::0x0014
struct FSourceEffectStereoDelaySettings
{
    enum class EStereoDelaySourceEffect           DelayMode;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayTimeMsec;                                                // 0x0004(0x0004)
    float                                         Feedback;                                                     // 0x0008(0x0004)
    float                                         DelayRatio;                                                   // 0x000C(0x0004)
    float                                         WetLevel;                                                     // 0x0010(0x0004)
};


// ScriptStruct  Synthesis.SourceEffectWaveShaperSettings
// Struct Size::0x0008
struct FSourceEffectWaveShaperSettings
{
    float                                         Amount;                                                       // 0x0000(0x0004)
    float                                         OutputGainDb;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectConvolutionReverbSettings
// Struct Size::0x0020
struct FSubmixEffectConvolutionReverbSettings
{
    float                                         NormalizationVolumeDb;                                        // 0x0000(0x0004)
    float                                         SurroundRearChannelBleedDb;                                   // 0x0004(0x0004)
    bool                                          bInvertRearChannelBleedPhase;                                 // 0x0008(0x0001)
    bool                                          bSurroundRearChannelFlip;                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         SurroundRearChannelBleedAmount;                               // 0x000C(0x0004)
    UAudioImpulseResponse*                        ImpulseResponse;                                              // 0x0010(0x0008)
    bool                                          AllowHArdwareAcceleration;                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Synthesis.SubmixEffectDelaySettings
// Struct Size::0x000C
struct FSubmixEffectDelaySettings
{
    float                                         MaximumDelayLength;                                           // 0x0000(0x0004)
    float                                         InterpolationTime;                                            // 0x0004(0x0004)
    float                                         DelayLength;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectFilterSettings
// Struct Size::0x000C
struct FSubmixEffectFilterSettings
{
    enum class ESubmixFilterType                  FilterType;                                                   // 0x0000(0x0001)
    enum class ESubmixFilterAlgorithm             FilterAlgorithm;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         FilterFrequency;                                              // 0x0004(0x0004)
    float                                         FilterQ;                                                      // 0x0008(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectFlexiverbSettings
// Struct Size::0x0010
struct FSubmixEffectFlexiverbSettings
{
    float                                         PreDelay;                                                     // 0x0000(0x0004)
    float                                         DecayTime;                                                    // 0x0004(0x0004)
    float                                         RoomDampening;                                                // 0x0008(0x0004)
    int32_t                                       Complexity;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Synthesis.SubmixEffectTapDelaySettings
// Struct Size::0x0018
struct FSubmixEffectTapDelaySettings
{
    float                                         MaximumDelayLength;                                           // 0x0000(0x0004)
    float                                         InterpolationTime;                                            // 0x0004(0x0004)
    TArray<FTapDelayInfo>                         Taps;                                                         // 0x0008(0x0010)
};


// ScriptStruct  Synthesis.TapDelayInfo
// Struct Size::0x0018
struct FTapDelayInfo
{
    enum class ETapLineMode                       TapLineMode;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DelayLength;                                                  // 0x0004(0x0004)
    float                                         Gain;                                                         // 0x0008(0x0004)
    int32_t                                       OutputChannel;                                                // 0x000C(0x0004)
    float                                         PanInDegrees;                                                 // 0x0010(0x0004)
    int32_t                                       TapId;                                                        // 0x0014(0x0004)
};


// ScriptStruct  Synthesis.Synth2DSliderStyle
// Struct Size::0x04D0
struct FSynth2DSliderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   NormalThumbImage;                                             // 0x0010(0x00F0)
    FSlateBrush                                   DisabledThumbImage;                                           // 0x0100(0x00F0)
    FSlateBrush                                   NormalBarImage;                                               // 0x01F0(0x00F0)
    FSlateBrush                                   DisabledBarImage;                                             // 0x02E0(0x00F0)
    FSlateBrush                                   BackgroundImage;                                              // 0x03D0(0x00F0)
    float                                         BarThickness;                                                 // 0x04C0(0x0004)
    char                                          pa_04C4[0x000C]                                               // 0x04C4(0x000C)
};


// ScriptStruct  Synthesis.SynthKnobStyle
// Struct Size::0x03E0
struct FSynthKnobStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   LargeKnob;                                                    // 0x0010(0x00F0)
    FSlateBrush                                   LargeKnobOverlay;                                             // 0x0100(0x00F0)
    FSlateBrush                                   MediumKnob;                                                   // 0x01F0(0x00F0)
    FSlateBrush                                   MediumKnobOverlay;                                            // 0x02E0(0x00F0)
    float                                         MinValueAngle;                                                // 0x03D0(0x0004)
    float                                         MaxValueAngle;                                                // 0x03D4(0x0004)
    enum class ESynthKnobSize                     KnobSize;                                                     // 0x03D8(0x0001)
    char                                          pa_03D9[0x0007]                                               // 0x03D9(0x0007)
};


// ScriptStruct  Synthesis.SynthSlateStyle
// Struct Size::0x0010
struct FSynthSlateStyle : public FSlateWidgetStyle
{
    enum class ESynthSlateSizeType                SizeType;                                                     // 0x0008(0x0001)
    enum class ESynthSlateColorStyle              ColorStyle;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Solarland.ActionWheelConfig
// Struct Size::0x00E0
struct FActionWheelConfig : public FTableRowBase
{
    int32_t                                       groupid;                                                      // 0x0008(0x0004)
    FWrappedLocalTextID                           Title;                                                        // 0x000C(0x0004)
    int32_t                                       StyleID;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       WheelDes;                                                     // 0x0018(0x0010)
    float                                         DisplayDelay;                                                 // 0x0028(0x0004)
    float                                         DisplayDelay_Gamepad;                                         // 0x002C(0x0004)
    float                                         PointMoveSensitivity;                                         // 0x0030(0x0004)
    float                                         PointMoveSensitivity_Gamepad;                                 // 0x0034(0x0004)
    FVector2D                                     Offset;                                                       // 0x0038(0x0008)
    UActionWheelWidgetFunctionBase*               WheelFunctionBP;                                              // 0x0040(0x0008)
    FString                                       InputActionName;                                              // 0x0048(0x0010)
    enum class EActionWheelOperateType            OperateType;                                                  // 0x0058(0x0001)
    bool                                          LockJoystickViewInput;                                        // 0x0059(0x0001)
    char                                          pa_005A[0x0002]                                               // 0x005A(0x0002)
    FActionWheelStyle                             ActionWheelStyle;                                             // 0x005C(0x0070)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    TArray<FActionWheelCommand>                   ActionWheelCommands;                                          // 0x00D0(0x0010)
};


// ScriptStruct  Solarland.ActionWheelCommand
// Struct Size::0x0038
struct FActionWheelCommand
{
    enum class EActionWheelCommandType            CommandType;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       ConfigKey;                                                    // 0x0008(0x0010)
    FWrappedLocalTextID                           DisplayName;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FSoftObjectPath                               Icon;                                                         // 0x0020(0x0018)
};


// ScriptStruct  Solarland.WrappedLocalTextID
// Struct Size::0x0004
struct FWrappedLocalTextID
{
    int32_t                                       LocalTextId;                                                  // 0x0000(0x0004)
};


// ScriptStruct  Solarland.ActionWheelStyle
// Struct Size::0x0070
struct FActionWheelStyle
{
    FLinearColor                                  BlackgroundColor;                                             // 0x0000(0x0010)
    FLinearColor                                  InnerCircleColor;                                             // 0x0010(0x0010)
    FLinearColor                                  BlackgroundSelectedColor;                                     // 0x0020(0x0010)
    FLinearColor                                  InnerCircleSelectedColor;                                     // 0x0030(0x0010)
    FLinearColor                                  WheelGradientColor;                                           // 0x0040(0x0010)
    FLinearColor                                  WheelSelectedGradientColor;                                   // 0x0050(0x0010)
    FVector2D                                     IconSize;                                                     // 0x0060(0x0008)
    float                                         IconOffset;                                                   // 0x0068(0x0004)
    float                                         SelectedIconOffset;                                           // 0x006C(0x0004)
};


// ScriptStruct  Solarland.ActivationHighlight
// Struct Size::0x0010
struct FActivationHighlight
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ActivationData
// Struct Size::0x0008
struct FActivationData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.HighlightInfo
// Struct Size::0x0030
struct FHighlightInfo : public FTableRowBase
{
    int32_t                                       CalcCount;                                                    // 0x0008(0x0004)
    float                                         StartKAbs;                                                    // 0x000C(0x0004)
    float                                         EndKAbs;                                                      // 0x0010(0x0004)
    float                                         StartActiveScore;                                             // 0x0014(0x0004)
    float                                         EndActiveScore;                                               // 0x0018(0x0004)
    float                                         StartTimeOffset;                                              // 0x001C(0x0004)
    float                                         StopTimeOffset;                                               // 0x0020(0x0004)
    float                                         TotalScoreThreshold;                                          // 0x0024(0x0004)
    float                                         PowerBaseNumber;                                              // 0x0028(0x0004)
    bool                                          bPruneHighlightZeroKill;                                      // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Solarland.ActivationInfo
// Struct Size::0x0010
struct FActivationInfo : public FTableRowBase
{
    enum class EActivationType                    ActivationType;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         ActivationScore;                                              // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ActorEffectControllerPool
// Struct Size::0x0010
struct FActorEffectControllerPool
{
    TArray<UActorEffectController*>               ControllerInstances;                                          // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ActorEffectPool
// Struct Size::0x0010
struct FActorEffectPool
{
    TArray<UActorEffect*>                         EffectInstances;                                              // 0x0000(0x0010)
};


// ScriptStruct  Solarland.MaterialFilter
// Struct Size::0x0048
struct FMaterialFilter
{
    bool                                          bIgnoreChangeability;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<UMeshComponent*>                       IncludingMeshes;                                              // 0x0008(0x0010)
    TArray<int32_t>                               IncludingMaterialIndices;                                     // 0x0018(0x0010)
    TArray<UMeshComponent*>                       ExcludingMeshes;                                              // 0x0028(0x0010)
    TArray<int32_t>                               ExcludingMaterialIndices;                                     // 0x0038(0x0010)
};


// ScriptStruct  Solarland.MaterialChangeHandle
// Struct Size::0x0008
struct FMaterialChangeHandle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.MultiplePassMaterialChange
// Struct Size::0x0068
struct FMultiplePassMaterialChange
{
    TSoftObjectPtr<UMaterialInterface>            SourceMaterial;                                               // 0x0000(0x0028)
    FAddMultiplePassMaterialChangeParams          Params;                                                       // 0x0028(0x0040)
};


// ScriptStruct  Solarland.AddMultiplePassMaterialChangeParams
// Struct Size::0x0040
struct FAddMultiplePassMaterialChangeParams
{
    FGameplayTag                                  PriorityTag;                                                  // 0x0000(0x0008)
    enum class EMaterialChangeConflictResolveStrategyResolveStrategy;                                           // 0x0008(0x0001)
    enum class EMultiplePassMaterialChangeCompatibilityModeCompatibilityMode;                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FGameplayTagContainer                         SpecifiedPriorityTags;                                        // 0x0010(0x0020)
    char                                          bNeedMultiplePass;                                            // 0x0030(0x0001)
    char                                          bForceFrontFaceCull;                                          // 0x0030(0x0001)
    char                                          bIgnoreTranslucentSection;                                    // 0x0030(0x0001)
    char                                          bIgnoreMaskedSection;                                         // 0x0030(0x0001)
    char                                          bTreatAsBackgroundForOcclusion;                               // 0x0030(0x0001)
    char                                          bUseAsOccluder;                                               // 0x0030(0x0001)
    char                                          bIgnoreOcclusionCull;                                         // 0x0030(0x0001)
    char                                          bRenderMainPassStencil;                                       // 0x0030(0x0001)
    char                                          bSetTranslucencySortPriorityOnly;                             // 0x0031(0x0001)
    char                                          bRenderCustomDepth;                                           // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       MainPassDepthStencilValue;                                    // 0x0034(0x0004)
    int32_t                                       TranslucencySortPriority;                                     // 0x0038(0x0004)
    int32_t                                       CustomDepthStencilValue;                                      // 0x003C(0x0004)
};


// ScriptStruct  Solarland.NormalMaterialChange
// Struct Size::0x0050
struct FNormalMaterialChange
{
    TSoftObjectPtr<UMaterialInterface>            SourceMaterial;                                               // 0x0000(0x0028)
    FAddMaterialChangeParams                      Params;                                                       // 0x0028(0x0028)
};


// ScriptStruct  Solarland.AddMaterialChangeParams
// Struct Size::0x0028
struct FAddMaterialChangeParams
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FGameplayTag                                  PriorityTag;                                                  // 0x0008(0x0008)
    enum class EMaterialChangeConflictResolveStrategyResolveStrategy;                                           // 0x0010(0x0001)
    enum class EMaterialChangeTextureOverrideMode TextureOverrideMode;                                          // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    TArray<FName>                                 TextureParameterNamesToOverride;                              // 0x0018(0x0010)
};


// ScriptStruct  Solarland.MaterialChangePriorityGroup
// Struct Size::0x0010
struct FMaterialChangePriorityGroup
{
    TArray<FGameplayTag>                          Tags;                                                         // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ForceChangeMaterialInfos
// Struct Size::0x0070
struct FForceChangeMaterialInfos
{
    FGameplayTagContainer                         MaterialPriorityTags;                                         // 0x0000(0x0020)
    TSet<FSoftObjectPath>                         MaterialPaths;                                                // 0x0020(0x0050)
};


// ScriptStruct  Solarland.MaterialParameterFilter
// Struct Size::0x0020
struct FMaterialParameterFilter
{
    TArray<FName>                                 IncludingNames;                                               // 0x0000(0x0010)
    TArray<FName>                                 ExcludingNames;                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.ActorMaterialInfo
// Struct Size::0x0170
struct FActorMaterialInfo
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    TMap<FMaterialChangeHandle,UMaterialInterface*>SourceMaterials;                                             // 0x0020(0x0050)
    TMap<FMaterialChangeHandle,FAddMaterialChangeParams>NormalParams;                                           // 0x0070(0x0050)
    TMap<FMaterialChangeHandle,FAddMultiplePassMaterialChangeParams>MultiplePassParams;                         // 0x00C0(0x0050)
    TMap<FMaterialChangeHandle,FLimitedMeshContainer>LimitedMeshes;                                             // 0x0110(0x0050)
    TArray<FMeshMaterialInfo>                     MeshMaterials;                                                // 0x0160(0x0010)
};


// ScriptStruct  Solarland.MeshMaterialInfo
// Struct Size::0x0050
struct FMeshMaterialInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    TArray<FMaterialChange>                       NormalMaterialChanges;                                        // 0x0018(0x0010)
    char                                          pa_0028[0x0018]                                               // 0x0028(0x0018)
    TArray<FMaterialChange>                       MultiplePassMaterialChanges;                                  // 0x0040(0x0010)
};


// ScriptStruct  Solarland.MaterialChange
// Struct Size::0x0038
struct FMaterialChange
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    TArray<UMaterialInterface*>                   Materials;                                                    // 0x0028(0x0010)
};


// ScriptStruct  Solarland.LimitedMeshContainer
// Struct Size::0x0010
struct FLimitedMeshContainer
{
    TArray<UMeshComponent*>                       Meshes;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ActorParticleEffectSpawnHandle
// Struct Size::0x0008
struct FActorParticleEffectSpawnHandle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.ActorParticleEffectSpawnInfo
// Struct Size::0x0070
struct FActorParticleEffectSpawnInfo
{
    TSoftObjectPtr<UParticleSystem>               ParticleSystem;                                               // 0x0000(0x0028)
    enum class EActorParticleEffectAttachOption   AttachOption;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FName                                         AttachPointName;                                              // 0x002C(0x0008)
    enum class EAttachLocation                    LocationType;                                                 // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FVector                                       Location;                                                     // 0x0038(0x000C)
    FRotator                                      Rotation;                                                     // 0x0044(0x000C)
    FVector                                       Scale;                                                        // 0x0050(0x000C)
    bool                                          bAutoActivate;                                                // 0x005C(0x0001)
    bool                                          bAutoDestroy;                                                 // 0x005D(0x0001)
    bool                                          bEnablePooling;                                               // 0x005E(0x0001)
    bool                                          bAbsoluteRotation;                                            // 0x005F(0x0001)
    TArray<FName>                                 ComponentTags;                                                // 0x0060(0x0010)
};


// ScriptStruct  Solarland.WrappedLevelToIdMap
// Struct Size::0x0050
struct FWrappedLevelToIdMap
{
    TMap<int32_t,int32_t>                         LevelToId;                                                    // 0x0000(0x0050)
};


// ScriptStruct  Solarland.AirDropAllOutcomeConfigArray
// Struct Size::0x0010
struct FAirDropAllOutcomeConfigArray
{
    TArray<FAirDropAllOutcomeConfig>              OutcomesOverTime;                                             // 0x0000(0x0010)
};


// ScriptStruct  Solarland.AirDropAllOutcomeConfig
// Struct Size::0x0068
struct FAirDropAllOutcomeConfig
{
    float                                         GameSeconds;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FAirDropShieldOutcomeConfig                   ShieldOutcome;                                                // 0x0008(0x0018)
    FAirDropWeaponPartOutcomeConfig               WeaponPartOutcome;                                            // 0x0020(0x0020)
    FAirDropSupplyOutcomeConfig                   SupplyOutcome;                                                // 0x0040(0x0018)
    TArray<FWrappedIdCount>                       GeneralOutcome;                                               // 0x0058(0x0010)
};


// ScriptStruct  Solarland.WrappedIdCount
// Struct Size::0x0008
struct FWrappedIdCount
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    int32_t                                       count;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.AirDropSupplyOutcomeConfig
// Struct Size::0x0018
struct FAirDropSupplyOutcomeConfig
{
    int32_t                                       count;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FWrappedIdCount>                       CompensationItems;                                            // 0x0008(0x0010)
};


// ScriptStruct  Solarland.AirDropWeaponPartOutcomeConfig
// Struct Size::0x0020
struct FAirDropWeaponPartOutcomeConfig
{
    int32_t                                       count;                                                        // 0x0000(0x0004)
    int32_t                                       MinLevel;                                                     // 0x0004(0x0004)
    int32_t                                       ScopeMinLevel;                                                // 0x0008(0x0004)
    int32_t                                       MaxLevel;                                                     // 0x000C(0x0004)
    TArray<FWrappedIdCount>                       CompensationOutcomes;                                         // 0x0010(0x0010)
};


// ScriptStruct  Solarland.AirDropShieldOutcomeConfig
// Struct Size::0x0018
struct FAirDropShieldOutcomeConfig
{
    int32_t                                       MinLevel;                                                     // 0x0000(0x0004)
    int32_t                                       MaxLevel;                                                     // 0x0004(0x0004)
    TArray<FWrappedIdCount>                       CompensationOutcomes;                                         // 0x0008(0x0010)
};


// ScriptStruct  Solarland.AirDropSkillDatas
// Struct Size::0x0010
struct FAirDropSkillDatas
{
    TArray<FAirDropSkillData>                     OutcomeSetting;                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.AirDropSkillData
// Struct Size::0x0008
struct FAirDropSkillData
{
    float                                         GameSeconds;                                                  // 0x0000(0x0004)
    int32_t                                       OutcomeID;                                                    // 0x0004(0x0004)
};


// ScriptStruct  Solarland.MapAirlineData
// Struct Size::0x0020
struct FMapAirlineData
{
    int32_t                                       mapID;                                                        // 0x0000(0x0004)
    float                                         Height;                                                       // 0x0004(0x0004)
    float                                         Speed;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FAirlineData>                          AirlineDataList;                                              // 0x0010(0x0010)
};


// ScriptStruct  Solarland.AirlineData
// Struct Size::0x0028
struct FAirlineData
{
    float                                         AirlineHeight;                                                // 0x0000(0x0004)
    float                                         AirlineSpeed;                                                 // 0x0004(0x0004)
    FVector2D                                     StartPoint;                                                   // 0x0008(0x0008)
    FVector2D                                     EndPoint;                                                     // 0x0010(0x0008)
    FVector2D                                     RealStartPoint;                                               // 0x0018(0x0008)
    FVector2D                                     RealEndPoint;                                                 // 0x0020(0x0008)
};


// ScriptStruct  Solarland.FireChargeData
// Struct Size::0x00C8
struct FFireChargeData
{
    bool                                          IfContinuousCharge;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ChargeTime;                                                   // 0x0004(0x0004)
    UCurveFloat*                                  ChargeDamageRadiusCurve;                                      // 0x0008(0x0008)
    UCurveFloat*                                  ChargeDamageMagnificationCurve;                               // 0x0010(0x0008)
    UCurveFloat*                                  ChargeHitExplosionRangeCurve;                                 // 0x0018(0x0008)
    bool                                          IfPenetrable;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UAmmoConfig*                                  OverrideAmmo;                                                 // 0x0028(0x0008)
    int32_t                                       OverrideAmmoID;                                               // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       ChargeSoundName;                                              // 0x0038(0x0010)
    FString                                       ChargeSoundEnemyName;                                         // 0x0048(0x0010)
    FString                                       FireSoundName;                                                // 0x0058(0x0010)
    FString                                       FireSoundEnemyName;                                           // 0x0068(0x0010)
    bool                                          IfBurst;                                                      // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
    UCurveFloat*                                  BulletBurstCountCurve;                                        // 0x0080(0x0008)
    bool                                          IfCostToChargeScale;                                          // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    int32_t                                       FireCostFullShot;                                             // 0x008C(0x0004)
    bool                                          IfForceFullShotCost;                                          // 0x0090(0x0001)
    bool                                          bNeedPlayCameraShake;                                         // 0x0091(0x0001)
    char                                          pa_0092[0x0006]                                               // 0x0092(0x0006)
    UCurveFloat*                                  AmmoSpeedScaleCurve;                                          // 0x0098(0x0008)
    UCurveFloat*                                  AmmoEffectXScaleCurve;                                        // 0x00A0(0x0008)
    UCurveFloat*                                  AmmoEffectYZScaleCurve;                                       // 0x00A8(0x0008)
    UCurveFloat*                                  OverloadCurve;                                                // 0x00B0(0x0008)
    float                                         ChargeAnimationRate;                                          // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    UCurveFloat*                                  DeflectionAngleCurve;                                         // 0x00C0(0x0008)
};


// ScriptStruct  Solarland.TracerBulletData
// Struct Size::0x0040
struct FTracerBulletData
{
    float                                         DeflectionAnglePerSec;                                        // 0x0000(0x0004)
    float                                         MaximumDetectionAngle;                                        // 0x0004(0x0004)
    float                                         HomingRange;                                                  // 0x0008(0x0004)
    bool                                          bTraceTargetOnly;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FString                                       TracingTargetWarningSound;                                    // 0x0010(0x0010)
    FString                                       TracingTargetWarningRTPC;                                     // 0x0020(0x0010)
    FString                                       TracingAuthorPromptSound;                                     // 0x0030(0x0010)
};


// ScriptStruct  Solarland.FootEffect
// Struct Size::0x000C
struct FFootEffect
{
    enum class EFootEffectType                    Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         SocketName;                                                   // 0x0004(0x0008)
};


// ScriptStruct  Solarland.TacticalBoxOpenQuality
// Struct Size::0x0020
struct FTacticalBoxOpenQuality
{
    FVector                                       ColorParam;                                                   // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       OpenAudioEventName;                                           // 0x0010(0x0010)
};


// ScriptStruct  Solarland.MaterialParamInfoContainerByCharacter
// Struct Size::0x0038
struct FMaterialParamInfoContainerByCharacter
{
    int32_t                                       CharacterId;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMaterialParamInfoContainer                   ParamInfos;                                                   // 0x0008(0x0020)
    TArray<FMaterialParamInfoContainerBySkin>     ParamInfosBySkin;                                             // 0x0028(0x0010)
};


// ScriptStruct  Solarland.MaterialParamInfoContainerBySkin
// Struct Size::0x0028
struct FMaterialParamInfoContainerBySkin
{
    int32_t                                       SkinId;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FMaterialParamInfoContainer                   ParamInfos;                                                   // 0x0008(0x0020)
};


// ScriptStruct  Solarland.MaterialParamInfoContainer
// Struct Size::0x0020
struct FMaterialParamInfoContainer
{
    TArray<FMaterialScalarParamInfo>              ScalarParamInfos;                                             // 0x0000(0x0010)
    TArray<FMaterialVectorParamInfo>              VectorParamInfos;                                             // 0x0010(0x0010)
};


// ScriptStruct  Solarland.MaterialVectorParamInfo
// Struct Size::0x0020
struct FMaterialVectorParamInfo
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    UCurveLinearColor*                            ParamValueCurve;                                              // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.MaterialScalarParamInfo
// Struct Size::0x0098
struct FMaterialScalarParamInfo
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    FRuntimeFloatCurve                            ParamValueCurve;                                              // 0x0008(0x0088)
    char                                          pa_0090[0x0008]                                               // 0x0090(0x0008)
};


// ScriptStruct  Solarland.AttachedMeshInfo
// Struct Size::0x0040
struct FAttachedMeshInfo
{
    UStaticMesh*                                  MeshResource;                                                 // 0x0000(0x0008)
    FName                                         SocketName;                                                   // 0x0008(0x0008)
    FTransform                                    TransformOffset;                                              // 0x0010(0x0030)
};


// ScriptStruct  Solarland.AutoPickupItemConfig
// Struct Size::0x0008
struct FAutoPickupItemConfig
{
    UDataTable*                                   ItemTable;                                                    // 0x0000(0x0008)
};


// ScriptStruct  Solarland.AutoPickupItemRow
// Struct Size::0x0010
struct FAutoPickupItemRow : public FTableRowBase
{
    enum class EAutoPickupConfigEnum              IdOrType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       ID;                                                           // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ControlPointData
// Struct Size::0x0014
struct FControlPointData
{
    float                                         OccupiedAddScorePerSec;                                       // 0x0000(0x0004)
    char                                          MinProgress;                                                  // 0x0004(0x0001)
    char                                          MaxProgress;                                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    float                                         OccupyingProgressPerSec;                                      // 0x0008(0x0004)
    float                                         ReOccupyingProgressPerSec;                                    // 0x000C(0x0004)
    float                                         RegainTime;                                                   // 0x0010(0x0004)
};


// ScriptStruct  Solarland.BattlegroundSubModeData
// Struct Size::0x001C
struct FBattlegroundSubModeData
{
    int32_t                                       SubModeID;                                                    // 0x0000(0x0004)
    int32_t                                       mapID;                                                        // 0x0004(0x0004)
    FVector2D                                     MapCenter;                                                    // 0x0008(0x0008)
    float                                         MapFOV;                                                       // 0x0010(0x0004)
    FVector2D                                     SafeAreaCenter;                                               // 0x0014(0x0008)
};


// ScriptStruct  Solarland.BattlegroundGlobalData
// Struct Size::0x0040
struct FBattlegroundGlobalData
{
    int32_t                                       MaxBattleTime;                                                // 0x0000(0x0004)
    char                                          WaitingLandCountDownTime;                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         BattlePrepareTime;                                            // 0x0008(0x0004)
    float                                         RebirthWaitTime;                                              // 0x000C(0x0004)
    float                                         RebirthInvincibleTime;                                        // 0x0010(0x0004)
    float                                         DeployConfirmTime;                                            // 0x0014(0x0004)
    int32_t                                       BatttleEndLeaveTime;                                          // 0x0018(0x0004)
    float                                         VictoryScore;                                                 // 0x001C(0x0004)
    float                                         BonusScorePerSec;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FPersonalScoreData>                    PersonalScoreArray;                                           // 0x0028(0x0010)
    int32_t                                       AiLevel;                                                      // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.PersonalScoreData
// Struct Size::0x0008
struct FPersonalScoreData
{
    enum class EPersonalScoreType                 ScoreType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Score;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.BattlegroundScoreData
// Struct Size::0x000C
struct FBattlegroundScoreData
{
    enum class EFactionType                       Faction;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Score;                                                        // 0x0004(0x0004)
    enum class EMatchResult                       MatchResult;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Solarland.BattlegroundMapElementData
// Struct Size::0x000C
struct FBattlegroundMapElementData
{
    int32_t                                       SubModeID;                                                    // 0x0000(0x0004)
    enum class EBattlegroundMapElementType        Type;                                                         // 0x0004(0x0001)
    enum class EFactionType                       DefaultOwnerFaction;                                          // 0x0005(0x0001)
    enum class EDeploymentType                    DeploymentType;                                               // 0x0006(0x0001)
    enum class EBattlegroundPlayerStartRegion     PlayerStartRegion;                                            // 0x0007(0x0001)
    float                                         EnemyCheckDistance;                                           // 0x0008(0x0004)
};


// ScriptStruct  Solarland.BattlegroundWeaponData
// Struct Size::0x0018
struct FBattlegroundWeaponData
{
    int32_t                                       weaponid;                                                     // 0x0000(0x0004)
    FWeaponPartsData                              WeaponPartsData;                                              // 0x0004(0x0014)
};


// ScriptStruct  Solarland.BattlePassLevelInfo
// Struct Size::0x0018
struct FBattlePassLevelInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.BattlePassLevelItem
// Struct Size::0x000C
struct FBattlePassLevelItem
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Solarland.PromptParticleData
// Struct Size::0x000C
struct FPromptParticleData
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Solarland.PromptParticleParam
// Struct Size::0x003C
struct FPromptParticleParam
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  Solarland.BattlePromptSurroundInfo
// Struct Size::0x0250
struct FBattlePromptSurroundInfo
{
    FSoftObjectPath                               PromptParticlePath;                                           // 0x0000(0x0018)
    float                                         HeightOffset;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TMap<enum class EBattlePromptType,enum class EBattlePromptType>DisplayTypeMap;                              // 0x0020(0x0050)
    TMap<enum class EBattlePromptType,int32_t>    TypeUVMap;                                                    // 0x0070(0x0050)
    TMap<enum class EBattlePromptType,float>      RadiusMap;                                                    // 0x00C0(0x0050)
    TMap<enum class EBattlePromptType,FVector>    SizeMap;                                                      // 0x0110(0x0050)
    TMap<enum class EBattlePromptType,UCurveFloat*>NoiseCurveMap;                                               // 0x0160(0x0050)
    TMap<enum class EBattlePromptType,UCurveFloat*>ColorCurveMap;                                               // 0x01B0(0x0050)
    TMap<enum class EBattlePromptType,UCurveFloat*>TransparencyCurveMap;                                        // 0x0200(0x0050)
};


// ScriptStruct  Solarland.BattlePromptUIMeshInfo
// Struct Size::0x0110
struct FBattlePromptUIMeshInfo
{
    TMap<enum class EBattlePromptType,int32_t>    TypeUVMap;                                                    // 0x0000(0x0050)
    TMap<enum class EBattlePromptType,float>      RadiusMap;                                                    // 0x0050(0x0050)
    float                                         ElemIconDifference;                                           // 0x00A0(0x0004)
    float                                         MinMeshUITurnAngle;                                           // 0x00A4(0x0004)
    float                                         MaxMeshUITurnAngle;                                           // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    UCurveFloat*                                  CameraPitchTurnOffsetCurve;                                   // 0x00B0(0x0008)
    TMap<enum class EBattlePromptWidgetType,FVector2D>DefaultMeshUIScaleMap;                                    // 0x00B8(0x0050)
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  Solarland.BattlePromptMeshWidgetInfo
// Struct Size::0x0208
struct FBattlePromptMeshWidgetInfo
{
    TMap<enum class EBattlePromptType,int32_t>    TypeUVMap;                                                    // 0x0000(0x0050)
    float                                         ElemIconDifference;                                           // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    TMap<enum class EBattlePromptType,float>      RadiusMap;                                                    // 0x0058(0x0050)
    int32_t                                       ThreatFactorDefault;                                          // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
    TMap<enum class EBattlePromptType,UCurveFloat*>ArrowColorCurveMap;                                          // 0x00B0(0x0050)
    TMap<enum class EBattlePromptType,UCurveFloat*>ArrowLengthCurveMap;                                         // 0x0100(0x0050)
    TMap<enum class EBattlePromptType,UCurveFloat*>IconScaleCurveMap;                                           // 0x0150(0x0050)
    TMap<enum class EBattlePromptType,UCurveFloat*>TransparencyCurveMap;                                        // 0x01A0(0x0050)
    int32_t                                       CloseCheckAngleDefault;                                       // 0x01F0(0x0004)
    char                                          pa_01F4[0x0004]                                               // 0x01F4(0x0004)
    UCurveFloat*                                  CloseCheckAngleCurve;                                         // 0x01F8(0x0008)
    char                                          pa_0200[0x0008]                                               // 0x0200(0x0008)
};


// ScriptStruct  Solarland.PromptElemInfo
// Struct Size::0x0034
struct FPromptElemInfo
{
    enum class EBattlePromptType                  Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     ArrowPosition;                                                // 0x0004(0x0008)
    FVector2D                                     IconPosition;                                                 // 0x000C(0x0008)
    int32_t                                       ArrowColorFactor;                                             // 0x0014(0x0004)
    int32_t                                       ArrowLengthFactor;                                            // 0x0018(0x0004)
    int32_t                                       IconFactor;                                                   // 0x001C(0x0004)
    float                                         TransparencyFactor;                                           // 0x0020(0x0004)
    float                                         Distance;                                                     // 0x0024(0x0004)
    int32_t                                       Angle;                                                        // 0x0028(0x0004)
    bool                                          bBlocked;                                                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    int32_t                                       UVIdx;                                                        // 0x0030(0x0004)
};


// ScriptStruct  Solarland.BattleRoyalTimeLineDTRow
// Struct Size::0x0018
struct FBattleRoyalTimeLineDTRow : public FTableRowBase
{
    float                                         StartTime;                                                    // 0x0008(0x0004)
    enum class EBattleRoyalTimeLineEnum           OperationType;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       Parameter;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.BattleUpgradeEffectCategoryConfig
// Struct Size::0x0064
struct FBattleUpgradeEffectCategoryConfig
{
    int32_t                                       TitleLocalTextID;                                             // 0x0000(0x0004)
    FBattleUpgradeEffectCategoryColorSet          ColorSet;                                                     // 0x0004(0x0060)
};


// ScriptStruct  Solarland.BattleUpgradeEffectConfig
// Struct Size::0x0090
struct FBattleUpgradeEffectConfig : public FTableRowBase
{
    enum class ESolarTablesEnum_BattleUpgradeEffectTypeType;                                                    // 0x0008(0x0001)
    enum class EBattleUpgradeEffectCategory       Category;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    TSoftClassPtr<UObject>                        EffectClass;                                                  // 0x0010(0x0028)
    TArray<FBattleUpgradeEffectConfigParam>       Parameters;                                                   // 0x0038(0x0010)
    FWrappedLocalTextID                           DescriptionLocalText;                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TSoftObjectPtr<UTexture2D>                    Icon;                                                         // 0x0050(0x0028)
    FString                                       ShortNumberDisplayFormat;                                     // 0x0078(0x0010)
    FWrappedLocalTextID                           TitleLocalText;                                               // 0x0088(0x0004)
    FWrappedLocalTextID                           IntroductionLocalText;                                        // 0x008C(0x0004)
};


// ScriptStruct  Solarland.BattleUpgradeEffectConfigParam
// Struct Size::0x000C
struct FBattleUpgradeEffectConfigParam
{
    FGameplayTag                                  GameplayTag;                                                  // 0x0000(0x0008)
    float                                         Scale;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Solarland.WaterGunHitReactionWithAlly
// Struct Size::0x0004
struct FWaterGunHitReactionWithAlly
{
    FWaterGunHitReaction                          SameAllyConfig;                                               // 0x0000(0x0002)
    FWaterGunHitReaction                          OtherAllyConfig;                                              // 0x0002(0x0002)
};


// ScriptStruct  Solarland.WaterGunHitReaction
// Struct Size::0x0002
struct FWaterGunHitReaction
{
    bool                                          bCanDamage;                                                   // 0x0000(0x0001)
    bool                                          bCanPenetrate;                                                // 0x0001(0x0001)
};


// ScriptStruct  Solarland.BlueCircleInfo
// Struct Size::0x0014
struct FBlueCircleInfo
{
    FVector                                       CenterLocation;                                               // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
    bool                                          bHiddenInLevel;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Solarland.BombingZone
// Struct Size::0x0060
struct FBombingZone
{
    int32_t                                       instanceID;                                                   // 0x0000(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0004(0x0004)
    float                                         Radius;                                                       // 0x0008(0x0004)
    float                                         Duration;                                                     // 0x000C(0x0004)
    int32_t                                       MinBomb;                                                      // 0x0010(0x0004)
    int32_t                                       MaxBomb;                                                      // 0x0014(0x0004)
    FVector                                       Location;                                                     // 0x0018(0x000C)
    FBombingZoneBomb                              Bomb;                                                         // 0x0024(0x001C)
    enum class EBombingZoneState                  State;                                                        // 0x0040(0x0001)
    char                                          pa_0041[0x001F]                                               // 0x0041(0x001F)
};


// ScriptStruct  Solarland.BombingZoneBomb
// Struct Size::0x001C
struct FBombingZoneBomb
{
    float                                         Radius;                                                       // 0x0000(0x0004)
    float                                         MaxDamage;                                                    // 0x0004(0x0004)
    float                                         MinDamage;                                                    // 0x0008(0x0004)
    float                                         VehicleMaxDamage;                                             // 0x000C(0x0004)
    float                                         VehicleMinDamage;                                             // 0x0010(0x0004)
    float                                         InVehicleDamageScale;                                         // 0x0014(0x0004)
    float                                         LandingTime;                                                  // 0x0018(0x0004)
};


// ScriptStruct  Solarland.ScreenEffectConfig
// Struct Size::0x0078
struct FScreenEffectConfig : public FTableRowBase
{
    FString                                       EffectType;                                                   // 0x0008(0x0010)
    FString                                       EffectName;                                                   // 0x0018(0x0010)
    FString                                       State;                                                        // 0x0028(0x0010)
    enum class EBuffEffectTagType                 TagType;                                                      // 0x0038(0x0001)
    bool                                          bMatReplace;                                                  // 0x0039(0x0001)
    enum class EBuffEffectDurationType            DurationType;                                                 // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
    float                                         DurationTime;                                                 // 0x003C(0x0004)
    TSoftClassPtr<UObject>                        ScreenWidgetPath;                                             // 0x0040(0x0028)
    enum class ESameScreenEffectHandleType        SameEffectHandleType;                                         // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    float                                         MinIntervalForSameScreenEffect;                               // 0x006C(0x0004)
    float                                         MinIntervalForSameScreenEffectLowLevelDevice;                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  Solarland.BuffEffectTableRow
// Struct Size::0x0038
struct FBuffEffectTableRow : public FTableRowBase
{
    FName                                         EffectType;                                                   // 0x0008(0x0008)
    FName                                         EffectName;                                                   // 0x0010(0x0008)
    FName                                         State;                                                        // 0x0018(0x0008)
    bool                                          bMatReplace;                                                  // 0x0020(0x0001)
    enum class EBuffEffectDurationType            DurationType;                                                 // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    float                                         DurationTime;                                                 // 0x0024(0x0004)
    TArray<FBuffEffectActorParam>                 ActorEffectParams;                                            // 0x0028(0x0010)
};


// ScriptStruct  Solarland.BuffEffectActorParam
// Struct Size::0x00D8
struct FBuffEffectActorParam
{
    TSoftObjectPtr<UParticleSystem>               ActorParticlePath;                                            // 0x0000(0x0028)
    FSolarSkinnedParticleSystem                   ActorSkinnedParticlePath;                                     // 0x0028(0x0070)
    FName                                         SocketName;                                                   // 0x0098(0x0008)
    FVector                                       LocationOffset;                                               // 0x00A0(0x000C)
    FRotator                                      RotationOffset;                                               // 0x00AC(0x000C)
    FVector                                       Scale;                                                        // 0x00B8(0x000C)
    enum class EAttachLocation                    LocationType;                                                 // 0x00C4(0x0001)
    bool                                          bAutoActivate;                                                // 0x00C5(0x0001)
    bool                                          Attached;                                                     // 0x00C6(0x0001)
    bool                                          bAbsoluteRotation;                                            // 0x00C7(0x0001)
    TArray<FName>                                 ComponentTags;                                                // 0x00C8(0x0010)
};


// ScriptStruct  Solarland.ScreenEffectWidgetCacheInfo
// Struct Size::0x0018
struct FScreenEffectWidgetCacheInfo
{
    USolarScreenEffectWidget*                     WidgetClass;                                                  // 0x0000(0x0008)
    TArray<USolarScreenEffectWidget*>             WidgetInstances;                                              // 0x0008(0x0010)
};


// ScriptStruct  Solarland.ComplexEffectDataOnMuzzle
// Struct Size::0x0018
struct FComplexEffectDataOnMuzzle
{
    UParticleSystem*                              Self;                                                         // 0x0000(0x0008)
    UParticleSystem*                              ScopeOpened;                                                  // 0x0008(0x0008)
    UParticleSystem*                              Enemy;                                                        // 0x0010(0x0008)
};


// ScriptStruct  Solarland.BurstDaggerBulletConfig
// Struct Size::0x00B8
struct FBurstDaggerBulletConfig
{
    float                                         EjectDelayTime;                                               // 0x0000(0x0004)
    FName                                         FireSoundGroupName;                                           // 0x0004(0x0008)
    FName                                         HitSoundSubTableKey;                                          // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       HitEffectSoundEvent;                                          // 0x0018(0x0010)
    FRuntimeFloatCurve                            DamageCurve;                                                  // 0x0028(0x0088)
    float                                         HeadshotDamageFactor;                                         // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  Solarland.DaggerHitResult
// Struct Size::0x0040
struct FDaggerHitResult
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    int32_t                                       SwarmIndex;                                                   // 0x0004(0x0004)
    FVector_NetQuantize                           EjectLoc;                                                     // 0x0008(0x000C)
    float                                         ElapsedTime;                                                  // 0x0014(0x0004)
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0018(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0020(0x0008)
    FVector_NetQuantize                           ImpactPoint;                                                  // 0x0028(0x000C)
    FName                                         BoneName;                                                     // 0x0034(0x0008)
    int32_t                                       HitItem;                                                      // 0x003C(0x0004)
};


// ScriptStruct  Solarland.FireUniqueID
// Struct Size::0x0004
struct FFireUniqueID
{
    uint32_t                                      Data;                                                         // 0x0000(0x0004)
};


// ScriptStruct  Solarland.DaggerInstance
// Struct Size::0x0070
struct FDaggerInstance
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    UParticleSystemComponent*                     BulletEffect;                                                 // 0x0030(0x0008)
    UParticleSystemComponent*                     RibbonTrajectoryEffect;                                       // 0x0038(0x0008)
    ABurstDaggerLauncher*                         Launcher;                                                     // 0x0040(0x0008)
    char                                          pa_0048[0x0020]                                               // 0x0048(0x0020)
    USolarVirtualBulletAKComponent*               AkComponent;                                                  // 0x0068(0x0008)
};


// ScriptStruct  Solarland.DaggerSpawnParameter
// Struct Size::0x0038
struct FDaggerSpawnParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    FVector                                       EjectLoc;                                                     // 0x0004(0x000C)
    FVector                                       EjectDir;                                                     // 0x0010(0x000C)
    FVector                                       TargetLoc;                                                    // 0x001C(0x000C)
    float                                         EjectTimeStamp;                                               // 0x0028(0x0004)
    float                                         ElapsedTime;                                                  // 0x002C(0x0004)
    float                                         EjectDelayTime;                                               // 0x0030(0x0004)
    int32_t                                       SwarmIndex;                                                   // 0x0034(0x0004)
};


// ScriptStruct  Solarland.C4ExplosiveGrowthPhase
// Struct Size::0x0008
struct FC4ExplosiveGrowthPhase
{
    float                                         GrowthTime;                                                   // 0x0000(0x0004)
    float                                         Damage;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SoundGroupC4ExplosiveContext
// Struct Size::0x0010
struct FSoundGroupC4ExplosiveContext : public FSoundGroupPlayContext
{
};


// ScriptStruct  Solarland.CameraEffectMappingData
// Struct Size::0x0020
struct FCameraEffectMappingData : public FTableRowBase
{
    FGameplayTag                                  EffectTag;                                                    // 0x0008(0x0008)
    char                                          Priority;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UCameraEffectData*                            EffectData;                                                   // 0x0018(0x0008)
};


// ScriptStruct  Solarland.CameraEffect
// Struct Size::0x05C0
struct FCameraEffect
{
    bool                                          bHideDefaultOnlyProperty;                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         BlendInTime;                                                  // 0x0004(0x0004)
    float                                         BlendOutTime;                                                 // 0x0008(0x0004)
    FVector2D                                     PitchMinMax;                                                  // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FRuntimeCurveLinearColor                      SocketOffsetCurve;                                            // 0x0018(0x0208)
    FRuntimeCurveLinearColor                      RotationCurve;                                                // 0x0220(0x0208)
    FRuntimeFloatCurve                            FOVCurve;                                                     // 0x0428(0x0088)
    FRuntimeFloatCurve                            ArmLenCurve;                                                  // 0x04B0(0x0088)
    FRuntimeFloatCurve                            DeltaArmLenByPitchCurve;                                      // 0x0538(0x0088)
};


// ScriptStruct  Engine.RuntimeCurveLinearColor
// Struct Size::0x0208
struct FRuntimeCurveLinearColor
{
    FRichCurve                                    ColorCurves;                                                  // 0x0000(0x0080)
    char                                          pa_0080[0x0180]                                               // 0x0080(0x0180)
    UCurveLinearColor*                            ExternalCurve;                                                // 0x0200(0x0008)
};


// ScriptStruct  Solarland.CameraPostProcessEffectPool
// Struct Size::0x0010
struct FCameraPostProcessEffectPool
{
    TArray<UCameraPostProcessEffect*>             EffectInstances;                                              // 0x0000(0x0010)
};


// ScriptStruct  Solarland.PendingCameraPostProcessEffectInfo
// Struct Size::0x0020
struct FPendingCameraPostProcessEffectInfo
{
    FGameplayTag                                  EffectTag;                                                    // 0x0000(0x0008)
    int32_t                                       Level;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UCameraPostProcessEffect*                     EffectClass;                                                  // 0x0010(0x0008)
    float                                         StartTimeSeconds;                                             // 0x0018(0x0004)
    float                                         EndTimeSeconds;                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.CameraPostProcessEffectRuntimeInfo
// Struct Size::0x0018
struct FCameraPostProcessEffectRuntimeInfo
{
    FGameplayTag                                  EffectTag;                                                    // 0x0000(0x0008)
    int32_t                                       Level;                                                        // 0x0008(0x0004)
    float                                         StartTimeSeconds;                                             // 0x000C(0x0004)
    UCameraPostProcessEffect*                     EffectInstance;                                               // 0x0010(0x0008)
};


// ScriptStruct  Solarland.CruiseFormation
// Struct Size::0x0010
struct FCruiseFormation
{
    TArray<FVector>                               LocationList;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Solarland.EchelonFormation
// Struct Size::0x0010
struct FEchelonFormation
{
    TArray<FVector>                               LocationList;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Solarland.MissileInstance
// Struct Size::0x0070
struct FMissileInstance
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
    ACatMissilesLauncher*                         Launcher;                                                     // 0x0060(0x0008)
    UParticleSystemComponent*                     BulletEffect;                                                 // 0x0068(0x0008)
};


// ScriptStruct  Solarland.MissileSpawnParam
// Struct Size::0x0028
struct FMissileSpawnParam
{
    int32_t                                       Index;                                                        // 0x0000(0x0004)
    FVector_NetQuantize                           SpawnLoc;                                                     // 0x0004(0x000C)
    FVector_NetQuantizeNormal                     SpawnDir;                                                     // 0x0010(0x000C)
    TWeakObjectPtr<ASolarCharacter>               TargetCharacter;                                              // 0x001C(0x0008)
    float                                         SpawnTimeStamp;                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.CatFlyConfig
// Struct Size::0x0028
struct FCatFlyConfig
{
    FName                                         TargetSocketName;                                             // 0x0000(0x0008)
    FVector                                       TargetOffset;                                                 // 0x0008(0x000C)
    bool                                          bUseTargetTracing;                                            // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         InterpSpeed;                                                  // 0x0018(0x0004)
    FCatFlyBaseConfig                             BaseConfig;                                                   // 0x001C(0x000C)
};


// ScriptStruct  Solarland.CatFlyBaseConfig
// Struct Size::0x000C
struct FCatFlyBaseConfig
{
    float                                         ReachAcceptanceRadius;                                        // 0x0000(0x0004)
    float                                         FlyingSpeed;                                                  // 0x0004(0x0004)
    float                                         MaxDuration;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Solarland.SettlePageParam
// Struct Size::0x0008
struct FSettlePageParam
{
    int32_t                                       WeaponExpSettlmentNum;                                        // 0x0000(0x0004)
    bool                                          IsRankFight;                                                  // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.DataManagerConfig
// Struct Size::0x0010
struct FDataManagerConfig
{
    UDataTable*                                   GeneralDataTable;                                             // 0x0000(0x0008)
    UDataTable*                                   DataTable;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Solarland.VictoryPortraitLocationData
// Struct Size::0x0030
struct FVictoryPortraitLocationData
{
    FVector                                       MinBorder;                                                    // 0x0000(0x000C)
    FVector                                       MaxBorder;                                                    // 0x000C(0x000C)
    FVector                                       Location;                                                     // 0x0018(0x000C)
    FRotator                                      Rotation;                                                     // 0x0024(0x000C)
};


// ScriptStruct  Solarland.FinalsBGMData
// Struct Size::0x0028
struct FFinalsBGMData
{
    bool                                          bEnableFinalsBGM;                                             // 0x0000(0x0001)
    char                                          FinalsBGMSafeAreaIndex;                                       // 0x0001(0x0001)
    char                                          FinalsBGMPlayTeamCount;                                       // 0x0002(0x0001)
    char                                          FinalsBGMStopTeamCount;                                       // 0x0003(0x0001)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       FinalsBGMName_Play;                                           // 0x0008(0x0010)
    FString                                       FinalsBGMName_Stop;                                           // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SCMMapConfig
// Struct Size::0x0080
struct FSCMMapConfig
{
    FString                                       Desc;                                                         // 0x0000(0x0010)
    FSoftObjectPath                               LevelMap;                                                     // 0x0010(0x0018)
    int32_t                                       MiniMapId;                                                    // 0x0028(0x0004)
    bool                                          IsStreaming;                                                  // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    TMap<FString,FSCMElementMapConfig>            ElementGroups;                                                // 0x0030(0x0050)
};


// ScriptStruct  Solarland.SCMElementMapConfig
// Struct Size::0x0020
struct FSCMElementMapConfig
{
    FSoftObjectPath                               ElementLevel;                                                 // 0x0000(0x0018)
    bool                                          LoadWithLevel;                                                // 0x0018(0x0001)
    enum class ELevelLoadType                     LoadType;                                                     // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  Solarland.MapCircle
// Struct Size::0x000C
struct FMapCircle
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Solarland.DoppelgangerBehaviorConfig
// Struct Size::0x0070
struct FDoppelgangerBehaviorConfig
{
    bool                                          bAutoMove;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         AutoMoveDuration;                                             // 0x0004(0x0004)
    bool                                          bSprintAtStart;                                               // 0x0008(0x0001)
    bool                                          bCrouchWhenBlock;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    FVector2D                                     MoveDirection;                                                // 0x000C(0x0008)
    bool                                          bNeedCopy;                                                    // 0x0014(0x0001)
    bool                                          bCopyMoveStationary;                                          // 0x0015(0x0001)
    bool                                          bCopyRotate;                                                  // 0x0016(0x0001)
    bool                                          bMirrorRotate;                                                // 0x0017(0x0001)
    bool                                          bCopyCrouch;                                                  // 0x0018(0x0001)
    bool                                          bCopySprint;                                                  // 0x0019(0x0001)
    bool                                          bCopyJump;                                                    // 0x001A(0x0001)
    bool                                          bCopyJetFly;                                                  // 0x001B(0x0001)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UGameplayEffect*                              DGControlCopyEffect;                                          // 0x0020(0x0008)
    FGameplayTagContainer                         ForbidCopyOwnerTags;                                          // 0x0028(0x0020)
    FGameplayTagContainer                         ForbidCopyRotateDGTags;                                       // 0x0048(0x0020)
    bool                                          bAutoAlert;                                                   // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    float                                         AlertTargetDistance;                                          // 0x006C(0x0004)
};


// ScriptStruct  Solarland.AIDogFeedbackParams
// Struct Size::0x0010
struct FAIDogFeedbackParams : public FGameplayAbilityTargetData
{
    enum class EAIDogCancelReason                 CancelReason;                                                 // 0x0008(0x0001)
    enum class EAIDogSkillPhase                   NewPhase;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Solarland.AIDogParams
// Struct Size::0x0030
struct FAIDogParams : public FGameplayAbilityTargetData
{
    enum class EAIDogGAAction                     ActionType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector_NetQuantize                           StartLocation;                                                // 0x000C(0x000C)
    FVector_NetQuantize                           EndLocation;                                                  // 0x0018(0x000C)
    FVector_NetQuantize                           HitLocation;                                                  // 0x0024(0x000C)
};


// ScriptStruct  Solarland.MoveDogParams
// Struct Size::0x0030
struct FMoveDogParams : public FGameplayAbilityTargetData
{
    FVector_NetQuantize                           StartLocation;                                                // 0x0008(0x000C)
    FVector_NetQuantize                           EndLocation;                                                  // 0x0014(0x000C)
    FVector_NetQuantize                           HitLocation;                                                  // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.ActiveDynamicEffectTriggerVolumeInfo
// Struct Size::0x0010
struct FActiveDynamicEffectTriggerVolumeInfo
{
    TArray<FActiveGameplayEffectHandle>           AppliedEffectHandles;                                         // 0x0000(0x0010)
};


// ScriptStruct  Solarland.DynamicGameplayEffectSpec
// Struct Size::0x0010
struct FDynamicGameplayEffectSpec
{
    UGameplayEffect*                              EffectClass;                                                  // 0x0000(0x0008)
    float                                         EffectLevel;                                                  // 0x0008(0x0004)
    bool                                          bRemoveOnEnd;                                                 // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Solarland.HitRecoverParams
// Struct Size::0x000C
struct FHitRecoverParams
{
    float                                         HitRecoverDuration;                                           // 0x0000(0x0004)
    float                                         KnockbackDuration;                                            // 0x0004(0x0004)
    float                                         KnockbackDistance;                                            // 0x0008(0x0004)
};


// ScriptStruct  Solarland.MassInvisibilityParams
// Struct Size::0x0010
struct FMassInvisibilityParams : public FGameplayAbilityTargetData
{
    int32_t                                       SkillID;                                                      // 0x0008(0x0004)
    bool                                          bNeedSpeedUpEffect;                                           // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Solarland.ProjectedShieldParams
// Struct Size::0x0010
struct FProjectedShieldParams : public FGameplayAbilityTargetData
{
    TWeakObjectPtr<ASolarCharacter>               FocusLockedTarget;                                            // 0x0008(0x0008)
};


// ScriptStruct  Solarland.SectorScanTargetData
// Struct Size::0x0030
struct FSectorScanTargetData : public FGameplayAbilityTargetData
{
    TArray<ASolarCharacter*>                      DetectedActors;                                               // 0x0008(0x0010)
    FVector_NetQuantize                           ActorLocation;                                                // 0x0018(0x000C)
    FVector_NetQuantizeNormal                     ForwardDirection;                                             // 0x0024(0x000C)
};


// ScriptStruct  Solarland.TacticalDodgeDirectionConfig
// Struct Size::0x0078
struct FTacticalDodgeDirectionConfig
{
    FSolarSkinnedMontage                          SkinnedMontage;                                               // 0x0000(0x0070)
    enum class ECamShakeType                      CameraShake;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  Solarland.SolarSkinnedMontage
// Struct Size::0x0070
struct FSolarSkinnedMontage : public FSolarSkinnedAsset
{
    FSoftObjectPath                               DefaultSkinnedMontage;                                        // 0x0008(0x0018)
    TMap<int32_t,FSoftObjectPath>                 SkinnedMontages;                                              // 0x0020(0x0050)
};


// ScriptStruct  Solarland.TacticalDodgeParams
// Struct Size::0x0010
struct FTacticalDodgeParams : public FGameplayAbilityTargetData
{
    int32_t                                       MontageIndex;                                                 // 0x0008(0x0004)
    float                                         FaceYaw;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Solarland.TriggerActorInfo
// Struct Size::0x0010
struct FTriggerActorInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ThrowSkillGameplayEffect
// Struct Size::0x0018
struct FThrowSkillGameplayEffect
{
    UGameplayEffect*                              GameplayEffectClass;                                          // 0x0000(0x0008)
    bool                                          bRemoveOnEndAbility;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x000F]                                               // 0x0009(0x000F)
};


// ScriptStruct  Solarland.DGMatUpdateParams
// Struct Size::0x0010
struct FDGMatUpdateParams
{
    FName                                         MatParam;                                                     // 0x0000(0x0008)
    UCurveBase*                                   MatCurve;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Solarland.SolarExtraShieldEffect
// Struct Size::0x0018
struct FSolarExtraShieldEffect
{
    int32_t                                       Level;                                                        // 0x0000(0x0004)
    FName                                         TeammateEffectID;                                             // 0x0004(0x0008)
    FName                                         EnemyEffectID;                                                // 0x000C(0x0008)
    bool                                          bOnRemoveStop;                                                // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Solarland.MassInvisibilityWarningRangeMaterialInfo
// Struct Size::0x0050
struct FMassInvisibilityWarningRangeMaterialInfo
{
    TMap<FName,FLinearColor>                      AllColorParams;                                               // 0x0000(0x0050)
};


// ScriptStruct  Solarland.RabbitCueInstance
// Struct Size::0x007C
struct FRabbitCueInstance
{
    char                                          pa_0000[0x007C]                                               // 0x0000(0x007C)
};


// ScriptStruct  Solarland.DynamicComboEffect
// Struct Size::0x00D0
struct FDynamicComboEffect
{
    FComboEffect                                  Friendly;                                                     // 0x0000(0x0060)
    FComboEffect                                  Hostile;                                                      // 0x0060(0x0060)
    enum class ESolarGraphicsQualityLevel         QualitySeparator;                                             // 0x00C0(0x0001)
    char                                          pa_00C1[0x0003]                                               // 0x00C1(0x0003)
    FVector                                       Scale;                                                        // 0x00C4(0x000C)
};


// ScriptStruct  Solarland.ComboEffect
// Struct Size::0x0060
struct FComboEffect
{
    TSoftObjectPtr<UParticleSystem>               ParticleSystem;                                               // 0x0000(0x0028)
    TSoftObjectPtr<UMaterialInterface>            DecalMaterial;                                                // 0x0028(0x0028)
    FVector                                       DecalAreaSize;                                                // 0x0050(0x000C)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarCharacterBillboardIconGroupConfig
// Struct Size::0x0010
struct FSolarCharacterBillboardIconGroupConfig
{
    TArray<FSolarCharacterBillboardIconConfig>    IconConfigs;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarCharacterBillboardIconConfig
// Struct Size::0x0030
struct FSolarCharacterBillboardIconConfig
{
    FGameplayTag                                  IconTag;                                                      // 0x0000(0x0008)
    TSoftObjectPtr<UTexture2D>                    IconSoftPtr;                                                  // 0x0008(0x0028)
};


// ScriptStruct  Solarland.CharacterBodyShapeData
// Struct Size::0x0010
struct FCharacterBodyShapeData : public FTableRowBase
{
    float                                         BodyDamageReduction;                                          // 0x0008(0x0004)
    bool                                          bDamageDeceleration;                                          // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Solarland.CharacterAssistAimTargetConfig
// Struct Size::0x00D8
struct FCharacterAssistAimTargetConfig
{
    FWeaponAssistAimTargetConfig                  Standing;                                                     // 0x0000(0x0048)
    FWeaponAssistAimTargetConfig                  Crouching;                                                    // 0x0048(0x0048)
    FWeaponAssistAimTargetConfig                  Crawling;                                                     // 0x0090(0x0048)
};


// ScriptStruct  Solarland.CharacterBodyScaleConfig
// Struct Size::0x0008
struct FCharacterBodyScaleConfig
{
    float                                         CapsuleHeight;                                                // 0x0000(0x0004)
    float                                         MeshOriginHeight;                                             // 0x0004(0x0004)
};


// ScriptStruct  Solarland.CueContent
// Struct Size::0x00C8
struct FCueContent
{
    enum class ECueContentPlayTiming              PlayTiming;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         CustomEvent;                                                  // 0x0004(0x0008)
    char                                          VisibleTargetFlag;                                            // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FGameplayTagRequirements                      PlayTagRequirements;                                          // 0x0010(0x0050)
    TArray<FActorEffectContent>                   ActorEffectContents;                                          // 0x0060(0x0010)
    TArray<FBuffEffectContent>                    BuffEffectContents;                                           // 0x0070(0x0010)
    TArray<FSoundContent>                         SoundContents;                                                // 0x0080(0x0010)
    TArray<FHeadIconContent>                      HeadIconContents;                                             // 0x0090(0x0010)
    TArray<FParticleSystemContent>                ParticleSystemContents;                                       // 0x00A0(0x0010)
    TArray<FCameraPostProcessEffectContent>       CameraPostProcessEffectContents;                              // 0x00B0(0x0010)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  Solarland.CameraPostProcessEffectContent
// Struct Size::0x000C
struct FCameraPostProcessEffectContent
{
    FGameplayTag                                  EffectTag;                                                    // 0x0000(0x0008)
    bool                                          bStopOnEnd;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Solarland.ParticleSystemContent
// Struct Size::0x0088
struct FParticleSystemContent
{
    FActorParticleEffectSpawnInfo                 SpawnInfo;                                                    // 0x0000(0x0070)
    bool                                          bStopOnEnd;                                                   // 0x0070(0x0001)
    char                                          pa_0071[0x0017]                                               // 0x0071(0x0017)
};


// ScriptStruct  Solarland.HeadIconContent
// Struct Size::0x0008
struct FHeadIconContent
{
    FGameplayTag                                  HeadIconTag;                                                  // 0x0000(0x0008)
};


// ScriptStruct  Solarland.SoundContent
// Struct Size::0x0038
struct FSoundContent
{
    FName                                         SoundGroupName;                                               // 0x0000(0x0008)
    FName                                         SoundGroupNameOnRemove;                                       // 0x0008(0x0008)
    char                                          pa_0010[0x0028]                                               // 0x0010(0x0028)
};


// ScriptStruct  Solarland.BuffEffectContent
// Struct Size::0x0014
struct FBuffEffectContent
{
    FName                                         BuffEffectID;                                                 // 0x0000(0x0008)
    bool                                          bStopOnEnd;                                                   // 0x0008(0x0001)
    enum class EBuffEffectType                    BuffEffectType;                                               // 0x0009(0x0001)
    char                                          pa_000A[0x000A]                                               // 0x000A(0x000A)
};


// ScriptStruct  Solarland.ActorEffectContent
// Struct Size::0x0020
struct FActorEffectContent
{
    UActorEffect*                                 ActorEffectClass;                                             // 0x0000(0x0008)
    enum class EActorEffectAffectedActorType      AffectedActorType;                                            // 0x0008(0x0001)
    bool                                          bHideFX;                                                      // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    FGameplayTag                                  VisibilityFlagTag;                                            // 0x000C(0x0008)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
};


// ScriptStruct  Solarland.CharacterCapsuleShadowInfo
// Struct Size::0x000C
struct FCharacterCapsuleShadowInfo
{
    bool                                          bOpenCapsuleShadow;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         IndirectShadowMinVisibility;                                  // 0x0004(0x0004)
    float                                         DynamicIndirectShadowsIntensity;                              // 0x0008(0x0004)
};


// ScriptStruct  Solarland.CharacterGetOnVehicleCheckInfo
// Struct Size::0x000C
struct FCharacterGetOnVehicleCheckInfo
{
    float                                         WaitingGetOnVehicleTime;                                      // 0x0000(0x0004)
    float                                         WaitingGetOnVehicleDistance;                                  // 0x0004(0x0004)
    float                                         WaitingGetOnVehicleFacingAngle;                               // 0x0008(0x0004)
};


// ScriptStruct  Solarland.CharacterSpecializedComponentInfos
// Struct Size::0x0010
struct FCharacterSpecializedComponentInfos
{
    TArray<FCharacterSpecializedComponentInfo>    ComponentInfos;                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.CharacterSpecializedComponentInfo
// Struct Size::0x0028
struct FCharacterSpecializedComponentInfo
{
    TArray<enum class ENetRole>                   ValidRoles;                                                   // 0x0000(0x0010)
    bool                                          bEnableReplication;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<UActorComponent*>                      ComponentClasses;                                             // 0x0018(0x0010)
};


// ScriptStruct  Solarland.CharacterMeshMaterialEffectTableRow
// Struct Size::0x0010
struct FCharacterMeshMaterialEffectTableRow : public FTableRowBase
{
    UCharacterMeshMaterialEffectDataAsset*        MaterialEffectDataAsset;                                      // 0x0008(0x0008)
};


// ScriptStruct  Solarland.CharacterMeshMaterialData
// Struct Size::0x0018
struct FCharacterMeshMaterialData
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FCharacterMeshMaterialParameter>       MaterialParameterArray;                                       // 0x0008(0x0010)
};


// ScriptStruct  Solarland.CharacterMeshMaterialParameter
// Struct Size::0x02C8
struct FCharacterMeshMaterialParameter
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    enum class ECharacterMeshMaterialChangeType   ChangeType;                                                   // 0x0008(0x0001)
    enum class ECharacterMeshMaterialParameterTypeParameterType;                                                // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         SourceScalarValue;                                            // 0x000C(0x0004)
    FLinearColor                                  SourceVectorValue;                                            // 0x0010(0x0010)
    float                                         ScalarValue;                                                  // 0x0020(0x0004)
    FLinearColor                                  VectorValue;                                                  // 0x0024(0x0010)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FRuntimeFloatCurve                            ScalarCurve;                                                  // 0x0038(0x0088)
    FRuntimeCurveLinearColor                      VectorCurve;                                                  // 0x00C0(0x0208)
};


// ScriptStruct  Solarland.CharacterHitMontageMappingData
// Struct Size::0x0020
struct FCharacterHitMontageMappingData : public FTableRowBase
{
    enum class EHitMontageBySpecialState          SpecialState;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FHitMontageBySpecialState>             MontageBySpecialState;                                        // 0x0010(0x0010)
};


// ScriptStruct  Solarland.HitMontageBySpecialState
// Struct Size::0x0068
struct FHitMontageBySpecialState : public FTableRowBase
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0008(0x0050)
    TArray<FHitMontageByHitSocket>                MontageByHitSocket;                                           // 0x0058(0x0010)
};


// ScriptStruct  Solarland.HitMontageByHitSocket
// Struct Size::0x0028
struct FHitMontageByHitSocket : public FTableRowBase
{
    TArray<FName>                                 SocketNames;                                                  // 0x0008(0x0010)
    TArray<FHitMontageByDirection>                MontageByDirection;                                           // 0x0018(0x0010)
};


// ScriptStruct  Solarland.HitMontageByDirection
// Struct Size::0x00C8
struct FHitMontageByDirection : public FTableRowBase
{
    TArray<FVector2D>                             AngleRanges;                                                  // 0x0008(0x0010)
    FCharacterMontageMappingData                  MontageMappingData;                                           // 0x0018(0x00B0)
};


// ScriptStruct  Solarland.CharacterMontageMappingData
// Struct Size::0x00B0
struct FCharacterMontageMappingData : public FTableRowBase
{
    bool                                          bUseSoftObjectPtr;                                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FGameplayTag                                  MontageTag;                                                   // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UAnimMontage*                                 MaleMontage;                                                  // 0x0018(0x0008)
    TSoftObjectPtr<UAnimMontage>                  SoftMaleMontage;                                              // 0x0020(0x0028)
    UAnimMontage*                                 FemaleMontage;                                                // 0x0048(0x0008)
    TSoftObjectPtr<UAnimMontage>                  SoftFemaleMontage;                                            // 0x0050(0x0028)
    TArray<FMontageDataByCharacter>               CharacterSpecificData;                                        // 0x0078(0x0010)
    TArray<FSoftMontageDataByCharacter>           SoftCharacterSpecificData;                                    // 0x0088(0x0010)
    UDataTable*                                   WeaponSpecificDataTable;                                      // 0x0098(0x0008)
    char                                          pa_00A0[0x0010]                                               // 0x00A0(0x0010)
};


// ScriptStruct  Solarland.MontageDataByCharacter
// Struct Size::0x0058
struct FMontageDataByCharacter
{
    bool                                          bUseSoftObjectPtr;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       CharacterId;                                                  // 0x0004(0x0004)
    UAnimMontage*                                 Montage;                                                      // 0x0008(0x0008)
    TSoftObjectPtr<UAnimMontage>                  SoftMontage;                                                  // 0x0010(0x0028)
    TArray<FMontageDataByCharacterSkin>           SkinSpecificData;                                             // 0x0038(0x0010)
    TArray<FSoftMontageDataByCharacterSkin>       SoftSkinSpecificData;                                         // 0x0048(0x0010)
};


// ScriptStruct  Solarland.MontageDataByCharacterSkin
// Struct Size::0x0038
struct FMontageDataByCharacterSkin
{
    bool                                          bUseSoftObjectPtr;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       CharacterSkinID;                                              // 0x0004(0x0004)
    UAnimMontage*                                 Montage;                                                      // 0x0008(0x0008)
    TSoftObjectPtr<UAnimMontage>                  SoftMontage;                                                  // 0x0010(0x0028)
};


// ScriptStruct  Solarland.SoftMontageDataByCharacterSkin
// Struct Size::0x0038
struct FSoftMontageDataByCharacterSkin : public FMontageDataByCharacterSkin
{
};


// ScriptStruct  Solarland.SoftMontageDataByCharacter
// Struct Size::0x0058
struct FSoftMontageDataByCharacter : public FMontageDataByCharacter
{
};


// ScriptStruct  Solarland.EmotionMontageMappingData
// Struct Size::0x00B8
struct FEmotionMontageMappingData : public FCharacterMontageMappingData
{
    bool                                          bShowWeapon;                                                  // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    float                                         CameraZOffset;                                                // 0x00B4(0x0004)
};


// ScriptStruct  Solarland.MontageDataByWeapon
// Struct Size::0x0030
struct FMontageDataByWeapon : public FTableRowBase
{
    int32_t                                       weaponid;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UAnimMontage*                                 MaleMontage;                                                  // 0x0010(0x0008)
    UAnimMontage*                                 FemaleMontage;                                                // 0x0018(0x0008)
    TArray<FMontageDataByWeaponSkin>              SkinSpecificData;                                             // 0x0020(0x0010)
};


// ScriptStruct  Solarland.MontageDataByWeaponSkin
// Struct Size::0x0018
struct FMontageDataByWeaponSkin
{
    int32_t                                       WeaponSkinID;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAnimMontage*                                 MaleMontage;                                                  // 0x0008(0x0008)
    UAnimMontage*                                 FemaleMontage;                                                // 0x0010(0x0008)
};


// ScriptStruct  Solarland.ChildActorOrnamentConfig
// Struct Size::0x0080
struct FChildActorOrnamentConfig
{
    FSoftClassPath                                OrnamentRes;                                                  // 0x0000(0x0018)
    FName                                         OrnamentAttachSocket;                                         // 0x0018(0x0008)
    FTransform                                    OrnamentRelativeTransform;                                    // 0x0020(0x0030)
    FSoftObjectPath                               OrnamentVisibilityConfig;                                     // 0x0050(0x0018)
    TArray<FName>                                 OrnamentComponentTags;                                        // 0x0068(0x0010)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
};


// ScriptStruct  Solarland.SkeletalMeshOrnamentConfig
// Struct Size::0x00A0
struct FSkeletalMeshOrnamentConfig
{
    FSoftObjectPath                               OrnamentRes;                                                  // 0x0000(0x0018)
    FSoftClassPath                                OrnamentABPRes;                                               // 0x0018(0x0018)
    FName                                         OrnamentAttachSocket;                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FTransform                                    OrnamentRelativeTransform;                                    // 0x0040(0x0030)
    FSoftObjectPath                               OrnamentVisibilityConfig;                                     // 0x0070(0x0018)
    TArray<FName>                                 OrnamentComponentTags;                                        // 0x0088(0x0010)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  Solarland.StaticMeshOrnamentConfig
// Struct Size::0x0080
struct FStaticMeshOrnamentConfig
{
    FSoftObjectPath                               OrnamentRes;                                                  // 0x0000(0x0018)
    FName                                         OrnamentAttachSocket;                                         // 0x0018(0x0008)
    FTransform                                    OrnamentRelativeTransform;                                    // 0x0020(0x0030)
    FSoftObjectPath                               OrnamentVisibilityConfig;                                     // 0x0050(0x0018)
    TArray<FName>                                 OrnamentComponentTags;                                        // 0x0068(0x0010)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
};


// ScriptStruct  Solarland.SoundGroupMappingData
// Struct Size::0x0058
struct FSoundGroupMappingData : public FTableRowBase
{
    TMap<int32_t,FSoundGroupDataByCharacter>      CharacterSpecificData;                                        // 0x0008(0x0050)
};


// ScriptStruct  Solarland.SoundGroupDataByCharacter
// Struct Size::0x0058
struct FSoundGroupDataByCharacter
{
    FName                                         DestinationSoundGroup;                                        // 0x0000(0x0008)
    TMap<int32_t,FName>                           SkinSpecificData;                                             // 0x0008(0x0050)
};


// ScriptStruct  Solarland.ChargeCannonLevelData
// Struct Size::0x0020
struct FChargeCannonLevelData
{
    float                                         ChargeTime;                                                   // 0x0000(0x0004)
    float                                         MovingSpeed;                                                  // 0x0004(0x0004)
    float                                         CheckExplodeRadius;                                           // 0x0008(0x0004)
    float                                         DamageRadius;                                                 // 0x000C(0x0004)
    UCurveFloat*                                  DamageCurve;                                                  // 0x0010(0x0008)
    bool                                          bStun;                                                        // 0x0018(0x0001)
    bool                                          bSuppress;                                                    // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  Solarland.ChooseWeaponItemData
// Struct Size::0x0088
struct FChooseWeaponItemData
{
    FName                                         RowName;                                                      // 0x0000(0x0008)
    int32_t                                       weaponid;                                                     // 0x0008(0x0004)
    int32_t                                       WeaponTypeId;                                                 // 0x000C(0x0004)
    int32_t                                       WeaponSkinID;                                                 // 0x0010(0x0004)
    bool                                          bCollected;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    TArray<int32_t>                               AvailableScopes;                                              // 0x0018(0x0010)
    int32_t                                       DefaultScope;                                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TSet<enum class EWeaponEquipSlot>             SelectedSlots;                                                // 0x0030(0x0050)
    int32_t                                       SelectedScope;                                                // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  Solarland.ChooseWeaponItemState
// Struct Size::0x0004
struct FChooseWeaponItemState
{
    bool                                          bCollected;                                                   // 0x0000(0x0001)
    bool                                          bSelected;                                                    // 0x0001(0x0001)
    bool                                          bSelectedBySlot1;                                             // 0x0002(0x0001)
    bool                                          bSelectedBySlot2;                                             // 0x0003(0x0001)
};


// ScriptStruct  Solarland.NodeContainerItem
// Struct Size::0x0018
struct FNodeContainerItem
{
    UCanvasPanel*                                 RootContainerPanel;                                           // 0x0000(0x0008)
    TArray<FNodeContainer>                        ContainerArray;                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.NodeContainer
// Struct Size::0x0028
struct FNodeContainer
{
    FNodeElement                                  ThisNode;                                                     // 0x0000(0x0010)
    bool                                          bRoot;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FNodeElement>                          ChildsNode;                                                   // 0x0018(0x0010)
};


// ScriptStruct  Solarland.NodeElement
// Struct Size::0x0010
struct FNodeElement
{
    UWidget*                                      Widget;                                                       // 0x0000(0x0008)
    enum class ESlateVisibility                   Visible;                                                      // 0x0008(0x0001)
    bool                                          bIsContainer;                                                 // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Solarland.StateMapItemStruct
// Struct Size::0x0018
struct FStateMapItemStruct
{
    TArray<FStateItemStruct>                      ChildWidgetConfigList;                                        // 0x0000(0x0010)
    bool                                          bLoadChildWidgetTool;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Solarland.StateItemStruct
// Struct Size::0x0010
struct FStateItemStruct
{
    UWidget*                                      CrosshairChildWidget;                                         // 0x0000(0x0008)
    enum class ESlateVisibility                   VisibilityType;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Solarland.UICrossHairSpreadStruct
// Struct Size::0x0048
struct FUICrossHairSpreadStruct
{
    UWidget*                                      TargetWidget;                                                 // 0x0000(0x0008)
    enum class ESpreadType                        SpreadType;                                                   // 0x0008(0x0001)
    bool                                          bPosition;                                                    // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         Angle;                                                        // 0x000C(0x0004)
    bool                                          Pos_UseCustomizeFunc;                                         // 0x0010(0x0001)
    bool                                          bScale;                                                       // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    FVector2D                                     ScaleFactor;                                                  // 0x0014(0x0008)
    bool                                          Scale_UseCustomizeFunc;                                       // 0x001C(0x0001)
    bool                                          bRenderAngle;                                                 // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         RenderAngleFactor;                                            // 0x0020(0x0004)
    bool                                          Angle_UseCustomizeFunc;                                       // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector2D                                     OrginalVector;                                                // 0x0028(0x0008)
    FVector2D                                     OrginalScale;                                                 // 0x0030(0x0008)
    float                                         OrginalAngle;                                                 // 0x0038(0x0004)
    FVector2D                                     Dir;                                                          // 0x003C(0x0008)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.UICrossHairAimColorStruct
// Struct Size::0x0028
struct FUICrossHairAimColorStruct
{
    UImage*                                       TargetImg;                                                    // 0x0000(0x0008)
    FLinearColor                                  TargetColor;                                                  // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Solarland.CrosshairLayout
// Struct Size::0x0004
struct FCrosshairLayout
{
    float                                         InitSpread;                                                   // 0x0000(0x0004)
};


// ScriptStruct  Solarland.CrosshairSprite
// Struct Size::0x0060
struct FCrosshairSprite
{
    FSoftObjectPath                               NormalCenter;                                                 // 0x0000(0x0018)
    FSoftObjectPath                               Normal;                                                       // 0x0018(0x0018)
    FSoftObjectPath                               EnergyCenter;                                                 // 0x0030(0x0018)
    FSoftObjectPath                               Energy;                                                       // 0x0048(0x0018)
};


// ScriptStruct  Solarland.ActiveCustomizedCameraShake
// Struct Size::0x0018
struct FActiveCustomizedCameraShake
{
    UCustomizedCameraShake*                       ShakeInstance;                                                // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.CustomizedCameraShakeTemplatePool
// Struct Size::0x0018
struct FCustomizedCameraShakeTemplatePool
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<UCustomizedCameraShake*>               PooledShakes;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Solarland.CustomizedCameraShakePool
// Struct Size::0x0010
struct FCustomizedCameraShakePool
{
    TArray<UCustomizedCameraShake*>               PooledShakes;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Solarland.NoticeColorData
// Struct Size::0x0030
struct FNoticeColorData
{
    FLinearColor                                  TextBg;                                                       // 0x0000(0x0010)
    FLinearColor                                  IconBg;                                                       // 0x0010(0x0010)
    FLinearColor                                  Icon;                                                         // 0x0020(0x0010)
};


// ScriptStruct  Solarland.CustomNoticeImageRow
// Struct Size::0x0030
struct FCustomNoticeImageRow : public FTableRowBase
{
    FString                                       Remark;                                                       // 0x0008(0x0010)
    FSoftObjectPath                               NoticeIconPath;                                               // 0x0018(0x0018)
};


// ScriptStruct  Solarland.CustomNoticeRow
// Struct Size::0x0078
struct FCustomNoticeRow : public FTableRowBase
{
    FString                                       Remark;                                                       // 0x0008(0x0010)
    int32_t                                       NoticeText;                                                   // 0x0018(0x0004)
    enum class ECustomNoticeType                  NoticeType;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         NoticeTime;                                                   // 0x0020(0x0004)
    enum class ECustomNoticeColor                 NoticeColor;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    UUINoticeBase*                                NoticeClass;                                                  // 0x0028(0x0008)
    FString                                       NoticeIcon;                                                   // 0x0030(0x0010)
    int32_t                                       Priority;                                                     // 0x0040(0x0004)
    bool                                          bConsumeTimeInQueue;                                          // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    FString                                       StartVoiceName;                                               // 0x0048(0x0010)
    FString                                       LoopVoiceName;                                                // 0x0058(0x0010)
    FString                                       EndVoiceName;                                                 // 0x0068(0x0010)
};


// ScriptStruct  Solarland.CustomNoticeID
// Struct Size::0x0001
struct FCustomNoticeID
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Solarland.SettlementDisplayData
// Struct Size::0x0028
struct FSettlementDisplayData
{
    TArray<FPlayerGameResultBitWrapper>           PlayerDatas;                                                  // 0x0000(0x0010)
    FGlobaGameResultInfoWrapper                   GameInfo;                                                     // 0x0010(0x0018)
};


// ScriptStruct  Solarland.BoxChargingInfo
// Struct Size::0x001C
struct FBoxChargingInfo
{
    char                                          pa_0000[0x001C]                                               // 0x0000(0x001C)
};


// ScriptStruct  Solarland.TerminatorNotifyUIConfig
// Struct Size::0x0028
struct FTerminatorNotifyUIConfig
{
    int32_t                                       LocalizationID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0014]                                               // 0x0004(0x0014)
    UUINoticeBase*                                TerminatorNotifyUI;                                           // 0x0018(0x0008)
    enum class ECustomNoticeType                  NoticeType;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         NoticeTime;                                                   // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SkeletalMeshOverride
// Struct Size::0x0050
struct FSkeletalMeshOverride
{
    TSoftObjectPtr<USkeletalMesh>                 MeshOverride;                                                 // 0x0000(0x0028)
    TSoftObjectPtr<UMaterialInstance>             MaterialOverride;                                             // 0x0028(0x0028)
};


// ScriptStruct  Solarland.StaticMeshOverride
// Struct Size::0x0050
struct FStaticMeshOverride
{
    TSoftObjectPtr<UStaticMesh>                   MeshOverride;                                                 // 0x0000(0x0028)
    TSoftObjectPtr<UMaterialInstance>             MaterialOverride;                                             // 0x0028(0x0028)
};


// ScriptStruct  Solarland.DuckRollingCharacterHitConfig
// Struct Size::0x00A0
struct FDuckRollingCharacterHitConfig
{
    float                                         MinSelfSpeed;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    USolarCharacterGameplayAbility*               EnableCharacterHitAbility;                                    // 0x0008(0x0008)
    UParticleSystem*                              SpeedEffect;                                                  // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    SpeedEffectRelativeTransform;                                 // 0x0020(0x0030)
    float                                         PushUpAngle;                                                  // 0x0050(0x0004)
    float                                         UpBoundingRatio;                                              // 0x0054(0x0004)
    FVector                                       PushBoxExtent;                                                // 0x0058(0x000C)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    UCurveFloat*                                  PushSpeedCurve;                                               // 0x0068(0x0008)
    bool                                          bTeleportTargetOnPush;                                        // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    float                                         MinRelativeSpeedForDamage;                                    // 0x0074(0x0004)
    float                                         MinIntervalForDamage;                                         // 0x0078(0x0004)
    float                                         BaseDamage;                                                   // 0x007C(0x0004)
    UCurveFloat*                                  RelativeSpeedToDamageMultiplierCurve;                         // 0x0080(0x0008)
    UParticleSystem*                              HitEffect;                                                    // 0x0088(0x0008)
    FString                                       HitSoundEvent;                                                // 0x0090(0x0010)
};


// ScriptStruct  Solarland.EmojiBubbleConfig
// Struct Size::0x0020
struct FEmojiBubbleConfig : public FTableRowBase
{
    FSoftClassPath                                EmojiPath;                                                    // 0x0008(0x0018)
};


// ScriptStruct  Solarland.BoxBurstItemConfig
// Struct Size::0x0008
struct FBoxBurstItemConfig
{
    UDataTable*                                   ConfigTable;                                                  // 0x0000(0x0008)
};


// ScriptStruct  Solarland.BurstItemSplitConfig
// Struct Size::0x0048
struct FBurstItemSplitConfig : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<int32_t>                               Piles;                                                        // 0x0010(0x0010)
    TArray<float>                                 ModelScale;                                                   // 0x0020(0x0010)
    int32_t                                       MaxPileNum;                                                   // 0x0030(0x0004)
    FRotator                                      Rotator;                                                      // 0x0034(0x000C)
    bool                                          bOnlyValidDeathBox;                                           // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  Solarland.ExpItemReduceRate
// Struct Size::0x0008
struct FExpItemReduceRate
{
    UDataTable*                                   ConfigTable;                                                  // 0x0000(0x0008)
};


// ScriptStruct  Solarland.ExpItemReduceRateConfig
// Struct Size::0x0010
struct FExpItemReduceRateConfig : public FTableRowBase
{
    int32_t                                       DeathCount;                                                   // 0x0008(0x0004)
    float                                         Rate;                                                         // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ExpItemConfig
// Struct Size::0x0010
struct FExpItemConfig
{
    UDataTable*                                   ConfigTable;                                                  // 0x0000(0x0008)
    UDataTable*                                   KilledConfigTable;                                            // 0x0008(0x0008)
};


// ScriptStruct  Solarland.ExpItemCountConfig
// Struct Size::0x0068
struct FExpItemCountConfig : public FTableRowBase
{
    int32_t                                       Lv;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TMap<int32_t,int32_t>                         ExpItemMap;                                                   // 0x0010(0x0050)
    int32_t                                       ShieldMatMaxCount;                                            // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.FeedbackSingleData
// Struct Size::0x0030
struct FFeedbackSingleData
{
    UUserWidget*                                  AnimationWidget;                                              // 0x0000(0x0008)
    FName                                         AnimationName;                                                // 0x0008(0x0008)
    float                                         AnimationPlaySpeed;                                           // 0x0010(0x0004)
    float                                         AnimationStartTime;                                           // 0x0014(0x0004)
    float                                         AnimationAgainStartTime;                                      // 0x0018(0x0004)
    int32_t                                       AnimationLoopNumber;                                          // 0x001C(0x0004)
    FName                                         AudioName;                                                    // 0x0020(0x0008)
    enum class EAnimationType                     AnimationType;                                                // 0x0028(0x0001)
    enum class EUMGSequencePlayMode               PlayMode;                                                     // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  Solarland.SSubLevelPathArray
// Struct Size::0x0120
struct FSSubLevelPathArray : public FFastArraySerializer
{
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
    TArray<FSSubLevelPath>                        SubLevels;                                                    // 0x0110(0x0010)
};


// ScriptStruct  Solarland.SSubLevelPath
// Struct Size::0x0040
struct FSSubLevelPath : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSoftObjectPath                               LevelPath;                                                    // 0x0010(0x0018)
    FVector                                       Location;                                                     // 0x0028(0x000C)
    FRotator                                      Rotation;                                                     // 0x0034(0x000C)
};


// ScriptStruct  Solarland.SElementLevelStreaming
// Struct Size::0x0010
struct FSElementLevelStreaming
{
    bool                                          LoadWithLevel;                                                // 0x0000(0x0001)
    enum class ELevelLoadType                     LoadType;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    ULevelStreamingDynamic*                       LevelStreamingDynamic;                                        // 0x0008(0x0008)
};


// ScriptStruct  Solarland.DesiredLoadLevel
// Struct Size::0x0018
struct FDesiredLoadLevel
{
    bool                                          bInitialized;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       LevelName;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Solarland.LoadingScreenLevelData
// Struct Size::0x0068
struct FLoadingScreenLevelData
{
    FVector                                       BackupLevelStreamingLocation;                                 // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSet<FSoftObjectPath>                         LockupLevels;                                                 // 0x0010(0x0050)
    float                                         LockupLevelMaxSquaredXYDistance;                              // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.GameplayEventFilterPointArray
// Struct Size::0x0010
struct FGameplayEventFilterPointArray
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.GameplayEventFilterPoint
// Struct Size::0x0014
struct FGameplayEventFilterPoint
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
    FVector2D                                     Position;                                                     // 0x000C(0x0008)
};


// ScriptStruct  Solarland.GameplayEventFilterData
// Struct Size::0x0020
struct FGameplayEventFilterData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Solarland.GameplayEventFilterConfig
// Struct Size::0x0028
struct FGameplayEventFilterConfig
{
    bool                                          bIsValid;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaxDuration;                                                  // 0x0004(0x0004)
    float                                         ImpactRadius;                                                 // 0x0008(0x0004)
    float                                         ForbidRadius;                                                 // 0x000C(0x0004)
    FSoftClassPath                                FilterPreset;                                                 // 0x0010(0x0018)
};


// ScriptStruct  Solarland.WeaponVibrateDTRow
// Struct Size::0x0080
struct FWeaponVibrateDTRow : public FTableRowBase
{
    FString                                       WeaponDesc;                                                   // 0x0008(0x0010)
    TMap<enum class EWeaponVibrateType,FVibrateDevicePlayParams>WeaponVibrateMap;                               // 0x0018(0x0050)
    FChargeVibratePlayParams                      ChargeVibrateData;                                            // 0x0068(0x0018)
};


// ScriptStruct  Solarland.ChargeVibratePlayParams
// Struct Size::0x0018
struct FChargeVibratePlayParams
{
    float                                         ChargingIntervalTime;                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UCurveFloat*                                  ChargingFactorCurve;                                          // 0x0008(0x0008)
    UCurveFloat*                                  FireFactorCurve;                                              // 0x0010(0x0008)
};


// ScriptStruct  Solarland.VibrateDevicePlayParams
// Struct Size::0x0050
struct FVibrateDevicePlayParams
{
    TMap<enum class EVibrateDeviceType,FVibratePlayParams>DeviceMap;                                            // 0x0000(0x0050)
};


// ScriptStruct  Solarland.VibratePlayParams
// Struct Size::0x0028
struct FVibratePlayParams
{
    FString                                       ClipToPlay;                                                   // 0x0000(0x0010)
    int32_t                                       Duration;                                                     // 0x0010(0x0004)
    int32_t                                       Loop;                                                         // 0x0014(0x0004)
    int32_t                                       Priority;                                                     // 0x0018(0x0004)
    int32_t                                       Interval;                                                     // 0x001C(0x0004)
    int32_t                                       Amplitude;                                                    // 0x0020(0x0004)
    float                                         ForceFeedbackAmplitude;                                       // 0x0024(0x0004)
};


// ScriptStruct  Solarland.VibrateIntensityPlayParams
// Struct Size::0x0050
struct FVibrateIntensityPlayParams
{
    TMap<enum class EGameplayVibrateIntensity,FVibrateDevicePlayParams>IntensityMap;                            // 0x0000(0x0050)
};


// ScriptStruct  Solarland.RespawnFallingConfig
// Struct Size::0x0048
struct FRespawnFallingConfig
{
    float                                         MinDistanceToDeathLocation;                                   // 0x0000(0x0004)
    float                                         POIConsiderRadius;                                            // 0x0004(0x0004)
    float                                         POIRandomRadius;                                              // 0x0008(0x0004)
    float                                         ReviveHeight;                                                 // 0x000C(0x0004)
    float                                         CollisionTestHeight;                                          // 0x0010(0x0004)
    FVector                                       CollisionTestBoxHalfExtent;                                   // 0x0014(0x000C)
    TArray<enum class ECollisionChannel>          CollisionTestChannels;                                        // 0x0020(0x0010)
    float                                         MinFallingHeight;                                             // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FVector>                               TeamLocationOffset;                                           // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SCMRankListMulticast
// Struct Size::0x0018
struct FSCMRankListMulticast
{
    int32_t                                       BeginRank;                                                    // 0x0000(0x0004)
    int32_t                                       EndRank;                                                      // 0x0004(0x0004)
    FMulticastInlineDelegate                      RankListChangeMulticast;                                      // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SCMRankEventHandle
// Struct Size::0x001C
struct FSCMRankEventHandle
{
    int32_t                                       BeginRank;                                                    // 0x0000(0x0004)
    int32_t                                       EndRank;                                                      // 0x0004(0x0004)
    FDelegate                                     RankListChangeEvent;                                          // 0x0008(0x0010)
    int32_t                                       Index;                                                        // 0x0018(0x0004)
};


// ScriptStruct  Solarland.SCMHostData
// Struct Size::0x0488
struct FSCMHostData
{
    FHostChangeData                               DataChangeToGlobal;                                           // 0x0000(0x00F0)
    FHostChangeData                               DataChangeToSide;                                             // 0x00F0(0x00F0)
    FHostChangeData                               DataChangeToSelf;                                             // 0x01E0(0x00F0)
    TMap<FString,FSCMSaveData>                    DataMap;                                                      // 0x02D0(0x0050)
    TMap<FString,FSCMArrayData>                   ArrayDataMap;                                                 // 0x0320(0x0050)
    TMap<FString,FSCMMapData>                     MapDataMap;                                                   // 0x0370(0x0050)
    char                                          pa_03C0[0x00A0]                                               // 0x03C0(0x00A0)
    FMulticastInlineDelegate                      SCMDataChangeDelegate;                                        // 0x0460(0x0010)
    FString                                       Name;                                                         // 0x0470(0x0010)
    enum class ESCMHostType                       HostType;                                                     // 0x0480(0x0001)
    char                                          pa_0481[0x0007]                                               // 0x0481(0x0007)
};


// ScriptStruct  Solarland.SCMSaveDataBase
// Struct Size::0x0018
struct FSCMSaveDataBase
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    enum class ESCMDataType                       Type;                                                         // 0x0010(0x0001)
    enum class ESCMDataReplicateType              RepType;                                                      // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  Solarland.SCMMapData
// Struct Size::0x0068
struct FSCMMapData : public FSCMSaveDataBase
{
    char                                          pa_0018[0x0050]                                               // 0x0018(0x0050)
};


// ScriptStruct  Solarland.SCMArrayData
// Struct Size::0x0028
struct FSCMArrayData : public FSCMSaveDataBase
{
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SCMSaveData
// Struct Size::0x0020
struct FSCMSaveData : public FSCMSaveDataBase
{
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  Solarland.HostChangeData
// Struct Size::0x00F0
struct FHostChangeData
{
    TMap<FString,enum class ESCMDataChangeType>   DataChangeMap;                                                // 0x0000(0x0050)
    TMap<FString,FSCMChangeDataArray>             ArrayChangeMap;                                               // 0x0050(0x0050)
    TMap<FString,FSCMChangeDataMap>               MapChangeMap;                                                 // 0x00A0(0x0050)
};


// ScriptStruct  Solarland.SCMChangeDataMap
// Struct Size::0x0020
struct FSCMChangeDataMap
{
    TArray<enum class ESCMDataChangeType>         ChangeType;                                                   // 0x0000(0x0010)
    TArray<FString>                               ChangeKeyArray;                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SCMChangeDataArray
// Struct Size::0x0020
struct FSCMChangeDataArray
{
    TArray<enum class ESCMDataChangeType>         ChangeType;                                                   // 0x0000(0x0010)
    TArray<uint32_t>                              ChangeIndexArray;                                             // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SCMDataBoardRow
// Struct Size::0x0088
struct FSCMDataBoardRow : public FTableRowBase
{
    enum class ESCMDataType                       Type;                                                         // 0x0008(0x0001)
    enum class ESCMDataSetType                    DataSetType;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
    FString                                       Default;                                                      // 0x0010(0x0010)
    TArray<FString>                               DefaultArray;                                                 // 0x0020(0x0010)
    TMap<FString,FString>                         DefaultMap;                                                   // 0x0030(0x0050)
    enum class ESCMHostType                       HostType;                                                     // 0x0080(0x0001)
    enum class ESCMDataReplicateType              ReplicateType;                                                // 0x0081(0x0001)
    enum class ESCMDataGatherType_Settle          SettleGatherType;                                             // 0x0082(0x0001)
    enum class ESCMDataRankType                   Rank;                                                         // 0x0083(0x0001)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  Solarland.SCMGeneralDataBoardRow
// Struct Size::0x0098
struct FSCMGeneralDataBoardRow : public FSCMDataBoardRow
{
    enum class EStatisticsType                    MapNameType;                                                  // 0x0088(0x0001)
    char                                          pa_0089[0x000F]                                               // 0x0089(0x000F)
};


// ScriptStruct  Solarland.AssitLockBoneWeight
// Struct Size::0x000C
struct FAssitLockBoneWeight
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    float                                         BoneWeight;                                                   // 0x0008(0x0004)
};


// ScriptStruct  Solarland.MobileAALevelData
// Struct Size::0x0010
struct FMobileAALevelData : public FTableRowBase
{
    enum class EMobileAALevel                     MobileAALevel;                                                // 0x0008(0x0001)
    char                                          MSAALevel;                                                    // 0x0009(0x0001)
    bool                                          bEnableMobileFXAA;                                            // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  Solarland.ShadowDetailLevelData
// Struct Size::0x0018
struct FShadowDetailLevelData : public FTableRowBase
{
    enum class ESolarShadowQualityLevel           SunlightShadowDetailLevelEnum;                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       ShadowQualityValue;                                           // 0x000C(0x0004)
    int32_t                                       MaxCSMResolution;                                             // 0x0010(0x0004)
    float                                         ShadowDistanceScale;                                          // 0x0014(0x0004)
};


// ScriptStruct  Solarland.ResolutionData
// Struct Size::0x0018
struct FResolutionData : public FTableRowBase
{
    enum class ESolarResolution                   ResolutionEnum;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Width;                                                        // 0x000C(0x0004)
    int32_t                                       Height;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.RangeInfo
// Struct Size::0x0008
struct FRangeInfo
{
    float                                         MinValue;                                                     // 0x0000(0x0004)
    float                                         MaxValue;                                                     // 0x0004(0x0004)
};


// ScriptStruct  Solarland.GuidanceConditionTableRow
// Struct Size::0x0030
struct FGuidanceConditionTableRow : public FTableRowBase
{
    char                                          TriggerType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FString>                               Parameters;                                                   // 0x0010(0x0010)
    FString                                       Description;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Solarland.GyroscopeDeviceModel
// Struct Size::0x0028
struct FGyroscopeDeviceModel : public FTableRowBase
{
    FString                                       NotHavingGyroscopeDeviceModelName;                            // 0x0008(0x0010)
    float                                         GyroscopeRotationRateYThreshold;                              // 0x0018(0x0004)
    float                                         GyroscopeRotationRateXThreshold;                              // 0x001C(0x0004)
    float                                         GyroscopeTiltYThreshold;                                      // 0x0020(0x0004)
    float                                         GyroscopeTiltZThreshold;                                      // 0x0024(0x0004)
};


// ScriptStruct  Solarland.GyroscopeSensitivity
// Struct Size::0x0020
struct FGyroscopeSensitivity : public FTableRowBase
{
    FString                                       Axle;                                                         // 0x0008(0x0010)
    float                                         GyroscopeSensitivityArray;                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.GyroscopeDTRow
// Struct Size::0x0010
struct FGyroscopeDTRow : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    float                                         GyroscopeFactor;                                              // 0x000C(0x0004)
};


// ScriptStruct  Solarland.HellStrikeWidgetScoutMarkInfo
// Struct Size::0x0018
struct FHellStrikeWidgetScoutMarkInfo
{
    USolarUserWidget*                             Widget;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.HellStrikeWidgetEnemyMarkInfo
// Struct Size::0x0028
struct FHellStrikeWidgetEnemyMarkInfo
{
    UHellStrikeEnemyMarkInfoWidget*               Widget;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
};


// ScriptStruct  Solarland.HellStrikeWidgetEnemyInfo
// Struct Size::0x0018
struct FHellStrikeWidgetEnemyInfo
{
    UHellStrikeEnemyInfoWidget*                   Widget;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.HellStrikeWidgetTeammateInfo
// Struct Size::0x0018
struct FHellStrikeWidgetTeammateInfo
{
    UPlayerNavWidget*                             Widget;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.HellStrikeWidgetChoosePointInfo
// Struct Size::0x0010
struct FHellStrikeWidgetChoosePointInfo
{
    UHellStrikeCursorWidget*                      MarkWidget;                                                   // 0x0000(0x0008)
    UHellStrikeChoosePointMarkWidget*             TipWidget;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Solarland.HellStrikeWidgetControllerConfig
// Struct Size::0x0030
struct FHellStrikeWidgetControllerConfig
{
    FName                                         ChoosePointCursorAxisXActionName;                             // 0x0000(0x0008)
    FName                                         ChoosePointCursorAxisYActionName;                             // 0x0008(0x0008)
    FName                                         ChoosePointConfirmActionName;                                 // 0x0010(0x0008)
    FName                                         ChoosePointResetActionName;                                   // 0x0018(0x0008)
    FName                                         CloseWidgetActionName;                                        // 0x0020(0x0008)
    FVector2D                                     AxisSpeed;                                                    // 0x0028(0x0008)
};


// ScriptStruct  Solarland.PlayerSelectInfo
// Struct Size::0x0048
struct FPlayerSelectInfo
{
    ASolarPlayerState*                            Player;                                                       // 0x0000(0x0008)
    FString                                       NickNameWithoutUID;                                           // 0x0008(0x0010)
    FString                                       PlayerUID;                                                    // 0x0018(0x0010)
    int32_t                                       PlayerPos;                                                    // 0x0028(0x0004)
    int32_t                                       CharacterId;                                                  // 0x002C(0x0004)
    int32_t                                       SkinId;                                                       // 0x0030(0x0004)
    int32_t                                       HeroExpLevel;                                                 // 0x0034(0x0004)
    bool                                          HasConfirm;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         PlayerSelectTime;                                             // 0x003C(0x0004)
    bool                                          IsInHeroPickProcess;                                          // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  Solarland.AIPickHeroInfo
// Struct Size::0x0008
struct FAIPickHeroInfo
{
    int32_t                                       CharacterId;                                                  // 0x0000(0x0004)
    int32_t                                       SkinId;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.PlayerSelection
// Struct Size::0x0018
struct FPlayerSelection
{
    ASolarPlayerState*                            PlayerState;                                                  // 0x0000(0x0008)
    TWeakObjectPtr<UHeroPickCharacterData>        SelectionData;                                                // 0x0008(0x0008)
    int32_t                                       CachedPos;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.AlertConfig
// Struct Size::0x00D0
struct FAlertConfig
{
    bool                                          bShowDebug;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         TickInterval;                                                 // 0x0004(0x0004)
    float                                         HighAlertAngle;                                               // 0x0008(0x0004)
    float                                         HighAlertRadiusMin;                                           // 0x000C(0x0004)
    float                                         HighAlertRadiusMax;                                           // 0x0010(0x0004)
    FVector2D                                     HighAlertBoxExtent;                                           // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TMap<enum class EAlertDirection,float>        AlertCD;                                                      // 0x0020(0x0050)
    float                                         VoiceCD;                                                      // 0x0070(0x0004)
    int32_t                                       VoiceID;                                                      // 0x0074(0x0004)
    float                                         NoticeCD;                                                     // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<FName>                                 OcclusionCheckBones;                                          // 0x0080(0x0010)
    FGameplayTagContainer                         SelfBlockTags;                                                // 0x0090(0x0020)
    FGameplayTagContainer                         EnemyBlockTags;                                               // 0x00B0(0x0020)
};


// ScriptStruct  Solarland.SoundGroupTableDataBase
// Struct Size::0x0008
struct FSoundGroupTableDataBase : public FTableRowBase
{
};


// ScriptStruct  Solarland.SoundGroupHitSoundTableData
// Struct Size::0x0018
struct FSoundGroupHitSoundTableData : public FSoundGroupTableDataBase
{
    FString                                       SoundEvent;                                                   // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SoundGroupHitSoundWwiseParams
// Struct Size::0x0040
struct FSoundGroupHitSoundWwiseParams
{
    FString                                       SwitchGroup;                                                  // 0x0000(0x0010)
    FString                                       SwitchState_IAttackOther;                                     // 0x0010(0x0010)
    FString                                       SwitchState_OtherAttackMe;                                    // 0x0020(0x0010)
    FString                                       SwitchState_Other;                                            // 0x0030(0x0010)
};


// ScriptStruct  Solarland.HitSoundTableData
// Struct Size::0x0068
struct FHitSoundTableData : public FTableRowBase
{
    UDataTable*                                   SubTableData;                                                 // 0x0008(0x0008)
    FName                                         Default;                                                      // 0x0010(0x0008)
    FName                                         CharacterBody;                                                // 0x0018(0x0008)
    FName                                         CharacterHead;                                                // 0x0020(0x0008)
    FName                                         CharacterShieldBody;                                          // 0x0028(0x0008)
    FName                                         CharacterShieldHead;                                          // 0x0030(0x0008)
    FName                                         CharacterHitDown;                                             // 0x0038(0x0008)
    FName                                         CharacterKill;                                                // 0x0040(0x0008)
    FName                                         CharacterKill2;                                               // 0x0048(0x0008)
    FName                                         Vehicle;                                                      // 0x0050(0x0008)
    FName                                         SummonItemSolid;                                              // 0x0058(0x0008)
    FName                                         SummonItemVirtual;                                            // 0x0060(0x0008)
};


// ScriptStruct  Solarland.HitTraceMeshWidgetData
// Struct Size::0x003C
struct FHitTraceMeshWidgetData
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    FHitTraceData                                 HitTraceSourceData;                                           // 0x0004(0x0018)
    FVector2D                                     Position;                                                     // 0x001C(0x0008)
    float                                         Scale;                                                        // 0x0024(0x0004)
    int32_t                                       Angle;                                                        // 0x0028(0x0004)
    float                                         Opacity;                                                      // 0x002C(0x0004)
    char                                          IconIndex;                                                    // 0x0030(0x0001)
    char                                          ColorIdx;                                                     // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       ArcLength;                                                    // 0x0034(0x0004)
    int32_t                                       SniperLength;                                                 // 0x0038(0x0004)
};


// ScriptStruct  Solarland.HitTraceData
// Struct Size::0x0018
struct FHitTraceData
{
    enum class EHitTraceType                      Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       TraceDirection;                                               // 0x0004(0x000C)
    float                                         Damage;                                                       // 0x0010(0x0004)
    float                                         HitTime;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarAerialReconnaissanceConfig
// Struct Size::0x0008
struct FSolarAerialReconnaissanceConfig
{
    int32_t                                       MarkMaximum;                                                  // 0x0000(0x0004)
    bool                                          bMarkTeamMode;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.TeammateStateWidgetEntry
// Struct Size::0x0018
struct FTeammateStateWidgetEntry
{
    char                                          PosInTeam;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UHUD_Teammate_State*                          StateWidget;                                                  // 0x0008(0x0008)
    bool                                          bIsVisible;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Solarland.RichHlinkRow
// Struct Size::0x08F0
struct FRichHlinkRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FHyperlinkStyle                               HlinkStyle;                                                   // 0x0010(0x08E0)
};


// ScriptStruct  SlateCore.HyperlinkStyle
// Struct Size::0x08E0
struct FHyperlinkStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  UnderlineStyle;                                               // 0x0010(0x0420)
    FTextBlockStyle                               TextStyle;                                                    // 0x0430(0x04A0)
    FMargin                                       Padding;                                                      // 0x08D0(0x0010)
};


// ScriptStruct  Solarland.InGameLevelingConfig
// Struct Size::0x0008
struct FInGameLevelingConfig
{
    UDataTable*                                   ExpTable;                                                     // 0x0000(0x0008)
};


// ScriptStruct  Solarland.InGameExpConifg
// Struct Size::0x0010
struct FInGameExpConifg : public FTableRowBase
{
    int32_t                                       Lv;                                                           // 0x0008(0x0004)
    int32_t                                       Exp;                                                          // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ItemRootOffsetConfig
// Struct Size::0x0008
struct FItemRootOffsetConfig
{
    UDataTable*                                   ItemTable;                                                    // 0x0000(0x0008)
};


// ScriptStruct  Solarland.ItemRootOffsetRow
// Struct Size::0x0018
struct FItemRootOffsetRow : public FTableRowBase
{
    int32_t                                       ItemID;                                                       // 0x0008(0x0004)
    FVector                                       Offset;                                                       // 0x000C(0x000C)
};


// ScriptStruct  Solarland.JetPackHorizontalConfig
// Struct Size::0x0030
struct FJetPackHorizontalConfig
{
    float                                         CurrentSpeedResidueHorizontal;                                // 0x0000(0x0004)
    float                                         CurrentSpeedResidueHorizontalMax;                             // 0x0004(0x0004)
    float                                         HorizontalDashTime;                                           // 0x0008(0x0004)
    float                                         HorizontalDashDistance;                                       // 0x000C(0x0004)
    float                                         HorizontalDashAngle;                                          // 0x0010(0x0004)
    float                                         HorizontalDashEndSpeed;                                       // 0x0014(0x0004)
    float                                         HorizontalDashBreakableTime;                                  // 0x0018(0x0004)
    float                                         HorizontalDashCameraFadeOutTime;                              // 0x001C(0x0004)
    float                                         UnderWaterHorizontalDashTime;                                 // 0x0020(0x0004)
    float                                         UnderWaterHorizontalDashDistance;                             // 0x0024(0x0004)
    float                                         UnderWaterHorizontalDashBreakableTime;                        // 0x0028(0x0004)
    float                                         UnderWaterHorizontalDashCameraFadeOutTime;                    // 0x002C(0x0004)
};


// ScriptStruct  Solarland.JetPackVerticalConfig
// Struct Size::0x0044
struct FJetPackVerticalConfig
{
    float                                         CurrentSpeedResidueVertical;                                  // 0x0000(0x0004)
    float                                         CurrentSpeedResidueVerticalMax;                               // 0x0004(0x0004)
    float                                         AltitudeLimitation;                                           // 0x0008(0x0004)
    float                                         DashHeightForLimitedAltitude;                                 // 0x000C(0x0004)
    float                                         SlantDashInputThreshold;                                      // 0x0010(0x0004)
    float                                         VerticalDashTime;                                             // 0x0014(0x0004)
    float                                         VerticalDashHeight;                                           // 0x0018(0x0004)
    float                                         VerticalDashAngle;                                            // 0x001C(0x0004)
    float                                         VerticalDashMaxHorizontalEndSpeed;                            // 0x0020(0x0004)
    float                                         VerticalDashBreakableTime;                                    // 0x0024(0x0004)
    float                                         VerticalDashCameraFadeOutTime;                                // 0x0028(0x0004)
    float                                         SlantDashTime;                                                // 0x002C(0x0004)
    float                                         SlantDashHeight;                                              // 0x0030(0x0004)
    float                                         SlantDashAngle;                                               // 0x0034(0x0004)
    float                                         SlantDashMaxHorizontalEndSpeed;                               // 0x0038(0x0004)
    float                                         SlantDashBreakableTime;                                       // 0x003C(0x0004)
    float                                         SlantDashCameraFadeOutTime;                                   // 0x0040(0x0004)
};


// ScriptStruct  Solarland.JobManagerConfig
// Struct Size::0x0008
struct FJobManagerConfig
{
    UDataTable*                                   JobTable;                                                     // 0x0000(0x0008)
};


// ScriptStruct  Solarland.KeyMapDisplayRowInfo
// Struct Size::0x0018
struct FKeyMapDisplayRowInfo : public FTableRowBase
{
    FString                                       DisplayName;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Solarland.KeyMappingJsonData
// Struct Size::0x0010
struct FKeyMappingJsonData
{
    TArray<FKeyMappingRowInfo>                    JsonData;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Solarland.KeyMappingRowInfo
// Struct Size::0x0098
struct FKeyMappingRowInfo : public FTableRowBase
{
    FString                                       Label;                                                        // 0x0008(0x0010)
    FString                                       ActionDisplayName;                                            // 0x0018(0x0010)
    FString                                       ActionName;                                                   // 0x0028(0x0010)
    bool                                          Continuity;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    float                                         Scale;                                                        // 0x003C(0x0004)
    FString                                       RealAction;                                                   // 0x0040(0x0010)
    TArray<FString>                               FirstDefaultKeys;                                             // 0x0050(0x0010)
    TArray<FString>                               SecondDefaultKeys;                                            // 0x0060(0x0010)
    FString                                       Description;                                                  // 0x0070(0x0010)
    TArray<FString>                               RelatedActions;                                               // 0x0080(0x0010)
    bool                                          Stationary;                                                   // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
};


// ScriptStruct  Solarland.KillInfoMessage
// Struct Size::0x0050
struct FKillInfoMessage
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Solarland.KillEffectExtraInfo
// Struct Size::0x000C
struct FKillEffectExtraInfo
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Solarland.TeamKillExtraInfo
// Struct Size::0x0010
struct FTeamKillExtraInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.KillExtraInfo
// Struct Size::0x0010
struct FKillExtraInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.EShopDisplayData
// Struct Size::0x0058
struct FEShopDisplayData
{
    int32_t                                       ItemID;                                                       // 0x0000(0x0004)
    float                                         Price;                                                        // 0x0004(0x0004)
    float                                         UndiscountedPrice;                                            // 0x0008(0x0004)
    int32_t                                       Num;                                                          // 0x000C(0x0004)
    int32_t                                       ProductID;                                                    // 0x0010(0x0004)
    float                                         CoolDown;                                                     // 0x0014(0x0004)
    int32_t                                       Generation;                                                   // 0x0018(0x0004)
    bool                                          bIsRecommend;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FString                                       Name;                                                         // 0x0020(0x0010)
    FString                                       Icon;                                                         // 0x0030(0x0010)
    FString                                       Info;                                                         // 0x0040(0x0010)
    int32_t                                       Quality;                                                      // 0x0050(0x0004)
    int32_t                                       ItemType;                                                     // 0x0054(0x0004)
};


// ScriptStruct  Solarland.ULoadingDataEntry
// Struct Size::0x00B8
struct FULoadingDataEntry
{
    FSoftObjectPath                               LoadingBg;                                                    // 0x0000(0x0018)
    TArray<int32_t>                               TipIntArray;                                                  // 0x0018(0x0010)
    TArray<FWrappedLocalTextID>                   TipLocalTitleArray;                                           // 0x0028(0x0010)
    TArray<FWrappedLocalTextID>                   TipLocalLeftArray;                                            // 0x0038(0x0010)
    TArray<FWrappedLocalTextID>                   TipLocalMidArray;                                             // 0x0048(0x0010)
    TArray<FWrappedLocalTextID>                   TipLocalRightArray;                                           // 0x0058(0x0010)
    TArray<FString>                               TipArray;                                                     // 0x0068(0x0010)
    TArray<FString>                               TipTitleArray;                                                // 0x0078(0x0010)
    TArray<FString>                               TipLeftArray;                                                 // 0x0088(0x0010)
    TArray<FString>                               TipMidArray;                                                  // 0x0098(0x0010)
    TArray<FString>                               TipRightArray;                                                // 0x00A8(0x0010)
};


// ScriptStruct  Solarland.MapObjectNoticeConfig
// Struct Size::0x0008
struct FMapObjectNoticeConfig
{
    int32_t                                       NoticeID;                                                     // 0x0000(0x0004)
    enum class EPassiveTriggeredVoice             VoiceID;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Solarland.MapObjectBaseData
// Struct Size::0x0008
struct FMapObjectBaseData
{
    enum class EMapObjectSpawnStyle               SpawnStyle;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       OpenNum;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Solarland.KongMingLanternMapObjectData
// Struct Size::0x0008
struct FKongMingLanternMapObjectData : public FMapObjectBaseData
{
};


// ScriptStruct  Solarland.ShieldShopMapObjectData
// Struct Size::0x0010
struct FShieldShopMapObjectData : public FMapObjectBaseData
{
    int32_t                                       ShieldXPNum;                                                  // 0x0008(0x0004)
    int32_t                                       ExpBehaviorID;                                                // 0x000C(0x0004)
};


// ScriptStruct  Solarland.MassInvStateTransitionData
// Struct Size::0x0090
struct FMassInvStateTransitionData
{
    float                                         TransitionTime;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FRuntimeFloatCurve                            TransitionCurve;                                              // 0x0008(0x0088)
};


// ScriptStruct  Solarland.MassInvStateMaterialParams
// Struct Size::0x0078
struct FMassInvStateMaterialParams
{
    FMassInvMaterialParams                        PrepareParams;                                                // 0x0000(0x0028)
    FMassInvMaterialParams                        NormalParams;                                                 // 0x0028(0x0028)
    FMassInvMaterialParams                        SprintParams;                                                 // 0x0050(0x0028)
};


// ScriptStruct  Solarland.MassInvMaterialParams
// Struct Size::0x0028
struct FMassInvMaterialParams
{
    float                                         PatternResolution;                                            // 0x0000(0x0004)
    float                                         Detail;                                                       // 0x0004(0x0004)
    float                                         MaskBlend;                                                    // 0x0008(0x0004)
    float                                         Opacity;                                                      // 0x000C(0x0004)
    float                                         StealthAdjust;                                                // 0x0010(0x0004)
    float                                         Tilling;                                                      // 0x0014(0x0004)
    FLinearColor                                  BaseColor;                                                    // 0x0018(0x0010)
};


// ScriptStruct  Solarland.MatchResult
// Struct Size::0x0080
struct FMatchResult
{
    FString                                       BattleID;                                                     // 0x0000(0x0010)
    FString                                       BattleAddr;                                                   // 0x0010(0x0010)
    FString                                       Token;                                                        // 0x0020(0x0010)
    int32_t                                       ModeID;                                                       // 0x0030(0x0004)
    int32_t                                       ruleID;                                                       // 0x0034(0x0004)
    FString                                       SelfPlayerID;                                                 // 0x0038(0x0010)
    TArray<FMatchResult_Group>                    Groups;                                                       // 0x0048(0x0010)
    FString                                       MapName;                                                      // 0x0058(0x0010)
    FSoftObjectPath                               MapPath;                                                      // 0x0068(0x0018)
};


// ScriptStruct  Solarland.MatchResult_Group
// Struct Size::0x0018
struct FMatchResult_Group
{
    int32_t                                       groupid;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMatchResult_Player>                   Players;                                                      // 0x0008(0x0010)
};


// ScriptStruct  Solarland.MatchResult_Player
// Struct Size::0x0058
struct FMatchResult_Player
{
    FString                                       PlayerId;                                                     // 0x0000(0x0010)
    FString                                       playerName;                                                   // 0x0010(0x0010)
    int32_t                                       AvatarID;                                                     // 0x0020(0x0004)
    int32_t                                       fightCharacterID;                                             // 0x0024(0x0004)
    int32_t                                       fightCharacterSkinID;                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FSoftObjectPath                               SkinConfigPath;                                               // 0x0030(0x0018)
    FString                                       CharacterName;                                                // 0x0048(0x0010)
};


// ScriptStruct  Solarland.MaterialVariableChange
// Struct Size::0x0018
struct FMaterialVariableChange
{
    FName                                         Variable;                                                     // 0x0000(0x0008)
    float                                         FromValue;                                                    // 0x0008(0x0004)
    float                                         ToValue;                                                      // 0x000C(0x0004)
    float                                         BeginProgress;                                                // 0x0010(0x0004)
    float                                         EndProgress;                                                  // 0x0014(0x0004)
};


// ScriptStruct  Solarland.TitanVehicleWidgetInfoContainer
// Struct Size::0x0120
struct FTitanVehicleWidgetInfoContainer : public FFastArraySerializer
{
    TArray<FTitanVehicleWidgetInfo>               TitanVehicleWidgetInfos;                                      // 0x0108(0x0010)
    UMechaBossGameStateComp*                      BossGameStateComp;                                            // 0x0118(0x0008)
};


// ScriptStruct  Solarland.TitanVehicleWidgetInfo
// Struct Size::0x0028
struct FTitanVehicleWidgetInfo : public FFastArraySerializerItem
{
    FVector                                       TitanVehicleLocation;                                         // 0x000C(0x000C)
    int32_t                                       HealthPrecentInt;                                             // 0x0018(0x0004)
    int32_t                                       RemainedLives;                                                // 0x001C(0x0004)
    int32_t                                       DriverTeamID;                                                 // 0x0020(0x0004)
    int32_t                                       TitanVehicleSpawnId;                                          // 0x0024(0x0004)
};


// ScriptStruct  Solarland.MapMarkElemArray
// Struct Size::0x0010
struct FMapMarkElemArray
{
    TArray<FMapMarkElem>                          MapMarkElems;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Solarland.MapMarkElem
// Struct Size::0x0010
struct FMapMarkElem
{
    UMapMarkBase*                                 MapMark;                                                      // 0x0000(0x0008)
    bool                                          bUsing;                                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Solarland.MiniMapData
// Struct Size::0x0018
struct FMiniMapData
{
    bool                                          bUseAsBigMap;                                                 // 0x0000(0x0001)
    bool                                          bOverride;                                                    // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         MinFOV;                                                       // 0x0004(0x0004)
    float                                         MaxFOV;                                                       // 0x0008(0x0004)
    float                                         CurrentFOV;                                                   // 0x000C(0x0004)
    FVector2D                                     MapSize;                                                      // 0x0010(0x0008)
};


// ScriptStruct  Solarland.MissileBulletConfig
// Struct Size::0x0020
struct FMissileBulletConfig
{
    FVector                                       EjectDir;                                                     // 0x0000(0x000C)
    float                                         EjectDelayTime;                                               // 0x000C(0x0004)
    TArray<int32_t>                               TrailSpreadIndexArray;                                        // 0x0010(0x0010)
};


// ScriptStruct  Solarland.MissileBullet
// Struct Size::0x0068
struct FMissileBullet
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
    UParticleSystemComponent*                     BulletEffect;                                                 // 0x0040(0x0008)
    UParticleSystemComponent*                     RibbonTrajectoryEffect;                                       // 0x0048(0x0008)
    AMissileSwarmLauncher*                        Launcher;                                                     // 0x0050(0x0008)
    char                                          pa_0058[0x0010]                                               // 0x0058(0x0010)
};


// ScriptStruct  Solarland.MissileBulletSpawnParameter
// Struct Size::0x0048
struct FMissileBulletSpawnParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    FVector                                       EjectLoc;                                                     // 0x0004(0x000C)
    FVector                                       EjectDir;                                                     // 0x0010(0x000C)
    FVector                                       TargetLoc;                                                    // 0x001C(0x000C)
    float                                         EjectTimeStamp;                                               // 0x0028(0x0004)
    float                                         EjectDelayTime;                                               // 0x002C(0x0004)
    TArray<int32_t>                               TrailSpreadIndexArray;                                        // 0x0030(0x0010)
    int32_t                                       SwarmIndex;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.MobileFrameRateItem
// Struct Size::0x000C
struct FMobileFrameRateItem
{
    enum class ESolarFrameRateLevel               FrameRateLevel;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FrameRateLobby;                                               // 0x0004(0x0004)
    float                                         FrameRateInGame;                                              // 0x0008(0x0004)
};


// ScriptStruct  Solarland.NeutralMonsterSpawnedDataContainer
// Struct Size::0x0120
struct FNeutralMonsterSpawnedDataContainer : public FFastArraySerializer
{
    ANeutralMonsterSpawnerSets*                   Owner;                                                        // 0x0108(0x0008)
    TArray<FNeutralMonsterSpawnedData>            NeutralMonsterSpawnDatas;                                     // 0x0110(0x0010)
};


// ScriptStruct  Solarland.NeutralMonsterSpawnedData
// Struct Size::0x001C
struct FNeutralMonsterSpawnedData : public FFastArraySerializerItem
{
    int32_t                                       SpawnerKey;                                                   // 0x000C(0x0004)
    FVector_NetQuantize                           SpawnedLocation;                                              // 0x0010(0x000C)
};


// ScriptStruct  Solarland.NeutralMonsterSpawnerData
// Struct Size::0x0070
struct FNeutralMonsterSpawnerData
{
    int32_t                                       SpawnID;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    bool                                          HasSpawned;                                                   // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         GuardAreaRadius;                                              // 0x0044(0x0004)
    float                                         ThreatAreaRadius;                                             // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<FVector>                               PatrolLocations;                                              // 0x0050(0x0010)
    UShapeComponent*                              GuardArea;                                                    // 0x0060(0x0008)
    UShapeComponent*                              ThreatArea;                                                   // 0x0068(0x0008)
};


// ScriptStruct  Solarland.DetailedTeamListViewInfo
// Struct Size::0x0040
struct FDetailedTeamListViewInfo
{
    int32_t                                       TeamID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       TeamName;                                                     // 0x0008(0x0010)
    int32_t                                       Rank;                                                         // 0x0018(0x0004)
    int32_t                                       Point;                                                        // 0x001C(0x0004)
    uint32_t                                      PreliminaryRank;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FDetailedListViewInfo>                 PlayerDetailInfos;                                            // 0x0028(0x0010)
    bool                                          bIsTournament;                                                // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Solarland.DetailedListViewInfo
// Struct Size::0x0040
struct FDetailedListViewInfo
{
    bool                                          bIsUsingStructInfo;                                           // 0x0000(0x0001)
    bool                                          bIsCheater;                                                   // 0x0001(0x0001)
    bool                                          bIsMVP;                                                       // 0x0002(0x0001)
    char                                          pa_0003[0x0005]                                               // 0x0003(0x0005)
    FString                                       playerName;                                                   // 0x0008(0x0010)
    int32_t                                       KillNum;                                                      // 0x0018(0x0004)
    int32_t                                       AssistNum;                                                    // 0x001C(0x0004)
    float                                         CauseDamage;                                                  // 0x0020(0x0004)
    float                                         ReceivedDamage;                                               // 0x0024(0x0004)
    float                                         HealSelf;                                                     // 0x0028(0x0004)
    float                                         ReceivedHeal;                                                 // 0x002C(0x0004)
    float                                         LifeTime;                                                     // 0x0030(0x0004)
    float                                         MvpScore;                                                     // 0x0034(0x0004)
    int32_t                                       FlagID;                                                       // 0x0038(0x0004)
    enum class ECommonInputType                   InputType;                                                    // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Solarland.ConfigMeshData
// Struct Size::0x018C
struct FConfigMeshData
{
    bool                                          bTeamVisible;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       TeamID;                                                       // 0x0004(0x0004)
    FVector2D                                     TenOffset;                                                    // 0x0008(0x0008)
    FVector2D                                     OneOffset;                                                    // 0x0010(0x0008)
    FLinearColor                                  MainColor;                                                    // 0x0018(0x0010)
    FLinearColor                                  ViceColor;                                                    // 0x0028(0x0010)
    bool                                          bShieldVisible;                                               // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    FProgressMeshData                             Shield;                                                       // 0x003C(0x001C)
    FProgressMeshData                             ShieldDamage;                                                 // 0x0058(0x001C)
    FProgressMeshData                             ShieldBG;                                                     // 0x0074(0x001C)
    bool                                          bHPVisible;                                                   // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    FProgressMeshData                             HP;                                                           // 0x0094(0x001C)
    FProgressMeshData                             HPDamage;                                                     // 0x00B0(0x001C)
    FProgressMeshData                             HPBG;                                                         // 0x00CC(0x001C)
    FMidProgressData                              MidShield;                                                    // 0x00E8(0x003C)
    FMidProgressData                              MidHP;                                                        // 0x0124(0x003C)
    FProgressMeshData                             MidBG;                                                        // 0x0160(0x001C)
    FVector2D                                     ScreenOffset;                                                 // 0x017C(0x0008)
    char                                          pa_0184[0x0008]                                               // 0x0184(0x0008)
};


// ScriptStruct  Solarland.ProgressMeshData
// Struct Size::0x001C
struct FProgressMeshData
{
    float                                         Progress;                                                     // 0x0000(0x0004)
    FLinearColor                                  Color;                                                        // 0x0004(0x0010)
    FVector2D                                     Offset;                                                       // 0x0014(0x0008)
};


// ScriptStruct  Solarland.MidProgressData
// Struct Size::0x003C
struct FMidProgressData
{
    bool                                          bVisible;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FProgressMeshData                             Data;                                                         // 0x0004(0x001C)
    FProgressMeshData                             BGData;                                                       // 0x0020(0x001C)
};


// ScriptStruct  Solarland.ReplayPlayerOverviewData
// Struct Size::0x0060
struct FReplayPlayerOverviewData
{
    FString                                       playerName;                                                   // 0x0000(0x0010)
    FString                                       HeroName;                                                     // 0x0010(0x0010)
    TSoftObjectPtr<UTexture2D>                    SkinResourcePtr;                                              // 0x0020(0x0028)
    int32_t                                       PlayerNum;                                                    // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       GameModeName;                                                 // 0x0050(0x0010)
};


// ScriptStruct  Solarland.TeamPlayerNavArray
// Struct Size::0x0010
struct FTeamPlayerNavArray
{
    TArray<UOBPlayerNavWidget*>                   NavArray;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Solarland.CupViewInfo
// Struct Size::0x0028
struct FCupViewInfo
{
    FString                                       TournamentName;                                               // 0x0000(0x0010)
    FString                                       TournamentIcon;                                               // 0x0010(0x0010)
    int32_t                                       GameModeID;                                                   // 0x0020(0x0004)
    int32_t                                       ruleID;                                                       // 0x0024(0x0004)
};


// ScriptStruct  Solarland.OpponentPerspectiveMaterialParamsConditional
// Struct Size::0x0270
struct FOpponentPerspectiveMaterialParamsConditional
{
    FGameplayTagRequirements                      OpponentTagRequirements;                                      // 0x0000(0x0050)
    FOpponentPerspectiveMaterialParams            MaterialParams;                                               // 0x0050(0x0220)
};


// ScriptStruct  Solarland.OpponentPerspectiveMaterialParams
// Struct Size::0x0220
struct FOpponentPerspectiveMaterialParams
{
    FRuntimeFloatCurve                            OpacityCurve;                                                 // 0x0000(0x0088)
    FRuntimeFloatCurve                            OutlineSizeCurve;                                             // 0x0088(0x0088)
    FRuntimeFloatCurve                            OpacityScaleByFOVCurve;                                       // 0x0110(0x0088)
    FRuntimeFloatCurve                            OutlineSizeScaleByFOVCurve;                                   // 0x0198(0x0088)
};


// ScriptStruct  Solarland.SummonOwlAbilityConfig
// Struct Size::0x00D0
struct FSummonOwlAbilityConfig
{
    ASolarSummonOwl*                              SummonOwlClass;                                               // 0x0000(0x0008)
    FGameplayTag                                  SuperSkillTag;                                                // 0x0008(0x0008)
    FVector                                       SummonOwlLocationOffset;                                      // 0x0010(0x000C)
    FName                                         SummonOwlOffsetSocket;                                        // 0x001C(0x0008)
    float                                         OwlHealth;                                                    // 0x0024(0x0004)
    float                                         OwlLifeTime;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    UCurveFloat*                                  OwlSpeedCurveMoveToPoint;                                     // 0x0030(0x0008)
    float                                         OwlMaxHoverHeight;                                            // 0x0038(0x0004)
    float                                         OwlActiveWaitTime;                                            // 0x003C(0x0004)
    bool                                          bOwlMassInvisibility;                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         OwlMassInvisibilityWaitTime;                                  // 0x0044(0x0004)
    float                                         OwlFindEnemyRadius;                                           // 0x0048(0x0004)
    float                                         OwlEnhancedFindEnemyRadius;                                   // 0x004C(0x0004)
    UCurveFloat*                                  OwlSpeedCurveTrackEnemy;                                      // 0x0050(0x0008)
    float                                         OwlSpeedCurveTrackEnemyZoomRate;                              // 0x0058(0x0004)
    float                                         OwlTrackMaxTime;                                              // 0x005C(0x0004)
    float                                         OwlTrackApproachDistance;                                     // 0x0060(0x0004)
    FRotator                                      OwlRotationRate;                                              // 0x0064(0x000C)
    float                                         ExplodePrepareTime;                                           // 0x0070(0x0004)
    float                                         ExplodeRadius;                                                // 0x0074(0x0004)
    float                                         EnhancedExplodeRadius;                                        // 0x0078(0x0004)
    float                                         ExplodeDamage;                                                // 0x007C(0x0004)
    ASolarOnceRadarAssignTarget*                  PerspectiveRadarClass;                                        // 0x0080(0x0008)
    float                                         PerspectiveDuration;                                          // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    TArray<UGameplayEffect*>                      EffectToExplodeHitEnemy;                                      // 0x0090(0x0010)
    UGameplayEffect*                              EffectSpeedIncrease;                                          // 0x00A0(0x0008)
    FGameplayTag                                  EffectSpeedIncreaseValueSetTag;                               // 0x00A8(0x0008)
    float                                         EffectSpeedIncreaseValue;                                     // 0x00B0(0x0004)
    float                                         SpeedIncreaseRangeAngle;                                      // 0x00B4(0x0004)
    float                                         SpeedIncreaseEffectDuration;                                  // 0x00B8(0x0004)
    float                                         SpeedIncreaseMinDuration;                                     // 0x00BC(0x0004)
    FName                                         ExplodeHitSound1P;                                            // 0x00C0(0x0008)
    FName                                         ExplodeBeHitSound1P;                                          // 0x00C8(0x0008)
};


// ScriptStruct  Solarland.PassiveSkillLevelDescription
// Struct Size::0x0020
struct FPassiveSkillLevelDescription
{
    FWrappedLocalTextID                           InnerDescriptionLocalTextID;                                  // 0x0000(0x0004)
    FWrappedLocalTextID                           ShortDescriptionLocalTextID;                                  // 0x0004(0x0004)
    FSoftObjectPath                               InnerIconPath;                                                // 0x0008(0x0018)
};


// ScriptStruct  Solarland.SolarGameModeInfo
// Struct Size::0x0028
struct FSolarGameModeInfo
{
    int32_t                                       GameModeID;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       MapName;                                                      // 0x0008(0x0010)
    int32_t                                       NumMode;                                                      // 0x0018(0x0004)
    int32_t                                       PlayerCount;                                                  // 0x001C(0x0004)
    int32_t                                       TeamCount;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.StrongholdItemCountValue
// Struct Size::0x0010
struct FStrongholdItemCountValue
{
    TArray<FSimpleItemTypeData>                   ItemCountValue;                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SimpleItemTypeData
// Struct Size::0x0008
struct FSimpleItemTypeData
{
    int32_t                                       ItemType;                                                     // 0x0000(0x0004)
    int32_t                                       count;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.EventBpRewardData
// Struct Size::0x0020
struct FEventBpRewardData
{
    int32_t                                       BattlePassID;                                                 // 0x0000(0x0004)
    int32_t                                       BattlePassExp;                                                // 0x0004(0x0004)
    int32_t                                       BattlePassAddExp;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FEventBpRewardTaskChangeData>          BattlePassTasks;                                              // 0x0010(0x0010)
};


// ScriptStruct  Solarland.EventBpRewardTaskChangeData
// Struct Size::0x0018
struct FEventBpRewardTaskChangeData
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    int32_t                                       Add;                                                          // 0x0004(0x0004)
    int32_t                                       val;                                                          // 0x0008(0x0004)
    int32_t                                       week;                                                         // 0x000C(0x0004)
    int64_t                                       InstID;                                                       // 0x0010(0x0008)
};


// ScriptStruct  Solarland.PlayerVirtualBullet
// Struct Size::0x0148
struct FPlayerVirtualBullet
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UPlayerVirtualBulletCollector*                Collector;                                                    // 0x0008(0x0008)
    UParticleSystemComponent*                     BulletEffect;                                                 // 0x0010(0x0008)
    UParticleSystemComponent*                     TrajectoryEffect;                                             // 0x0018(0x0008)
    UParticleSystemComponent*                     TrajectoryBeamEffect;                                         // 0x0020(0x0008)
    UPlayerVirtualBulletAKComponent*              AkComponent;                                                  // 0x0028(0x0008)
    char                                          pa_0030[0x0100]                                               // 0x0030(0x0100)
    UAmmoConfig*                                  AmmoConfig;                                                   // 0x0130(0x0008)
    char                                          pa_0138[0x0010]                                               // 0x0138(0x0010)
};


// ScriptStruct  Solarland.PlayerVirtualBulletHitParameter
// Struct Size::0x0070
struct FPlayerVirtualBulletHitParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    float                                         HitTimeStamp;                                                 // 0x0008(0x0004)
    FVector_NetQuantize                           PlayerViewDir;                                                // 0x000C(0x000C)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0018(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x0024(0x000C)
    TArray<FSolarWeaponHitAntiData>               HitAntiDatas;                                                 // 0x0030(0x0010)
    TArray<FHitResult>                            Hits;                                                         // 0x0040(0x0010)
    TArray<AActor*>                               IgnoreHitedActors;                                            // 0x0050(0x0010)
    char                                          pa_0060[0x0010]                                               // 0x0060(0x0010)
};


// ScriptStruct  Solarland.SolarWeaponHitAntiData
// Struct Size::0x0024
struct FSolarWeaponHitAntiData
{
    FVector_NetQuantize                           RelavantHitLocationWithCharacter;                             // 0x0000(0x000C)
    FVector_NetQuantize                           HitBoneScale;                                                 // 0x000C(0x000C)
    FVector_NetQuantize                           HitLoc;                                                       // 0x0018(0x000C)
};


// ScriptStruct  Solarland.PlayerVirtualBulletSpawnParameterSimulationArray
// Struct Size::0x0128
struct FPlayerVirtualBulletSpawnParameterSimulationArray : public FFastArraySerializer
{
    TArray<FPlayerirtualBulletSpawnParameterSimulation>ParameterArray;                                          // 0x0108(0x0010)
    char                                          pa_0118[0x0010]                                               // 0x0118(0x0010)
};


// ScriptStruct  Solarland.PlayerirtualBulletSpawnParameterSimulation
// Struct Size::0x004C
struct FPlayerirtualBulletSpawnParameterSimulation : public FFastArraySerializerItem
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x000C(0x0004)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0010(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x001C(0x000C)
    FVector_NetQuantizeNormal                     Dir;                                                          // 0x0028(0x000C)
    float                                         CurveOffsetAngle;                                             // 0x0034(0x0004)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0038(0x0008)
    FVector_NetQuantize                           HitTargetRelativeLocation;                                    // 0x0040(0x000C)
};


// ScriptStruct  Solarland.PlayerVirtualBulletSpawnParameter
// Struct Size::0x0090
struct FPlayerVirtualBulletSpawnParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    float                                         InitalElapsedTime;                                            // 0x0008(0x0004)
    FVector                                       PlayerViewDir;                                                // 0x000C(0x000C)
    FVector_NetQuantize                           PlayerViewLoc;                                                // 0x0018(0x000C)
    char                                          IsScopeOpen;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector_NetQuantize                           CharacterLoc;                                                 // 0x0028(0x000C)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0034(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x0040(0x000C)
    FVector_NetQuantizeNormal                     Dir;                                                          // 0x004C(0x000C)
    FVector_NetQuantize                           MuzzleFxLoc;                                                  // 0x0058(0x000C)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FString                                       AntiData;                                                     // 0x0068(0x0010)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0078(0x0008)
    FVector_NetQuantize                           HitTargetRelativeLocation;                                    // 0x0080(0x000C)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  Solarland.BackpackAnimInfo
// Struct Size::0x000C
struct FBackpackAnimInfo
{
    int32_t                                       StartFrame;                                                   // 0x0000(0x0004)
    int32_t                                       EndFrame;                                                     // 0x0004(0x0004)
    float                                         Length;                                                       // 0x0008(0x0004)
};


// ScriptStruct  Solarland.SwitchEffectInfo
// Struct Size::0x0018
struct FSwitchEffectInfo
{
    UMeshComponent*                               MeshComp;                                                     // 0x0000(0x0008)
    TArray<UMaterialInstanceDynamic*>             EffectMat;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Solarland.RestrictCharacterEffectContainer
// Struct Size::0x0120
struct FRestrictCharacterEffectContainer : public FFastArraySerializer
{
    TArray<FRestrictCharacterEffect>              EffectDatas;                                                  // 0x0108(0x0010)
    ARestrictSnare*                               OwnerRestrictSnare;                                           // 0x0118(0x0008)
};


// ScriptStruct  Solarland.RestrictCharacterEffect
// Struct Size::0x0028
struct FRestrictCharacterEffect : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ASolarCharacter*                              RestrictCharacter;                                            // 0x0010(0x0008)
    TWeakObjectPtr<UParticleSystemComponent>      BeamParicle;                                                  // 0x0018(0x0008)
    TWeakObjectPtr<UWorldMark_HeroSkillDistance>  DistanceWorldMark;                                            // 0x0020(0x0008)
};


// ScriptStruct  Solarland.RestrictSnareVFX
// Struct Size::0x0060
struct FRestrictSnareVFX
{
    TSoftObjectPtr<UParticleSystem>               Particle;                                                     // 0x0000(0x0028)
    FName                                         AttachedSocket;                                               // 0x0028(0x0008)
    FTransform                                    OffsetTransform;                                              // 0x0030(0x0030)
};


// ScriptStruct  Solarland.RookieGuidanceTableRow
// Struct Size::0x00C0
struct FRookieGuidanceTableRow : public FTableRowBase
{
    char                                          groupid;                                                      // 0x0008(0x0001)
    char                                          Tag;                                                          // 0x0009(0x0001)
    bool                                          IfBindedWidget;                                               // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
    FString                                       TriggerCondition;                                             // 0x0010(0x0010)
    float                                         TriggerDelayTime;                                             // 0x0020(0x0004)
    char                                          TriggerStage;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FString                                       GuideBPName;                                                  // 0x0028(0x0010)
    FVector2D                                     GuideBPLocation;                                              // 0x0038(0x0008)
    int32_t                                       GuideBPScale;                                                 // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    FString                                       RelatedUI;                                                    // 0x0048(0x0010)
    FVector2D                                     RelatedUILocation;                                            // 0x0058(0x0008)
    int32_t                                       RelatedUIScale;                                               // 0x0060(0x0004)
    int32_t                                       LocTextID;                                                    // 0x0064(0x0004)
    FVector2D                                     LocTextLocation;                                              // 0x0068(0x0008)
    float                                         LocTextDuration;                                              // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       EndCondition;                                                 // 0x0078(0x0010)
    float                                         EndDelayTime;                                                 // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FString                                       InterruptCondition;                                           // 0x0090(0x0010)
    char                                          SingleRoundTriggerMax;                                        // 0x00A0(0x0001)
    char                                          TotalTriggerMax;                                              // 0x00A1(0x0001)
    char                                          pa_00A2[0x0006]                                               // 0x00A2(0x0006)
    FString                                       FinishCondition;                                              // 0x00A8(0x0010)
    bool                                          IfUpload;                                                     // 0x00B8(0x0001)
    bool                                          IfMandatory;                                                  // 0x00B9(0x0001)
    char                                          pa_00BA[0x0006]                                               // 0x00BA(0x0006)
};


// ScriptStruct  Solarland.BuildingData
// Struct Size::0x0020
struct FBuildingData
{
    FString                                       BuildingLocation;                                             // 0x0000(0x0010)
    FString                                       BuildingIconName;                                             // 0x0010(0x0010)
};


// ScriptStruct  Solarland.ChargingZone
// Struct Size::0x0020
struct FChargingZone
{
    float                                         Level1;                                                       // 0x0000(0x0004)
    float                                         Level2;                                                       // 0x0004(0x0004)
    float                                         Level3;                                                       // 0x0008(0x0004)
    float                                         Level4;                                                       // 0x000C(0x0004)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SeparatedPackageInfo
// Struct Size::0x0028
struct FSeparatedPackageInfo
{
    int32_t                                       SeparetedPkgID;                                               // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               ChunksInPkg;                                                  // 0x0008(0x0010)
    TArray<int32_t>                               DependentPkgID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Solarland.StretchTestMode
// Struct Size::0x0018
struct FStretchTestMode
{
    int32_t                                       StretchTestTurnAngle;                                         // 0x0000(0x0004)
    int32_t                                       StretchTestAngle;                                             // 0x0004(0x0004)
    int32_t                                       StretchTestColorFactor;                                       // 0x0008(0x0004)
    int32_t                                       StretchTestLengthFactor;                                      // 0x000C(0x0004)
    char                                          StretchTestIconIdx;                                           // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         StretchTestAlpha;                                             // 0x0014(0x0004)
};


// ScriptStruct  Solarland.ShootingTargetRing
// Struct Size::0x001C
struct FShootingTargetRing
{
    float                                         Radius;                                                       // 0x0000(0x0004)
    float                                         Score;                                                        // 0x0004(0x0004)
    FLinearColor                                  ColorHUD;                                                     // 0x0008(0x0010)
    FColor                                        Color3D;                                                      // 0x0018(0x0004)
};


// ScriptStruct  Solarland.SolarWeaponFireSocketData
// Struct Size::0x0060
struct FSolarWeaponFireSocketData
{
    TArray<FName>                                 MultiBulletSocketNames;                                       // 0x0000(0x0010)
    TArray<FName>                                 MuzzleSocketNames;                                            // 0x0010(0x0010)
    TArray<FName>                                 AdsMuzzleSocketNames;                                         // 0x0020(0x0010)
    TArray<FName>                                 MuzzleBlockCheckSocketNames;                                  // 0x0030(0x0010)
    TArray<FName>                                 MultiCastShellSocketNames;                                    // 0x0040(0x0010)
    TArray<FName>                                 AdsMultiCastShellSocketNames;                                 // 0x0050(0x0010)
};


// ScriptStruct  Solarland.SolarWeaponFireInputRespondConfig
// Struct Size::0x000C
struct FSolarWeaponFireInputRespondConfig
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
    bool                                          bAutoCloseScope;                                              // 0x0002(0x0001)
    bool                                          bShootAtPress;                                                // 0x0003(0x0001)
    bool                                          bShootAtPressAutoScope;                                       // 0x0004(0x0001)
    bool                                          bCanAutoShootWhilePress;                                      // 0x0005(0x0001)
    bool                                          bCanAutoShootWhilePressAutoScope;                             // 0x0006(0x0001)
    bool                                          bCanShootWhileScoping;                                        // 0x0007(0x0001)
    bool                                          bCanShootWhileScopingAutoScope;                               // 0x0008(0x0001)
    bool                                          bCanManuallyCanceled;                                         // 0x0009(0x0001)
    bool                                          bCanManuallyCanceledAutoScope;                                // 0x000A(0x0001)
    bool                                          bOpenScopeWhileAutoFire;                                      // 0x000B(0x0001)
};


// ScriptStruct  Solarland.SolarWeaponCrosshairData
// Struct Size::0x0040
struct FSolarWeaponCrosshairData
{
    char                                          HasReload;                                                    // 0x0000(0x0001)
    char                                          HasForbid;                                                    // 0x0001(0x0001)
    char                                          HasOverload;                                                  // 0x0002(0x0001)
    char                                          HasChargeProgress;                                            // 0x0003(0x0001)
    char                                          HasFeedback;                                                  // 0x0004(0x0001)
    enum class EWeaponType                        WeaponType;                                                   // 0x0005(0x0001)
    bool                                          bIsEnergyType;                                                // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
    UUserWidget*                                  CrossHairWidget;                                              // 0x0008(0x0008)
    UUserWidget*                                  BulletContainerWidget;                                        // 0x0010(0x0008)
    UUserWidget*                                  WeaponRechamberWidget;                                        // 0x0018(0x0008)
    FSolarNoAmmoAlertWidgetLayout                 AmmoAlertWidgetLayout;                                        // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Solarland.SolarNoAmmoAlertWidgetLayout
// Struct Size::0x0018
struct FSolarNoAmmoAlertWidgetLayout
{
    bool                                          bOverrideLayout;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     Offset;                                                       // 0x0004(0x0008)
    float                                         SpinAngle;                                                    // 0x000C(0x0004)
    FVector2D                                     Scale;                                                        // 0x0010(0x0008)
};


// ScriptStruct  Solarland.DamageBuffState
// Struct Size::0x0018
struct FDamageBuffState
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.HealthBuffState
// Struct Size::0x0034
struct FHealthBuffState
{
    char                                          pa_0000[0x0034]                                               // 0x0000(0x0034)
};


// ScriptStruct  Solarland.SkillUIData
// Struct Size::0x0030
struct FSkillUIData
{
    enum class EUIPanelName                       RootPanelName;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftClassPtr<UObject>                        LoadWidget;                                                   // 0x0008(0x0028)
};


// ScriptStruct  Solarland.SkillBPAndExtraConfigContainer
// Struct Size::0x0010
struct FSkillBPAndExtraConfigContainer
{
    TArray<USkillBPAndExtraConfig*>               SkillBPAndExtraConfigs;                                       // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SkillLevelBoolMap
// Struct Size::0x0050
struct FSkillLevelBoolMap
{
    TMap<int32_t,bool>                            LevelValueMap;                                                // 0x0000(0x0050)
};


// ScriptStruct  Solarland.SkillLevelFloatMap
// Struct Size::0x0050
struct FSkillLevelFloatMap
{
    TMap<int32_t,float>                           LevelValueMap;                                                // 0x0000(0x0050)
};


// ScriptStruct  Solarland.RoleAbilityContext
// Struct Size::0x0008
struct FRoleAbilityContext
{
    int32_t                                       SkillID;                                                      // 0x0000(0x0004)
    int32_t                                       SkillSpecID;                                                  // 0x0004(0x0004)
};


// ScriptStruct  Solarland.WarningWidgetInfo
// Struct Size::0x000C
struct FWarningWidgetInfo
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Solarland.ProjectileMovementData
// Struct Size::0x0008
struct FProjectileMovementData
{
    float                                         SimTime;                                                      // 0x0000(0x0004)
    float                                         Gravity;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SkillProjectileParticle
// Struct Size::0x0060
struct FSkillProjectileParticle
{
    TSoftObjectPtr<UParticleSystem>               Particle;                                                     // 0x0000(0x0028)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    OffsetTransform;                                              // 0x0030(0x0030)
};


// ScriptStruct  Solarland.LaunchDeviceInfo
// Struct Size::0x0020
struct FLaunchDeviceInfo
{
    bool                                          bIsUsing;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         LaunchPadLocSocketName;                                       // 0x0004(0x0008)
    FName                                         PrepareEffectLocSocketName;                                   // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UParticleSystemComponent*                     AvailableDeviceEffect;                                        // 0x0018(0x0008)
};


// ScriptStruct  Solarland.SlideDecelerationAdjustment
// Struct Size::0x0058
struct FSlideDecelerationAdjustment
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0000(0x0050)
    float                                         DecelerationBonus;                                            // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Solarland.GameplayEffectDurationMonitorInfo
// Struct Size::0x0048
struct FGameplayEffectDurationMonitorInfo
{
    FGameplayAttribute                            EffectDurationAttribute;                                      // 0x0000(0x0038)
    UGameplayEffect*                              EffectDefinition;                                             // 0x0038(0x0008)
    enum class EActiveEffectDurationChangeProxy   ChangePolicy;                                                 // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
};


// ScriptStruct  Solarland.GameplayAbilityChargeInfo
// Struct Size::0x0050
struct FGameplayAbilityChargeInfo
{
    FGameplayAttribute                            ChargeCountAttribute;                                         // 0x0000(0x0038)
    UGameplayEffect*                              ChargeCountCostEffect;                                        // 0x0038(0x0008)
    FGameplayTag                                  CompleteChargeOnceEventTag;                                   // 0x0040(0x0008)
    bool                                          bCompleteChargeOnceEventOnlyMatchExact;                       // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Solarland.GameplayAbilityRepAnimMontageForMesh
// Struct Size::0x0040
struct FGameplayAbilityRepAnimMontageForMesh
{
    USkeletalMeshComponent*                       Mesh;                                                         // 0x0000(0x0008)
    FGameplayAbilityRepAnimMontage                RepMontageInfo;                                               // 0x0008(0x0038)
};


// ScriptStruct  Solarland.GameplayAbilityLocalAnimMontageForMesh
// Struct Size::0x0038
struct FGameplayAbilityLocalAnimMontageForMesh
{
    USkeletalMeshComponent*                       Mesh;                                                         // 0x0000(0x0008)
    FGameplayAbilityLocalAnimMontage              LocalMontageInfo;                                             // 0x0008(0x0030)
};


// ScriptStruct  Solarland.AchievementResult
// Struct Size::0x000C
struct FAchievementResult
{
    int32_t                                       AchievementID;                                                // 0x0000(0x0004)
    int32_t                                       ProgressValue;                                                // 0x0004(0x0004)
    bool                                          IsUnlock;                                                     // 0x0008(0x0001)
    enum class EAchievementReportType             AchievementReportType;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Solarland.AchievementContext
// Struct Size::0x0028
struct FAchievementContext
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FString                                       TargetValueName;                                              // 0x0008(0x0010)
    FString                                       HandleFunctionName;                                           // 0x0018(0x0010)
};


// ScriptStruct  Solarland.AchievementHandle
// Struct Size::0x0040
struct FAchievementHandle : public FTableRowBase
{
    enum class EAchievementCondition              ConditionType;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       TargetValueName;                                              // 0x0010(0x0010)
    FString                                       HandleFunctionName;                                           // 0x0020(0x0010)
    FString                                       Desc;                                                         // 0x0030(0x0010)
};


// ScriptStruct  Solarland.AdvProgressChannelInfo
// Struct Size::0x0010
struct FAdvProgressChannelInfo
{
    enum class EProgressBoardChannelState         State;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Percent;                                                      // 0x0004(0x0004)
    float                                         TargetPercent;                                                // 0x0008(0x0004)
    float                                         Speed;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Solarland.PlaygroundEffect
// Struct Size::0x0028
struct FPlaygroundEffect
{
    FSoftObjectPath                               ParticlePath;                                                 // 0x0000(0x0018)
    float                                         SpawnDelay;                                                   // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UParticleSystemComponent*                     Handle;                                                       // 0x0020(0x0008)
};


// ScriptStruct  Solarland.AirdropParas
// Struct Size::0x0030
struct FAirdropParas
{
    ASolarTreasureBoxSpawner*                     SolarTreasureBoxSpawnerClass;                                 // 0x0000(0x0008)
    int32_t                                       OutcomeID;                                                    // 0x0008(0x0004)
    int32_t                                       ChestID;                                                      // 0x000C(0x0004)
    int32_t                                       ChestSpawnID;                                                 // 0x0010(0x0004)
    FVector                                       Scale;                                                        // 0x0014(0x000C)
    TArray<FTransform>                            SpawnTransArray;                                              // 0x0020(0x0010)
};


// ScriptStruct  Solarland.RouteInfo
// Struct Size::0x0034
struct FRouteInfo
{
    FVector                                       RouteStart;                                                   // 0x0000(0x000C)
    FVector                                       RouteEnd;                                                     // 0x000C(0x000C)
    float                                         RouteLength;                                                  // 0x0018(0x0004)
    FVector                                       RouteDirection;                                               // 0x001C(0x000C)
    FVector                                       AirdropLocation;                                              // 0x0028(0x000C)
};


// ScriptStruct  Solarland.AirshipConfig
// Struct Size::0x0030
struct FAirshipConfig
{
    float                                         MoveSpeed;                                                    // 0x0000(0x0004)
    float                                         MoveSpeedAfterAirdrop;                                        // 0x0004(0x0004)
    float                                         RouteHeight;                                                  // 0x0008(0x0004)
    float                                         RouteMinLength;                                               // 0x000C(0x0004)
    float                                         StartDistToAirdropMinLength;                                  // 0x0010(0x0004)
    float                                         FurthestDistAfterAirdrop;                                     // 0x0014(0x0004)
    float                                         DecelerateDistance;                                           // 0x0018(0x0004)
    float                                         AccelerateDistance;                                           // 0x001C(0x0004)
    float                                         HoveringDurance;                                              // 0x0020(0x0004)
    float                                         BestDegreeRange;                                              // 0x0024(0x0004)
    UCurveFloat*                                  FogDensityCurve;                                              // 0x0028(0x0008)
};


// ScriptStruct  Solarland.AIQueryTeammateEvent
// Struct Size::0x0030
struct FAIQueryTeammateEvent
{
    UAIPerceptionComponent*                       QueryingTeammate;                                             // 0x0000(0x0008)
    UAIPerceptionComponent*                       TeammateBeingQueried;                                         // 0x0008(0x0008)
    AActor*                                       Target;                                                       // 0x0010(0x0008)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  Solarland.RadarDetectConfig
// Struct Size::0x0018
struct FRadarDetectConfig
{
    AActor*                                       DetectActorType;                                              // 0x0000(0x0008)
    float                                         DetectRadius;                                                 // 0x0008(0x0004)
    float                                         LossRadius;                                                   // 0x000C(0x0004)
    float                                         ScanInterval;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarAITagStateTransition
// Struct Size::0x0020
struct FSolarAITagStateTransition
{
    FGameplayTag                                  FromStateTag;                                                 // 0x0000(0x0008)
    FGameplayTag                                  ToStateTag;                                                   // 0x0008(0x0008)
    TArray<USolarAICondition*>                    TransConditions;                                              // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SolarNavMoveConfig
// Struct Size::0x0028
struct FSolarNavMoveConfig
{
    float                                         AcceptableRadius;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UNavigationQueryFilter*                       FilterClass;                                                  // 0x0008(0x0008)
    char                                          bAllowStrafe;                                                 // 0x0010(0x0001)
    char                                          bAllowPartialPath;                                            // 0x0010(0x0001)
    char                                          bTrackMovingGoal;                                             // 0x0010(0x0001)
    char                                          bProjectGoalLocation;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector                                       ProjectExtent;                                                // 0x0014(0x000C)
    char                                          bReachTestIncludesAgentRadius;                                // 0x0020(0x0001)
    char                                          bReachTestIncludesGoalRadius;                                 // 0x0020(0x0001)
    char                                          bUsePathfinding;                                              // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Solarland.SolarAIValueCompare
// Struct Size::0x000C
struct FSolarAIValueCompare
{
    enum class ESolarAIValueCompareOp             Operator;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ComparedValue;                                                // 0x0004(0x0004)
    float                                         EqualThreshold;                                               // 0x0008(0x0004)
};


// ScriptStruct  Solarland.SolarExtraAudioBankWithGameState
// Struct Size::0x0030
struct FSolarExtraAudioBankWithGameState : public FTableRowBase
{
    FSoftClassPath                                GameStateClassPath;                                           // 0x0008(0x0018)
    TArray<FName>                                 BankNameArray;                                                // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarAudioDetail
// Struct Size::0x0028
struct FSolarAudioDetail : public FTableRowBase
{
    FName                                         BankName;                                                     // 0x0008(0x0008)
    FName                                         BindScene;                                                    // 0x0010(0x0008)
    enum class ESolarAudioDetailLoadMode          LoadStrategy;                                                 // 0x0018(0x0001)
    enum class ESolarAudioDetailUnloadMode        UnloadStrategy;                                               // 0x0019(0x0001)
    enum class ESolarAudioDetailCatalog           ResCatalog;                                                   // 0x001A(0x0001)
    enum class ELowMemBankLoadStrategy            LowMemLoadStrategy;                                           // 0x001B(0x0001)
    int32_t                                       OnDemandAutoUnloadTime;                                       // 0x001C(0x0004)
    int32_t                                       OwnerCharacterID;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.StateParam
// Struct Size::0x0020
struct FStateParam
{
    FString                                       StateGroupName;                                               // 0x0000(0x0010)
    FString                                       StateName;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Solarland.AnimBlendPointInfo
// Struct Size::0x0030
struct FAnimBlendPointInfo
{
    FVector2D                                     GridLocation;                                                 // 0x0000(0x0008)
    TArray<enum class EAnimBlendDirection>        AnimBlendArray;                                               // 0x0008(0x0010)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  Solarland.JetPackPoseSpeedRange
// Struct Size::0x0008
struct FJetPackPoseSpeedRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Solarland.LeftHandGripConfig
// Struct Size::0x0084
struct FLeftHandGripConfig
{
    FRotator                                      HandL;                                                        // 0x0000(0x000C)
    FRotator                                      Thumbl01;                                                     // 0x000C(0x000C)
    FRotator                                      Thumbl02;                                                     // 0x0018(0x000C)
    FRotator                                      Index01;                                                      // 0x0024(0x000C)
    FRotator                                      Index02;                                                      // 0x0030(0x000C)
    FRotator                                      Middle01;                                                     // 0x003C(0x000C)
    FRotator                                      Middle02;                                                     // 0x0048(0x000C)
    FRotator                                      Ring01;                                                       // 0x0054(0x000C)
    FRotator                                      Ring02;                                                       // 0x0060(0x000C)
    FRotator                                      Pinky01;                                                      // 0x006C(0x000C)
    FRotator                                      Pinky02;                                                      // 0x0078(0x000C)
};


// ScriptStruct  Solarland.MeerkatConfig
// Struct Size::0x0014
struct FMeerkatConfig
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    float                                         Min;                                                          // 0x0004(0x0004)
    float                                         Max;                                                          // 0x0008(0x0004)
    int32_t                                       Tolerance;                                                    // 0x000C(0x0004)
    int32_t                                       ProbeInterval;                                                // 0x0010(0x0004)
};


// ScriptStruct  Solarland.PreloadBundle
// Struct Size::0x0010
struct FPreloadBundle
{
    FName                                         FolderPath;                                                   // 0x0000(0x0008)
    FName                                         ClassName;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Solarland.AutoFireBoxExtent
// Struct Size::0x000C
struct FAutoFireBoxExtent
{
    float                                         Width;                                                        // 0x0000(0x0004)
    float                                         Height;                                                       // 0x0004(0x0004)
    float                                         Depth;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Solarland.AutoNavLinkSetting
// Struct Size::0x003C
struct FAutoNavLinkSetting
{
    float                                         TraceLength;                                                  // 0x0000(0x0004)
    float                                         MaxHeight;                                                    // 0x0004(0x0004)
    float                                         MinDistSquard;                                                // 0x0008(0x0004)
    float                                         TestAgentHalfHeight;                                          // 0x000C(0x0004)
    float                                         TestAgentRadius;                                              // 0x0010(0x0004)
    float                                         AgentPassSphereRadius;                                        // 0x0014(0x0004)
    float                                         MinPassWidth;                                                 // 0x0018(0x0004)
    float                                         MaxStepHeight;                                                // 0x001C(0x0004)
    FVector                                       FinalSnapExtent;                                              // 0x0020(0x000C)
    float                                         ProjectNavigationError;                                       // 0x002C(0x0004)
    float                                         VaultDetectDistance;                                          // 0x0030(0x0004)
    float                                         VaultDetectDeltaDistance;                                     // 0x0034(0x0004)
    float                                         VerticalError;                                                // 0x0038(0x0004)
};


// ScriptStruct  Solarland.BackpackTrailAssemblingParams
// Struct Size::0x00A8
struct FBackpackTrailAssemblingParams : public FTableRowBase
{
    TSoftObjectPtr<UParticleSystem>               TrailParticle;                                                // 0x0008(0x0028)
    TSoftObjectPtr<UParticleSystem>               WallRunTrailParticle;                                         // 0x0030(0x0028)
    TSoftObjectPtr<UParticleSystem>               OffgasParticle;                                               // 0x0058(0x0028)
    TSoftObjectPtr<UParticleSystem>               WallRunOffgasParticle;                                        // 0x0080(0x0028)
};


// ScriptStruct  Solarland.BackpackFXDataDTRow
// Struct Size::0x0058
struct FBackpackFXDataDTRow : public FTableRowBase
{
    TMap<FName,FSoftObjectPath>                   FXPathMap;                                                    // 0x0008(0x0050)
};


// ScriptStruct  Solarland.BotResponseSetting
// Struct Size::0x0014
struct FBotResponseSetting
{
    float                                         PersonalCD;                                                   // 0x0000(0x0004)
    float                                         TeamCD;                                                       // 0x0004(0x0004)
    float                                         MinTimeDelay;                                                 // 0x0008(0x0004)
    float                                         MaxTimeDelay;                                                 // 0x000C(0x0004)
    float                                         TriggeredProbability;                                         // 0x0010(0x0004)
};


// ScriptStruct  Solarland.BotEmojiSetting
// Struct Size::0x0088
struct FBotEmojiSetting
{
    TMap<int32_t,float>                           EmojiPool;                                                    // 0x0000(0x0050)
    FGameplayTagContainer                         TagsRequested;                                                // 0x0050(0x0020)
    float                                         PersonalCD;                                                   // 0x0070(0x0004)
    float                                         TeamCD;                                                       // 0x0074(0x0004)
    float                                         MinTimeDelay;                                                 // 0x0078(0x0004)
    float                                         MaxTimeDelay;                                                 // 0x007C(0x0004)
    float                                         TriggeredProbability;                                         // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  Solarland.SolarBotTeamInfo
// Struct Size::0x00D0
struct FSolarBotTeamInfo
{
    bool                                          bIsActive;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       TeamID;                                                       // 0x0004(0x0004)
    FVector                                       TeamPosition;                                                 // 0x0008(0x000C)
    float                                         SeparateDistance;                                             // 0x0014(0x0004)
    float                                         ReturnDistance;                                               // 0x0018(0x0004)
    bool                                          bPlayerNeedPraise;                                            // 0x001C(0x0001)
    bool                                          bHasInitByTeamConfig;                                         // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    TArray<FSolarBotMemberInfo>                   MemberInfos;                                                  // 0x0020(0x0010)
    TMap<enum class EBotInteractCondition,float>  TeamEmojiTimeStamp;                                           // 0x0030(0x0050)
    TMap<enum class EBotInteractCondition,float>  TeamResponseTimeStamp;                                        // 0x0080(0x0050)
};


// ScriptStruct  Solarland.SolarBotMemberInfo
// Struct Size::0x00B0
struct FSolarBotMemberInfo
{
    TWeakObjectPtr<ASolarBotAIController>         BotController;                                                // 0x0000(0x0008)
    enum class ESolarBotMemberState               MemberState;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TMap<enum class EBotInteractCondition,float>  MemberEmojiTimeStamp;                                         // 0x0010(0x0050)
    TMap<enum class EBotInteractCondition,float>  MemberResponseTimeStamp;                                      // 0x0060(0x0050)
};


// ScriptStruct  Solarland.SolarPlayerParamSet
// Struct Size::0x003C
struct FSolarPlayerParamSet
{
    float                                         HistoryHitRate;                                               // 0x0000(0x0004)
    float                                         HistoryKillNum;                                               // 0x0004(0x0004)
    float                                         HistoryKillBotNum;                                            // 0x0008(0x0004)
    float                                         HistoryKillPlayerNum;                                         // 0x000C(0x0004)
    float                                         HistoryDyingCount;                                            // 0x0010(0x0004)
    float                                         HistoryCauseDamage;                                           // 0x0014(0x0004)
    float                                         HistoryReceivedDamage;                                        // 0x0018(0x0004)
    float                                         CurrentTime;                                                  // 0x001C(0x0004)
    float                                         HitRate;                                                      // 0x0020(0x0004)
    int32_t                                       KillNum;                                                      // 0x0024(0x0004)
    int32_t                                       KillBotNum;                                                   // 0x0028(0x0004)
    int32_t                                       KillPlayerNum;                                                // 0x002C(0x0004)
    int32_t                                       DyingCount;                                                   // 0x0030(0x0004)
    float                                         CauseDamage;                                                  // 0x0034(0x0004)
    float                                         ReceivedDamage;                                               // 0x0038(0x0004)
};


// ScriptStruct  Solarland.SolarFuncBotSpawnParam
// Struct Size::0x0050
struct FSolarFuncBotSpawnParam
{
    ASolarFuncBotController*                      CtrlSubClass;                                                 // 0x0000(0x0008)
    ASolarCharacter*                              CharacterSubClass;                                            // 0x0008(0x0008)
    int32_t                                       CharacterId;                                                  // 0x0010(0x0004)
    int32_t                                       SkinId;                                                       // 0x0014(0x0004)
    USolarBotAIConfig*                            ConfigPreset;                                                 // 0x0018(0x0008)
    FTransform                                    SpawnTrans;                                                   // 0x0020(0x0030)
};


// ScriptStruct  Solarland.BotFocusInfo
// Struct Size::0x0018
struct FBotFocusInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.FeedBotStrategyInfo
// Struct Size::0x0018
struct FFeedBotStrategyInfo
{
    FString                                       PlayerId;                                                     // 0x0000(0x0010)
    float                                         FeedPriority;                                                 // 0x0010(0x0004)
    float                                         Difficulty;                                                   // 0x0014(0x0004)
};


// ScriptStruct  Solarland.PopTask
// Struct Size::0x0060
struct FPopTask
{
    TArray<ASolarPlayerState*>                    WarmBots;                                                     // 0x0000(0x0010)
    UEnvQuery*                                    SeparateLocEQS;                                               // 0x0010(0x0008)
    enum class EEnvQueryRunMode                   SeparateLocEQSRunMode;                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FPopParameter                                 PreSetting;                                                   // 0x0020(0x0040)
};


// ScriptStruct  Solarland.PopParameter
// Struct Size::0x0040
struct FPopParameter
{
    TArray<ASolarPlayerState*>                    WarmTargets;                                                  // 0x0000(0x0010)
    FVector                                       PopLocation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FTraceRecord>                          TargetTraces;                                                 // 0x0020(0x0010)
    UEnvQuery*                                    TeleportLocEQS;                                               // 0x0030(0x0008)
    enum class EEnvQueryRunMode                   TeleportLocEQSRunMode;                                        // 0x0038(0x0001)
    bool                                          bPopVehicle;                                                  // 0x0039(0x0001)
    bool                                          bForcePop;                                                    // 0x003A(0x0001)
    char                                          pa_003B[0x0005]                                               // 0x003B(0x0005)
};


// ScriptStruct  Solarland.TraceRecord
// Struct Size::0x0010
struct FTraceRecord
{
    TArray<FVector>                               TargetTrace;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarWeaponPartBonusDropSetting
// Struct Size::0x0050
struct FSolarWeaponPartBonusDropSetting
{
    TMap<enum class EWeaponPartType,float>        PriorityMap;                                                  // 0x0000(0x0050)
};


// ScriptStruct  Solarland.SolarItemProgressionBaseline
// Struct Size::0x00C0
struct FSolarItemProgressionBaseline : public FTableRowBase
{
    float                                         KeyTime;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TMap<enum class ESpecialItemID,FRangeInteger> ConsumeableItemCountSetting;                                  // 0x0010(0x0050)
    FRangeInteger                                 PlayerLevel;                                                  // 0x0060(0x0008)
    FRangeInteger                                 ShieldLevel;                                                  // 0x0068(0x0008)
    TMap<int32_t,FRangeInteger>                   WeaponPartsLevel;                                             // 0x0070(0x0050)
};


// ScriptStruct  Solarland.RangeInteger
// Struct Size::0x0008
struct FRangeInteger
{
    int32_t                                       Min;                                                          // 0x0000(0x0004)
    int32_t                                       Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarBotTimelineGameSetting
// Struct Size::0x0088
struct FSolarBotTimelineGameSetting : public FTableRowBase
{
    enum class ESolarBotWarmSystemType            WarmSystemType;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       MaxiumTeam;                                                   // 0x000C(0x0004)
    FString                                       Comment;                                                      // 0x0010(0x0010)
    UDataTable*                                   Action;                                                       // 0x0020(0x0008)
    UDataTable*                                   Item;                                                         // 0x0028(0x0008)
    UDataTable*                                   Downsize;                                                     // 0x0030(0x0008)
    TMap<UDataTable*,float>                       ItemProgressionWeightMap;                                     // 0x0038(0x0050)
};


// ScriptStruct  Solarland.SolarBotTimelineDownsizingTrigger
// Struct Size::0x0018
struct FSolarBotTimelineDownsizingTrigger : public FTableRowBase
{
    int32_t                                       StartTime;                                                    // 0x0008(0x0004)
    int32_t                                       EndTime;                                                      // 0x000C(0x0004)
    int32_t                                       Min;                                                          // 0x0010(0x0004)
    int32_t                                       Max;                                                          // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarBotTimelineUpdateItemTrigger
// Struct Size::0x0100
struct FSolarBotTimelineUpdateItemTrigger : public FTableRowBase
{
    int32_t                                       StartTime;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSolarBotTimelineAIItemSetting                AIItemSetting;                                                // 0x0010(0x00F0)
};


// ScriptStruct  Solarland.SolarBotTimelineAIItemSetting
// Struct Size::0x00F0
struct FSolarBotTimelineAIItemSetting
{
    TMap<enum class ESolarBotTimelineEquipmentSettingType,FSolarBotTimelineEquipmentArray>Equipment;            // 0x0000(0x0050)
    TMap<int32_t,FIntPoint>                       Consumable;                                                   // 0x0050(0x0050)
    TMap<enum class ESolarBotTimelineWeaponPartType,FSolarBotTimelineEquipmentArray>WeaponPart;                 // 0x00A0(0x0050)
};


// ScriptStruct  Solarland.SolarBotTimelineEquipmentArray
// Struct Size::0x0050
struct FSolarBotTimelineEquipmentArray
{
    TMap<int32_t,int32_t>                         IDArray;                                                      // 0x0000(0x0050)
};


// ScriptStruct  Solarland.SolarBotTimelineTrigger
// Struct Size::0x0050
struct FSolarBotTimelineTrigger : public FTableRowBase
{
    enum class ESolarBotTimelineTriggerType       TriggerType;                                                  // 0x0008(0x0001)
    char                                          instanceID;                                                   // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         AbsoluteTriggerTime;                                          // 0x000C(0x0004)
    float                                         RelativeTriggerTime;                                          // 0x0010(0x0004)
    int32_t                                       MinNumSurvivalBots;                                           // 0x0014(0x0004)
    float                                         ForceStartTime;                                               // 0x0018(0x0004)
    float                                         ForceEndTime;                                                 // 0x001C(0x0004)
    FSolarBotTimelineFilter                       Filter;                                                       // 0x0020(0x0010)
    int32_t                                       MaxNumRetry;                                                  // 0x0030(0x0004)
    float                                         IntervalRetry;                                                // 0x0034(0x0004)
    TArray<FSolarBotTimelineWave>                 Waves;                                                        // 0x0038(0x0010)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  Solarland.SolarBotTimelineWave
// Struct Size::0x0018
struct FSolarBotTimelineWave
{
    TArray<FSolarBotTimelineAIGroupSetting>       AIGroupSetting;                                               // 0x0000(0x0010)
    enum class EPopLocationType                   PopLocationType;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       Timeout;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarBotTimelineAIGroupSetting
// Struct Size::0x0018
struct FSolarBotTimelineAIGroupSetting
{
    TArray<FSolarBotAISetting>                    Group;                                                        // 0x0000(0x0010)
    bool                                          bGetBestChoice;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Solarland.SolarBotAISetting
// Struct Size::0x0170
struct FSolarBotAISetting
{
    USolarBotAIConfig*                            BotConfigPreset;                                              // 0x0000(0x0008)
    FSolarBotTimelineVehicleSetting               VehicleInfo;                                                  // 0x0008(0x0018)
    int32_t                                       CharacterId;                                                  // 0x0020(0x0004)
    int32_t                                       SkinId;                                                       // 0x0024(0x0004)
    TMap<enum class ESolarBotTimelineAIDataSettingType,FIntPoint>AIDataSetting;                                 // 0x0028(0x0050)
    FSolarBotTimelineAIItemSetting                AIItemSetting;                                                // 0x0078(0x00F0)
    bool                                          bSetWarmTarget;                                               // 0x0168(0x0001)
    char                                          pa_0169[0x0007]                                               // 0x0169(0x0007)
};


// ScriptStruct  Solarland.SolarBotTimelineVehicleSetting
// Struct Size::0x0018
struct FSolarBotTimelineVehicleSetting
{
    bool                                          bHasVehicle;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int32_t>                               VehicleIDs;                                                   // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SolarBotTimelineFilter
// Struct Size::0x0010
struct FSolarBotTimelineFilter
{
    TArray<FSolarBotTimelineFilterGroup>          FilterGroup;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarBotTimelineFilterGroup
// Struct Size::0x0010
struct FSolarBotTimelineFilterGroup
{
    TArray<FSolarBotTimelineFilterItem>           FilterItem;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarBotTimelineFilterItem
// Struct Size::0x0058
struct FSolarBotTimelineFilterItem
{
    enum class ESolarBotTimelineFilterType        Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TMap<enum class ESolarBotTimelineFilterParameterType,FString>Parameter;                                     // 0x0008(0x0050)
};


// ScriptStruct  Solarland.SolarBotWavePopSetting
// Struct Size::0x0002
struct FSolarBotWavePopSetting
{
    enum class EPopLocationType                   PopLocationType;                                              // 0x0000(0x0001)
    bool                                          bUsingWarmTargetForward;                                      // 0x0001(0x0001)
};


// ScriptStruct  Solarland.SolarBotTimelineTeleCenterSetting
// Struct Size::0x0014
struct FSolarBotTimelineTeleCenterSetting
{
    bool                                          SetTeleCenter;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FIntPoint                                     TeleportRadius;                                               // 0x0004(0x0008)
    FIntPoint                                     TeleportAngle;                                                // 0x000C(0x0008)
};


// ScriptStruct  Solarland.SolarBotUseSniperPosConfig
// Struct Size::0x001C
struct FSolarBotUseSniperPosConfig
{
    int32_t                                       MinNumSpawnerHasSearched;                                     // 0x0000(0x0004)
    float                                         MinElapsedReachedZone;                                        // 0x0004(0x0004)
    float                                         MinEnemyDistance;                                             // 0x0008(0x0004)
    int32_t                                       MinNumBeHitAbandonPos;                                        // 0x000C(0x0004)
    int32_t                                       MaxDurationOccupyPos;                                         // 0x0010(0x0004)
    float                                         MaxDurationReachedPos;                                        // 0x0014(0x0004)
    float                                         IntervalUseNextPos;                                           // 0x0018(0x0004)
};


// ScriptStruct  Solarland.SolarBotBattleConfig
// Struct Size::0x0158
struct FSolarBotBattleConfig
{
    FBotFireConfig                                DefaultFireConfig;                                            // 0x0000(0x0010)
    FBotFireConfig                                FireConfigToBot;                                              // 0x0010(0x0010)
    TMap<enum class EWeaponType,FBotFireConfig>   WeaponFireConfigs;                                            // 0x0020(0x0050)
    TMap<enum class EWeaponType,FBotFireConfig>   WeaponFireConfigsToBot;                                       // 0x0070(0x0050)
    FBotFireConfig                                VehicleFireConfig;                                            // 0x00C0(0x0010)
    FBotFireConfig                                VehicleFireConfigToBot;                                       // 0x00D0(0x0010)
    bool                                          bPreventFatalDamageToPlayer;                                  // 0x00E0(0x0001)
    char                                          pa_00E1[0x0003]                                               // 0x00E1(0x0003)
    float                                         DamageFactorToVehicle;                                        // 0x00E4(0x0004)
    float                                         DamageFactorToBotVehicle;                                     // 0x00E8(0x0004)
    float                                         DamageFactorToSummonItem;                                     // 0x00EC(0x0004)
    float                                         DamageFactorToBotSummonItem;                                  // 0x00F0(0x0004)
    float                                         BotAIAttackRange;                                             // 0x00F4(0x0004)
    float                                         BotAIAttackRangeUnArm;                                        // 0x00F8(0x0004)
    bool                                          bEnableShootSimulator;                                        // 0x00FC(0x0001)
    char                                          pa_00FD[0x0003]                                               // 0x00FD(0x0003)
    FSolarBotShootConfig                          DefaultShootConfig;                                           // 0x0100(0x0058)
};


// ScriptStruct  Solarland.SolarBotShootConfig
// Struct Size::0x0058
struct FSolarBotShootConfig
{
    enum class EBotFirePolicy                     FirePolicy;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FollowInterpSpeed;                                            // 0x0004(0x0004)
    float                                         AntiHorizRecoilStrenghth;                                     // 0x0008(0x0004)
    float                                         AntiVertRecoilStrenghth;                                      // 0x000C(0x0004)
    float                                         LockHeightOffset;                                             // 0x0010(0x0004)
    float                                         AimInterpSpeed;                                               // 0x0014(0x0004)
    float                                         MaxFollowDeltaAngle;                                          // 0x0018(0x0004)
    float                                         MaxPreciseMoveAngle;                                          // 0x001C(0x0004)
    float                                         RoughMoveMaxAngle;                                            // 0x0020(0x0004)
    float                                         FollowMoveSpeed;                                              // 0x0024(0x0004)
    float                                         PreciseMoveSpeed;                                             // 0x0028(0x0004)
    float                                         RoughMoveSpeed;                                               // 0x002C(0x0004)
    float                                         LockMoveSpeed;                                                // 0x0030(0x0004)
    float                                         PreciseMoveDeviationYaw;                                      // 0x0034(0x0004)
    float                                         PreciseMoveDeviationPitch;                                    // 0x0038(0x0004)
    float                                         RoughMoveDeviationYaw;                                        // 0x003C(0x0004)
    float                                         RoughMoveDeviationPitch;                                      // 0x0040(0x0004)
    float                                         LockMoveMaxDeltaYaw;                                          // 0x0044(0x0004)
    float                                         LockMoveMaxDeltaPitch;                                        // 0x0048(0x0004)
    float                                         RoughMoveReactionTime;                                        // 0x004C(0x0004)
    float                                         PreciseMoveReactionTime;                                      // 0x0050(0x0004)
    float                                         MaxFollowUnreachTime;                                         // 0x0054(0x0004)
};


// ScriptStruct  Solarland.BotFireConfig
// Struct Size::0x0010
struct FBotFireConfig
{
    float                                         ShootDisperse;                                                // 0x0000(0x0004)
    float                                         HitRate;                                                      // 0x0004(0x0004)
    float                                         ActiveDamageRate;                                             // 0x0008(0x0004)
    float                                         ActiveDamageFactor;                                           // 0x000C(0x0004)
};


// ScriptStruct  Solarland.SolarBotBattleConfigNew
// Struct Size::0x0100
struct FSolarBotBattleConfigNew
{
    FBotFireConfig                                DefaultFireConfig;                                            // 0x0000(0x0010)
    TArray<FBotSpecifiedFireConfig>               SpecifiedFireConfigs;                                         // 0x0010(0x0010)
    float                                         DefaultFireLockRadius;                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TMap<enum class EBotShotTargetType,FRangeFloat>ShotLockRadiusMap;                                           // 0x0028(0x0050)
    TArray<FName>                                 TargetCharacterBones;                                         // 0x0078(0x0010)
    bool                                          bPreventFatalDamageToPlayer;                                  // 0x0088(0x0001)
    char                                          pa_0089[0x0003]                                               // 0x0089(0x0003)
    float                                         HealthLeftThreshold;                                          // 0x008C(0x0004)
    float                                         WarmUpDuration;                                               // 0x0090(0x0004)
    float                                         WarmUpBaseFactor;                                             // 0x0094(0x0004)
    float                                         WarmUpMaxInflictDamage;                                       // 0x0098(0x0004)
    float                                         WarmUpEndFaceToAngleThreshold;                                // 0x009C(0x0004)
    bool                                          bEnableShootSimulator;                                        // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    FSolarBotShootConfig                          DefaultShootConfig;                                           // 0x00A4(0x0058)
    char                                          pa_00FC[0x0004]                                               // 0x00FC(0x0004)
};


// ScriptStruct  Solarland.RangeFloat
// Struct Size::0x0008
struct FRangeFloat
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Solarland.BotSpecifiedFireConfig
// Struct Size::0x0014
struct FBotSpecifiedFireConfig
{
    enum class EWeaponType                        UsedWeaponType;                                               // 0x0000(0x0001)
    enum class EBotShotTargetCtlType              TargetCtlType;                                                // 0x0001(0x0001)
    enum class EBotShotTargetType                 TargetType;                                                   // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FBotFireConfig                                FireConfig;                                                   // 0x0004(0x0010)
};


// ScriptStruct  Solarland.SolarBotLootSearchConfig
// Struct Size::0x0044
struct FSolarBotLootSearchConfig
{
    float                                         HPRatioToUseMedicine;                                         // 0x0000(0x0004)
    float                                         ShieldRatioToRecharge;                                        // 0x0004(0x0004)
    float                                         MaxSearchRangeNearbyPlayer;                                   // 0x0008(0x0004)
    float                                         MinSearchRangeNearbyPlayer;                                   // 0x000C(0x0004)
    float                                         RadiusTolerance;                                              // 0x0010(0x0004)
    FVector2D                                     NearbyEnemyOuterFactorRange;                                  // 0x0014(0x0008)
    FVector2D                                     NearbyEnemyInnerFactorRange;                                  // 0x001C(0x0008)
    FVector2D                                     NearbyEnemyCountRange;                                        // 0x0024(0x0008)
    FVector2D                                     NearbySpawnerOuterFactorRange;                                // 0x002C(0x0008)
    FVector2D                                     NearbySpawnerInnerFactorRange;                                // 0x0034(0x0008)
    FVector2D                                     NearbySpawnerCountRange;                                      // 0x003C(0x0008)
};


// ScriptStruct  Solarland.SolarBotLootWeaponFeedConfig
// Struct Size::0x0020
struct FSolarBotLootWeaponFeedConfig
{
    float                                         MaxNoWeaponTime;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               FeedWeaponIDs;                                                // 0x0008(0x0010)
    float                                         CheckPlayerSightInterval;                                     // 0x0018(0x0004)
    bool                                          bStartFeedAfterSearchedAnySpawner;                            // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Solarland.SolarBotLootValuationConfig
// Struct Size::0x0044
struct FSolarBotLootValuationConfig
{
    float                                         MoveCostFactor;                                               // 0x0000(0x0004)
    float                                         DistSelfToSpawnerFactor;                                      // 0x0004(0x0004)
    float                                         DistSpawnerOffsetFactor;                                      // 0x0008(0x0004)
    float                                         AvgDistSpawnerToTeammatesFactor;                              // 0x000C(0x0004)
    float                                         AssualtRifleBaseValue;                                        // 0x0010(0x0004)
    float                                         ShotgunBaseValue;                                             // 0x0014(0x0004)
    float                                         SubmachinegunBaseValue;                                       // 0x0018(0x0004)
    float                                         SniperBaseValue;                                              // 0x001C(0x0004)
    float                                         WeaponQualityValue;                                           // 0x0020(0x0004)
    float                                         AmmoBaseValue;                                                // 0x0024(0x0004)
    float                                         AmmoMatchFactor;                                              // 0x0028(0x0004)
    float                                         ShieldBaseValue;                                              // 0x002C(0x0004)
    float                                         ShieldQualityValue;                                           // 0x0030(0x0004)
    float                                         JetpackModuleBaseValue;                                       // 0x0034(0x0004)
    float                                         JetpackModuleQualityValue;                                    // 0x0038(0x0004)
    float                                         MedkitBaseValue;                                              // 0x003C(0x0004)
    float                                         MedkitHPRatioFactor;                                          // 0x0040(0x0004)
};


// ScriptStruct  Solarland.SolarBotThreatConfig
// Struct Size::0x0070
struct FSolarBotThreatConfig
{
    float                                         ThreatUpdateInterval;                                         // 0x0000(0x0004)
    float                                         AttackTriggerThreshold;                                       // 0x0004(0x0004)
    float                                         CancelAttackTriggerThreshold;                                 // 0x0008(0x0004)
    float                                         SwitchTargetDifferenceValue;                                  // 0x000C(0x0004)
    float                                         DistanceThreshold;                                            // 0x0010(0x0004)
    float                                         DistanceThresholdInSmoke;                                     // 0x0014(0x0004)
    float                                         SightLoseRange;                                               // 0x0018(0x0004)
    float                                         PeripheralVisionAngleDegrees;                                 // 0x001C(0x0004)
    float                                         SightIncreaseBase;                                            // 0x0020(0x0004)
    float                                         SightIncreaseDistanceFactor;                                  // 0x0024(0x0004)
    float                                         SightDecreaseBase;                                            // 0x0028(0x0004)
    float                                         SightDecreaseDistanceFactor;                                  // 0x002C(0x0004)
    float                                         SightDecreaseMax;                                             // 0x0030(0x0004)
    float                                         SightMaxValue;                                                // 0x0034(0x0004)
    float                                         HearingAddBase;                                               // 0x0038(0x0004)
    float                                         HearingAddDistanceFactor;                                     // 0x003C(0x0004)
    float                                         HearingDecreasePerTick;                                       // 0x0040(0x0004)
    float                                         HearingMaxValue;                                              // 0x0044(0x0004)
    float                                         HitSoundAlertRange;                                           // 0x0048(0x0004)
    float                                         BotThreatFactor;                                              // 0x004C(0x0004)
    float                                         PlayerThreatFactor;                                           // 0x0050(0x0004)
    float                                         DeathVergeFactor;                                             // 0x0054(0x0004)
    float                                         MassInvisibilityPrepareFactor;                                // 0x0058(0x0004)
    float                                         MaxDistanceThreatFactor;                                      // 0x005C(0x0004)
    float                                         DistanceThreatFactorDecayRate;                                // 0x0060(0x0004)
    float                                         AccompanyThreatMaxValue;                                      // 0x0064(0x0004)
    float                                         AccompanyThreatAddBase;                                       // 0x0068(0x0004)
    float                                         AccompanyDecreasePerTick;                                     // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarBotRoleSkillConfig
// Struct Size::0x0014
struct FSolarBotRoleSkillConfig
{
    FGameplayTag                                  SkillTag;                                                     // 0x0000(0x0008)
    float                                         MaxDistanceToTargetLocation;                                  // 0x0008(0x0004)
    float                                         DistanceFromTargetActor;                                      // 0x000C(0x0004)
    float                                         RandomRadius;                                                 // 0x0010(0x0004)
};


// ScriptStruct  Solarland.SolarBotSafeAreaConfig
// Struct Size::0x0008
struct FSolarBotSafeAreaConfig
{
    float                                         EstimateAdjustFactor;                                         // 0x0000(0x0004)
    float                                         SafeAreaRadiusEx;                                             // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarBotSkyDivingConfig
// Struct Size::0x0024
struct FSolarBotSkyDivingConfig
{
    float                                         DecisionAltitude;                                             // 0x0000(0x0004)
    float                                         RandomLandingRadius;                                          // 0x0004(0x0004)
    float                                         RandomDelayCancelFollow;                                      // 0x0008(0x0004)
    float                                         FollowAcceptDistance;                                         // 0x000C(0x0004)
    float                                         AbandonCheckAltitude;                                         // 0x0010(0x0004)
    float                                         CheckEnemyRange;                                              // 0x0014(0x0004)
    int32_t                                       CheckEnemyCount;                                              // 0x0018(0x0004)
    float                                         OuterRandomLandingRadius;                                     // 0x001C(0x0004)
    float                                         InnerRandomLandingRadius;                                     // 0x0020(0x0004)
};


// ScriptStruct  Solarland.BotExpSpringTask
// Struct Size::0x0018
struct FBotExpSpringTask
{
    ASolarExpSpringPointSpawner*                  TargetExpSpringPointSpawner;                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SolarBotGameTeamSetting
// Struct Size::0x0068
struct FSolarBotGameTeamSetting : public FTableRowBase
{
    TMap<USolarBotTeamConfig*,float>              TeamConfigWeightMap;                                          // 0x0008(0x0050)
    TArray<USolarBotAIConfig*>                    CandidateBotConfigs;                                          // 0x0058(0x0010)
};


// ScriptStruct  Solarland.SolarBotTeamBuildRule
// Struct Size::0x0068
struct FSolarBotTeamBuildRule
{
    FString                                       Description;                                                  // 0x0000(0x0010)
    bool                                          bIsHeroPickTypeRule;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TMap<FGameplayTag,float>                      TagWeights;                                                   // 0x0018(0x0050)
};


// ScriptStruct  Solarland.BotMapMarkDebugInfo
// Struct Size::0x0060
struct FBotMapMarkDebugInfo
{
    FString                                       BotName;                                                      // 0x0000(0x0010)
    FTransform                                    BotTransform;                                                 // 0x0010(0x0030)
    enum class EBotStateDebugType                 BotState;                                                     // 0x0040(0x0001)
    char                                          pa_0041[0x0007]                                               // 0x0041(0x0007)
    FString                                       BotID;                                                        // 0x0048(0x0010)
    int32_t                                       BotTeamID;                                                    // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.WarmBotDebugInfo
// Struct Size::0x0010
struct FWarmBotDebugInfo
{
    TArray<FActiveBotDebugInfo>                   PoppedBots;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ActiveBotDebugInfo
// Struct Size::0x0070
struct FActiveBotDebugInfo
{
    FString                                       BotName;                                                      // 0x0000(0x0010)
    bool                                          bTeleSuccess;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       BotCharacterID;                                               // 0x0014(0x0004)
    int32_t                                       BotTeamID;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       BotConfigName;                                                // 0x0020(0x0010)
    FVector                                       BotLocation;                                                  // 0x0030(0x000C)
    FVector                                       WarmTargetLocation;                                           // 0x003C(0x000C)
    float                                         DistanceToWarmTarget;                                         // 0x0048(0x0004)
    FVector                                       BotLocationOnTeleport;                                        // 0x004C(0x000C)
    FVector                                       WarmTargetLocationOnTeleport;                                 // 0x0058(0x000C)
    float                                         DistanceToWarmTargetOnTeleport;                               // 0x0064(0x0004)
    bool                                          bIsAlive;                                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  Solarland.BotTeamDebugInfo
// Struct Size::0x0018
struct FBotTeamDebugInfo
{
    int32_t                                       TeamID;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FBotMemberDebugInfo>                   MemberDebugInfos;                                             // 0x0008(0x0010)
};


// ScriptStruct  Solarland.BotMemberDebugInfo
// Struct Size::0x0028
struct FBotMemberDebugInfo
{
    FVector                                       MemberLocation;                                               // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       IDStr;                                                        // 0x0010(0x0010)
    enum class ESolarBotMemberState               MemberState;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Solarland.TimeItemsSetting
// Struct Size::0x00F8
struct FTimeItemsSetting
{
    float                                         TriggerTime;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSolarBotTimelineAIItemSetting                Items;                                                        // 0x0008(0x00F0)
};


// ScriptStruct  Solarland.WarmTargetState
// Struct Size::0x0028
struct FWarmTargetState
{
    float                                         BoringValue;                                                  // 0x0000(0x0004)
    int32_t                                       ServedTimes;                                                  // 0x0004(0x0004)
    bool                                          bNeedWarmService;                                             // 0x0008(0x0001)
    char                                          KillPlayerNum;                                                // 0x0009(0x0001)
    char                                          KillBotNum;                                                   // 0x000A(0x0001)
    char                                          pa_000B[0x0001]                                               // 0x000B(0x0001)
    float                                         LastBattleTime;                                               // 0x000C(0x0004)
    int32_t                                       CurTraceRecordIdx;                                            // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FVector>                               TraceRecords;                                                 // 0x0018(0x0010)
};


// ScriptStruct  Solarland.RangeFireParam
// Struct Size::0x0018
struct FRangeFireParam
{
    FRangeFloat                                   HitRateRange;                                                 // 0x0000(0x0008)
    FRangeFloat                                   DamageRateRange;                                              // 0x0008(0x0008)
    FRangeFloat                                   DamageFactorRange;                                            // 0x0010(0x0008)
};


// ScriptStruct  Solarland.SolarTaskScoringItem
// Struct Size::0x0050
struct FSolarTaskScoringItem
{
    TMap<enum class ESolarTaskScoringItemType,float>ScoringItemMap;                                             // 0x0000(0x0050)
};


// ScriptStruct  Solarland.SolarScoringItemStruct
// Struct Size::0x0014
struct FSolarScoringItemStruct
{
    TWeakObjectPtr<ASolarBotAIController>         BotController;                                                // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        RelativeActor;                                                // 0x0008(0x0008)
    float                                         Score;                                                        // 0x0010(0x0004)
};


// ScriptStruct  Solarland.ByteBuffer
// Struct Size::0x0028
struct FByteBuffer
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Solarland.CameraShakeInfo
// Struct Size::0x0010
struct FCameraShakeInfo
{
    FCameraShakeDuration                          Duration;                                                     // 0x0000(0x0008)
    float                                         BlendIn;                                                      // 0x0008(0x0004)
    float                                         BlendOut;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Solarland.CameraShakeDuration
// Struct Size::0x0008
struct FCameraShakeDuration
{
    float                                         Duration;                                                     // 0x0000(0x0004)
    enum class ECameraShakeDurationType           Type;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.CameraShakeStopParams
// Struct Size::0x0001
struct FCameraShakeStopParams
{
    bool                                          bImmediately;                                                 // 0x0000(0x0001)
};


// ScriptStruct  Solarland.CameraShakeUpdateResult
// Struct Size::0x0610
struct FCameraShakeUpdateResult
{
    char                                          pa_0000[0x0610]                                               // 0x0000(0x0610)
};


// ScriptStruct  Solarland.CameraShakeScrubParams
// Struct Size::0x0680
struct FCameraShakeScrubParams
{
    float                                         AbsoluteTime;                                                 // 0x0000(0x0004)
    float                                         ShakeScale;                                                   // 0x0004(0x0004)
    float                                         DynamicScale;                                                 // 0x0008(0x0004)
    float                                         BlendingWeight;                                               // 0x000C(0x0004)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x0670)
};


// ScriptStruct  Engine.MinimalViewInfo
// Struct Size::0x0670
struct FMinimalViewInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    float                                         FOV;                                                          // 0x0018(0x0004)
    float                                         DesiredFOV;                                                   // 0x001C(0x0004)
    float                                         OrthoWidth;                                                   // 0x0020(0x0004)
    float                                         OrthoNearClipPlane;                                           // 0x0024(0x0004)
    float                                         OrthoFarClipPlane;                                            // 0x0028(0x0004)
    float                                         AspectRatio;                                                  // 0x002C(0x0004)
    char                                          bConstrainAspectRatio;                                        // 0x0030(0x0001)
    char                                          bUseFieldOfViewForLOD;                                        // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    enum class ECameraProjectionMode              ProjectionMode;                                               // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    float                                         PostProcessBlendWeight;                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FPostProcessSettings                          PostProcessSettings;                                          // 0x0040(0x05E0)
    FVector2D                                     OffCenterProjectionOffset;                                    // 0x0620(0x0008)
    char                                          pa_0628[0x0048]                                               // 0x0628(0x0048)
};


// ScriptStruct  Engine.PostProcessSettings
// Struct Size::0x05E0
struct FPostProcessSettings
{
    char                                          bOverride_LDRSaturation;                                      // 0x0000(0x0001)
    char                                          bOverride_LDRContrast;                                        // 0x0000(0x0001)
    char                                          bOverride_LDRBrightness;                                      // 0x0000(0x0001)
    char                                          bOverride_NightfellOpacity;                                   // 0x0000(0x0001)
    char                                          bOverride_NightfellFadeness;                                  // 0x0000(0x0001)
    char                                          bOverride_NightfellRadius;                                    // 0x0000(0x0001)
    char                                          bOverride_NightfellSecondRadius;                              // 0x0000(0x0001)
    char                                          bOverride_NightfellLocation;                                  // 0x0000(0x0001)
    char                                          bOverride_NightfellSecondLocation;                            // 0x0001(0x0001)
    char                                          bOverride_PCBloomIntensity;                                   // 0x0001(0x0001)
    char                                          bOverride_PCBloomThreshold;                                   // 0x0001(0x0001)
    char                                          bOverride_WhiteTemp;                                          // 0x0001(0x0001)
    char                                          bOverride_WhiteTint;                                          // 0x0001(0x0001)
    char                                          bOverride_ColorSaturation;                                    // 0x0001(0x0001)
    char                                          bOverride_ColorContrast;                                      // 0x0001(0x0001)
    char                                          bOverride_ColorGamma;                                         // 0x0001(0x0001)
    char                                          bOverride_ColorGain;                                          // 0x0002(0x0001)
    char                                          bOverride_ColorOffset;                                        // 0x0002(0x0001)
    char                                          bOverride_ColorSaturationShadows;                             // 0x0002(0x0001)
    char                                          bOverride_ColorContrastShadows;                               // 0x0002(0x0001)
    char                                          bOverride_ColorGammaShadows;                                  // 0x0002(0x0001)
    char                                          bOverride_ColorGainShadows;                                   // 0x0002(0x0001)
    char                                          bOverride_ColorOffsetShadows;                                 // 0x0002(0x0001)
    char                                          bOverride_ColorSaturationMidtones;                            // 0x0002(0x0001)
    char                                          bOverride_ColorContrastMidtones;                              // 0x0003(0x0001)
    char                                          bOverride_ColorGammaMidtones;                                 // 0x0003(0x0001)
    char                                          bOverride_ColorGainMidtones;                                  // 0x0003(0x0001)
    char                                          bOverride_ColorOffsetMidtones;                                // 0x0003(0x0001)
    char                                          bOverride_ColorSaturationHighlights;                          // 0x0003(0x0001)
    char                                          bOverride_ColorContrastHighlights;                            // 0x0003(0x0001)
    char                                          bOverride_ColorGammaHighlights;                               // 0x0003(0x0001)
    char                                          bOverride_ColorGainHighlights;                                // 0x0003(0x0001)
    char                                          bOverride_ColorOffsetHighlights;                              // 0x0004(0x0001)
    char                                          bOverride_ColorCorrectionShadowsMax;                          // 0x0004(0x0001)
    char                                          bOverride_ColorCorrectionHighlightsMin;                       // 0x0004(0x0001)
    char                                          bOverride_BlueCorrection;                                     // 0x0004(0x0001)
    char                                          bOverride_ExpandGamut;                                        // 0x0004(0x0001)
    char                                          bOverride_FilmWhitePoint;                                     // 0x0004(0x0001)
    char                                          bOverride_FilmSaturation;                                     // 0x0004(0x0001)
    char                                          bOverride_FilmChannelMixerRed;                                // 0x0004(0x0001)
    char                                          bOverride_FilmChannelMixerGreen;                              // 0x0005(0x0001)
    char                                          bOverride_FilmChannelMixerBlue;                               // 0x0005(0x0001)
    char                                          bOverride_FilmContrast;                                       // 0x0005(0x0001)
    char                                          bOverride_FilmDynamicRange;                                   // 0x0005(0x0001)
    char                                          bOverride_FilmHealAmount;                                     // 0x0005(0x0001)
    char                                          bOverride_FilmToeAmount;                                      // 0x0005(0x0001)
    char                                          bOverride_FilmShadowTint;                                     // 0x0005(0x0001)
    char                                          bOverride_FilmShadowTintBlend;                                // 0x0005(0x0001)
    char                                          bOverride_FilmShadowTintAmount;                               // 0x0006(0x0001)
    char                                          bOverride_FilmSlope;                                          // 0x0006(0x0001)
    char                                          bOverride_FilmToe;                                            // 0x0006(0x0001)
    char                                          bOverride_FilmShoulder;                                       // 0x0006(0x0001)
    char                                          bOverride_FilmBlackClip;                                      // 0x0006(0x0001)
    char                                          bOverride_FilmWhiteClip;                                      // 0x0006(0x0001)
    char                                          bOverride_SceneColorTint;                                     // 0x0006(0x0001)
    char                                          bOverride_SceneFringeIntensity;                               // 0x0006(0x0001)
    char                                          bOverride_ChromaticAberrationStartOffset;                     // 0x0007(0x0001)
    char                                          bOverride_AmbientCubemapTint;                                 // 0x0007(0x0001)
    char                                          bOverride_AmbientCubemapIntensity;                            // 0x0007(0x0001)
    char                                          bOverride_BloomMethod;                                        // 0x0007(0x0001)
    char                                          bOverride_BloomIntensity;                                     // 0x0007(0x0001)
    char                                          bOverride_BloomThreshold;                                     // 0x0007(0x0001)
    char                                          bOverride_Bloom1Tint;                                         // 0x0007(0x0001)
    char                                          bOverride_Bloom1Size;                                         // 0x0007(0x0001)
    char                                          bOverride_Bloom2Size;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom2Tint;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom3Tint;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom3Size;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom4Tint;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom4Size;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom5Tint;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom5Size;                                         // 0x0008(0x0001)
    char                                          bOverride_Bloom6Tint;                                         // 0x0009(0x0001)
    char                                          bOverride_Bloom6Size;                                         // 0x0009(0x0001)
    char                                          bOverride_BloomSizeScale;                                     // 0x0009(0x0001)
    char                                          bOverride_BloomConvolutionTexture;                            // 0x0009(0x0001)
    char                                          bOverride_BloomConvolutionSize;                               // 0x0009(0x0001)
    char                                          bOverride_BloomConvolutionCenterUV;                           // 0x0009(0x0001)
    char                                          bOverride_BloomConvolutionPreFilter;                          // 0x0009(0x0001)
    char                                          bOverride_BloomConvolutionPreFilterMin;                       // 0x0009(0x0001)
    char                                          bOverride_BloomConvolutionPreFilterMax;                       // 0x000A(0x0001)
    char                                          bOverride_BloomConvolutionPreFilterMult;                      // 0x000A(0x0001)
    char                                          bOverride_BloomConvolutionBufferScale;                        // 0x000A(0x0001)
    char                                          bOverride_BloomDirtMaskIntensity;                             // 0x000A(0x0001)
    char                                          bOverride_BloomDirtMaskTint;                                  // 0x000A(0x0001)
    char                                          bOverride_BloomDirtMask;                                      // 0x000A(0x0001)
    char                                          bOverride_CameraShutterSpeed;                                 // 0x000A(0x0001)
    char                                          bOverride_CameraISO;                                          // 0x000A(0x0001)
    char                                          bOverride_AutoExposureMethod;                                 // 0x000B(0x0001)
    char                                          bOverride_AutoExposureLowPercent;                             // 0x000B(0x0001)
    char                                          bOverride_AutoExposureHighPercent;                            // 0x000B(0x0001)
    char                                          bOverride_AutoExposureMinBrightness;                          // 0x000B(0x0001)
    char                                          bOverride_AutoExposureMaxBrightness;                          // 0x000B(0x0001)
    char                                          bOverride_AutoExposureCalibrationConstant;                    // 0x000B(0x0001)
    char                                          bOverride_AutoExposureSpeedUp;                                // 0x000B(0x0001)
    char                                          bOverride_AutoExposureSpeedDown;                              // 0x000B(0x0001)
    char                                          bOverride_AutoExposureBias;                                   // 0x000C(0x0001)
    char                                          bOverride_AutoExposureBiasCurve;                              // 0x000C(0x0001)
    char                                          bOverride_AutoExposureMeterMask;                              // 0x000C(0x0001)
    char                                          bOverride_AutoExposureApplyPhysicalCameraExposure;            // 0x000C(0x0001)
    char                                          bOverride_HistogramLogMin;                                    // 0x000C(0x0001)
    char                                          bOverride_HistogramLogMax;                                    // 0x000C(0x0001)
    char                                          bOverride_LensFlareIntensity;                                 // 0x000C(0x0001)
    char                                          bOverride_LensFlareTint;                                      // 0x000C(0x0001)
    char                                          bOverride_LensFlareTints;                                     // 0x000D(0x0001)
    char                                          bOverride_LensFlareBokehSize;                                 // 0x000D(0x0001)
    char                                          bOverride_LensFlareBokehShape;                                // 0x000D(0x0001)
    char                                          bOverride_LensFlareThreshold;                                 // 0x000D(0x0001)
    char                                          bOverride_VignetteIntensity;                                  // 0x000D(0x0001)
    char                                          bOverride_GrainIntensity;                                     // 0x000D(0x0001)
    char                                          bOverride_GrainJitter;                                        // 0x000D(0x0001)
    char                                          bOverride_AmbientOcclusionIntensity;                          // 0x000D(0x0001)
    char                                          bOverride_AmbientOcclusionStaticFraction;                     // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionRadius;                             // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionFadeDistance;                       // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionFadeRadius;                         // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionDistance;                           // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionRadiusInWS;                         // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionPower;                              // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionBias;                               // 0x000E(0x0001)
    char                                          bOverride_AmbientOcclusionQuality;                            // 0x000F(0x0001)
    char                                          bOverride_AmbientOcclusionMipBlend;                           // 0x000F(0x0001)
    char                                          bOverride_AmbientOcclusionMipScale;                           // 0x000F(0x0001)
    char                                          bOverride_AmbientOcclusionMipThreshold;                       // 0x000F(0x0001)
    char                                          bOverride_RayTracingAO;                                       // 0x0010(0x0001)
    char                                          bOverride_RayTracingAOSamplesPerPixel;                        // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    char                                          bOverride_LPVIntensity;                                       // 0x0014(0x0001)
    char                                          bOverride_LPVDirectionalOcclusionIntensity;                   // 0x0014(0x0001)
    char                                          bOverride_LPVDirectionalOcclusionRadius;                      // 0x0014(0x0001)
    char                                          bOverride_LPVDiffuseOcclusionExponent;                        // 0x0014(0x0001)
    char                                          bOverride_LPVSpecularOcclusionExponent;                       // 0x0014(0x0001)
    char                                          bOverride_LPVDiffuseOcclusionIntensity;                       // 0x0014(0x0001)
    char                                          bOverride_LPVSpecularOcclusionIntensity;                      // 0x0014(0x0001)
    char                                          bOverride_LPVSize;                                            // 0x0014(0x0001)
    char                                          bOverride_LPVSecondaryOcclusionIntensity;                     // 0x0015(0x0001)
    char                                          bOverride_LPVSecondaryBounceIntensity;                        // 0x0015(0x0001)
    char                                          bOverride_LPVGeometryVolumeBias;                              // 0x0015(0x0001)
    char                                          bOverride_LPVVplInjectionBias;                                // 0x0015(0x0001)
    char                                          bOverride_LPVEmissiveInjectionIntensity;                      // 0x0015(0x0001)
    char                                          bOverride_LPVFadeRange;                                       // 0x0015(0x0001)
    char                                          bOverride_LPVDirectionalOcclusionFadeRange;                   // 0x0015(0x0001)
    char                                          bOverride_IndirectLightingColor;                              // 0x0015(0x0001)
    char                                          bOverride_IndirectLightingIntensity;                          // 0x0016(0x0001)
    char                                          bOverride_ColorGradingIntensity;                              // 0x0016(0x0001)
    char                                          bOverride_ColorGradingLUT;                                    // 0x0016(0x0001)
    char                                          bOverride_DepthOfFieldFocalDistance;                          // 0x0016(0x0001)
    char                                          bOverride_DepthOfFieldFstop;                                  // 0x0016(0x0001)
    char                                          bOverride_DepthOfFieldMinFstop;                               // 0x0016(0x0001)
    char                                          bOverride_DepthOfFieldBladeCount;                             // 0x0016(0x0001)
    char                                          bOverride_DepthOfFieldSensorWidth;                            // 0x0016(0x0001)
    char                                          bOverride_DepthOfFieldDepthBlurRadius;                        // 0x0017(0x0001)
    char                                          bOverride_DepthOfFieldDepthBlurAmount;                        // 0x0017(0x0001)
    char                                          bOverride_DepthOfFieldFocalRegion;                            // 0x0017(0x0001)
    char                                          bOverride_DepthOfFieldNearTransitionRegion;                   // 0x0017(0x0001)
    char                                          bOverride_DepthOfFieldFarTransitionRegion;                    // 0x0017(0x0001)
    char                                          bOverride_DepthOfFieldScale;                                  // 0x0017(0x0001)
    char                                          bOverride_DepthOfFieldNearBlurSize;                           // 0x0017(0x0001)
    char                                          bOverride_DepthOfFieldFarBlurSize;                            // 0x0017(0x0001)
    char                                          bOverride_MobileHQGaussian;                                   // 0x0018(0x0001)
    char                                          bOverride_DepthOfFieldOcclusion;                              // 0x0018(0x0001)
    char                                          bOverride_DepthOfFieldSkyFocusDistance;                       // 0x0018(0x0001)
    char                                          bOverride_DepthOfFieldVignetteSize;                           // 0x0018(0x0001)
    char                                          bOverride_MotionBlurAmount;                                   // 0x0018(0x0001)
    char                                          bOverride_MotionBlurMax;                                      // 0x0018(0x0001)
    char                                          bOverride_MotionBlurTargetFPS;                                // 0x0018(0x0001)
    char                                          bOverride_MotionBlurPerObjectSize;                            // 0x0018(0x0001)
    char                                          bOverride_ScreenPercentage;                                   // 0x0019(0x0001)
    char                                          bOverride_ScreenSpaceReflectionIntensity;                     // 0x0019(0x0001)
    char                                          bOverride_ScreenSpaceReflectionQuality;                       // 0x0019(0x0001)
    char                                          bOverride_ScreenSpaceReflectionMaxRoughness;                  // 0x0019(0x0001)
    char                                          bOverride_ScreenSpaceReflectionRoughnessScale;                // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    char                                          bOverride_ReflectionsType;                                    // 0x001C(0x0001)
    char                                          bOverride_RayTracingReflectionsMaxRoughness;                  // 0x001C(0x0001)
    char                                          bOverride_RayTracingReflectionsMaxBounces;                    // 0x001C(0x0001)
    char                                          bOverride_RayTracingReflectionsSamplesPerPixel;               // 0x001C(0x0001)
    char                                          bOverride_RayTracingReflectionsShadows;                       // 0x001C(0x0001)
    char                                          bOverride_RayTracingReflectionsTranslucency;                  // 0x001C(0x0001)
    char                                          bOverride_TranslucencyType;                                   // 0x001C(0x0001)
    char                                          bOverride_RayTracingTranslucencyMaxRoughness;                 // 0x001C(0x0001)
    char                                          bOverride_RayTracingTranslucencyRefractionRays;               // 0x001D(0x0001)
    char                                          bOverride_RayTracingTranslucencySamplesPerPixel;              // 0x001D(0x0001)
    char                                          bOverride_RayTracingTranslucencyShadows;                      // 0x001D(0x0001)
    char                                          bOverride_RayTracingTranslucencyRefraction;                   // 0x001D(0x0001)
    char                                          bOverride_RayTracingGI;                                       // 0x001D(0x0001)
    char                                          bOverride_RayTracingGIMaxBounces;                             // 0x001D(0x0001)
    char                                          bOverride_RayTracingGISamplesPerPixel;                        // 0x001D(0x0001)
    char                                          bOverride_PathTracingMaxBounces;                              // 0x001D(0x0001)
    char                                          bOverride_PathTracingSamplesPerPixel;                         // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    char                                          bMobileHQGaussian;                                            // 0x0020(0x0001)
    enum class EBloomMethod                       BloomMethod;                                                  // 0x0021(0x0001)
    enum class EAutoExposureMethod                AutoExposureMethod;                                           // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    float                                         WhiteTemp;                                                    // 0x0024(0x0004)
    float                                         WhiteTint;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FVector4                                      LDRSaturation;                                                // 0x0030(0x0010)
    FVector4                                      LDRContrast;                                                  // 0x0040(0x0010)
    FVector4                                      LDRBrightness;                                                // 0x0050(0x0010)
    float                                         NightfellRadius;                                              // 0x0060(0x0004)
    float                                         NightfellSecondRadius;                                        // 0x0064(0x0004)
    float                                         NightfellOpacity;                                             // 0x0068(0x0004)
    float                                         NightfellFadeness;                                            // 0x006C(0x0004)
    FVector4                                      NightfellLocation;                                            // 0x0070(0x0010)
    FVector4                                      NightfellSecondLocation;                                      // 0x0080(0x0010)
    float                                         PCBloomIntensity;                                             // 0x0090(0x0004)
    float                                         PCBloomThreshold;                                             // 0x0094(0x0004)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
    FVector4                                      ColorSaturation;                                              // 0x00A0(0x0010)
    FVector4                                      ColorContrast;                                                // 0x00B0(0x0010)
    FVector4                                      ColorGamma;                                                   // 0x00C0(0x0010)
    FVector4                                      ColorGain;                                                    // 0x00D0(0x0010)
    FVector4                                      ColorOffset;                                                  // 0x00E0(0x0010)
    char                                          pa_00F0[0x0010]                                               // 0x00F0(0x0010)
    FVector4                                      ColorSaturationShadows;                                       // 0x0100(0x0010)
    FVector4                                      ColorContrastShadows;                                         // 0x0110(0x0010)
    FVector4                                      ColorGammaShadows;                                            // 0x0120(0x0010)
    FVector4                                      ColorGainShadows;                                             // 0x0130(0x0010)
    FVector4                                      ColorOffsetShadows;                                           // 0x0140(0x0010)
    FVector4                                      ColorSaturationMidtones;                                      // 0x0150(0x0010)
    FVector4                                      ColorContrastMidtones;                                        // 0x0160(0x0010)
    FVector4                                      ColorGammaMidtones;                                           // 0x0170(0x0010)
    FVector4                                      ColorGainMidtones;                                            // 0x0180(0x0010)
    FVector4                                      ColorOffsetMidtones;                                          // 0x0190(0x0010)
    FVector4                                      ColorSaturationHighlights;                                    // 0x01A0(0x0010)
    FVector4                                      ColorContrastHighlights;                                      // 0x01B0(0x0010)
    FVector4                                      ColorGammaHighlights;                                         // 0x01C0(0x0010)
    FVector4                                      ColorGainHighlights;                                          // 0x01D0(0x0010)
    FVector4                                      ColorOffsetHighlights;                                        // 0x01E0(0x0010)
    float                                         ColorCorrectionHighlightsMin;                                 // 0x01F0(0x0004)
    float                                         ColorCorrectionShadowsMax;                                    // 0x01F4(0x0004)
    float                                         BlueCorrection;                                               // 0x01F8(0x0004)
    float                                         ExpandGamut;                                                  // 0x01FC(0x0004)
    float                                         FilmSlope;                                                    // 0x0200(0x0004)
    float                                         FilmToe;                                                      // 0x0204(0x0004)
    float                                         FilmShoulder;                                                 // 0x0208(0x0004)
    float                                         FilmBlackClip;                                                // 0x020C(0x0004)
    float                                         FilmWhiteClip;                                                // 0x0210(0x0004)
    FLinearColor                                  FilmWhitePoint;                                               // 0x0214(0x0010)
    FLinearColor                                  FilmShadowTint;                                               // 0x0224(0x0010)
    float                                         FilmShadowTintBlend;                                          // 0x0234(0x0004)
    float                                         FilmShadowTintAmount;                                         // 0x0238(0x0004)
    float                                         FilmSaturation;                                               // 0x023C(0x0004)
    FLinearColor                                  FilmChannelMixerRed;                                          // 0x0240(0x0010)
    FLinearColor                                  FilmChannelMixerGreen;                                        // 0x0250(0x0010)
    FLinearColor                                  FilmChannelMixerBlue;                                         // 0x0260(0x0010)
    float                                         FilmContrast;                                                 // 0x0270(0x0004)
    float                                         FilmToeAmount;                                                // 0x0274(0x0004)
    float                                         FilmHealAmount;                                               // 0x0278(0x0004)
    float                                         FilmDynamicRange;                                             // 0x027C(0x0004)
    FLinearColor                                  SceneColorTint;                                               // 0x0280(0x0010)
    float                                         SceneFringeIntensity;                                         // 0x0290(0x0004)
    float                                         ChromaticAberrationStartOffset;                               // 0x0294(0x0004)
    float                                         BloomIntensity;                                               // 0x0298(0x0004)
    float                                         BloomThreshold;                                               // 0x029C(0x0004)
    float                                         BloomSizeScale;                                               // 0x02A0(0x0004)
    float                                         Bloom1Size;                                                   // 0x02A4(0x0004)
    float                                         Bloom2Size;                                                   // 0x02A8(0x0004)
    float                                         Bloom3Size;                                                   // 0x02AC(0x0004)
    float                                         Bloom4Size;                                                   // 0x02B0(0x0004)
    float                                         Bloom5Size;                                                   // 0x02B4(0x0004)
    float                                         Bloom6Size;                                                   // 0x02B8(0x0004)
    FLinearColor                                  Bloom1Tint;                                                   // 0x02BC(0x0010)
    FLinearColor                                  Bloom2Tint;                                                   // 0x02CC(0x0010)
    FLinearColor                                  Bloom3Tint;                                                   // 0x02DC(0x0010)
    FLinearColor                                  Bloom4Tint;                                                   // 0x02EC(0x0010)
    FLinearColor                                  Bloom5Tint;                                                   // 0x02FC(0x0010)
    FLinearColor                                  Bloom6Tint;                                                   // 0x030C(0x0010)
    float                                         BloomConvolutionSize;                                         // 0x031C(0x0004)
    UTexture2D*                                   BloomConvolutionTexture;                                      // 0x0320(0x0008)
    FVector2D                                     BloomConvolutionCenterUV;                                     // 0x0328(0x0008)
    float                                         BloomConvolutionPreFilterMin;                                 // 0x0330(0x0004)
    float                                         BloomConvolutionPreFilterMax;                                 // 0x0334(0x0004)
    float                                         BloomConvolutionPreFilterMult;                                // 0x0338(0x0004)
    float                                         BloomConvolutionBufferScale;                                  // 0x033C(0x0004)
    UTexture*                                     BloomDirtMask;                                                // 0x0340(0x0008)
    float                                         BloomDirtMaskIntensity;                                       // 0x0348(0x0004)
    FLinearColor                                  BloomDirtMaskTint;                                            // 0x034C(0x0010)
    FLinearColor                                  AmbientCubemapTint;                                           // 0x035C(0x0010)
    float                                         AmbientCubemapIntensity;                                      // 0x036C(0x0004)
    UTextureCube*                                 AmbientCubemap;                                               // 0x0370(0x0008)
    float                                         CameraShutterSpeed;                                           // 0x0378(0x0004)
    float                                         CameraISO;                                                    // 0x037C(0x0004)
    float                                         DepthOfFieldFstop;                                            // 0x0380(0x0004)
    float                                         DepthOfFieldMinFstop;                                         // 0x0384(0x0004)
    int32_t                                       DepthOfFieldBladeCount;                                       // 0x0388(0x0004)
    float                                         AutoExposureBias;                                             // 0x038C(0x0004)
    float                                         AutoExposureBiasBackup;                                       // 0x0390(0x0004)
    char                                          bOverride_AutoExposureBiasBackup;                             // 0x0394(0x0001)
    char                                          pa_0395[0x0003]                                               // 0x0395(0x0003)
    char                                          AutoExposureApplyPhysicalCameraExposure;                      // 0x0398(0x0001)
    char                                          pa_0399[0x0007]                                               // 0x0399(0x0007)
    UCurveFloat*                                  AutoExposureBiasCurve;                                        // 0x03A0(0x0008)
    UTexture*                                     AutoExposureMeterMask;                                        // 0x03A8(0x0008)
    float                                         AutoExposureLowPercent;                                       // 0x03B0(0x0004)
    float                                         AutoExposureHighPercent;                                      // 0x03B4(0x0004)
    float                                         AutoExposureMinBrightness;                                    // 0x03B8(0x0004)
    float                                         AutoExposureMaxBrightness;                                    // 0x03BC(0x0004)
    float                                         AutoExposureSpeedUp;                                          // 0x03C0(0x0004)
    float                                         AutoExposureSpeedDown;                                        // 0x03C4(0x0004)
    float                                         HistogramLogMin;                                              // 0x03C8(0x0004)
    float                                         HistogramLogMax;                                              // 0x03CC(0x0004)
    float                                         AutoExposureCalibrationConstant;                              // 0x03D0(0x0004)
    float                                         LensFlareIntensity;                                           // 0x03D4(0x0004)
    FLinearColor                                  LensFlareTint;                                                // 0x03D8(0x0010)
    float                                         LensFlareBokehSize;                                           // 0x03E8(0x0004)
    float                                         LensFlareThreshold;                                           // 0x03EC(0x0004)
    UTexture*                                     LensFlareBokehShape;                                          // 0x03F0(0x0008)
    FLinearColor                                  LensFlareTints;                                               // 0x03F8(0x0010)
    char                                          pa_0408[0x0070]                                               // 0x0408(0x0070)
    float                                         VignetteIntensity;                                            // 0x0478(0x0004)
    float                                         GrainJitter;                                                  // 0x047C(0x0004)
    float                                         GrainIntensity;                                               // 0x0480(0x0004)
    float                                         AmbientOcclusionIntensity;                                    // 0x0484(0x0004)
    char                                          bOverride_SSGIAOIntensity;                                    // 0x0488(0x0001)
    char                                          pa_0489[0x0003]                                               // 0x0489(0x0003)
    float                                         SSGIAOIntensity;                                              // 0x048C(0x0004)
    char                                          bOverride_SSGIDiffuseIntensity;                               // 0x0490(0x0001)
    char                                          pa_0491[0x0003]                                               // 0x0491(0x0003)
    float                                         SSGIDiffuseIntensity;                                         // 0x0494(0x0004)
    float                                         AmbientOcclusionStaticFraction;                               // 0x0498(0x0004)
    float                                         AmbientOcclusionRadius;                                       // 0x049C(0x0004)
    char                                          AmbientOcclusionRadiusInWS;                                   // 0x04A0(0x0001)
    char                                          pa_04A1[0x0003]                                               // 0x04A1(0x0003)
    float                                         AmbientOcclusionFadeDistance;                                 // 0x04A4(0x0004)
    float                                         AmbientOcclusionFadeRadius;                                   // 0x04A8(0x0004)
    float                                         AmbientOcclusionDistance;                                     // 0x04AC(0x0004)
    float                                         AmbientOcclusionPower;                                        // 0x04B0(0x0004)
    float                                         AmbientOcclusionBias;                                         // 0x04B4(0x0004)
    float                                         AmbientOcclusionQuality;                                      // 0x04B8(0x0004)
    float                                         AmbientOcclusionMipBlend;                                     // 0x04BC(0x0004)
    float                                         AmbientOcclusionMipScale;                                     // 0x04C0(0x0004)
    float                                         AmbientOcclusionMipThreshold;                                 // 0x04C4(0x0004)
    char                                          RayTracingAO;                                                 // 0x04C8(0x0001)
    char                                          pa_04C9[0x0003]                                               // 0x04C9(0x0003)
    int32_t                                       RayTracingAOSamplesPerPixel;                                  // 0x04CC(0x0004)
    FLinearColor                                  IndirectLightingColor;                                        // 0x04D0(0x0010)
    float                                         IndirectLightingIntensity;                                    // 0x04E0(0x0004)
    enum class ERayTracingGlobalIlluminationType  RayTracingGIType;                                             // 0x04E4(0x0001)
    char                                          pa_04E5[0x0003]                                               // 0x04E5(0x0003)
    int32_t                                       RayTracingGIMaxBounces;                                       // 0x04E8(0x0004)
    int32_t                                       RayTracingGISamplesPerPixel;                                  // 0x04EC(0x0004)
    float                                         ColorGradingIntensity;                                        // 0x04F0(0x0004)
    char                                          pa_04F4[0x0004]                                               // 0x04F4(0x0004)
    UTexture*                                     ColorGradingLUT;                                              // 0x04F8(0x0008)
    float                                         DepthOfFieldSensorWidth;                                      // 0x0500(0x0004)
    float                                         DepthOfFieldFocalDistance;                                    // 0x0504(0x0004)
    float                                         DepthOfFieldDepthBlurAmount;                                  // 0x0508(0x0004)
    float                                         DepthOfFieldDepthBlurRadius;                                  // 0x050C(0x0004)
    float                                         DepthOfFieldFocalRegion;                                      // 0x0510(0x0004)
    float                                         DepthOfFieldNearTransitionRegion;                             // 0x0514(0x0004)
    float                                         DepthOfFieldFarTransitionRegion;                              // 0x0518(0x0004)
    float                                         DepthOfFieldScale;                                            // 0x051C(0x0004)
    float                                         DepthOfFieldNearBlurSize;                                     // 0x0520(0x0004)
    float                                         DepthOfFieldFarBlurSize;                                      // 0x0524(0x0004)
    float                                         DepthOfFieldOcclusion;                                        // 0x0528(0x0004)
    float                                         DepthOfFieldSkyFocusDistance;                                 // 0x052C(0x0004)
    float                                         DepthOfFieldVignetteSize;                                     // 0x0530(0x0004)
    float                                         MotionBlurAmount;                                             // 0x0534(0x0004)
    float                                         MotionBlurMax;                                                // 0x0538(0x0004)
    int32_t                                       MotionBlurTargetFPS;                                          // 0x053C(0x0004)
    float                                         MotionBlurPerObjectSize;                                      // 0x0540(0x0004)
    float                                         LPVIntensity;                                                 // 0x0544(0x0004)
    float                                         LPVVplInjectionBias;                                          // 0x0548(0x0004)
    float                                         LPVSize;                                                      // 0x054C(0x0004)
    float                                         LPVSecondaryOcclusionIntensity;                               // 0x0550(0x0004)
    float                                         LPVSecondaryBounceIntensity;                                  // 0x0554(0x0004)
    float                                         LPVGeometryVolumeBias;                                        // 0x0558(0x0004)
    float                                         LPVEmissiveInjectionIntensity;                                // 0x055C(0x0004)
    float                                         LPVDirectionalOcclusionIntensity;                             // 0x0560(0x0004)
    float                                         LPVDirectionalOcclusionRadius;                                // 0x0564(0x0004)
    float                                         LPVDiffuseOcclusionExponent;                                  // 0x0568(0x0004)
    float                                         LPVSpecularOcclusionExponent;                                 // 0x056C(0x0004)
    float                                         LPVDiffuseOcclusionIntensity;                                 // 0x0570(0x0004)
    float                                         LPVSpecularOcclusionIntensity;                                // 0x0574(0x0004)
    enum class EReflectionsType                   ReflectionsType;                                              // 0x0578(0x0001)
    char                                          pa_0579[0x0003]                                               // 0x0579(0x0003)
    float                                         ScreenSpaceReflectionIntensity;                               // 0x057C(0x0004)
    float                                         ScreenSpaceReflectionQuality;                                 // 0x0580(0x0004)
    float                                         ScreenSpaceReflectionMaxRoughness;                            // 0x0584(0x0004)
    float                                         RayTracingReflectionsMaxRoughness;                            // 0x0588(0x0004)
    int32_t                                       RayTracingReflectionsMaxBounces;                              // 0x058C(0x0004)
    int32_t                                       RayTracingReflectionsSamplesPerPixel;                         // 0x0590(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingReflectionsShadows;                              // 0x0594(0x0001)
    char                                          RayTracingReflectionsTranslucency;                            // 0x0595(0x0001)
    enum class ETranslucencyType                  TranslucencyType;                                             // 0x0596(0x0001)
    char                                          pa_0597[0x0001]                                               // 0x0597(0x0001)
    float                                         RayTracingTranslucencyMaxRoughness;                           // 0x0598(0x0004)
    int32_t                                       RayTracingTranslucencyRefractionRays;                         // 0x059C(0x0004)
    int32_t                                       RayTracingTranslucencySamplesPerPixel;                        // 0x05A0(0x0004)
    enum class EReflectedAndRefractedRayTracedShadowsRayTracingTranslucencyShadows;                             // 0x05A4(0x0001)
    char                                          RayTracingTranslucencyRefraction;                             // 0x05A5(0x0001)
    char                                          pa_05A6[0x0002]                                               // 0x05A6(0x0002)
    int32_t                                       PathTracingMaxBounces;                                        // 0x05A8(0x0004)
    int32_t                                       PathTracingSamplesPerPixel;                                   // 0x05AC(0x0004)
    float                                         PathTracingMaxPathExposure;                                   // 0x05B0(0x0004)
    char                                          PathTracingEnableDenoiser;                                    // 0x05B4(0x0001)
    char                                          PathTracingEnableEmissive;                                    // 0x05B4(0x0001)
    char                                          pa_05B5[0x0003]                                               // 0x05B5(0x0003)
    float                                         PathTracingFilterWidth;                                       // 0x05B8(0x0004)
    float                                         LPVFadeRange;                                                 // 0x05BC(0x0004)
    float                                         LPVDirectionalOcclusionFadeRange;                             // 0x05C0(0x0004)
    float                                         ScreenPercentage;                                             // 0x05C4(0x0004)
    FWeightedBlendables                           WeightedBlendables;                                           // 0x05C8(0x0010)
    char                                          pa_05D8[0x0008]                                               // 0x05D8(0x0008)
};


// ScriptStruct  Engine.WeightedBlendables
// Struct Size::0x0010
struct FWeightedBlendables
{
    TArray<FWeightedBlendable>                    Array;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.WeightedBlendable
// Struct Size::0x0010
struct FWeightedBlendable
{
    float                                         Weight;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UObject*                                      Object;                                                       // 0x0008(0x0008)
};


// ScriptStruct  Solarland.CameraShakeUpdateParams
// Struct Size::0x0680
struct FCameraShakeUpdateParams
{
    float                                         DeltaTime;                                                    // 0x0000(0x0004)
    float                                         ShakeScale;                                                   // 0x0004(0x0004)
    float                                         DynamicScale;                                                 // 0x0008(0x0004)
    float                                         BlendingWeight;                                               // 0x000C(0x0004)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x0670)
};


// ScriptStruct  Solarland.CameraShakeStartParams
// Struct Size::0x0001
struct FCameraShakeStartParams
{
    bool                                          bIsRestarting;                                                // 0x0000(0x0001)
};


// ScriptStruct  Solarland.TeamFormationUnit
// Struct Size::0x0050
struct FTeamFormationUnit
{
    TMap<char,FEchelonFormationUnit>              TeamFormation;                                                // 0x0000(0x0050)
};


// ScriptStruct  Solarland.EchelonFormationUnit
// Struct Size::0x0010
struct FEchelonFormationUnit
{
    TArray<FBoardingSpotInfo>                     EchelonFormation;                                             // 0x0000(0x0010)
};


// ScriptStruct  Solarland.BoardingSpotInfo
// Struct Size::0x0020
struct FBoardingSpotInfo
{
    FVector                                       SpotLocation;                                                 // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    ASolarPlayerState*                            BoardingPlayer;                                               // 0x0010(0x0008)
    ASolarPlayerState*                            LeaderPlayer;                                                 // 0x0018(0x0008)
};


// ScriptStruct  Solarland.UsingAirlineData
// Struct Size::0x0044
struct FUsingAirlineData
{
    int32_t                                       mapID;                                                        // 0x0000(0x0004)
    FVector                                       StartPoint;                                                   // 0x0004(0x000C)
    FVector                                       EndPoint;                                                     // 0x0010(0x000C)
    FVector2D                                     Direction;                                                    // 0x001C(0x0008)
    float                                         Speed;                                                        // 0x0024(0x0004)
    float                                         Height;                                                       // 0x0028(0x0004)
    FVector                                       CanParachutePoint;                                            // 0x002C(0x000C)
    FVector                                       ForceParachutePoint;                                          // 0x0038(0x000C)
};


// ScriptStruct  Solarland.BoarderInfo
// Struct Size::0x0018
struct FBoarderInfo
{
    ASolarCharacter*                              Boarder;                                                      // 0x0000(0x0008)
    int32_t                                       BoarderTeamID;                                                // 0x0008(0x0004)
    int32_t                                       BoarderTeamSize;                                              // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Solarland.WeaponHitStatisticsInfo
// Struct Size::0x0028
struct FWeaponHitStatisticsInfo
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Solarland.TmpShieldStateInfo
// Struct Size::0x000C
struct FTmpShieldStateInfo
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Solarland.HotFixAntiCheatData
// Struct Size::0x0004
struct FHotFixAntiCheatData
{
    float                                         BulletSpread;                                                 // 0x0000(0x0004)
};


// ScriptStruct  Solarland.SoundEventRow
// Struct Size::0x0030
struct FSoundEventRow : public FTableRowBase
{
    enum class ECharacterSoundOpt                 SoundOpt;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FString                                       SoundName;                                                    // 0x0010(0x0010)
    FString                                       EventName;                                                    // 0x0020(0x0010)
};


// ScriptStruct  Solarland.CharacterSound
// Struct Size::0x0030
struct FCharacterSound
{
    FString                                       SoundOptPlayer;                                               // 0x0000(0x0010)
    FString                                       SoundOptTeammate;                                             // 0x0010(0x0010)
    FString                                       SoundOptEnemy;                                                // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarCharacterBillboardIconRuntimeInfo
// Struct Size::0x0028
struct FSolarCharacterBillboardIconRuntimeInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    UStaticMeshComponent*                         Component;                                                    // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  Solarland.CameraComposition
// Struct Size::0x00F8
struct FCameraComposition
{
    FCameraProperty                               DefaultCameraProperty;                                        // 0x0000(0x00A8)
    TMap<uint32_t,FCameraProperty>                CameraPropertyCharacterMap;                                   // 0x00A8(0x0050)
};


// ScriptStruct  Solarland.CameraProperty
// Struct Size::0x00A8
struct FCameraProperty
{
    FVector                                       SocketOffset;                                                 // 0x0000(0x000C)
    float                                         ArmLen;                                                       // 0x000C(0x0004)
    FRuntimeFloatCurve                            DeltaArmLenByPitchCurve;                                      // 0x0010(0x0088)
    bool                                          bHideDefaultOnlyProperty;                                     // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    FVector2D                                     PitchMinMax;                                                  // 0x009C(0x0008)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  Solarland.CameraSettings
// Struct Size::0x0020
struct FCameraSettings
{
    float                                         DistanceToTarget;                                             // 0x0000(0x0004)
    float                                         CameraFOV;                                                    // 0x0004(0x0004)
    FVector                                       TargetOffset;                                                 // 0x0008(0x000C)
    FVector                                       CameraOffset;                                                 // 0x0014(0x000C)
};


// ScriptStruct  Solarland.SolarTacticalSkillDamageEvent
// Struct Size::0x0118
struct FSolarTacticalSkillDamageEvent : public FSolarPointDamageEvent
{
    char                                          pa_0108[0x0010]                                               // 0x0108(0x0010)
};


// ScriptStruct  Solarland.SolarClassSkillDamageEvent
// Struct Size::0x0110
struct FSolarClassSkillDamageEvent : public FSolarPointDamageEvent
{
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
};


// ScriptStruct  Solarland.WeaponAbilityDamageEvent
// Struct Size::0x0108
struct FWeaponAbilityDamageEvent : public FSolarPointDamageEvent
{
};


// ScriptStruct  Solarland.VehicleAbilityDamageEvent
// Struct Size::0x0130
struct FVehicleAbilityDamageEvent : public FSolarPointDamageEvent
{
    FString                                       AbilityName;                                                  // 0x0108(0x0010)
    FString                                       AbilityTextType;                                              // 0x0118(0x0010)
    int32_t                                       VehicleID;                                                    // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
};


// ScriptStruct  Solarland.SummonWeaponDamageEvent
// Struct Size::0x0110
struct FSummonWeaponDamageEvent : public FSolarPointDamageEvent
{
    TWeakObjectPtr<ASolarCharacter>               SourceWeaponHolder;                                           // 0x0108(0x0008)
};


// ScriptStruct  Solarland.SolarWeaponDamageEvent
// Struct Size::0x0118
struct FSolarWeaponDamageEvent : public FSolarPointDamageEvent
{
    int32_t                                       weaponid;                                                     // 0x0108(0x0004)
    int32_t                                       WeaponSkinID;                                                 // 0x010C(0x0004)
    int32_t                                       WeaponLv;                                                     // 0x0110(0x0004)
    int32_t                                       ItemID;                                                       // 0x0114(0x0004)
};


// ScriptStruct  Solarland.VehicleWeaponDamageEvent
// Struct Size::0x0120
struct FVehicleWeaponDamageEvent : public FSolarWeaponDamageEvent
{
    int32_t                                       VehicleID;                                                    // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
};


// ScriptStruct  Solarland.UnarmWeaponDamageEvent
// Struct Size::0x0108
struct FUnarmWeaponDamageEvent : public FSolarPointDamageEvent
{
};


// ScriptStruct  Solarland.VhicleExplosionDamageEvent
// Struct Size::0x0110
struct FVhicleExplosionDamageEvent : public FSolarPointDamageEvent
{
    int32_t                                       VehicleID;                                                    // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  Solarland.VehicleHitDamageEvent
// Struct Size::0x0110
struct FVehicleHitDamageEvent : public FSolarPointDamageEvent
{
    int32_t                                       VehicleID;                                                    // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  Solarland.SolarSystemDamage
// Struct Size::0x0108
struct FSolarSystemDamage : public FSolarPointDamageEvent
{
};


// ScriptStruct  Solarland.SolarOutboundDamageEvent
// Struct Size::0x0108
struct FSolarOutboundDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.GMCmdDamageEvent
// Struct Size::0x0108
struct FGMCmdDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.DeathVergeInWaterDamageEvent
// Struct Size::0x0108
struct FDeathVergeInWaterDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.HelplessDeathVergeDamageEvent
// Struct Size::0x0108
struct FHelplessDeathVergeDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.DyingDamageEvent
// Struct Size::0x0108
struct FDyingDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.SolarAirDropDamageEvent
// Struct Size::0x0108
struct FSolarAirDropDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.SolarBombDamageEvent
// Struct Size::0x0108
struct FSolarBombDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.SolarPoisonDamageEvent
// Struct Size::0x0108
struct FSolarPoisonDamageEvent : public FSolarSystemDamage
{
};


// ScriptStruct  Solarland.SolarCharacterDeathEffectData
// Struct Size::0x0070
struct FSolarCharacterDeathEffectData
{
    FSoftObjectPath                               Path;                                                         // 0x0000(0x0018)
    FSoftObjectPath                               PathForOther;                                                 // 0x0018(0x0018)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0030)
    FName                                         SocketName;                                                   // 0x0060(0x0008)
    bool                                          bAttachToSocket;                                              // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  Solarland.SolarGameplayEffectConfig
// Struct Size::0x0010
struct FSolarGameplayEffectConfig
{
    UGameplayEffect*                              GameplayEffectClass;                                          // 0x0000(0x0008)
    bool                                          bRemoveOnEnd;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Level;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Solarland.SoundGroupClothSoundTableData
// Struct Size::0x0018
struct FSoundGroupClothSoundTableData : public FSoundGroupTableDataBase
{
    FString                                       SoundEvent;                                                   // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SoundGroupStepSoundTableData
// Struct Size::0x0018
struct FSoundGroupStepSoundTableData : public FSoundGroupTableDataBase
{
    FString                                       SoundEvent;                                                   // 0x0008(0x0010)
};


// ScriptStruct  Solarland.TempUndesignedAttributeMap
// Struct Size::0x0050
struct FTempUndesignedAttributeMap
{
    TMap<FName,float>                             Value;                                                        // 0x0000(0x0050)
};


// ScriptStruct  Solarland.TeammateHUDPreset
// Struct Size::0x0020
struct FTeammateHUDPreset
{
    UUserWidget*                                  TeammateHUDClass;                                             // 0x0000(0x0008)
    bool                                          bUseDesireSize;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FVector2D                                     DrawSize;                                                     // 0x000C(0x0008)
    int32_t                                       ZOrder;                                                       // 0x0014(0x0004)
    float                                         DisplayMaxDistance;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.InjectorMeshPreset
// Struct Size::0x0050
struct FInjectorMeshPreset
{
    FSoftObjectPath                               InjectorMeshPath;                                             // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    InjectorRelativeTrans;                                        // 0x0020(0x0030)
};


// ScriptStruct  Solarland.VehicleRepairToolMeshPreset
// Struct Size::0x0050
struct FVehicleRepairToolMeshPreset
{
    FSoftObjectPath                               MeshPath;                                                     // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    RelativeTrans;                                                // 0x0020(0x0030)
};


// ScriptStruct  Solarland.TreasureBoxOperatorMeshPreset
// Struct Size::0x0050
struct FTreasureBoxOperatorMeshPreset
{
    FGameplayTag                                  StaticOrnamentMeshTag;                                        // 0x0000(0x0008)
    FSoftObjectPath                               TreasureBoxOperatorMeshPath;                                  // 0x0008(0x0018)
    FTransform                                    TreasureBoxOperatorRelativeTrans;                             // 0x0020(0x0030)
};


// ScriptStruct  Solarland.OperatorMeshPreset
// Struct Size::0x0120
struct FOperatorMeshPreset
{
    TSoftObjectPtr<UParticleSystem>               ShieldRepairFXResourceSoft;                                   // 0x0000(0x0028)
    FVector                                       ShieldRepairFXRelativeLocation;                               // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TSoftObjectPtr<UParticleSystem>               ShieldMultiRecoverFXResourceSoft;                             // 0x0038(0x0028)
    FVector                                       ShieldMultiRecoverFXRelativeLocation;                         // 0x0060(0x000C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FSoftObjectPath                               ShieldOperatorMeshPath;                                       // 0x0070(0x0018)
    FSoftObjectPath                               ShieldOperatorBigMeshPath;                                    // 0x0088(0x0018)
    FTransform                                    ShieldOperatorRelativeTrans;                                  // 0x00A0(0x0030)
    FSoftObjectPath                               ShieldUpgradeOperatorMeshPath;                                // 0x00D0(0x0018)
    char                                          pa_00E8[0x0008]                                               // 0x00E8(0x0008)
    FTransform                                    ShieldUpgradeOperatorRelativeTrans;                           // 0x00F0(0x0030)
};


// ScriptStruct  Solarland.WaterEffectPreset
// Struct Size::0x0028
struct FWaterEffectPreset
{
    FName                                         DefaultTrackSocket;                                           // 0x0000(0x0008)
    FName                                         FTrackSocket;                                                 // 0x0008(0x0008)
    FName                                         BTrackSocket;                                                 // 0x0010(0x0008)
    FName                                         LTrackSocket;                                                 // 0x0018(0x0008)
    FName                                         RTrackSocket;                                                 // 0x0020(0x0008)
};


// ScriptStruct  Solarland.SkydivingEffectPreset
// Struct Size::0x0070
struct FSkydivingEffectPreset
{
    TSoftObjectPtr<UParticleSystem>               EffectResource;                                               // 0x0000(0x0028)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FTransform                                    AttachmentOffset;                                             // 0x0030(0x0030)
    FName                                         AttachmentSocket;                                             // 0x0060(0x0008)
    enum class ESkydiveEffectLifetime             LifeTime;                                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  Solarland.CatenaryCableMoveParams
// Struct Size::0x0028
struct FCatenaryCableMoveParams
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Solarland.RoleAbilityParams
// Struct Size::0x0010
struct FRoleAbilityParams : public FGameplayAbilityTargetData
{
    enum class ERoleAbilityParaType               ParaType;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Solarland.DamageDecelerationEffect
// Struct Size::0x0014
struct FDamageDecelerationEffect
{
    float                                         DecelerationValue;                                            // 0x0000(0x0004)
    float                                         DecelerationTime;                                             // 0x0004(0x0004)
    float                                         DecelerationTimer;                                            // 0x0008(0x0004)
    float                                         RecoveryTime;                                                 // 0x000C(0x0004)
    bool                                          bRecovery;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Solarland.FreeLookSpectateInfo
// Struct Size::0x0010
struct FFreeLookSpectateInfo
{
    char                                          bIsInFreeLook;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FRotator                                      PlayerCameraRotation;                                         // 0x0004(0x000C)
};


// ScriptStruct  Solarland.CatenaryCableData
// Struct Size::0x000C
struct FCatenaryCableData
{
    float                                         CoeA;                                                         // 0x0000(0x0004)
    float                                         CoeB;                                                         // 0x0004(0x0004)
    float                                         CoeC;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Solarland.ShieldEffect
// Struct Size::0x0038
struct FShieldEffect
{
    TSoftObjectPtr<UParticleSystem>               ShieldEffect;                                                 // 0x0000(0x0028)
    FVector                                       EffectScale;                                                  // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.CharacterHitInfo
// Struct Size::0x00B4
struct FCharacterHitInfo
{
    enum class ESolarHitType                      HitType;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x0004(0x0008)
    FHitResult                                    HitResult;                                                    // 0x000C(0x0088)
    FVector                                       RelativeHitLocation;                                          // 0x0094(0x000C)
    TWeakObjectPtr<ASolarWeapon>                  WeaponCauser;                                                 // 0x00A0(0x0008)
    int32_t                                       CauserWeaponID;                                               // 0x00A8(0x0004)
    int32_t                                       CauserWeaponSkinID;                                           // 0x00AC(0x0004)
    float                                         Damage;                                                       // 0x00B0(0x0004)
};


// ScriptStruct  Solarland.CharacterMovementSimulationOptions
// Struct Size::0x0010
struct FCharacterMovementSimulationOptions
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NetworkMaxSmoothUpdateDistance;                               // 0x0004(0x0004)
    float                                         NetworkNoSmoothUpdateDistance;                                // 0x0008(0x0004)
    float                                         NetworkSimulatedSmoothLocationTime;                           // 0x000C(0x0004)
};


// ScriptStruct  Solarland.CharacterMovementNetworkOptions
// Struct Size::0x000C
struct FCharacterMovementNetworkOptions
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    bool                                          bServerAcceptClientAuthoritativePosition;                     // 0x0001(0x0001)
    bool                                          bIgnoreClientMovementErrorChecksAndCorrection;                // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         MaxLocationDifferenceToTrustClientMove;                       // 0x0004(0x0004)
    enum class EClientMoveTrustType               ClientMoveTrustType;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Solarland.SideDataParams
// Struct Size::0x0020
struct FSideDataParams : public FGameplayAbilityTargetData
{
    FString                                       SideName;                                                     // 0x0008(0x0010)
    char                                          TeamID;                                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Solarland.VulnerAbilityInfo
// Struct Size::0x0008
struct FVulnerAbilityInfo
{
    float                                         VulnerableParamB;                                             // 0x0000(0x0004)
    FGameplayAbilitySpecHandle                    AbilitySpecHandle;                                            // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ChargeCannonParams
// Struct Size::0x0030
struct FChargeCannonParams : public FGameplayAbilityTargetData
{
    float                                         ClientChargingTotalTime;                                      // 0x0008(0x0004)
    float                                         ChargingTime;                                                 // 0x000C(0x0004)
    int32_t                                       ChargingLevel;                                                // 0x0010(0x0004)
    FVector_NetQuantizeNormal                     Dir;                                                          // 0x0014(0x000C)
    FVector_NetQuantize                           StartLocation;                                                // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.CelebrateWinnerTargetData
// Struct Size::0x0028
struct FCelebrateWinnerTargetData : public FGameplayAbilityTargetData
{
    UObject*                                      FocusCharacter;                                               // 0x0008(0x0008)
    float                                         FocusRange;                                                   // 0x0010(0x0004)
    bool                                          bValidReviveCenter;                                           // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector                                       ReviveCenter;                                                 // 0x0018(0x000C)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.RadarSpawnParams
// Struct Size::0x0018
struct FRadarSpawnParams : public FGameplayAbilityTargetData
{
    FVector                                       SpawnLocation;                                                // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.VehicleHitchingParams
// Struct Size::0x0010
struct FVehicleHitchingParams : public FGameplayAbilityTargetData
{
    int32_t                                       VehicleTypeID;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.SingleCruiseData
// Struct Size::0x0030
struct FSingleCruiseData : public FGameplayAbilityTargetData
{
    FVector                                       StartLocation;                                                // 0x0008(0x000C)
    FVector                                       EndLocation;                                                  // 0x0014(0x000C)
    float                                         During;                                                       // 0x0020(0x0004)
    float                                         CanParachuteTime;                                             // 0x0024(0x0004)
    bool                                          bCanFreeJump;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Solarland.ZiplineData
// Struct Size::0x0020
struct FZiplineData : public FGameplayAbilityTargetData
{
    ASolarZiplineObj*                             ZiplineObj;                                                   // 0x0008(0x0008)
    FVector_NetQuantize                           CharacterLoc;                                                 // 0x0010(0x000C)
    enum class EZiplineSide                       BeginningSide;                                                // 0x001C(0x0001)
    enum class EZiplineSide                       ArrivingSide;                                                 // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  Solarland.CustomJetFlyParams
// Struct Size::0x0028
struct FCustomJetFlyParams : public FGameplayAbilityTargetData
{
    FVector_NetQuantizeNormal                     DashDirection;                                                // 0x0008(0x000C)
    float                                         DashTime;                                                     // 0x0014(0x0004)
    float                                         DashDistance;                                                 // 0x0018(0x0004)
    float                                         DashBreakableTime;                                            // 0x001C(0x0004)
    float                                         DashCameraFadeOutTime;                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.DanceData
// Struct Size::0x0010
struct FDanceData : public FGameplayAbilityTargetData
{
    int32_t                                       DanceID;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.WeakRepulsionData
// Struct Size::0x0018
struct FWeakRepulsionData : public FGameplayAbilityTargetData
{
    float                                         PredictClientTimeStamp;                                       // 0x0008(0x0004)
    FVector                                       EndLocation;                                                  // 0x000C(0x000C)
};


// ScriptStruct  Solarland.ServerTimeData
// Struct Size::0x0010
struct FServerTimeData : public FGameplayAbilityTargetData
{
    float                                         ServerTimeStamp;                                              // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.HitRecoverData
// Struct Size::0x0030
struct FHitRecoverData : public FGameplayAbilityTargetData
{
    float                                         PredictClientTimeStamp;                                       // 0x0008(0x0004)
    FVector                                       StartLocation;                                                // 0x000C(0x000C)
    FVector                                       Direction;                                                    // 0x0018(0x000C)
    enum class EHitRecoverType                    Type;                                                         // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Intensity;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.DuckDunkData
// Struct Size::0x0010
struct FDuckDunkData : public FGameplayAbilityTargetData
{
    bool                                          bBallForm;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         DunkYaw;                                                      // 0x000C(0x0004)
};


// ScriptStruct  Solarland.GrapplingHookData
// Struct Size::0x0018
struct FGrapplingHookData : public FGameplayAbilityTargetData
{
    FVector                                       AnchorLocation;                                               // 0x0008(0x000C)
    float                                         InitialZVelo;                                                 // 0x0014(0x0004)
};


// ScriptStruct  Solarland.WallRunJumpData
// Struct Size::0x0028
struct FWallRunJumpData : public FGameplayAbilityTargetData
{
    FVector                                       EndLocation;                                                  // 0x0008(0x000C)
    FRotator                                      EndRotation;                                                  // 0x0014(0x000C)
    bool                                          bWallRunFailed;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Solarland.VaultData
// Struct Size::0x0040
struct FVaultData : public FGameplayAbilityTargetData
{
    FVector                                       AnchorLocation;                                               // 0x0008(0x000C)
    FRotator                                      AnchorRotation;                                               // 0x0014(0x000C)
    FVector                                       LandLocation;                                                 // 0x0020(0x000C)
    enum class EVaultType                         VaultType;                                                    // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         CameraAngle;                                                  // 0x0030(0x0004)
    float                                         CharacterAngle;                                               // 0x0034(0x0004)
    bool                                          bAuto;                                                        // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Solarland.WallRunData
// Struct Size::0x0040
struct FWallRunData : public FVaultData
{
};


// ScriptStruct  Solarland.FloatParams
// Struct Size::0x0010
struct FFloatParams : public FGameplayAbilityTargetData
{
    float                                         FloatParam;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.VectorParams
// Struct Size::0x0018
struct FVectorParams : public FGameplayAbilityTargetData
{
    FVector                                       VectorParam;                                                  // 0x0008(0x000C)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.BlinkParams
// Struct Size::0x0028
struct FBlinkParams : public FGameplayAbilityTargetData
{
    FVector                                       ThrowLoc;                                                     // 0x0008(0x000C)
    FVector                                       ThrowDir;                                                     // 0x0014(0x000C)
    float                                         PredictTime;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.HellStrikeParams
// Struct Size::0x0018
struct FHellStrikeParams : public FGameplayAbilityTargetData
{
    TArray<FVector>                               ChosenPoints;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Solarland.MissileSwarmParams
// Struct Size::0x0020
struct FMissileSwarmParams : public FGameplayAbilityTargetData
{
    FVector                                       AimStart;                                                     // 0x0008(0x000C)
    FRotator                                      ViewRot;                                                      // 0x0014(0x000C)
};


// ScriptStruct  Solarland.SkywardDiveParams
// Struct Size::0x0010
struct FSkywardDiveParams : public FGameplayAbilityTargetData
{
    TWeakObjectPtr<AActor>                        SkywardDiveLauncherActor;                                     // 0x0008(0x0008)
};


// ScriptStruct  Solarland.LaunchParams
// Struct Size::0x0020
struct FLaunchParams : public FGameplayAbilityTargetData
{
    FVector                                       LaunchVelocity;                                               // 0x0008(0x000C)
    bool                                          bXYOverride;                                                  // 0x0014(0x0001)
    bool                                          bZOverride;                                                   // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    AActor*                                       JumpPadActor;                                                 // 0x0018(0x0008)
};


// ScriptStruct  Solarland.CrouchData
// Struct Size::0x0010
struct FCrouchData : public FGameplayAbilityTargetData
{
    bool                                          bCanCrouchOnFalling;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Solarland.MeleeAttackParams
// Struct Size::0x0010
struct FMeleeAttackParams : public FGameplayAbilityTargetData
{
    int32_t                                       MeleeIndex;                                                   // 0x0008(0x0004)
    bool                                          bFullBody;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Solarland.BoltParams
// Struct Size::0x0008
struct FBoltParams : public FGameplayAbilityTargetData
{
};


// ScriptStruct  Solarland.FireParams
// Struct Size::0x0010
struct FFireParams : public FGameplayAbilityTargetData
{
    bool                                          bFireWhileSprinting;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       FireTimeByThousandthSecond;                                   // 0x000C(0x0004)
};


// ScriptStruct  Solarland.EquipParams
// Struct Size::0x0010
struct FEquipParams : public FGameplayAbilityTargetData
{
    int32_t                                       WeaponSlot;                                                   // 0x0008(0x0004)
    float                                         SwitchTime;                                                   // 0x000C(0x0004)
};


// ScriptStruct  Solarland.PickUpAbilityParams
// Struct Size::0x0020
struct FPickUpAbilityParams : public FGameplayAbilityTargetData
{
    float                                         HeightDifferenceToItem;                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       SoundEventName;                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.ChunkAssignRule
// Struct Size::0x0018
struct FChunkAssignRule
{
    FString                                       FullPath;                                                     // 0x0000(0x0010)
    int32_t                                       ChunkID;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SafeAreaInfoBase
// Struct Size::0x0018
struct FSafeAreaInfoBase
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    float                                         WaitTime;                                                     // 0x000C(0x0004)
    float                                         ShrinkTime;                                                   // 0x0010(0x0004)
    float                                         DamageValue;                                                  // 0x0014(0x0004)
};


// ScriptStruct  Solarland.CircleSafeAreaInfo
// Struct Size::0x001C
struct FCircleSafeAreaInfo : public FSafeAreaInfoBase
{
    float                                         Radius;                                                       // 0x0018(0x0004)
};


// ScriptStruct  Solarland.HeroClassConfig
// Struct Size::0x0038
struct FHeroClassConfig
{
    TSoftObjectPtr<UPassiveSkillDataAsset>        SpecificPassiveSkill;                                         // 0x0000(0x0028)
    float                                         HPGridUnit;                                                   // 0x0028(0x0004)
    bool                                          bEnableCombatRegeneration;                                    // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    int32_t                                       RegenGrids;                                                   // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.ClassInfo
// Struct Size::0x0080
struct FClassInfo : public FTableRowBase
{
    enum class EClassType                         ClassType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       ClassName;                                                    // 0x000C(0x0004)
    FSoftObjectPath                               ClassIcon;                                                    // 0x0010(0x0018)
    TArray<USkillConfig*>                         RoleSkillArray;                                               // 0x0028(0x0010)
    TSoftObjectPtr<UPassiveSkillDataAsset>        InitPassiveSkill;                                             // 0x0038(0x0028)
    TArray<FClassLevelUpRewardConfig>             LevelUpBonus;                                                 // 0x0060(0x0010)
    FCharacterSpecializedSkillObjInfos            SpecializedSkillObjInfos;                                     // 0x0070(0x0010)
};


// ScriptStruct  Solarland.CharacterSpecializedSkillObjInfos
// Struct Size::0x0010
struct FCharacterSpecializedSkillObjInfos
{
    TArray<FCharacterSpecializedSkillObjInfo>     SkillObjInfos;                                                // 0x0000(0x0010)
};


// ScriptStruct  Solarland.CharacterSpecializedSkillObjInfo
// Struct Size::0x0018
struct FCharacterSpecializedSkillObjInfo
{
    TArray<enum class ENetRole>                   ValidRoles;                                                   // 0x0000(0x0010)
    USolarSkillFunctionaryObjectBase*             ObjectClass;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Solarland.ClassLevelUpRewardConfig
// Struct Size::0x0038
struct FClassLevelUpRewardConfig
{
    int32_t                                       TargetLevel;                                                  // 0x0000(0x0004)
    enum class EClassLevelUpRewardType            RewardType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TSoftObjectPtr<UPassiveSkillDataAsset>        TargetPassiveSkill;                                           // 0x0008(0x0028)
    FClassLevelUpPropertyRewardConfig             PropertyReward;                                               // 0x0030(0x0008)
};


// ScriptStruct  Solarland.ClassLevelUpPropertyRewardConfig
// Struct Size::0x0008
struct FClassLevelUpPropertyRewardConfig
{
    enum class ESolarTablesEnum_BattleUpgradeEffectTypeEffectType;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       EffectValue;                                                  // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarDamageTextData
// Struct Size::0x0018
struct FSolarDamageTextData
{
    TWeakObjectPtr<USolarTextBlock>               Text;                                                         // 0x0000(0x0008)
    TWeakObjectPtr<USolarTextBlock>               GlowText;                                                     // 0x0008(0x0008)
    TWeakObjectPtr<UWidgetAnimation>              Animation;                                                    // 0x0010(0x0008)
};


// ScriptStruct  Solarland.SolarDamageTextIconData
// Struct Size::0x0028
struct FSolarDamageTextIconData
{
    TArray<UImage*>                               Icons;                                                        // 0x0000(0x0010)
    TWeakObjectPtr<UImage>                        Outline;                                                      // 0x0010(0x0008)
    TWeakObjectPtr<UCanvasPanel>                  Panel;                                                        // 0x0018(0x0008)
    TWeakObjectPtr<UWidgetAnimation>              Animation;                                                    // 0x0020(0x0008)
};


// ScriptStruct  Solarland.SolarDamageTextGroupInfo
// Struct Size::0x0048
struct FSolarDamageTextGroupInfo
{
    TArray<FSolarDamageTextInfo>                  InvalidDamageTextInfoArray;                                   // 0x0000(0x0010)
    FSolarDamageTextInfo                          StackDamageTextInfo;                                          // 0x0010(0x0028)
    float                                         LastDamageTime;                                               // 0x0038(0x0004)
    int32_t                                       HitCount;                                                     // 0x003C(0x0004)
    uint32_t                                      UniqueId;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarDamageTextInfo
// Struct Size::0x0028
struct FSolarDamageTextInfo
{
    USolarDamageTextSlotWidget*                   DamageTextWidget;                                             // 0x0000(0x0008)
    int32_t                                       Damage;                                                       // 0x0008(0x0004)
    FVector                                       DisplayLocation;                                              // 0x000C(0x000C)
    FVector2D                                     DisplayPositionOffset;                                        // 0x0018(0x0008)
    FVector2D                                     DefaultPositionOffset;                                        // 0x0020(0x0008)
};


// ScriptStruct  Solarland.SolarDamageTextScaleRange
// Struct Size::0x0008
struct FSolarDamageTextScaleRange
{
    float                                         Min;                                                          // 0x0000(0x0004)
    float                                         Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarDamageTextOffsetData
// Struct Size::0x000C
struct FSolarDamageTextOffsetData
{
    float                                         HitHeightOffset;                                              // 0x0000(0x0004)
    FVector2D                                     DisplayPositionOffset;                                        // 0x0004(0x0008)
};


// ScriptStruct  Solarland.SolarDamageTextSlotInfo
// Struct Size::0x0178
struct FSolarDamageTextSlotInfo
{
    int32_t                                       Damage;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSolarDamageTextStyle                         DamageTextStyle;                                              // 0x0008(0x0100)
    enum class ESolarDamageTextType               DamageTextType;                                               // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
    FSolarDamageTextColor                         DamageTextColor;                                              // 0x0110(0x0068)
};


// ScriptStruct  Solarland.SolarDamageTextColor
// Struct Size::0x0068
struct FSolarDamageTextColor
{
    FSlateColor                                   FontColor;                                                    // 0x0000(0x0028)
    FLinearColor                                  ShadowColor;                                                  // 0x0028(0x0010)
    FLinearColor                                  IconColor;                                                    // 0x0038(0x0010)
    FLinearColor                                  OutlineColor;                                                 // 0x0048(0x0010)
    FLinearColor                                  IconOutlineColor;                                             // 0x0058(0x0010)
};


// ScriptStruct  Solarland.SolarDamageTextStyle
// Struct Size::0x0100
struct FSolarDamageTextStyle
{
    FText                                         DamageText;                                                   // 0x0000(0x0018)
    FSlateFontInfo                                Font;                                                         // 0x0018(0x0060)
    FSlateFontInfo                                GlowFont;                                                     // 0x0078(0x0060)
    FVector2D                                     ShadowOffset;                                                 // 0x00D8(0x0008)
    FMargin                                       Margin;                                                       // 0x00E0(0x0010)
    TArray<FSolarDamageTextColor>                 Colors;                                                       // 0x00F0(0x0010)
};


// ScriptStruct  Solarland.VehicleSeatWidgets
// Struct Size::0x0018
struct FVehicleSeatWidgets
{
    USolarCheckBox*                               CheckBox_Seat;                                                // 0x0000(0x0008)
    USolarCheckBox*                               CheckBox_SeatExpand;                                          // 0x0008(0x0008)
    UImage*                                       Img_SwitchIcon;                                               // 0x0010(0x0008)
};


// ScriptStruct  Solarland.VehicleWeaponFireWidgets
// Struct Size::0x0038
struct FVehicleWeaponFireWidgets
{
    USolarMovablePad*                             VehicleFirePad;                                               // 0x0000(0x0008)
    UImage*                                       VehicleFireIcon;                                              // 0x0008(0x0008)
    USolarTextBlock*                              Txt_FireType;                                                 // 0x0010(0x0008)
    UProgressBar*                                 VehicleFireCDProgress;                                        // 0x0018(0x0008)
    USolarTextBlock*                              Txt_VehicleFireCD;                                            // 0x0020(0x0008)
    USolarMovablePad*                             QuickAdsFirePad;                                              // 0x0028(0x0008)
    UImage*                                       QuickAdsFireIcon;                                             // 0x0030(0x0008)
};


// ScriptStruct  Solarland.EVGameTotalCollectDataInfoNew
// Struct Size::0x0030
struct FEVGameTotalCollectDataInfoNew
{
    FString                                       BattleID;                                                     // 0x0000(0x0010)
    TArray<FEVPlayerTotalCollectDataInfoNew>      PlayerTotalCollectDataInfos;                                  // 0x0010(0x0010)
    TArray<FEVPlayerSettleCollectDataInfoNew>     PlayerSettleCollectDataInfo;                                  // 0x0020(0x0010)
};


// ScriptStruct  Solarland.EVPlayerSettleCollectDataInfoNew
// Struct Size::0x0040
struct FEVPlayerSettleCollectDataInfoNew
{
    FString                                       PlayerId;                                                     // 0x0000(0x0010)
    int32_t                                       CharacterId;                                                  // 0x0010(0x0004)
    int32_t                                       TeamID;                                                       // 0x0014(0x0004)
    int32_t                                       KillNum;                                                      // 0x0018(0x0004)
    int32_t                                       AssistNum;                                                    // 0x001C(0x0004)
    float                                         LifeTime;                                                     // 0x0020(0x0004)
    float                                         TotalCausedDamage;                                            // 0x0024(0x0004)
    float                                         DamageTaken;                                                  // 0x0028(0x0004)
    float                                         SelfHealing;                                                  // 0x002C(0x0004)
    float                                         PlayerScore;                                                  // 0x0030(0x0004)
    int32_t                                       TeamRank;                                                     // 0x0034(0x0004)
    bool                                          bIsCheater;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       UserId;                                                       // 0x003C(0x0004)
};


// ScriptStruct  Solarland.EVPlayerTotalCollectDataInfoNew
// Struct Size::0x0048
struct FEVPlayerTotalCollectDataInfoNew
{
    FString                                       PlayerId;                                                     // 0x0000(0x0010)
    FString                                       PlayerNickName;                                               // 0x0010(0x0010)
    int32_t                                       CharacterId;                                                  // 0x0020(0x0004)
    int32_t                                       TeamNumber;                                                   // 0x0024(0x0004)
    FString                                       PlatformType;                                                 // 0x0028(0x0010)
    TArray<FEVPlayerCollectDataInfoNew>           PlayerCollectDataInfos;                                       // 0x0038(0x0010)
};


// ScriptStruct  Solarland.EVPlayerCollectDataInfoNew
// Struct Size::0x00F0
struct FEVPlayerCollectDataInfoNew
{
    float                                         ServerTime;                                                   // 0x0000(0x0004)
    bool                                          bUseful;                                                      // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FEVPlayerBaseInfoNew                          PlayerBaseInfo;                                               // 0x0008(0x0058)
    TArray<FEVPlayerDamageInfoNew>                PlayerDamageInfos;                                            // 0x0060(0x0010)
    TArray<FEVPlayerSkillInfo>                    PlayerSkillInfos;                                             // 0x0070(0x0010)
    TArray<FEVPlayerWeaponFireInfoNew>            PlayerWeaponFireInfos;                                        // 0x0080(0x0010)
    TMap<int32_t,FEVPlayerWeaponHitInfoNew>       PlayerWeaponHitInfos;                                         // 0x0090(0x0050)
    bool                                          bHasFragment;                                                 // 0x00E0(0x0001)
    char                                          pa_00E1[0x0003]                                               // 0x00E1(0x0003)
    FEVPlayerFragmentInfo                         PlayerFragmentInfo;                                           // 0x00E4(0x000C)
};


// ScriptStruct  Solarland.EVPlayerFragmentInfo
// Struct Size::0x000C
struct FEVPlayerFragmentInfo
{
    int32_t                                       WeaponShootNun;                                               // 0x0000(0x0004)
    int32_t                                       ShootHitNum;                                                  // 0x0004(0x0004)
    int32_t                                       HeadShootNum;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Solarland.EVPlayerWeaponHitInfoNew
// Struct Size::0x0010
struct FEVPlayerWeaponHitInfoNew
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.EVPlayerWeaponFireInfoNew
// Struct Size::0x0010
struct FEVPlayerWeaponFireInfoNew
{
    int32_t                                       weaponid;                                                     // 0x0000(0x0004)
    int32_t                                       WeaponCurrentAmmo;                                            // 0x0004(0x0004)
    float                                         FireTimeStamp;                                                // 0x0008(0x0004)
    uint32_t                                      FireUniqueID;                                                 // 0x000C(0x0004)
};


// ScriptStruct  Solarland.EVPlayerSkillInfo
// Struct Size::0x0004
struct FEVPlayerSkillInfo
{
    int32_t                                       AbilityIndex;                                                 // 0x0000(0x0004)
};


// ScriptStruct  Solarland.EVPlayerDamageInfoNew
// Struct Size::0x0070
struct FEVPlayerDamageInfoNew
{
    FString                                       AttackerPlayerID;                                             // 0x0000(0x0010)
    FString                                       VictimPlayerID;                                               // 0x0010(0x0010)
    bool                                          bIsDown;                                                      // 0x0020(0x0001)
    bool                                          bIsKill;                                                      // 0x0021(0x0001)
    enum class EEVDamageType                      DamageType;                                                   // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
    int32_t                                       UseToolID;                                                    // 0x0024(0x0004)
    bool                                          bIsHeadshot;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         BaseDamageValue;                                              // 0x002C(0x0004)
    float                                         ActualDamageValue;                                            // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       VictimPlayerNickName;                                         // 0x0038(0x0010)
    int32_t                                       VictimCharacterID;                                            // 0x0048(0x0004)
    int32_t                                       VictimTeamNumber;                                             // 0x004C(0x0004)
    FVector                                       VictimLocation;                                               // 0x0050(0x000C)
    FRotator                                      VictimRotation;                                               // 0x005C(0x000C)
    float                                         DistanceBetweenActors;                                        // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Solarland.EVPlayerBaseInfoNew
// Struct Size::0x0058
struct FEVPlayerBaseInfoNew
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FVector                                       Velocity;                                                     // 0x0018(0x000C)
    int32_t                                       PlayerLevelNum;                                               // 0x0024(0x0004)
    bool                                          bDead;                                                        // 0x0028(0x0001)
    bool                                          bIsJump;                                                      // 0x0029(0x0001)
    bool                                          bIsWalk;                                                      // 0x002A(0x0001)
    bool                                          bIsFalling;                                                   // 0x002B(0x0001)
    bool                                          bWeaponReloading;                                             // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    int32_t                                       CurrentWeaponId;                                              // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       CurrentWeaponPartLevelList;                                   // 0x0038(0x0010)
    int32_t                                       CurrentVehicleId;                                             // 0x0048(0x0004)
    int32_t                                       CurrentShieldLevel;                                           // 0x004C(0x0004)
    bool                                          bInsidePoisonCircle;                                          // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  Solarland.EVGameTotalCollectDataInfo
// Struct Size::0x0030
struct FEVGameTotalCollectDataInfo
{
    FString                                       BattleID;                                                     // 0x0000(0x0010)
    TArray<FEVPlayerTotalCollectDataInfo>         PlayerTotalCollectDataInfos;                                  // 0x0010(0x0010)
    TArray<FEVPlayerSettleCollectDataInfo>        PlayerSettleCollectDataInfo;                                  // 0x0020(0x0010)
};


// ScriptStruct  Solarland.EVPlayerSettleCollectDataInfo
// Struct Size::0x0040
struct FEVPlayerSettleCollectDataInfo
{
    FString                                       PlayerId;                                                     // 0x0000(0x0010)
    int32_t                                       CharacterId;                                                  // 0x0010(0x0004)
    int32_t                                       TeamID;                                                       // 0x0014(0x0004)
    int32_t                                       KillNum;                                                      // 0x0018(0x0004)
    int32_t                                       AssistNum;                                                    // 0x001C(0x0004)
    float                                         LifeTime;                                                     // 0x0020(0x0004)
    float                                         TotalCausedDamage;                                            // 0x0024(0x0004)
    float                                         DamageTaken;                                                  // 0x0028(0x0004)
    float                                         SelfHealing;                                                  // 0x002C(0x0004)
    float                                         PlayerScore;                                                  // 0x0030(0x0004)
    int32_t                                       TeamRank;                                                     // 0x0034(0x0004)
    bool                                          bIsCheater;                                                   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       UserId;                                                       // 0x003C(0x0004)
};


// ScriptStruct  Solarland.EVPlayerTotalCollectDataInfo
// Struct Size::0x0020
struct FEVPlayerTotalCollectDataInfo
{
    FString                                       PlayerId;                                                     // 0x0000(0x0010)
    TArray<FEVPlayerCollectDataInfo>              PlayerCollectDataInfos;                                       // 0x0010(0x0010)
};


// ScriptStruct  Solarland.EVPlayerCollectDataInfo
// Struct Size::0x00E8
struct FEVPlayerCollectDataInfo
{
    float                                         ServerTime;                                                   // 0x0000(0x0004)
    bool                                          bUseful;                                                      // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FEVPlayerBaseInfo                             PlayerBaseInfo;                                               // 0x0008(0x0090)
    TArray<FEVPlayerDamageInfo>                   PlayerDamageInfos;                                            // 0x0098(0x0010)
    TArray<FEVPlayerSkillInfo>                    PlayerSkillInfos;                                             // 0x00A8(0x0010)
    TArray<FEVPlayerWeaponFireInfo>               PlayerWeaponFireInfos;                                        // 0x00B8(0x0010)
    TArray<FEVPlayerWeaponHitInfo>                PlayerWeaponHitInfos;                                         // 0x00C8(0x0010)
    bool                                          bHasFragment;                                                 // 0x00D8(0x0001)
    char                                          pa_00D9[0x0003]                                               // 0x00D9(0x0003)
    FEVPlayerFragmentInfo                         PlayerFragmentInfo;                                           // 0x00DC(0x000C)
};


// ScriptStruct  Solarland.EVPlayerWeaponHitInfo
// Struct Size::0x0008
struct FEVPlayerWeaponHitInfo
{
    int32_t                                       weaponid;                                                     // 0x0000(0x0004)
    bool                                          bIsHeadshot;                                                  // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.EVPlayerWeaponFireInfo
// Struct Size::0x000C
struct FEVPlayerWeaponFireInfo
{
    int32_t                                       weaponid;                                                     // 0x0000(0x0004)
    int32_t                                       WeaponCurrentAmmo;                                            // 0x0004(0x0004)
    float                                         FireTimeStamp;                                                // 0x0008(0x0004)
};


// ScriptStruct  Solarland.EVPlayerDamageInfo
// Struct Size::0x0068
struct FEVPlayerDamageInfo
{
    FString                                       AttackerPlayerID;                                             // 0x0000(0x0010)
    FString                                       VictimPlayerID;                                               // 0x0010(0x0010)
    bool                                          bIsKill;                                                      // 0x0020(0x0001)
    enum class EEVDamageType                      DamageType;                                                   // 0x0021(0x0001)
    char                                          pa_0022[0x0002]                                               // 0x0022(0x0002)
    int32_t                                       UseToolID;                                                    // 0x0024(0x0004)
    bool                                          bIsHeadshot;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         DamageValue;                                                  // 0x002C(0x0004)
    FString                                       VictimPlayerNickName;                                         // 0x0030(0x0010)
    int32_t                                       VictimCharacterID;                                            // 0x0040(0x0004)
    int32_t                                       VictimTeamNumber;                                             // 0x0044(0x0004)
    FVector                                       VictimLocation;                                               // 0x0048(0x000C)
    FRotator                                      VictimRotation;                                               // 0x0054(0x000C)
    float                                         DistanceBetweenActors;                                        // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.EVPlayerBaseInfo
// Struct Size::0x0090
struct FEVPlayerBaseInfo
{
    FString                                       PlayerId;                                                     // 0x0000(0x0010)
    FString                                       PlayerNickName;                                               // 0x0010(0x0010)
    int32_t                                       CharacterId;                                                  // 0x0020(0x0004)
    int32_t                                       TeamNumber;                                                   // 0x0024(0x0004)
    FVector                                       Location;                                                     // 0x0028(0x000C)
    FRotator                                      Rotation;                                                     // 0x0034(0x000C)
    FVector                                       Velocity;                                                     // 0x0040(0x000C)
    int32_t                                       PlayerLevelNum;                                               // 0x004C(0x0004)
    bool                                          bDead;                                                        // 0x0050(0x0001)
    bool                                          bIsJump;                                                      // 0x0051(0x0001)
    bool                                          bIsWalk;                                                      // 0x0052(0x0001)
    bool                                          bIsFalling;                                                   // 0x0053(0x0001)
    bool                                          bWeaponReloading;                                             // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    int32_t                                       CurrentWeaponId;                                              // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       CurrentWeaponPartLevelList;                                   // 0x0060(0x0010)
    int32_t                                       CurrentVehicleId;                                             // 0x0070(0x0004)
    int32_t                                       CurrentShieldLevel;                                           // 0x0074(0x0004)
    bool                                          bInsidePoisonCircle;                                          // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
    FString                                       PlatformType;                                                 // 0x0080(0x0010)
};


// ScriptStruct  Solarland.PoolRefreshInfo
// Struct Size::0x0008
struct FPoolRefreshInfo
{
    int32_t                                       PoolGroupID;                                                  // 0x0000(0x0004)
    float                                         PoolRefreshTime;                                              // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ElectricShopSection
// Struct Size::0x0018
struct FElectricShopSection
{
    TArray<FElectricShopItem>                     Items;                                                        // 0x0000(0x0010)
    float                                         CoolDownDuration;                                             // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.ElectricShopCDRecord
// Struct Size::0x0020
struct FElectricShopCDRecord
{
    int32_t                                       ProductID;                                                    // 0x0000(0x0004)
    float                                         Duration;                                                     // 0x0004(0x0004)
    float                                         EndWorldTime;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       BuyerID;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Solarland.ElectricShopItemDemoRow
// Struct Size::0x0030
struct FElectricShopItemDemoRow : public FTableRowBase
{
    TSoftClassPtr<UObject>                        ItemDemoBP;                                                   // 0x0008(0x0028)
};


// ScriptStruct  Solarland.ElectricShopMeshRow
// Struct Size::0x0020
struct FElectricShopMeshRow : public FTableRowBase
{
    FSoftObjectPath                               Mesh;                                                         // 0x0008(0x0018)
};


// ScriptStruct  Solarland.MatUpdateParams
// Struct Size::0x0020
struct FMatUpdateParams
{
    FName                                         MatParam;                                                     // 0x0000(0x0008)
    UCurveBase*                                   MatCurve;                                                     // 0x0008(0x0008)
    UCurveBase*                                   MatCurveEnemy;                                                // 0x0010(0x0008)
    bool                                          bCanComplete;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Solarland.SolarExpSpringData
// Struct Size::0x0080
struct FSolarExpSpringData : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       Description;                                                  // 0x0010(0x0010)
    int32_t                                       Priority;                                                     // 0x0020(0x0004)
    enum class ESpringRewardLimitType             LimitType;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    int32_t                                       LimitValue;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TMap<int32_t,FExpSpringRewardData>            LevelRewardMap;                                               // 0x0030(0x0050)
};


// ScriptStruct  Solarland.ExpSpringRewardData
// Struct Size::0x0050
struct FExpSpringRewardData
{
    TMap<int32_t,int32_t>                         RewardPackInfos;                                              // 0x0000(0x0050)
};


// ScriptStruct  Solarland.SolarExpSpringRoundHeaderArray
// Struct Size::0x0120
struct FSolarExpSpringRoundHeaderArray : public FFastArraySerializer
{
    char                                          pa_0108[0x0008]                                               // 0x0108(0x0008)
    TArray<FSolarExpSpringRoundHeader>            RoundHeaders;                                                 // 0x0110(0x0010)
};


// ScriptStruct  Solarland.SolarExpSpringRoundHeader
// Struct Size::0x0028
struct FSolarExpSpringRoundHeader : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0001]                                               // 0x000C(0x0001)
    char                                          OpenID;                                                       // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    float                                         OpenTimeSecond;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FSolarExpSpringActorHeader>            ActorHeaders;                                                 // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarExpSpringActorHeader
// Struct Size::0x0014
struct FSolarExpSpringActorHeader
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
    enum class EExpSpringPointState               PointState;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Solarland.ExpSpringPreSelectData
// Struct Size::0x0008
struct FExpSpringPreSelectData
{
    char                                          OpenPointNum;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         OpenTimeLength;                                               // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarExpSpringStageData
// Struct Size::0x0024
struct FSolarExpSpringStageData
{
    char                                          pa_0000[0x0024]                                               // 0x0000(0x0024)
};


// ScriptStruct  Solarland.ExpSpringFastSharedRepInfo
// Struct Size::0x0010
struct FExpSpringFastSharedRepInfo
{
    enum class EExpSpringPointState               PointState;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Deadline;                                                     // 0x0004(0x0004)
    float                                         PointTime;                                                    // 0x0008(0x0004)
    float                                         ActiveTimeLength;                                             // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ExpSpringActorRewardData
// Struct Size::0x0018
struct FExpSpringActorRewardData
{
    TArray<FExpSpringActorRewardList>             RewardList;                                                   // 0x0000(0x0010)
    int32_t                                       FinalChestID;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.ExpSpringActorRewardList
// Struct Size::0x0008
struct FExpSpringActorRewardList
{
    float                                         SendTime;                                                     // 0x0000(0x0004)
    int32_t                                       ItemID;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ExpSpringChestTransform
// Struct Size::0x0020
struct FExpSpringChestTransform
{
    FVector                                       ChestPostion;                                                 // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         ChestRotation;                                                // 0x0010(0x0010)
};


// ScriptStruct  Solarland.ExpSpringActorSplinePoint
// Struct Size::0x0018
struct FExpSpringActorSplinePoint
{
    FVector_NetQuantize                           Pos;                                                          // 0x0000(0x000C)
    FVector_NetQuantize                           Tangent;                                                      // 0x000C(0x000C)
};


// ScriptStruct  Solarland.ExpSpringBICloseData
// Struct Size::0x0001
struct FExpSpringBICloseData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Solarland.ExpSpringSpawnerRewardData
// Struct Size::0x00D0
struct FExpSpringSpawnerRewardData
{
    char                                          pa_0000[0x00D0]                                               // 0x0000(0x00D0)
};


// ScriptStruct  Solarland.SolarExpSpringTableRow
// Struct Size::0x0060
struct FSolarExpSpringTableRow : public FTableRowBase
{
    enum class ESolarExpSpringChestLevel          ChestLevel;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TMap<int32_t,float>                           RewardMap;                                                    // 0x0010(0x0050)
};


// ScriptStruct  Solarland.CharacterSkydiveTrailData
// Struct Size::0x0060
struct FCharacterSkydiveTrailData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Solarland.PackedSkydiveTrailFrameInfoContainer
// Struct Size::0x0120
struct FPackedSkydiveTrailFrameInfoContainer : public FFastArraySerializer
{
    TArray<FPackedSkydiveTrailFrameInfo>          InfoArray;                                                    // 0x0108(0x0010)
    ASolarFlyTrail*                               Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  Solarland.PackedSkydiveTrailFrameInfo
// Struct Size::0x0030
struct FPackedSkydiveTrailFrameInfo : public FFastArraySerializerItem
{
    float                                         Timestamp;                                                    // 0x000C(0x0004)
    TArray<FSkydiveTrailFrameInfo>                FrameInfos;                                                   // 0x0010(0x0010)
    TArray<ASolarPlayerState*>                    FinishedPlayerStates;                                         // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SkydiveTrailFrameInfo
// Struct Size::0x0020
struct FSkydiveTrailFrameInfo
{
    ASolarPlayerState*                            OwnerPlayerState;                                             // 0x0000(0x0008)
    FVector_NetQuantize                           Location;                                                     // 0x0008(0x000C)
    FVector_NetQuantize                           Velocity;                                                     // 0x0014(0x000C)
};


// ScriptStruct  Solarland.CharacterSkydiveTrailStaticInfoContainer
// Struct Size::0x0120
struct FCharacterSkydiveTrailStaticInfoContainer : public FFastArraySerializer
{
    TArray<FCharacterSkydiveTrailStaticInfo>      InfoArray;                                                    // 0x0108(0x0010)
    ASolarFlyTrail*                               Owner;                                                        // 0x0118(0x0008)
};


// ScriptStruct  Solarland.CharacterSkydiveTrailStaticInfo
// Struct Size::0x0038
struct FCharacterSkydiveTrailStaticInfo : public FFastArraySerializerItem
{
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CharacterId;                                                  // 0x0010(0x0010)
    ASolarPlayerState*                            PlayerState;                                                  // 0x0020(0x0008)
    FString                                       TrailAssemblingId;                                            // 0x0028(0x0010)
};


// ScriptStruct  Solarland.FocusLockDetectConfig
// Struct Size::0x0028
struct FFocusLockDetectConfig
{
    enum class EFocusLockType                     TargetType;                                                   // 0x0000(0x0001)
    enum class EActorRegisterType                 TargetActorType;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         MaxDistance;                                                  // 0x0004(0x0004)
    FVector2D                                     RangeExtent;                                                  // 0x0008(0x0008)
    float                                         MinTargetSwitchInterval;                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<enum class EObjectTypeQuery>           TargetOccBlockTypes;                                          // 0x0018(0x0010)
};


// ScriptStruct  Solarland.VehicleDetector
// Struct Size::0x0018
struct FVehicleDetector
{
    FRotator                                      VehicleLocalRotator;                                          // 0x0000(0x000C)
    FVector                                       StartLocParameter;                                            // 0x000C(0x000C)
};


// ScriptStruct  Solarland.FuncCharacterBackpackInfo
// Struct Size::0x0008
struct FFuncCharacterBackpackInfo
{
    int32_t                                       BagId;                                                        // 0x0000(0x0004)
    int32_t                                       TailFlameId;                                                  // 0x0004(0x0004)
};


// ScriptStruct  Solarland.AntiCheatData
// Struct Size::0x0070
struct FAntiCheatData
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  Solarland.SolarGameMode_DropItemData
// Struct Size::0x0008
struct FSolarGameMode_DropItemData
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    int32_t                                       count;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SCustomMode_GameModeSetting
// Struct Size::0x0060
struct FSCustomMode_GameModeSetting
{
    FSoftObjectPath                               PlayerControllerClass;                                        // 0x0000(0x0018)
    FSoftObjectPath                               DefaultPawnClass;                                             // 0x0018(0x0018)
    FSoftObjectPath                               PlayerStateClass;                                             // 0x0030(0x0018)
    FSoftObjectPath                               HUDClass;                                                     // 0x0048(0x0018)
};


// ScriptStruct  Solarland.SGameMode_LevelConfig
// Struct Size::0x0078
struct FSGameMode_LevelConfig
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FString                                       Desc;                                                         // 0x0010(0x0010)
    FSoftObjectPath                               LevelMap;                                                     // 0x0020(0x0018)
    int32_t                                       MiniMapId;                                                    // 0x0038(0x0004)
    bool                                          IsStreaming;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    TArray<FSolarElementGroupPath>                ElementGroups;                                                // 0x0040(0x0010)
    TSoftClassPtr<UObject>                        LoadingUI;                                                    // 0x0050(0x0028)
};


// ScriptStruct  Solarland.SolarElementGroupPath
// Struct Size::0x0030
struct FSolarElementGroupPath
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FSoftObjectPath                               ElementLevel;                                                 // 0x0010(0x0018)
    bool                                          LoadWithLevel;                                                // 0x0028(0x0001)
    bool                                          bPersistentLevel;                                             // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  Solarland.GameMode_ElementStruct
// Struct Size::0x0220
struct FGameMode_ElementStruct : public FTableRowBase
{
    FString                                       ElementID;                                                    // 0x0008(0x0010)
    FString                                       Description;                                                  // 0x0018(0x0010)
    FString                                       Side;                                                         // 0x0028(0x0010)
    FString                                       Job;                                                          // 0x0038(0x0010)
    TArray<FName>                                 Tags;                                                         // 0x0048(0x0010)
    TMap<FString,bool>                            PropertiesBool;                                               // 0x0058(0x0050)
    TMap<FString,int32_t>                         PropertiesInt;                                                // 0x00A8(0x0050)
    TMap<FString,float>                           PropertiesFloat;                                              // 0x00F8(0x0050)
    TMap<FString,FString>                         PropertiesString;                                             // 0x0148(0x0050)
    FName                                         ElementTypeName;                                              // 0x0198(0x0008)
    FString                                       BP_Path;                                                      // 0x01A0(0x0010)
    FVector                                       Location;                                                     // 0x01B0(0x000C)
    char                                          pa_01BC[0x0004]                                               // 0x01BC(0x0004)
    FQuat                                         Rotation;                                                     // 0x01C0(0x0010)
    FVector                                       Scale;                                                        // 0x01D0(0x000C)
    enum class EElementStateType                  State;                                                        // 0x01DC(0x0001)
    enum class EElementVisibilityType             Visibility;                                                   // 0x01DD(0x0001)
    char                                          pa_01DE[0x0002]                                               // 0x01DE(0x0002)
    int32_t                                       OutcomeID;                                                    // 0x01E0(0x0004)
    FBox                                          SpawnerBox;                                                   // 0x01E4(0x001C)
    bool                                          bRefresh;                                                     // 0x0200(0x0001)
    char                                          pa_0201[0x0003]                                               // 0x0201(0x0003)
    float                                         RefreshTime;                                                  // 0x0204(0x0004)
    bool                                          bUseSpawnerTransform;                                         // 0x0208(0x0001)
    bool                                          bToTheGround;                                                 // 0x0209(0x0001)
    char                                          pa_020A[0x0002]                                               // 0x020A(0x0002)
    int32_t                                       SpawnID;                                                      // 0x020C(0x0004)
    int32_t                                       Zone;                                                         // 0x0210(0x0004)
    enum class ESGameMode_ElementType             Type;                                                         // 0x0214(0x0001)
    char                                          pa_0215[0x000B]                                               // 0x0215(0x000B)
};


// ScriptStruct  Solarland.SolarElementGroup
// Struct Size::0x0020
struct FSolarElementGroup
{
    FString                                       GroupKey;                                                     // 0x0000(0x0010)
    bool                                          bIsDefault;                                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UDataTable*                                   ElementTable;                                                 // 0x0018(0x0008)
};


// ScriptStruct  Solarland.StatDataValue
// Struct Size::0x0098
struct FStatDataValue
{
    float                                         FloatValue;                                                   // 0x0000(0x0004)
    bool                                          BoolValue;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FString                                       StringValue;                                                  // 0x0008(0x0010)
    TMap<int32_t,float>                           IntfloatValue;                                                // 0x0018(0x0050)
    TArray<int32_t>                               IntArrayValue;                                                // 0x0068(0x0010)
    TArray<float>                                 FloatArrayValue;                                              // 0x0078(0x0010)
    FVector                                       Vector;                                                       // 0x0088(0x000C)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  Solarland.AbilityMeshMontage
// Struct Size::0x0010
struct FAbilityMeshMontage
{
    USkeletalMeshComponent*                       Mesh;                                                         // 0x0000(0x0008)
    UAnimMontage*                                 Montage;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Solarland.VaultSettingsRange
// Struct Size::0x0020
struct FVaultSettingsRange
{
    FRangeData                                    JoystickForwardRange;                                         // 0x0000(0x0008)
    FRangeData                                    MaxFacingAngle2D;                                             // 0x0008(0x0008)
    FRangeData                                    AutoMaxFacingAngle2D;                                         // 0x0010(0x0008)
    FRangeData                                    WallRunCameraAngleTolerance;                                  // 0x0018(0x0008)
};


// ScriptStruct  Solarland.SensitivitySettingsRange
// Struct Size::0x0120
struct FSensitivitySettingsRange
{
    FRangeData                                    Sensitivity_CurveScale;                                       // 0x0000(0x0008)
    FRangeData                                    Sensitivity_Free;                                             // 0x0008(0x0008)
    FRangeData                                    Sensitivity_SecondarySkills;                                  // 0x0010(0x0008)
    FRangeData                                    Sensitivity_SuperSkills;                                      // 0x0018(0x0008)
    FCameraSensitivityRangeData                   Sensitivity_NoShoot;                                          // 0x0020(0x0040)
    FCameraSensitivityRangeData                   Sensitivity_Shoot;                                            // 0x0060(0x0040)
    FVehicleCameraSensitivityRangeData            Sensitivity_Vehicle_NoShoot;                                  // 0x00A0(0x0018)
    FVehicleCameraSensitivityRangeData            Sensitivity_Vehicle_Shoot;                                    // 0x00B8(0x0018)
    FRangeData                                    Sensitivity_VehicleDriver;                                    // 0x00D0(0x0008)
    FRangeData                                    Sensitivity_VehicleFire;                                      // 0x00D8(0x0008)
    FGyroscopeSensitivityRangeData                Sensitivity_GyroscopeData;                                    // 0x00E0(0x0040)
};


// ScriptStruct  Solarland.GyroscopeSensitivityRangeData
// Struct Size::0x0040
struct FGyroscopeSensitivityRangeData
{
    FRangeData                                    GyroscopeSensitivity_Basic;                                   // 0x0000(0x0008)
    FRangeData                                    GyroscopeSensitivity_Shoulder;                                // 0x0008(0x0008)
    FRangeData                                    GyroscopeSensitivity_RedPoint;                                // 0x0010(0x0008)
    FRangeData                                    GyroscopeSensitivity_Lens_Two;                                // 0x0018(0x0008)
    FRangeData                                    GyroscopeSensitivity_Lens_Three;                              // 0x0020(0x0008)
    FRangeData                                    GyroscopeSensitivity_Lens_Four;                               // 0x0028(0x0008)
    FRangeData                                    GyroscopeSensitivity_Lens_Six;                                // 0x0030(0x0008)
    FRangeData                                    GyroscopeSensitivity_Lens_Eight;                              // 0x0038(0x0008)
};


// ScriptStruct  Solarland.VehicleCameraSensitivityRangeData
// Struct Size::0x0018
struct FVehicleCameraSensitivityRangeData
{
    FRangeData                                    Sensitivity_Lens_Two;                                         // 0x0000(0x0008)
    FRangeData                                    Sensitivity_Lens_Four;                                        // 0x0008(0x0008)
    FRangeData                                    Sensitivity_Lens_Eight;                                       // 0x0010(0x0008)
};


// ScriptStruct  Solarland.CameraSensitivityRangeData
// Struct Size::0x0040
struct FCameraSensitivityRangeData
{
    FRangeData                                    Sensitivity_Basic;                                            // 0x0000(0x0008)
    FRangeData                                    Sensitivity_Shoulder;                                         // 0x0008(0x0008)
    FRangeData                                    Sensitivity_RedPoint;                                         // 0x0010(0x0008)
    FRangeData                                    Sensitivity_Lens_Two;                                         // 0x0018(0x0008)
    FRangeData                                    Sensitivity_Lens_Three;                                       // 0x0020(0x0008)
    FRangeData                                    Sensitivity_Lens_Four;                                        // 0x0028(0x0008)
    FRangeData                                    Sensitivity_Lens_Six;                                         // 0x0030(0x0008)
    FRangeData                                    Sensitivity_Lens_Eight;                                       // 0x0038(0x0008)
};


// ScriptStruct  Solarland.SoundSettingsRange
// Struct Size::0x0020
struct FSoundSettingsRange
{
    FRangeData                                    Sound_Global;                                                 // 0x0000(0x0008)
    FRangeData                                    Sound_Action;                                                 // 0x0008(0x0008)
    FRangeData                                    Sound_BackGround;                                             // 0x0010(0x0008)
    FRangeData                                    Sound_Character;                                              // 0x0018(0x0008)
};


// ScriptStruct  Solarland.GamepadSettingsRange
// Struct Size::0x0010
struct FGamepadSettingsRange
{
    FRangeData                                    MainHorizontalSensitivity;                                    // 0x0000(0x0008)
    FRangeData                                    MainVerticalSensitivity;                                      // 0x0008(0x0008)
};


// ScriptStruct  Solarland.MouseAndKeyboardSettingsRange
// Struct Size::0x0008
struct FMouseAndKeyboardSettingsRange
{
    FRangeData                                    MainSensitivity;                                              // 0x0000(0x0008)
};


// ScriptStruct  Solarland.PlayerStatesInTeam
// Struct Size::0x0010
struct FPlayerStatesInTeam
{
    TArray<ASolarPlayerState*>                    PlayerStates;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarGameStatisticsLogHeadInfo
// Struct Size::0x0028
struct FSolarGameStatisticsLogHeadInfo
{
    int32_t                                       BattleInstanceId;                                             // 0x0000(0x0004)
    int32_t                                       PIEInstance;                                                  // 0x0004(0x0004)
    FString                                       BattleID;                                                     // 0x0008(0x0010)
    FString                                       WorldName;                                                    // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarGameStatisticsData
// Struct Size::0x0028
struct FSolarGameStatisticsData
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Solarland.GraphicsUserSettings
// Struct Size::0x0060
struct FGraphicsUserSettings
{
    enum class ESolarFrameRateLevel               FpsLevel;                                                     // 0x0000(0x0001)
    enum class ESolarContentScaleFactorLevel      ContentScaleFactorLevel;                                      // 0x0001(0x0001)
    enum class ESolarColorTheme                   ColorThemeType;                                               // 0x0002(0x0001)
    bool                                          MSAAIsEnabled;                                                // 0x0003(0x0001)
    bool                                          bForceAAInLobby;                                              // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FFloatValue                                   AdaptationUIValue;                                            // 0x0008(0x0004)
    bool                                          EnableDynamicShadow;                                          // 0x000C(0x0001)
    enum class ESolarGraphicsQualityLevel         SelectQualityLevel;                                           // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    FFloatValue                                   CustomizedCharacterCameraFOV;                                 // 0x0010(0x0004)
    int32_t                                       SavedVersion;                                                 // 0x0014(0x0004)
    char                                          pa_0018[0x0048]                                               // 0x0018(0x0048)
};


// ScriptStruct  Solarland.TacticalBoxData
// Struct Size::0x0014
struct FTacticalBoxData
{
    int32_t                                       ThisID;                                                       // 0x0000(0x0004)
    FVector_NetQuantize                           Location;                                                     // 0x0004(0x000C)
    bool                                          BOpened;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Solarland.SolarRespawnDeviceData
// Struct Size::0x0010
struct FSolarRespawnDeviceData
{
    int32_t                                       RespawnDeviceID;                                              // 0x0000(0x0004)
    FVector_NetQuantize                           Location;                                                     // 0x0004(0x000C)
};


// ScriptStruct  Solarland.SolarShieldUpgradeShopData
// Struct Size::0x0010
struct FSolarShieldUpgradeShopData
{
    int32_t                                       Uid;                                                          // 0x0000(0x0004)
    FVector_NetQuantize                           Pos;                                                          // 0x0004(0x000C)
};


// ScriptStruct  Solarland.SymmetricRangeFloat
// Struct Size::0x000C
struct FSymmetricRangeFloat
{
    FRangeFloat                                   Range;                                                        // 0x0000(0x0008)
    bool                                          bSymmetric;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Solarland.ColorGradingItem
// Struct Size::0x05F0
struct FColorGradingItem
{
    enum class ESolarColorTheme                   ColorTheme;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
    FPostProcessSettings                          PPSettings;                                                   // 0x0010(0x05E0)
};


// ScriptStruct  Solarland.MaxQualityConfig
// Struct Size::0x0050
struct FMaxQualityConfig
{
    TMap<enum class ESolarGraphicsQualityLevel,enum class ESolarFrameRateLevel>CurQualityToMaxFrameRateLevel;   // 0x0000(0x0050)
};


// ScriptStruct  Solarland.FrameRateLevelItem
// Struct Size::0x0010
struct FFrameRateLevelItem
{
    enum class ESolarFrameRateLevel               FrameRateLevel;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FrameRateLobby;                                               // 0x0004(0x0004)
    float                                         FrameRateInGame;                                              // 0x0008(0x0004)
    float                                         FrameRatePC;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ContentScaleFactorLevelItem
// Struct Size::0x0058
struct FContentScaleFactorLevelItem
{
    enum class ESolarContentScaleFactorLevel      ContentScaleFactorLevel;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TMap<enum class ESolarDeviceLevel,float>      DeviceLevelContentScaleFactorMap;                             // 0x0008(0x0050)
};


// ScriptStruct  Solarland.SolarDamageInfo
// Struct Size::0x0050
struct FSolarDamageInfo
{
    AActor*                                       TargetActor;                                                  // 0x0000(0x0008)
    AActor*                                       SourceActor;                                                  // 0x0008(0x0008)
    AActor*                                       DamageCauserActor;                                            // 0x0010(0x0008)
    float                                         OriginalDamage;                                               // 0x0018(0x0004)
    float                                         OriginalDamageForVehicle;                                     // 0x001C(0x0004)
    char                                          pa_0020[0x0004]                                               // 0x0020(0x0004)
    enum class ESCMDamageType                     DamageType;                                                   // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         DamageRadial;                                                 // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    char                                          bRadialIgnoreCollision;                                       // 0x0030(0x0001)
    char                                          bRadialIgnoreVehicle;                                         // 0x0030(0x0001)
    char                                          bEnableSelfDamage;                                            // 0x0030(0x0001)
    char                                          bCheckSourceToTargetCollision;                                // 0x0030(0x0001)
    char                                          bApplyToSource;                                               // 0x0030(0x0001)
    char                                          bJustForShield;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         ExplosionMinDistance;                                         // 0x0034(0x0004)
    float                                         ExplosionMaxDistance;                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    UCurveFloat*                                  ExplosionDistanceScaleCurve;                                  // 0x0040(0x0008)
    FRoleAbilityContext                           RoleAbilityContext;                                           // 0x0048(0x0008)
};


// ScriptStruct  Solarland.SecondOrderDynamics
// Struct Size::0x003C
struct FSecondOrderDynamics
{
    float                                         F;                                                            // 0x0000(0x0004)
    float                                         Z;                                                            // 0x0004(0x0004)
    float                                         R;                                                            // 0x0008(0x0004)
    char                                          pa_000C[0x0030]                                               // 0x000C(0x0030)
};


// ScriptStruct  Solarland.ThrusterState
// Struct Size::0x00C8
struct FThrusterState
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
    FHitResult                                    TouchGroundHit;                                               // 0x0038(0x0088)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  Solarland.ThrusterData
// Struct Size::0x002C
struct FThrusterData
{
    bool                                          bRaiseDust;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DustEffectScale;                                              // 0x0004(0x0004)
    FVector                                       DustEffectOffest;                                             // 0x0008(0x000C)
    FName                                         ThrusterSocket;                                               // 0x0014(0x0008)
    FVector                                       ThrusterOffsetIfNoValidSocket;                                // 0x001C(0x000C)
    float                                         SweepRadius;                                                  // 0x0028(0x0004)
};


// ScriptStruct  Solarland.SolarClientPerformance
// Struct Size::0x0001
struct FSolarClientPerformance
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Solarland.CountDownInfoDeprecated
// Struct Size::0x0030
struct FCountDownInfoDeprecated
{
    int32_t                                       TextID;                                                       // 0x0000(0x0004)
    float                                         Time;                                                         // 0x0004(0x0004)
    bool                                          bShowBtn;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0027]                                               // 0x0009(0x0027)
};


// ScriptStruct  Solarland.InputHandler
// Struct Size::0x0020
struct FInputHandler
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Solarland.TouchHandler
// Struct Size::0x0180
struct FTouchHandler : public FInputHandler
{
    char                                          pa_0020[0x0078]                                               // 0x0020(0x0078)
    UCurveFloat*                                  HorizCurve;                                                   // 0x0098(0x0008)
    UCurveFloat*                                  VertCurve;                                                    // 0x00A0(0x0008)
    char                                          pa_00A8[0x0028]                                               // 0x00A8(0x0028)
    UCurveFloat*                                  DistHorizCurve;                                               // 0x00D0(0x0008)
    UCurveFloat*                                  DistVertCurve;                                                // 0x00D8(0x0008)
    char                                          pa_00E0[0x00A0]                                               // 0x00E0(0x00A0)
};


// ScriptStruct  Solarland.SolarInputModeUIOnly
// Struct Size::0x0030
struct FSolarInputModeUIOnly : public FSolarInputModeDataBase
{
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
};


// ScriptStruct  Solarland.SolarInputModeGameAndUI
// Struct Size::0x0030
struct FSolarInputModeGameAndUI : public FSolarInputModeDataBase
{
    char                                          pa_0010[0x0020]                                               // 0x0010(0x0020)
};


// ScriptStruct  Solarland.SolarInputModeGameOnly
// Struct Size::0x0020
struct FSolarInputModeGameOnly : public FSolarInputModeDataBase
{
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.InputActionConfigEx
// Struct Size::0x0004
struct FInputActionConfigEx
{
    float                                         HoldTimeThreshold;                                            // 0x0000(0x0004)
};


// ScriptStruct  Solarland.SolarInputActionEntry
// Struct Size::0x0020
struct FSolarInputActionEntry
{
    TArray<UInputAction*>                         InputActionList;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.RadarStationCollection
// Struct Size::0x0018
struct FRadarStationCollection
{
    int32_t                                       Zone;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<ASolarRadarStation*>                   AllRadarStations;                                             // 0x0008(0x0010)
};


// ScriptStruct  Solarland.InteractiveKeyName
// Struct Size::0x0010
struct FInteractiveKeyName
{
    TArray<FString>                               KeyNames;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SyncBurstItemParam
// Struct Size::0x0028
struct FSyncBurstItemParam
{
    FVector_NetQuantize                           StartLoc;                                                     // 0x0000(0x000C)
    FVector_NetQuantize                           MediumLoc;                                                    // 0x000C(0x000C)
    FVector_NetQuantize                           EndLoc;                                                       // 0x0018(0x000C)
    float                                         BurstLocalHeight;                                             // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarIntArray
// Struct Size::0x0130
struct FSolarIntArray : public FFastArraySerializer
{
    TArray<FSolarIntEntry>                        Elements;                                                     // 0x0108(0x0010)
    char                                          pa_0118[0x0018]                                               // 0x0118(0x0018)
};


// ScriptStruct  Solarland.SolarIntEntry
// Struct Size::0x0010
struct FSolarIntEntry : public FFastArraySerializerItem
{
    int32_t                                       IntProperty;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ItemActorDTRow
// Struct Size::0x00A0
struct FItemActorDTRow : public FTableRowBase
{
    FSoftObjectPath                               MeshPath;                                                     // 0x0008(0x0018)
    FSoftObjectPath                               FXPath;                                                       // 0x0020(0x0018)
    TArray<FSoftObjectPath>                       MaterialPath;                                                 // 0x0038(0x0010)
    TArray<FSoftObjectPath>                       OutLineMaterialPath;                                          // 0x0048(0x0010)
    char                                          pa_0058[0x0008]                                               // 0x0058(0x0008)
    FTransform                                    Transform;                                                    // 0x0060(0x0030)
    float                                         SpawnOffset;                                                  // 0x0090(0x0004)
    float                                         NoneMeshFxOffset;                                             // 0x0094(0x0004)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  Solarland.ItemResReference
// Struct Size::0x0048
struct FItemResReference : public FTableRowBase
{
    FString                                       Description;                                                  // 0x0008(0x0010)
    FSoftObjectPath                               Icon;                                                         // 0x0018(0x0018)
    FSoftObjectPath                               AbilityBP;                                                    // 0x0030(0x0018)
};


// ScriptStruct  Solarland.DeathBoxItemData
// Struct Size::0x0008
struct FDeathBoxItemData
{
    int32_t                                       ItemID;                                                       // 0x0000(0x0004)
    int32_t                                       ItemNum;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Solarland.LoadedItemInfo
// Struct Size::0x00E0
struct FLoadedItemInfo
{
    FSoftClassPath                                SClassPath;                                                   // 0x0000(0x0018)
    FSolarItemData                                ItemData;                                                     // 0x0018(0x00C8)
};


// ScriptStruct  Solarland.FinalDropDataCollection
// Struct Size::0x0010
struct FFinalDropDataCollection
{
    TArray<FSolarItemData>                        Datas;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Solarland.OutcomeDataCollection
// Struct Size::0x0010
struct FOutcomeDataCollection
{
    TArray<FOutcomeData>                          Datas;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Solarland.OutcomeData
// Struct Size::0x01A8
struct FOutcomeData
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               Contents;                                                     // 0x0008(0x0010)
    enum class ESpawnStage                        SpawnStage;                                                   // 0x0018(0x0001)
    enum class EOutcomeType                       OutcomeType;                                                  // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TMap<int32_t,int32_t>                         OutcomePools;                                                 // 0x0020(0x0050)
    TMap<int32_t,int32_t>                         OutcomeDynamicWeights;                                        // 0x0070(0x0050)
    TMap<int32_t,int32_t>                         OutcomeSubWeights;                                            // 0x00C0(0x0050)
    int32_t                                       PoolTotalWeight;                                              // 0x0110(0x0004)
    int32_t                                       PoolOutcomeID;                                                // 0x0114(0x0004)
    int32_t                                       MaxTimes;                                                     // 0x0118(0x0004)
    int32_t                                       MinTimes;                                                     // 0x011C(0x0004)
    int32_t                                       SpawnerID;                                                    // 0x0120(0x0004)
    int32_t                                       NetSetTimes;                                                  // 0x0124(0x0004)
    int32_t                                       DropedTimes;                                                  // 0x0128(0x0004)
    char                                          pa_012C[0x0004]                                               // 0x012C(0x0004)
    TMap<int32_t,FOutcomeContentData>             ContentDatas;                                                 // 0x0130(0x0050)
    bool                                          IsValid;                                                      // 0x0180(0x0001)
    char                                          pa_0181[0x0003]                                               // 0x0181(0x0003)
    int32_t                                       GlobalDropTimes;                                              // 0x0184(0x0004)
    TArray<FOutcomeTypeLimitData>                 LimitTypeDatas;                                               // 0x0188(0x0010)
    TArray<FOutcomeIDLimitData>                   LimitIDDatas;                                                 // 0x0198(0x0010)
};


// ScriptStruct  Solarland.OutcomeIDLimitData
// Struct Size::0x0020
struct FOutcomeIDLimitData
{
    TArray<int32_t>                               LimitIDs;                                                     // 0x0000(0x0010)
    int32_t                                       MinTimes;                                                     // 0x0010(0x0004)
    int32_t                                       MaxTimes;                                                     // 0x0014(0x0004)
    int32_t                                       CurrDropTimes;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.OutcomeTypeLimitData
// Struct Size::0x0010
struct FOutcomeTypeLimitData
{
    enum class EItemType                          LimitType;                                                    // 0x0000(0x0004)
    int32_t                                       MinTimes;                                                     // 0x0004(0x0004)
    int32_t                                       MaxTimes;                                                     // 0x0008(0x0004)
    int32_t                                       CurrDropTimes;                                                // 0x000C(0x0004)
};


// ScriptStruct  Solarland.OutcomeContentData
// Struct Size::0x0038
struct FOutcomeContentData
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    int32_t                                       ItemID;                                                       // 0x0004(0x0004)
    int32_t                                       Weight;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<int32_t>                               RandomNums;                                                   // 0x0010(0x0010)
    int32_t                                       MaxTimes;                                                     // 0x0020(0x0004)
    int32_t                                       MinTimes;                                                     // 0x0024(0x0004)
    int32_t                                       RelatedContentID;                                             // 0x0028(0x0004)
    enum class EItemType                          ItemType;                                                     // 0x002C(0x0004)
    int32_t                                       DropedTimes;                                                  // 0x0030(0x0004)
    bool                                          IsValid;                                                      // 0x0034(0x0001)
    bool                                          IsDeleted;                                                    // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
};


// ScriptStruct  Solarland.SimpleDropItemDataCollection
// Struct Size::0x0050
struct FSimpleDropItemDataCollection
{
    TMap<int32_t,int32_t>                         Datas;                                                        // 0x0000(0x0050)
};


// ScriptStruct  Solarland.ItemBurstParam
// Struct Size::0x001C
struct FItemBurstParam
{
    float                                         BurstRadius;                                                  // 0x0000(0x0004)
    float                                         BurstRadiusRandScale;                                         // 0x0004(0x0004)
    float                                         BurstLocalHeight;                                             // 0x0008(0x0004)
    float                                         BurstEulerAngle;                                              // 0x000C(0x0004)
    bool                                          bBurstSplitItem;                                              // 0x0010(0x0001)
    enum class EBurstMethod                       BurstMethod;                                                  // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    float                                         RadSafeSlopeToBurstOn;                                        // 0x0014(0x0004)
    float                                         GoldenSpiralMinRadiusSquared;                                 // 0x0018(0x0004)
};


// ScriptStruct  Solarland.GlobalOutcomeData
// Struct Size::0x0080
struct FGlobalOutcomeData
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    int32_t                                       SingleMaxTimes;                                               // 0x0004(0x0004)
    int32_t                                       TotalMaxTimes;                                                // 0x0008(0x0004)
    int32_t                                       TotalMinTimes;                                                // 0x000C(0x0004)
    int32_t                                       NetSetTimes;                                                  // 0x0010(0x0004)
    int32_t                                       DropedTimes;                                                  // 0x0014(0x0004)
    TMap<int32_t,int32_t>                         ItemIDNumMap;                                                 // 0x0018(0x0050)
    TArray<int32_t>                               AffectedOutcomes;                                             // 0x0068(0x0010)
    bool                                          IsValid;                                                      // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
};


// ScriptStruct  Solarland.SolarItemDataArray
// Struct Size::0x0118
struct FSolarItemDataArray : public FFastArraySerializer
{
    TArray<FSolarItemData>                        ItemDatas;                                                    // 0x0108(0x0010)
};


// ScriptStruct  Solarland.OwnerItemData
// Struct Size::0x0018
struct FOwnerItemData
{
    FString                                       OwnerPlayerID;                                                // 0x0000(0x0010)
    int32_t                                       count;                                                        // 0x0010(0x0004)
    bool                                          bAlreadyPickUp;                                               // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Solarland.SolarItemSpawnerArray
// Struct Size::0x0010
struct FSolarItemSpawnerArray
{
    TArray<ASolarItemSpawner*>                    ItemSpawnerArray;                                             // 0x0000(0x0010)
};


// ScriptStruct  Solarland.RandomPackData
// Struct Size::0x00B0
struct FRandomPackData
{
    TMap<int32_t,int32_t>                         IDWeightMap;                                                  // 0x0000(0x0050)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    int32_t                                       RollTimes;                                                    // 0x00A0(0x0004)
    bool                                          bReturnPool;                                                  // 0x00A4(0x0001)
    char                                          pa_00A5[0x0003]                                               // 0x00A5(0x0003)
    int32_t                                       SelfAdjustType;                                               // 0x00A8(0x0004)
    int32_t                                       TotalWeight;                                                  // 0x00AC(0x0004)
};


// ScriptStruct  Solarland.WeaponPartInfoCharacter
// Struct Size::0x0020
struct FWeaponPartInfoCharacter
{
    TArray<FWeaponPartInfo>                       PrimaryPartsInfo;                                             // 0x0000(0x0010)
    TArray<FWeaponPartInfo>                       SecondaryPartsInfo;                                           // 0x0010(0x0010)
};


// ScriptStruct  Solarland.WeaponPartInfo
// Struct Size::0x000C
struct FWeaponPartInfo
{
    enum class EWeaponPartType                    PartType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       PartLevel;                                                    // 0x0004(0x0004)
    int32_t                                       bCanEquip;                                                    // 0x0008(0x0004)
};


// ScriptStruct  Solarland.SolarVehicleData
// Struct Size::0x0018
struct FSolarVehicleData
{
    int32_t                                       VehicleID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       VehicleBP;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Solarland.ItemResourceTableRow
// Struct Size::0x0050
struct FItemResourceTableRow : public FTableRowBase
{
    FSoftObjectPath                               Icon;                                                         // 0x0008(0x0018)
    FSoftObjectPath                               BigIcon;                                                      // 0x0020(0x0018)
    FSoftObjectPath                               PreviewIcon;                                                  // 0x0038(0x0018)
};


// ScriptStruct  Solarland.PakDownloadInfo
// Struct Size::0x0010
struct FPakDownloadInfo
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ServerInfo
// Struct Size::0x0050
struct FServerInfo
{
    TArray<FGateAddress>                          GateList;                                                     // 0x0000(0x0010)
    TArray<FString>                               CDNList;                                                      // 0x0010(0x0010)
    FString                                       LatestBuildVersion;                                           // 0x0020(0x0010)
    FString                                       SourceBuildVersion;                                           // 0x0030(0x0010)
    FString                                       Name;                                                         // 0x0040(0x0010)
};


// ScriptStruct  Solarland.GateAddress
// Struct Size::0x0020
struct FGateAddress
{
    FString                                       GateTCPAddr;                                                  // 0x0000(0x0010)
    FString                                       GateUDPAddr;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Solarland.LayoutDataEntry
// Struct Size::0x0060
struct FLayoutDataEntry
{
    FName                                         WidgetName;                                                   // 0x0000(0x0008)
    FLayoutDataElement                            MobileLayoutData;                                             // 0x0008(0x002C)
    FLayoutDataElement                            DesktopLayoutData;                                            // 0x0034(0x002C)
};


// ScriptStruct  Solarland.LayoutDataElement
// Struct Size::0x002C
struct FLayoutDataElement
{
    FAnchorData                                   LayoutData;                                                   // 0x0000(0x002C)
};


// ScriptStruct  UMG.AnchorData
// Struct Size::0x002C
struct FAnchorData
{
    FMargin                                       Offsets;                                                      // 0x0000(0x0010)
    FAnchors                                      Anchors;                                                      // 0x0010(0x0010)
    bool                                          bLockRatio;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FVector2D                                     Alignment;                                                    // 0x0024(0x0008)
};


// ScriptStruct  Solarland.LeggedVehiclePostPhysicsTickFunction
// Struct Size::0x0030
struct FLeggedVehiclePostPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Solarland.VehicleFootIKState
// Struct Size::0x01B0
struct FVehicleFootIKState
{
    char                                          pa_0000[0x01B0]                                               // 0x0000(0x01B0)
};


// ScriptStruct  Solarland.VehicleIKGroupData
// Struct Size::0x0008
struct FVehicleIKGroupData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.VehicleFootIKData
// Struct Size::0x0064
struct FVehicleFootIKData
{
    FName                                         LegBoneName;                                                  // 0x0000(0x0008)
    FName                                         FootBoneName;                                                 // 0x0008(0x0008)
    FName                                         FootVirtualBoneName;                                          // 0x0010(0x0008)
    FName                                         FootVirtualBoneForGround;                                     // 0x0018(0x0008)
    FName                                         FootIKBoneName;                                               // 0x0020(0x0008)
    float                                         FootHorizontalOffsetAfterBroken;                              // 0x0028(0x0004)
    float                                         FootVerticalOffsetAfterBroken;                                // 0x002C(0x0004)
    float                                         FootUnderWaterOffset;                                         // 0x0030(0x0004)
    float                                         RaiseDustEffectScale;                                         // 0x0034(0x0004)
    float                                         BrokenFootMultiplier;                                         // 0x0038(0x0004)
    FVector                                       FootBoneOffset;                                               // 0x003C(0x000C)
    FName                                         ParentBone;                                                   // 0x0048(0x0008)
    int32_t                                       GroupIndex;                                                   // 0x0050(0x0004)
    float                                         StepDistanceMultiplier;                                       // 0x0054(0x0004)
    float                                         StepDistanceMultiplierForVelocity;                            // 0x0058(0x0004)
    float                                         MinVelocityDegreeForStepDistance;                             // 0x005C(0x0004)
    float                                         MaxVelocityDegreeForStepDistance;                             // 0x0060(0x0004)
};


// ScriptStruct  Solarland.PSAttachElem
// Struct Size::0x0038
struct FPSAttachElem
{
    FSoftObjectPath                               ParticleSystemPath;                                           // 0x0000(0x0018)
    FName                                         SocketName;                                                   // 0x0018(0x0008)
    FVector                                       LocationOffset;                                               // 0x0020(0x000C)
    FRotator                                      RotationOffset;                                               // 0x002C(0x000C)
};


// ScriptStruct  Solarland.CharacterTransformData
// Struct Size::0x0024
struct FCharacterTransformData
{
    FVector                                       CharacterOffset;                                              // 0x0000(0x000C)
    FRotator                                      CharacterRot;                                                 // 0x000C(0x000C)
    FVector                                       CharacterScale;                                               // 0x0018(0x000C)
};


// ScriptStruct  Solarland.LootZonePath
// Struct Size::0x0010
struct FLootZonePath
{
    ASolarLootZone*                               To;                                                           // 0x0000(0x0008)
    float                                         MoveCost;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.ItemSpawnerGraphNode
// Struct Size::0x0010
struct FItemSpawnerGraphNode
{
    TArray<FItemSpawnerPath>                      Paths;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ItemSpawnerPath
// Struct Size::0x0010
struct FItemSpawnerPath
{
    ASolarItemSpawner*                            To;                                                           // 0x0000(0x0008)
    float                                         MoveCost;                                                     // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.SolarMapElementProperty
// Struct Size::0x0028
struct FSolarMapElementProperty
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    enum class ESolarMapElementPropertyType       Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FString                                       Value;                                                        // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SkydivingMapDataElem
// Struct Size::0x003C
struct FSkydivingMapDataElem
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FVector                                       CacheLoc;                                                     // 0x0008(0x000C)
    FRotator                                      Rotate;                                                       // 0x0014(0x000C)
    FVector2D                                     TransPosition;                                                // 0x0020(0x0008)
    FVector2D                                     AbsolutePosition;                                             // 0x0028(0x0008)
    FVector2D                                     RelativePosition;                                             // 0x0030(0x0008)
    float                                         RotationOffset;                                               // 0x0038(0x0004)
};


// ScriptStruct  Solarland.CircleData
// Struct Size::0x001C
struct FCircleData
{
    FVector2D                                     Center;                                                       // 0x0000(0x0008)
    float                                         Radius;                                                       // 0x0008(0x0004)
    FLinearColor                                  LineColor;                                                    // 0x000C(0x0010)
};


// ScriptStruct  Solarland.DotLineData
// Struct Size::0x0020
struct FDotLineData
{
    AActor*                                       StartActor;                                                   // 0x0000(0x0008)
    AActor*                                       EndActor;                                                     // 0x0008(0x0008)
    FLinearColor                                  DotLineColor;                                                 // 0x0010(0x0010)
};


// ScriptStruct  Solarland.MapDarkData
// Struct Size::0x0040
struct FMapDarkData
{
    int32_t                                       SrcMapID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       SrcImagePath;                                                 // 0x0008(0x0010)
    int32_t                                       SizeX;                                                        // 0x0018(0x0004)
    int32_t                                       SizeY;                                                        // 0x001C(0x0004)
    char                                          pa_0020[0x0020]                                               // 0x0020(0x0020)
};


// ScriptStruct  Solarland.AirdropMeshWidgetData
// Struct Size::0x0054
struct FAirdropMeshWidgetData
{
    FConfigMiniMapMeshWidgetData                  IconData;                                                     // 0x0000(0x001C)
    FConfigMiniMapMeshWidgetData                  DiffuseData;                                                  // 0x001C(0x001C)
    FConfigMiniMapMeshWidgetData                  FlashData;                                                    // 0x0038(0x001C)
};


// ScriptStruct  Solarland.ConfigMiniMapMeshWidgetData
// Struct Size::0x001C
struct FConfigMiniMapMeshWidgetData
{
    float                                         TimeSpeed;                                                    // 0x0000(0x0004)
    char                                          IconTexId;                                                    // 0x0004(0x0001)
    char                                          ColorOpacityIndex;                                            // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    FVector2D                                     OpacityCoeff;                                                 // 0x0008(0x0008)
    FVector2D                                     ScaleAndRipplingCoeff;                                        // 0x0010(0x0008)
    float                                         AnimaSizeScale;                                               // 0x0018(0x0004)
};


// ScriptStruct  Solarland.MiniMapMarkData
// Struct Size::0x0018
struct FMiniMapMarkData
{
    bool                                          bMatchWorldSize;                                              // 0x0000(0x0001)
    bool                                          IsMeshWidget;                                                 // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         Size;                                                         // 0x0004(0x0004)
    float                                         WorldSize;                                                    // 0x0008(0x0004)
    FMeshWidgetMarkData                           MeshWidgetData;                                               // 0x000C(0x000C)
};


// ScriptStruct  Solarland.MeshWidgetMarkData
// Struct Size::0x000C
struct FMeshWidgetMarkData
{
    char                                          UVIndex;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       ColorIndex;                                                   // 0x0004(0x0004)
    char                                          MarkPriority;                                                 // 0x0008(0x0001)
    bool                                          NeedFadeOut;                                                  // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Solarland.MapSelectPointCellData
// Struct Size::0x0050
struct FMapSelectPointCellData
{
    bool                                          CellBeSelected;                                               // 0x0000(0x0001)
    enum class EMapCellSelectionAccess            SelectionAccess;                                              // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       PlayerId;                                                     // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FString                                       CellAddress;                                                  // 0x0010(0x0010)
    FString                                       SolarPlayerId;                                                // 0x0020(0x0010)
    char                                          pa_0030[0x0020]                                               // 0x0030(0x0020)
};


// ScriptStruct  Solarland.MapSelectPointCellConfig
// Struct Size::0x0014
struct FMapSelectPointCellConfig
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
    float                                         Width;                                                        // 0x0008(0x0004)
    float                                         Height;                                                       // 0x000C(0x0004)
    float                                         DistanceOfCell;                                               // 0x0010(0x0004)
};


// ScriptStruct  Solarland.MapSelectPointCellAddress
// Struct Size::0x0008
struct FMapSelectPointCellAddress
{
    int32_t                                       X;                                                            // 0x0000(0x0004)
    int32_t                                       Y;                                                            // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarMissionInfoData
// Struct Size::0x0008
struct FSolarMissionInfoData
{
    uint32_t                                      MissionID;                                                    // 0x0000(0x0004)
    enum class EMissionOwner                      TaskOwner;                                                    // 0x0004(0x0001)
    enum class EMissionContent                    TaskType;                                                     // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  Solarland.SolarMissionWorshipPlayerData
// Struct Size::0x0020
struct FSolarMissionWorshipPlayerData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Solarland.Int32Array
// Struct Size::0x0010
struct FInt32Array
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ASolarMissionTargetSpawnerArray
// Struct Size::0x0010
struct FASolarMissionTargetSpawnerArray
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarMissionPlayerData
// Struct Size::0x0018
struct FSolarMissionPlayerData
{
    FSolarMissionInfoData                         LastMission;                                                  // 0x0000(0x0008)
    enum class EMissionEndType                    LastMissionEndType;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    USolarMissionInfoBase*                        CurMission;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Solarland.SolarMissionTableRow
// Struct Size::0x0010
struct FSolarMissionTableRow : public FTableRowBase
{
    int32_t                                       MissionID;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.SolarMissionServerTableRow
// Struct Size::0x0050
struct FSolarMissionServerTableRow : public FSolarMissionTableRow
{
    int32_t                                       MissionTime;                                                  // 0x0010(0x0004)
    enum class EMissionType                       MissionType;                                                  // 0x0014(0x0001)
    enum class EMissionOwner                      MissionOwner;                                                 // 0x0015(0x0001)
    enum class EMissionContent                    MissionContent;                                               // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    FSolarMissionCommonParameters                 CommonParam;                                                  // 0x0018(0x0020)
    FSolarMissionBattleParameters                 BattleParam;                                                  // 0x0038(0x000C)
    FSolarMissionChestParameters                  ChestParam;                                                   // 0x0044(0x0004)
    FSolarMissionWorshipParameters                WorshipParam;                                                 // 0x0048(0x0008)
};


// ScriptStruct  Solarland.SolarMissionWorshipParameters
// Struct Size::0x0008
struct FSolarMissionWorshipParameters
{
    int32_t                                       WorshipID;                                                    // 0x0000(0x0004)
    char                                          DanceDuration;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.SolarMissionChestParameters
// Struct Size::0x0004
struct FSolarMissionChestParameters
{
    int32_t                                       ChestID;                                                      // 0x0000(0x0004)
};


// ScriptStruct  Solarland.SolarMissionBattleParameters
// Struct Size::0x000C
struct FSolarMissionBattleParameters
{
    int32_t                                       PreyMissionID;                                                // 0x0000(0x0004)
    float                                         PreyMissionRadius;                                            // 0x0004(0x0004)
    int32_t                                       PreyMissionTipsID;                                            // 0x0008(0x0004)
};


// ScriptStruct  Solarland.SolarMissionCommonParameters
// Struct Size::0x0020
struct FSolarMissionCommonParameters
{
    FSolarMissionParametersRange                  MissionTargetRange;                                           // 0x0000(0x0008)
    FSoftObjectPath                               SpawnEffectClass;                                             // 0x0008(0x0018)
};


// ScriptStruct  Solarland.SolarMissionParametersRange
// Struct Size::0x0008
struct FSolarMissionParametersRange
{
    int32_t                                       Min;                                                          // 0x0000(0x0004)
    int32_t                                       Max;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarMissionLocationTableRow
// Struct Size::0x0080
struct FSolarMissionLocationTableRow : public FSolarMissionTableRow
{
    int32_t                                       TitleLocalizationID;                                          // 0x0010(0x0004)
    int32_t                                       MissionDescriptionLocalizationID;                             // 0x0014(0x0004)
    FSoftObjectPath                               UIIcon;                                                       // 0x0018(0x0018)
    TMap<int32_t,int32_t>                         MissionReward;                                                // 0x0030(0x0050)
};


// ScriptStruct  Solarland.MobilePlatformSplinePoint
// Struct Size::0x0008
struct FMobilePlatformSplinePoint
{
    float                                         DelayTime;                                                    // 0x0000(0x0004)
    float                                         Speed;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.ThreatAreaInfo
// Struct Size::0x0010
struct FThreatAreaInfo
{
    FVector                                       BaseLocation;                                                 // 0x0000(0x000C)
    float                                         ThreatRadius;                                                 // 0x000C(0x0004)
};


// ScriptStruct  Solarland.NeutralMonsterPropertyRow
// Struct Size::0x0048
struct FNeutralMonsterPropertyRow : public FTableRowBase
{
    ASolarFuncBotController*                      MonsterControllerClass;                                       // 0x0008(0x0008)
    ASolarCharacter*                              MonsterClass;                                                 // 0x0010(0x0008)
    int32_t                                       CharacterId;                                                  // 0x0018(0x0004)
    int32_t                                       SkinId;                                                       // 0x001C(0x0004)
    USolarBotAIConfig*                            ConfigPreset;                                                 // 0x0020(0x0008)
    int32_t                                       ChestID;                                                      // 0x0028(0x0004)
    int32_t                                       LocalId;                                                      // 0x002C(0x0004)
    int32_t                                       MaxHP;                                                        // 0x0030(0x0004)
    int32_t                                       RecoverHP;                                                    // 0x0034(0x0004)
    int32_t                                       AttackRange;                                                  // 0x0038(0x0004)
    int32_t                                       StandSpeed;                                                   // 0x003C(0x0004)
    int32_t                                       BotConfigId;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.NeutralMonsterSpawnRow
// Struct Size::0x0018
struct FNeutralMonsterSpawnRow : public FTableRowBase
{
    TArray<FNeutralMonsterSpawnerInfo>            MonsterSpawnerInfos;                                          // 0x0008(0x0010)
};


// ScriptStruct  Solarland.NeutralMonsterSpawnerInfo
// Struct Size::0x0008
struct FNeutralMonsterSpawnerInfo
{
    int32_t                                       MonsterId;                                                    // 0x0000(0x0004)
    char                                          Weight;                                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.SmartLinkInstance
// Struct Size::0x0090
struct FSmartLinkInstance
{
    enum class ENavLinkType                       LinkType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      NavLinkUserId;                                                // 0x0004(0x0004)
    UNavArea*                                     EnabledAreaClass;                                             // 0x0008(0x0008)
    UNavArea*                                     DisabledAreaClass;                                            // 0x0010(0x0008)
    FNavAgentSelector                             SupportedAgents;                                              // 0x0018(0x0004)
    FVector                                       LinkRelativeStart;                                            // 0x001C(0x000C)
    FVector                                       LinkRelativeEnd;                                              // 0x0028(0x000C)
    enum class ENavLinkDirection                  LinkDirection;                                                // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    FVector                                       VaultPoint;                                                   // 0x0038(0x000C)
    FVector                                       VaultDirect;                                                  // 0x0044(0x000C)
    enum class EVaultType                         VaultAnimate;                                                 // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    FVector                                       VaultLandPoint;                                               // 0x0054(0x000C)
    TSoftObjectPtr<ASolarZiplineObj>              ZiplineObj;                                                   // 0x0060(0x0028)
    enum class EZiplineSide                       ZiplineSide;                                                  // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  Engine.NavAgentSelector
// Struct Size::0x0004
struct FNavAgentSelector
{
    char                                          bSupportsAgent0;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0000(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0001(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0001(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  Solarland.SolarNetMovementState
// Struct Size::0x00A0
struct FSolarNetMovementState
{
    char                                          pa_0000[0x00A0]                                               // 0x0000(0x00A0)
};


// ScriptStruct  Solarland.ObjectArray
// Struct Size::0x0010
struct FObjectArray
{
    TArray<UObject*>                              ObjectArray;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Solarland.OBTeamInfo
// Struct Size::0x0030
struct FOBTeamInfo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Solarland.OBTeammateInfo
// Struct Size::0x0048
struct FOBTeammateInfo
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  Solarland.OperationUIElement
// Struct Size::0x0050
struct FOperationUIElement
{
    FString                                       PanelName;                                                    // 0x0000(0x0010)
    FString                                       PanelAliasName;                                               // 0x0010(0x0010)
    float                                         CurScale;                                                     // 0x0020(0x0004)
    float                                         MinScale;                                                     // 0x0024(0x0004)
    float                                         MaxScale;                                                     // 0x0028(0x0004)
    float                                         CurOpacity;                                                   // 0x002C(0x0004)
    float                                         MinOpacity;                                                   // 0x0030(0x0004)
    float                                         MaxOpacity;                                                   // 0x0034(0x0004)
    bool                                          bCanHide;                                                     // 0x0038(0x0001)
    bool                                          bVisible;                                                     // 0x0039(0x0001)
    bool                                          bLockAxisX;                                                   // 0x003A(0x0001)
    char                                          pa_003B[0x0001]                                               // 0x003B(0x0001)
    float                                         minOffsetY;                                                   // 0x003C(0x0004)
    float                                         maxOffsetY;                                                   // 0x0040(0x0004)
    bool                                          bCannotChangeScale;                                           // 0x0044(0x0001)
    bool                                          bCannotChangeOpacity;                                         // 0x0045(0x0001)
    bool                                          bVisibleInVehicle;                                            // 0x0046(0x0001)
    char                                          pa_0047[0x0001]                                               // 0x0047(0x0001)
    FVector2D                                     Translation;                                                  // 0x0048(0x0008)
};


// ScriptStruct  Solarland.PerceivableEAInfluenceConfig
// Struct Size::0x0060
struct FPerceivableEAInfluenceConfig
{
    TMap<enum class EPerceivableEffectAreaType,float>AreaTypeValueMap;                                          // 0x0000(0x0050)
    float                                         HostileAreaFactor;                                            // 0x0050(0x0004)
    float                                         NeutralAreaFactor;                                            // 0x0054(0x0004)
    float                                         FriendlyAreaFactor;                                           // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.PerceivableEffectArea
// Struct Size::0x002C
struct FPerceivableEffectArea
{
    enum class EPerceivableEffectAreaType         AreaType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       EffectLocation;                                               // 0x0004(0x000C)
    float                                         EffectRadius;                                                 // 0x0010(0x0004)
    TWeakObjectPtr<AActor>                        EffectActor;                                                  // 0x0014(0x0008)
    TWeakObjectPtr<AActor>                        Instigator;                                                   // 0x001C(0x0008)
    char                                          pa_0024[0x0008]                                               // 0x0024(0x0008)
};


// ScriptStruct  Solarland.PickupListViewItemData
// Struct Size::0x00E0
struct FPickupListViewItemData
{
    FSolarItemData                                ItemData;                                                     // 0x0000(0x00C8)
    int32_t                                       Index;                                                        // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    AActor*                                       PickActor;                                                    // 0x00D0(0x0008)
    enum class EItemType                          PickActorItemType;                                            // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  Solarland.ActorArrayMap
// Struct Size::0x0050
struct FActorArrayMap
{
    TMap<int32_t,FActorArray>                     ActorArrayMap;                                                // 0x0000(0x0050)
};


// ScriptStruct  Solarland.ActorArray
// Struct Size::0x0010
struct FActorArray
{
    TArray<AActor*>                               ActorArray;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Solarland.ChargingInfo
// Struct Size::0x0030
struct FChargingInfo
{
    TWeakObjectPtr<ASolarCharacter>               Ch;                                                           // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
    float                                         LastChargeTime;                                               // 0x000C(0x0004)
    bool                                          bShowEffect;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         Quantity;                                                     // 0x0014(0x0004)
    float                                         Frequency;                                                    // 0x0018(0x0004)
    enum class EPileHealingType                   PileHealingType;                                              // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         TotalChargeEnergy;                                            // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    USolarBackpackComponent*                      BackpackComponent;                                            // 0x0028(0x0008)
};


// ScriptStruct  Solarland.ChargingPilePreset
// Struct Size::0x0150
struct FChargingPilePreset
{
    FSoftObjectPath                               NormalMeshPath;                                               // 0x0000(0x0018)
    FSoftObjectPath                               BrokenMeshPath;                                               // 0x0018(0x0018)
    FSoftObjectPath                               BrokenMatPath;                                                // 0x0030(0x0018)
    FSoftObjectPath                               RangeRingPath;                                                // 0x0048(0x0018)
    FSoftObjectPath                               RangeRingMatPath;                                             // 0x0060(0x0018)
    FSoftObjectPath                               ChargeCirclePath;                                             // 0x0078(0x0018)
    FSoftObjectPath                               ChargeCircleMatPath;                                          // 0x0090(0x0018)
    FSoftObjectPath                               ChargeParticleEffectPath;                                     // 0x00A8(0x0018)
    FSoftObjectPath                               OutlineMatPath;                                               // 0x00C0(0x0018)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FTransform                                    RangeRingTrans;                                               // 0x00E0(0x0030)
    FTransform                                    ChargeCircleTrans;                                            // 0x0110(0x0030)
    FVector                                       BeamStartPos;                                                 // 0x0140(0x000C)
    char                                          pa_014C[0x0004]                                               // 0x014C(0x0004)
};


// ScriptStruct  Solarland.PlayerActivityHeatRawData
// Struct Size::0x0050
struct FPlayerActivityHeatRawData
{
    enum class EPlayerActivityHeatType            PlayerActivityHeatType;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         HeatDataTimeStamp;                                            // 0x0004(0x0004)
    float                                         ActivityHeatTimeOffset;                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FPlayerActivityHeatKillDetail                 KillDetail;                                                   // 0x0010(0x0040)
};


// ScriptStruct  Solarland.PlayerActivityHeatKillDetail
// Struct Size::0x0040
struct FPlayerActivityHeatKillDetail
{
    float                                         KillTime;                                                     // 0x0000(0x0004)
    FVector                                       VictimPosition;                                               // 0x0004(0x000C)
    FString                                       KillerID;                                                     // 0x0010(0x0010)
    FString                                       VictimID;                                                     // 0x0020(0x0010)
    enum class ESCMDamageType                     DamageType;                                                   // 0x0030(0x0001)
    bool                                          IsAbilityKill;                                                // 0x0031(0x0001)
    bool                                          IsScopedKill;                                                 // 0x0032(0x0001)
    bool                                          IsVehicleKill;                                                // 0x0033(0x0001)
    bool                                          IsHeadShot;                                                   // 0x0034(0x0001)
    bool                                          IsAbilityActivated;                                           // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    int32_t                                       KillToolID;                                                   // 0x0038(0x0004)
    int32_t                                       KillToolExtraID;                                              // 0x003C(0x0004)
};


// ScriptStruct  Solarland.EVPlayerBulletHitParameter
// Struct Size::0x0038
struct FEVPlayerBulletHitParameter
{
    uint32_t                                      FireUniqueID;                                                 // 0x0000(0x0004)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0004(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x0010(0x000C)
    float                                         ShotTime;                                                     // 0x001C(0x0004)
    bool                                          IsScopeOpen;                                                  // 0x0020(0x0001)
    bool                                          bIsHeadshot;                                                  // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
    TArray<FEVHitResult>                          HitResults;                                                   // 0x0028(0x0010)
};


// ScriptStruct  Solarland.EVHitResult
// Struct Size::0x0040
struct FEVHitResult
{
    FVector_NetQuantize                           Location;                                                     // 0x0000(0x000C)
    FVector_NetQuantize                           ImpactPoint;                                                  // 0x000C(0x000C)
    FVector_NetQuantize                           TraceStart;                                                   // 0x0018(0x000C)
    FVector_NetQuantize                           TraceEnd;                                                     // 0x0024(0x000C)
    FString                                       BoneName;                                                     // 0x0030(0x0010)
};


// ScriptStruct  Solarland.KickedReason
// Struct Size::0x0001
struct FKickedReason
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Solarland.ScreenshotManager
// Struct Size::0x0050
struct FScreenshotManager
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Solarland.GainEXPFromDamageConfig
// Struct Size::0x0028
struct FGainEXPFromDamageConfig : public FTableRowBase
{
    FString                                       Note;                                                         // 0x0008(0x0010)
    int32_t                                       LocalTextId;                                                  // 0x0018(0x0004)
    float                                         DamageThreshold;                                              // 0x001C(0x0004)
    int32_t                                       Exp;                                                          // 0x0020(0x0004)
    enum class EGainEXPFromDmgType                GainEXPFromDmgType;                                           // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Solarland.VirtualBulletHitParameterArray
// Struct Size::0x0010
struct FVirtualBulletHitParameterArray
{
    TArray<FPlayerVirtualBulletHitParameter>      Params;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Solarland.WeaponHUDAmmoColor
// Struct Size::0x0030
struct FWeaponHUDAmmoColor
{
    FLinearColor                                  NormalColor;                                                  // 0x0000(0x0010)
    FLinearColor                                  LowAmmoColor;                                                 // 0x0010(0x0010)
    FLinearColor                                  NoAmmoColor;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Solarland.WeaponRecoilModifiersTableData
// Struct Size::0x0060
struct FWeaponRecoilModifiersTableData : public FTableRowBase
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0008(0x0050)
    float                                         HoriRecoilCoefficient;                                        // 0x0058(0x0004)
    float                                         VertRecoilCoefficient;                                        // 0x005C(0x0004)
};


// ScriptStruct  Solarland.WeaponSpreadModifiersTableData
// Struct Size::0x0060
struct FWeaponSpreadModifiersTableData : public FTableRowBase
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0008(0x0050)
    float                                         HoriSpreadCoefficient;                                        // 0x0058(0x0004)
    float                                         VertSpreadCoefficient;                                        // 0x005C(0x0004)
};


// ScriptStruct  Solarland.WeaponAttributeParam
// Struct Size::0x0008
struct FWeaponAttributeParam
{
    enum class EWeaponAttributeParamType          Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.PlayerWeaponSlotInfo
// Struct Size::0x000C
struct FPlayerWeaponSlotInfo
{
    TWeakObjectPtr<ASolarPlayerWeapon>            Weapon;                                                       // 0x0000(0x0008)
    char                                          bServerHasWeapon;                                             // 0x0008(0x0001)
    char                                          bIsSwapping;                                                  // 0x0008(0x0001)
    char                                          bIsDestroying;                                                // 0x0008(0x0001)
    enum class EPlayerWeaponEquipStatus           SwapTargetEquipStatus;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Solarland.PlayerWeaponEquipStatusInfo
// Struct Size::0x0004
struct FPlayerWeaponEquipStatusInfo
{
    enum class EPlayerWeaponEquipStatus           PrimaryWeaponStatus;                                          // 0x0000(0x0001)
    enum class EPlayerWeaponEquipStatus           SecondaryWeaponStatus;                                        // 0x0001(0x0001)
    enum class EPlayerWeaponEquipStatus           TertiaryWeaponStatus;                                         // 0x0002(0x0001)
    char                                          Version;                                                      // 0x0003(0x0001)
};


// ScriptStruct  Solarland.PlayerWeaponScopeStatus
// Struct Size::0x0018
struct FPlayerWeaponScopeStatus
{
    char                                          bIsOpened;                                                    // 0x0000(0x0001)
    char                                          bIsOpenInProgress;                                            // 0x0000(0x0001)
    char                                          bIsInVehicle;                                                 // 0x0000(0x0001)
    char                                          bServerHasWeapon;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    TWeakObjectPtr<ASolarPlayerWeapon>            OwnerWeapon;                                                  // 0x0004(0x0008)
    TWeakObjectPtr<ASolarVehiclePawn>             BoardedVehicle;                                               // 0x000C(0x0008)
    char                                          BoardedSeatIndex;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Solarland.PlayerWeaponShootStatus
// Struct Size::0x0003
struct FPlayerWeaponShootStatus
{
    char                                          bIsShooting;                                                  // 0x0000(0x0001)
    char                                          StartShootTimes;                                              // 0x0001(0x0001)
    char                                          FireTimesOfShoot;                                             // 0x0002(0x0001)
};


// ScriptStruct  Solarland.RadarDelegateHandle
// Struct Size::0x0008
struct FRadarDelegateHandle
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.RadarMapMark
// Struct Size::0x0020
struct FRadarMapMark
{
    TArray<TWeakObjectPtr<UMapMarkBase>>          MapMarkWidgets;                                               // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.DetectedRadarInfo
// Struct Size::0x000C
struct FDetectedRadarInfo
{
    char                                          pa_0000[0x000C]                                               // 0x0000(0x000C)
};


// ScriptStruct  Solarland.ScannedVehicleDisplayRow
// Struct Size::0x0040
struct FScannedVehicleDisplayRow : public FTableRowBase
{
    int32_t                                       VehicleID;                                                    // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TSoftObjectPtr<UObject>                       Icon;                                                         // 0x0010(0x0028)
    FVector2D                                     IconSize;                                                     // 0x0038(0x0008)
};


// ScriptStruct  Solarland.PerspectiveActorInfo
// Struct Size::0x0002
struct FPerspectiveActorInfo
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  Solarland.StreamingDistanceScaleParam
// Struct Size::0x0018
struct FStreamingDistanceScaleParam : public FTableRowBase
{
    enum class ESolarGraphicsQualityLevel         GraphicsQualityLevel;                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         RelativeStreamingDistanceScaleParam;                          // 0x000C(0x0004)
    float                                         RelativeStreamingDistanceScaleParam_PC;                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.AutoDirectorNodeInfo
// Struct Size::0x0048
struct FAutoDirectorNodeInfo
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  Solarland.AutoDirectorActivityEventScoresInfo
// Struct Size::0x0028
struct FAutoDirectorActivityEventScoresInfo
{
    float                                         ScoreSum;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 PlayerScores;                                                 // 0x0008(0x0010)
    TArray<bool>                                  PlayerMakeFollow;                                             // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SubGraphInfo
// Struct Size::0x0060
struct FSubGraphInfo
{
    char                                          TeamIndex;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSet<TWeakObjectPtr<ASolarPlayerState>>       AllPlayerStates;                                              // 0x0008(0x0050)
    float                                         ScoreSum;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarActorGroupOfReplayCamera
// Struct Size::0x0018
struct FSolarActorGroupOfReplayCamera
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.SetReplayCameraParams
// Struct Size::0x0030
struct FSetReplayCameraParams
{
    int32_t                                       CameraID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    ASolarPlayerState*                            ViewPlayer;                                                   // 0x0008(0x0008)
    bool                                          bOverrideFindTargetParams;                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FReplayFindSpectateTargetParams               FindTargetParams;                                             // 0x0018(0x0018)
};


// ScriptStruct  Solarland.ReplayFindSpectateTargetParams
// Struct Size::0x0018
struct FReplayFindSpectateTargetParams
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    ASolarPlayerState*                            SuggestTarget;                                                // 0x0010(0x0008)
};


// ScriptStruct  Solarland.ReplayHighlightSlowEffect
// Struct Size::0x000C
struct FReplayHighlightSlowEffect
{
    float                                         EffectTime;                                                   // 0x0000(0x0004)
    float                                         SlowMultiplier;                                               // 0x0004(0x0004)
    bool                                          bOnlyForPlayStopSound;                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Solarland.ReplayHighlightCameraEffect
// Struct Size::0x000C
struct FReplayHighlightCameraEffect
{
    float                                         EffectTime;                                                   // 0x0000(0x0004)
    enum class ESolarTablesEnum_HighlightCameraEffectEnumCameraEffect;                                          // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    int32_t                                       EffectTableID;                                                // 0x0008(0x0004)
};


// ScriptStruct  Solarland.PlayerHighlightOverview
// Struct Size::0x0028
struct FPlayerHighlightOverview
{
    int32_t                                       KillNum;                                                      // 0x0000(0x0004)
    int32_t                                       AssistNum;                                                    // 0x0004(0x0004)
    int32_t                                       Damage;                                                       // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       PlayerId;                                                     // 0x0010(0x0010)
    int32_t                                       RemainPlayers;                                                // 0x0020(0x0004)
    enum class EPlayerHighlightMarkType           BestMark;                                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Solarland.ReplayReportData
// Struct Size::0x0078
struct FReplayReportData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
    FString                                       BattleID;                                                     // 0x0060(0x0010)
    float                                         ReplayDuration;                                               // 0x0070(0x0004)
    float                                         AutoSpectateDuration;                                         // 0x0074(0x0004)
};


// ScriptStruct  Solarland.HighlightReportData
// Struct Size::0x0050
struct FHighlightReportData
{
    int32_t                                       Source;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       BattleID;                                                     // 0x0008(0x0010)
    FString                                       mapID;                                                        // 0x0018(0x0010)
    int32_t                                       MatchRanking;                                                 // 0x0028(0x0004)
    int32_t                                       Rank;                                                         // 0x002C(0x0004)
    int32_t                                       KillNum;                                                      // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       HighestRating;                                                // 0x0038(0x0010)
    bool                                          bIsInterrupt;                                                 // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Solarland.StartPlayParams
// Struct Size::0x0038
struct FStartPlayParams
{
    FString                                       BattleID;                                                     // 0x0000(0x0010)
    FString                                       PlayerId;                                                     // 0x0010(0x0010)
    FString                                       URL;                                                          // 0x0020(0x0010)
    enum class EReplayType                        Type;                                                         // 0x0030(0x0001)
    bool                                          bIsLocal;                                                     // 0x0031(0x0001)
    bool                                          bIsLive;                                                      // 0x0032(0x0001)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
};


// ScriptStruct  Solarland.SolarAttributeDependency
// Struct Size::0x0040
struct FSolarAttributeDependency
{
    FGameplayAttribute                            ModifierAttribute;                                            // 0x0000(0x0038)
    UGameplayModMagnitudeCalculation*             ModifierMMC;                                                  // 0x0038(0x0008)
};


// ScriptStruct  Solarland.FilteredData
// Struct Size::0x0110
struct FFilteredData
{
    FARFilter                                     Filter;                                                       // 0x0000(0x00E8)
    TArray<FAssetData>                            Results;                                                      // 0x00E8(0x0010)
    UObject*                                      ObjectBaseClassType;                                          // 0x00F8(0x0008)
    TArray<FSavedTagAndValueData>                 SavedTagAndValueData;                                         // 0x0100(0x0010)
};


// ScriptStruct  Solarland.SavedTagAndValueData
// Struct Size::0x0050
struct FSavedTagAndValueData
{
    TMap<FName,FString>                           SavedTagsAndValue;                                            // 0x0000(0x0050)
};


// ScriptStruct  AssetRegistry.AssetData
// Struct Size::0x0050
struct FAssetData
{
    FName                                         ObjectPath;                                                   // 0x0000(0x0008)
    FName                                         PackageName;                                                  // 0x0008(0x0008)
    FName                                         PackagePath;                                                  // 0x0010(0x0008)
    FName                                         AssetName;                                                    // 0x0018(0x0008)
    FName                                         AssetClass;                                                   // 0x0020(0x0008)
    char                                          pa_0028[0x0028]                                               // 0x0028(0x0028)
};


// ScriptStruct  AssetRegistry.ARFilter
// Struct Size::0x00E8
struct FARFilter
{
    TArray<FName>                                 PackageNames;                                                 // 0x0000(0x0010)
    TArray<FName>                                 PackagePaths;                                                 // 0x0010(0x0010)
    TArray<FName>                                 ObjectPaths;                                                  // 0x0020(0x0010)
    TArray<FName>                                 ClassNames;                                                   // 0x0030(0x0010)
    char                                          pa_0040[0x0050]                                               // 0x0040(0x0050)
    TSet<FName>                                   RecursiveClassesExclusionSet;                                 // 0x0090(0x0050)
    bool                                          bRecursivePaths;                                              // 0x00E0(0x0001)
    bool                                          bRecursiveClasses;                                            // 0x00E1(0x0001)
    bool                                          bIncludeOnlyOnDiskAssets;                                     // 0x00E2(0x0001)
    char                                          pa_00E3[0x0005]                                               // 0x00E3(0x0005)
};


// ScriptStruct  Solarland.SolarStructPattern
// Struct Size::0x0008
struct FSolarStructPattern
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.PatfaceShowTime
// Struct Size::0x0010
struct FPatfaceShowTime
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    int64_t                                       CanShowTimeStamp;                                             // 0x0008(0x0008)
};


// ScriptStruct  Solarland.NeverShowCheckWindow
// Struct Size::0x0018
struct FNeverShowCheckWindow
{
    int32_t                                       ConfirmID;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FDateTime                                     Timestamp;                                                    // 0x0008(0x0008)
    enum class ENeverShowDuration                 Duration;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SettingSlotData
// Struct Size::0x0030
struct FSettingSlotData
{
    FString                                       SlotName;                                                     // 0x0000(0x0010)
    int32_t                                       Title;                                                        // 0x0010(0x0004)
    int32_t                                       Tips;                                                         // 0x0014(0x0004)
    enum class ESettingSlotStyle                  Style;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<int32_t>                               CheckGroupList;                                               // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarShieldCreatorEffect
// Struct Size::0x0060
struct FSolarShieldCreatorEffect
{
    FSoftObjectPath                               TeammatePath;                                                 // 0x0000(0x0018)
    FSoftObjectPath                               EnemyPath;                                                    // 0x0018(0x0018)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0030)
};


// ScriptStruct  Solarland.SkeletalMeshMergeParams
// Struct Size::0x0020
struct FSkeletalMeshMergeParams
{
    TArray<USkeletalMesh*>                        MeshesToMerge;                                                // 0x0000(0x0010)
    int32_t                                       StripTopLODS;                                                 // 0x0010(0x0004)
    char                                          bNeedsCpuAccess;                                              // 0x0014(0x0001)
    char                                          bSkeletonBefore;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    USkeleton*                                    Skeleton;                                                     // 0x0018(0x0008)
};


// ScriptStruct  Solarland.SkeletalMeshMergeUVTransformMapping_BP
// Struct Size::0x0010
struct FSkeletalMeshMergeUVTransformMapping_BP
{
    TArray<FSkeletalMeshMergeUVTransforms_BP>     UVTransformsPerMesh;                                          // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SkeletalMeshMergeUVTransforms_BP
// Struct Size::0x0010
struct FSkeletalMeshMergeUVTransforms_BP
{
    TArray<FTransform>                            UVTransforms;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SkeletalMeshMergeSectionMapping_BP
// Struct Size::0x0010
struct FSkeletalMeshMergeSectionMapping_BP
{
    TArray<int32_t>                               SectionIDs;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarSubClusterGrenadeData
// Struct Size::0x0018
struct FSolarSubClusterGrenadeData
{
    ASolarSkill_ClusterGrenade*                   SubClusterGrenadeClass;                                       // 0x0000(0x0008)
    float                                         DelaySpawnTime;                                               // 0x0008(0x0004)
    float                                         SpawnTimer;                                                   // 0x000C(0x0004)
    bool                                          bLaunchSpawnTimer;                                            // 0x0010(0x0001)
    bool                                          bSpawned;                                                     // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  Solarland.SolarEMPParticleInfo
// Struct Size::0x0080
struct FSolarEMPParticleInfo
{
    FSoftObjectPath                               ParticlePathForTeammate;                                      // 0x0000(0x0018)
    FSoftObjectPath                               ParticlePathForEnemy;                                         // 0x0018(0x0018)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0030)
    bool                                          bAttachMode;                                                  // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FName                                         AttachSocketName;                                             // 0x0064(0x0008)
    enum class EAttachLocation                    AttachLocationType;                                           // 0x006C(0x0001)
    bool                                          bAutoDestroy;                                                 // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
    float                                         Duration;                                                     // 0x0070(0x0004)
    enum class EPSCPoolMethod                     PoolMode;                                                     // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
};


// ScriptStruct  Solarland.LaunchHookData
// Struct Size::0x0018
struct FLaunchHookData
{
    FVector                                       TargetLoc;                                                    // 0x0000(0x000C)
    float                                         Speed;                                                        // 0x000C(0x0004)
    float                                         MaxDist;                                                      // 0x0010(0x0004)
    float                                         ExtraDist;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarDamageShapeData
// Struct Size::0x0090
struct FSolarDamageShapeData
{
    enum class ESolarDamageShapeType              ShapeType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       ShapeExtent;                                                  // 0x0004(0x000C)
    FTransform                                    DamageRelativeTransform;                                      // 0x0010(0x0030)
    FSolarEffectData                              EffectData;                                                   // 0x0040(0x0050)
};


// ScriptStruct  Solarland.SolarEffectData
// Struct Size::0x0050
struct FSolarEffectData
{
    FSoftObjectPath                               Path;                                                         // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    RelativeTransform;                                            // 0x0020(0x0030)
};


// ScriptStruct  Solarland.SolarProjectileCustomBounceData
// Struct Size::0x0008
struct FSolarProjectileCustomBounceData
{
    float                                         CanBounceAngle;                                               // 0x0000(0x0004)
    int32_t                                       MaxBounceCount;                                               // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SkillDebugVector
// Struct Size::0x000C
struct FSkillDebugVector
{
    FVector                                       Value;                                                        // 0x0000(0x000C)
};


// ScriptStruct  Solarland.SkillDebugVector2D
// Struct Size::0x0008
struct FSkillDebugVector2D
{
    FVector2D                                     Value;                                                        // 0x0000(0x0008)
};


// ScriptStruct  Solarland.SkillDebugFloat
// Struct Size::0x0004
struct FSkillDebugFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  Solarland.SolarSkillProjectileData
// Struct Size::0x00D0
struct FSolarSkillProjectileData
{
    float                                         PredictTime;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<enum class ESlateDetailMode,float>       PredictSimFrequencyMap;                                       // 0x0008(0x0050)
    float                                         PredictRadius;                                                // 0x0058(0x0004)
    float                                         PredictSpeed;                                                 // 0x005C(0x0004)
    int32_t                                       SpeedStepCount;                                               // 0x0060(0x0004)
    float                                         PredictGravityZ;                                              // 0x0064(0x0004)
    float                                         GravityScale;                                                 // 0x0068(0x0004)
    float                                         PredictAngle;                                                 // 0x006C(0x0004)
    FName                                         StartSocketName;                                              // 0x0070(0x0008)
    FVector                                       StartSocketOffset;                                            // 0x0078(0x000C)
    bool                                          bDisplayHoldModel;                                            // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    FName                                         HoldSocketName;                                               // 0x0088(0x0008)
    FTransform                                    HoldModelTransform;                                           // 0x0090(0x0030)
    int32_t                                       count;                                                        // 0x00C0(0x0004)
    float                                         HorizontalOffsetAngle;                                        // 0x00C4(0x0004)
    float                                         UseLastSummonLocMaxDistance;                                  // 0x00C8(0x0004)
    float                                         UseLastSummonLocMaxDegree;                                    // 0x00CC(0x0004)
};


// ScriptStruct  Solarland.ProjectileParams
// Struct Size::0x0028
struct FProjectileParams : public FGameplayAbilityTargetData
{
    FVector_NetQuantize                           StartLocation;                                                // 0x0008(0x000C)
    FVector_NetQuantizeNormal                     Direction;                                                    // 0x0014(0x000C)
    uint32_t                                      ProjectileID;                                                 // 0x0020(0x0004)
    float                                         ClientTime;                                                   // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarSurroundLightningConfig
// Struct Size::0x0098
struct FSolarSurroundLightningConfig
{
    FVector                                       ParticleDefaultScale;                                         // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FRuntimeFloatCurve                            ParticleScaleByDistanceCurve;                                 // 0x0010(0x0088)
};


// ScriptStruct  Solarland.BuffDurationInfo
// Struct Size::0x0050
struct FBuffDurationInfo
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Solarland.EffectBuffTargetInfo
// Struct Size::0x0068
struct FEffectBuffTargetInfo
{
    char                                          pa_0000[0x0068]                                               // 0x0000(0x0068)
};


// ScriptStruct  Solarland.ExplosionWarningMeshInfo
// Struct Size::0x0010
struct FExplosionWarningMeshInfo
{
    UObject*                                      WarningIcon;                                                  // 0x0000(0x0008)
    FVector2D                                     WarningIconScaleOverride;                                     // 0x0008(0x0008)
};


// ScriptStruct  Solarland.SolarSkinnedSkeletalMesh
// Struct Size::0x0070
struct FSolarSkinnedSkeletalMesh : public FSolarSkinnedAsset
{
    FSoftObjectPath                               DefaultSkinnedSkeletalMesh;                                   // 0x0008(0x0018)
    TMap<int32_t,FSoftObjectPath>                 SkinnedSkeletalMeshes;                                        // 0x0020(0x0050)
};


// ScriptStruct  Solarland.SolarSkinnedStaticMesh
// Struct Size::0x0070
struct FSolarSkinnedStaticMesh : public FSolarSkinnedAsset
{
    FSoftObjectPath                               DefaultSkinnedStaticMesh;                                     // 0x0008(0x0018)
    TMap<int32_t,FSoftObjectPath>                 SkinnedStaticMeshes;                                          // 0x0020(0x0050)
};


// ScriptStruct  Solarland.SolarSmooth
// Struct Size::0x0090
struct FSolarSmooth
{
    enum class ESolarSmoothOption                 SmoothType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FRuntimeFloatCurve                            CustomCurve;                                                  // 0x0008(0x0088)
};


// ScriptStruct  Solarland.SolarSoftObjectReference
// Struct Size::0x0020
struct FSolarSoftObjectReference : public FTableRowBase
{
    FSoftObjectPath                               ObjectReference;                                              // 0x0008(0x0018)
};


// ScriptStruct  Solarland.SpawnAdjustTestConfig
// Struct Size::0x0028
struct FSpawnAdjustTestConfig
{
    TArray<enum class EObjectTypeQuery>           AdjustBlockTypes;                                             // 0x0000(0x0010)
    FVector                                       AdjustDetectBoxExtent;                                        // 0x0010(0x000C)
    FVector                                       AdjustDetectBoxOffset;                                        // 0x001C(0x000C)
};


// ScriptStruct  Solarland.AIDogDebugMessage
// Struct Size::0x0020
struct FAIDogDebugMessage
{
    FString                                       Key;                                                          // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Solarland.MoveResult
// Struct Size::0x0038
struct FMoveResult
{
    enum class EOrderMoveFeedback                 Feedback;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector_NetQuantize                           EndLocation;                                                  // 0x0004(0x000C)
    FVector_NetQuantize                           HitLocation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<FVector_NetQuantize>                   NavPathPoints;                                                // 0x0020(0x0010)
    char                                          Timestamp;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Solarland.SolarQuickSummonRule
// Struct Size::0x0048
struct FSolarQuickSummonRule
{
    bool                                          bCanQuickSummonInAir;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         QuickSummonValidDuration;                                     // 0x0004(0x0004)
    bool                                          bDetectBlockForCharacterToCheckPoint;                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<enum class EObjectTypeQuery>           BlockDetectionTypes;                                          // 0x0010(0x0010)
    FName                                         QuickSummonReferenceSocketName;                               // 0x0020(0x0008)
    float                                         UpDetectHeight;                                               // 0x0028(0x0004)
    float                                         DownDetectHeight;                                             // 0x002C(0x0004)
    float                                         SphereTraceRadius;                                            // 0x0030(0x0004)
    bool                                          bDrawDebug;                                                   // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    TArray<FVector>                               CheckPointRelativeLocationArray;                              // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarSummonPreview
// Struct Size::0x0018
struct FSolarSummonPreview
{
    UStreamableRenderAsset*                       Mesh;                                                         // 0x0000(0x0008)
    UMaterialInterface*                           ValidMaterial;                                                // 0x0008(0x0008)
    UMaterialInterface*                           InvalidMaterial;                                              // 0x0010(0x0008)
};


// ScriptStruct  Solarland.SolarSummonCondition
// Struct Size::0x0090
struct FSolarSummonCondition
{
    TArray<enum class EObjectTypeQuery>           SurfaceCheckTypes;                                            // 0x0000(0x0010)
    TArray<enum class EPhysicalSurface>           ForbiddenSurfaces;                                            // 0x0010(0x0010)
    TArray<AActor*>                               ForbiddenSurfaceClasses;                                      // 0x0020(0x0010)
    bool                                          bUseChannelTest;                                              // 0x0030(0x0001)
    enum class ECollisionChannel                  TestCollisionChannel;                                         // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
    TArray<enum class EObjectTypeQuery>           CollisionCheckTypes;                                          // 0x0038(0x0010)
    TArray<AActor*>                               CollisionCheckIgnoreClasses;                                  // 0x0048(0x0010)
    TArray<AActor*>                               CollisionCheckNotIgnoreSubClasses;                            // 0x0058(0x0010)
    float                                         MaxPlaceableAngle;                                            // 0x0068(0x0004)
    bool                                          bDisplayOverThanPlaceableAngle;                               // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    FVector                                       CheckSize;                                                    // 0x0070(0x000C)
    float                                         CollisionToGroundDistance;                                    // 0x007C(0x0004)
    bool                                          bEnableSummonInRoom;                                          // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         RoomCheckHalfHeight;                                          // 0x0084(0x0004)
    bool                                          bKeepPreviewUpright;                                          // 0x0088(0x0001)
    bool                                          bIgnorePlacementCollision;                                    // 0x0089(0x0001)
    bool                                          bCheckSummonLocationOnNavMesh;                                // 0x008A(0x0001)
    bool                                          bDeepWaterCheck;                                              // 0x008B(0x0001)
    float                                         DeepWaterCheckCheckHeight;                                    // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarSummonTimer
// Struct Size::0x0008
struct FSolarSummonTimer
{
    bool                                          bEnable;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Timer;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.InvisibleZoneParticleInfo
// Struct Size::0x0070
struct FInvisibleZoneParticleInfo
{
    FSoftObjectPath                               ParticlePathForTeammate;                                      // 0x0000(0x0018)
    FSoftObjectPath                               ParticlePathForEnemy;                                         // 0x0018(0x0018)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0030)
    bool                                          bAttach;                                                      // 0x0060(0x0001)
    char                                          pa_0061[0x000F]                                               // 0x0061(0x000F)
};


// ScriptStruct  Solarland.SolarSummonOwlMovementInfo
// Struct Size::0x0048
struct FSolarSummonOwlMovementInfo
{
    enum class ESolarSummonOwlMoveMode            MoveMode;                                                     // 0x0000(0x0001)
    bool                                          bUpdateCurLocation;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FVector                                       CurActorLocation;                                             // 0x0004(0x000C)
    FVector                                       TargetPoint;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UCurveFloat*                                  SpeedCurve;                                                   // 0x0020(0x0008)
    float                                         SpeedCurveZoomRate;                                           // 0x0028(0x0004)
    TWeakObjectPtr<AActor>                        TargetActor;                                                  // 0x002C(0x0008)
    int32_t                                       CurPathNodeIndex;                                             // 0x0034(0x0004)
    TArray<FVector>                               PathNodes;                                                    // 0x0038(0x0010)
};


// ScriptStruct  Solarland.TowerParticleInfo
// Struct Size::0x0050
struct FTowerParticleInfo
{
    FSoftObjectPath                               ParticlePath;                                                 // 0x0000(0x0018)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    RelativeTransform;                                            // 0x0020(0x0030)
};


// ScriptStruct  Solarland.TowerPadEffect
// Struct Size::0x0050
struct FTowerPadEffect
{
    UParticleSystem*                              Particle;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    UParticleSystemComponent*                     Handle;                                                       // 0x0040(0x0008)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  Solarland.SolarLocaleInfo
// Struct Size::0x0020
struct FSolarLocaleInfo
{
    FString                                       Language;                                                     // 0x0000(0x0010)
    FString                                       Region;                                                       // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SolarTablesDataBase
// Struct Size::0x0010
struct FSolarTablesDataBase
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarTables_AbilityData
// Struct Size::0x0060
struct FSolarTables_AbilityData : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AbilityData>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AbilityData
// Struct Size::0x00D0
struct FSolarTablesData_AbilityData : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         Duration;                                                     // 0x0014(0x0004)
    float                                         CoolDown;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<float>                                 NonAttributeSub;                                              // 0x0020(0x0010)
    TMap<FString,FString>                         AttributeSub;                                                 // 0x0030(0x0050)
    TMap<FString,FString>                         UIOverride;                                                   // 0x0080(0x0050)
};


// ScriptStruct  Solarland.SolarTables_Account
// Struct Size::0x0060
struct FSolarTables_Account : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Account>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Account
// Struct Size::0x0020
struct FSolarTablesData_Account : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Exp;                                                          // 0x0014(0x0004)
    int32_t                                       UpdateValue;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AccountAvatar
// Struct Size::0x0060
struct FSolarTables_AccountAvatar : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountAvatar>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountAvatar
// Struct Size::0x0050
struct FSolarTablesData_AccountAvatar : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FSolarTablesLocalText                         Des;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Icon;                                                         // 0x0020(0x0010)
    FString                                       IMIcon;                                                       // 0x0030(0x0010)
    bool                                          IfDefault;                                                    // 0x0040(0x0001)
    bool                                          IfShow;                                                       // 0x0041(0x0001)
    char                                          pa_0042[0x0002]                                               // 0x0042(0x0002)
    int32_t                                       ShopPropertyid;                                               // 0x0044(0x0004)
    bool                                          IfBotUse;                                                     // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    int32_t                                       ItemID;                                                       // 0x004C(0x0004)
};


// ScriptStruct  Solarland.SolarTablesLocalText
// Struct Size::0x0004
struct FSolarTablesLocalText
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AccountAvatarFrame
// Struct Size::0x0060
struct FSolarTables_AccountAvatarFrame : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountAvatarFrame>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountAvatarFrame
// Struct Size::0x0080
struct FSolarTablesData_AccountAvatarFrame : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       FrameIcon;                                                    // 0x0058(0x0010)
    FString                                       Frame;                                                        // 0x0068(0x0010)
    int32_t                                       ShopPropertyid;                                               // 0x0078(0x0004)
    bool                                          IfShow;                                                       // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
};


// ScriptStruct  Solarland.SolarTables_AccountAvatarItem
// Struct Size::0x0060
struct FSolarTables_AccountAvatarItem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountAvatarItem>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountAvatarItem
// Struct Size::0x0078
struct FSolarTablesData_AccountAvatarItem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       AccountAvatarId;                                              // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       IMIcon;                                                       // 0x0060(0x0010)
    bool                                          IfDefault;                                                    // 0x0070(0x0001)
    bool                                          IfShow;                                                       // 0x0071(0x0001)
    char                                          pa_0072[0x0006]                                               // 0x0072(0x0006)
};


// ScriptStruct  Solarland.SolarTables_AccountChat
// Struct Size::0x0060
struct FSolarTables_AccountChat : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountChat>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountChat
// Struct Size::0x00C0
struct FSolarTablesData_AccountChat : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       ChatBubblePath;                                               // 0x0058(0x0010)
    FString                                       ChatBubbleTexturePath;                                        // 0x0068(0x0010)
    FString                                       RichText;                                                     // 0x0078(0x0010)
    FString                                       ChatBubblePathOther;                                          // 0x0088(0x0010)
    FString                                       ChatBubbleTexturePathOther;                                   // 0x0098(0x0010)
    FString                                       RichTextOther;                                                // 0x00A8(0x0010)
    bool                                          IfShow;                                                       // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
};


// ScriptStruct  Solarland.SolarTables_AccountExp
// Struct Size::0x0060
struct FSolarTables_AccountExp : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountExp>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountExp
// Struct Size::0x0068
struct FSolarTablesData_AccountExp : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       MulExp;                                                       // 0x0058(0x0004)
    int32_t                                       UseType;                                                      // 0x005C(0x0004)
    int32_t                                       LimitTime;                                                    // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AccountFixedExp
// Struct Size::0x0060
struct FSolarTables_AccountFixedExp : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountFixedExp>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountFixedExp
// Struct Size::0x0018
struct FSolarTablesData_AccountFixedExp : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Exp;                                                          // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AccountFlag
// Struct Size::0x0060
struct FSolarTables_AccountFlag : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountFlag>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountFlag
// Struct Size::0x0038
struct FSolarTablesData_AccountFlag : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       FlagType;                                                     // 0x0014(0x0004)
    FString                                       FlagIcon;                                                     // 0x0018(0x0010)
    FString                                       StateName;                                                    // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_AccountSettleExp
// Struct Size::0x0060
struct FSolarTables_AccountSettleExp : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AccountSettleExp>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AccountSettleExp
// Struct Size::0x0018
struct FSolarTablesData_AccountSettleExp : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Exp;                                                          // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AchieveAward
// Struct Size::0x0060
struct FSolarTables_AchieveAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AchieveAward>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AchieveAward
// Struct Size::0x0038
struct FSolarTablesData_AchieveAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       AchieveNum;                                                   // 0x0014(0x0004)
    TArray<int32_t>                               AwardList;                                                    // 0x0018(0x0010)
    TArray<int32_t>                               AwardLE;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_AchieveCategory
// Struct Size::0x0060
struct FSolarTables_AchieveCategory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AchieveCategory>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AchieveCategory
// Struct Size::0x0020
struct FSolarTablesData_AchieveCategory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       TabList;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AchieveGroupName
// Struct Size::0x0060
struct FSolarTables_AchieveGroupName : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AchieveGroupName>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AchieveGroupName
// Struct Size::0x0028
struct FSolarTablesData_AchieveGroupName : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         GroupName;                                                    // 0x0014(0x0004)
    TArray<int32_t>                               MatchRuleIDs;                                                 // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Achievement
// Struct Size::0x0060
struct FSolarTables_Achievement : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Achievement>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Achievement
// Struct Size::0x0080
struct FSolarTablesData_Achievement : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Order;                                                        // 0x0014(0x0004)
    FSolarTablesLocalText                         AchieveName;                                                  // 0x0018(0x0004)
    int32_t                                       AchieveTab;                                                   // 0x001C(0x0004)
    int32_t                                       AchieveType;                                                  // 0x0020(0x0004)
    int32_t                                       AchieveScore;                                                 // 0x0024(0x0004)
    TArray<int32_t>                               AwardList;                                                    // 0x0028(0x0010)
    FString                                       AchieveIcon;                                                  // 0x0038(0x0010)
    FString                                       AchieveIconS;                                                 // 0x0048(0x0010)
    int32_t                                       AchieveTask;                                                  // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<int32_t>                               AchieveTV;                                                    // 0x0060(0x0010)
    int32_t                                       AchieveTT;                                                    // 0x0070(0x0004)
    int32_t                                       ReportType;                                                   // 0x0074(0x0004)
    FSolarTablesLocalText                         AchieveTC;                                                    // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Action
// Struct Size::0x0060
struct FSolarTables_Action : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Action>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Action
// Struct Size::0x0028
struct FSolarTablesData_Action : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_ActionType        ActionType;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FString                                       ActionReason;                                                 // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ActiveValue
// Struct Size::0x0060
struct FSolarTables_ActiveValue : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ActiveValue>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ActiveValue
// Struct Size::0x0028
struct FSolarTablesData_ActiveValue : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       activeValue;                                                  // 0x0014(0x0004)
    TArray<int32_t>                               Item;                                                         // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_AdditionalChunkSetting
// Struct Size::0x0060
struct FSolarTables_AdditionalChunkSetting : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AdditionalChunkSetting>Data;                                                  // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AdditionalChunkSetting
// Struct Size::0x0028
struct FSolarTablesData_AdditionalChunkSetting : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ChunkID;                                                      // 0x0014(0x0004)
    FString                                       ChunkDir;                                                     // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_AIBackPack
// Struct Size::0x0060
struct FSolarTables_AIBackPack : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AIBackPack>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AIBackPack
// Struct Size::0x0018
struct FSolarTablesData_AIBackPack : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BagId;                                                        // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AICapsule
// Struct Size::0x0060
struct FSolarTables_AICapsule : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AICapsule>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AICapsule
// Struct Size::0x0018
struct FSolarTablesData_AICapsule : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CapsuleID;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AICharacter
// Struct Size::0x0060
struct FSolarTables_AICharacter : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AICharacter>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AICharacter
// Struct Size::0x0020
struct FSolarTablesData_AICharacter : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SkinId;                                                       // 0x0014(0x0004)
    int32_t                                       CharaId;                                                      // 0x0018(0x0004)
    int32_t                                       Weight;                                                       // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AICharacterSettings
// Struct Size::0x0060
struct FSolarTables_AICharacterSettings : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AICharacterSettings>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AICharacterSettings
// Struct Size::0x0028
struct FSolarTablesData_AICharacterSettings : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    bool                                          IsNPC;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         HPOverride;                                                   // 0x0018(0x0004)
    int32_t                                       OutcomeID;                                                    // 0x001C(0x0004)
    int32_t                                       DeathBoxId;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AIMLConfig
// Struct Size::0x0060
struct FSolarTables_AIMLConfig : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AIMLConfig>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AIMLConfig
// Struct Size::0x0030
struct FSolarTablesData_AIMLConfig : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         CrouchProb;                                                   // 0x0014(0x0004)
    float                                         JumpProb;                                                     // 0x0018(0x0004)
    float                                         TacticalProb;                                                 // 0x001C(0x0004)
    float                                         SuperProb;                                                    // 0x0020(0x0004)
    float                                         FireProb;                                                     // 0x0024(0x0004)
    float                                         HealProb;                                                     // 0x0028(0x0004)
    float                                         ShieldProb;                                                   // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Airline
// Struct Size::0x0060
struct FSolarTables_Airline : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Airline>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Airline
// Struct Size::0x0068
struct FSolarTablesData_Airline : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 AirlineCoordinateA;                                           // 0x0018(0x0010)
    TArray<float>                                 RealPointA;                                                   // 0x0028(0x0010)
    TArray<float>                                 AirlineCoordinateB;                                           // 0x0038(0x0010)
    TArray<float>                                 RealPointB;                                                   // 0x0048(0x0010)
    int32_t                                       UseGameMode;                                                  // 0x0058(0x0004)
    int32_t                                       mapID;                                                        // 0x005C(0x0004)
    float                                         AirlineAltitude;                                              // 0x0060(0x0004)
    float                                         CapsuleSpeed;                                                 // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AITrail
// Struct Size::0x0060
struct FSolarTables_AITrail : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AITrail>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AITrail
// Struct Size::0x0018
struct FSolarTablesData_AITrail : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       TrailID;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AreaCode
// Struct Size::0x0060
struct FSolarTables_AreaCode : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AreaCode>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AreaCode
// Struct Size::0x0018
struct FSolarTablesData_AreaCode : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         AreaName;                                                     // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ArmorProperty
// Struct Size::0x0060
struct FSolarTables_ArmorProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ArmorProperty>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ArmorProperty
// Struct Size::0x00A8
struct FSolarTablesData_ArmorProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    float                                         MaxValue;                                                     // 0x008C(0x0004)
    float                                         RecoverySpeed;                                                // 0x0090(0x0004)
    float                                         EnergyCost;                                                   // 0x0094(0x0004)
    float                                         MaterialCost;                                                 // 0x0098(0x0004)
    float                                         MinMaterialCost;                                              // 0x009C(0x0004)
    int32_t                                       ArmorWorth;                                                   // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Armory
// Struct Size::0x0060
struct FSolarTables_Armory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Armory>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Armory
// Struct Size::0x0088
struct FSolarTablesData_Armory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       WeaponType;                                                   // 0x0014(0x0004)
    int32_t                                       WeaponDescription;                                            // 0x0018(0x0004)
    int32_t                                       SkillName;                                                    // 0x001C(0x0004)
    int32_t                                       SkillDescription;                                             // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       UrlName;                                                      // 0x0028(0x0010)
    FString                                       WeaponMovie;                                                  // 0x0038(0x0010)
    FString                                       WeaponConfig;                                                 // 0x0048(0x0010)
    int32_t                                       WeaponUnlockLevel;                                            // 0x0058(0x0004)
    int32_t                                       WeaponDamage;                                                 // 0x005C(0x0004)
    int32_t                                       WeaponRateOfFire;                                             // 0x0060(0x0004)
    int32_t                                       WeaponRecoil;                                                 // 0x0064(0x0004)
    int32_t                                       WeaponSpread;                                                 // 0x0068(0x0004)
    int32_t                                       WeaponRange;                                                  // 0x006C(0x0004)
    int32_t                                       WeaponMobility;                                               // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       SilhouetteIcon;                                               // 0x0078(0x0010)
};


// ScriptStruct  Solarland.SolarTables_AsyncMsg
// Struct Size::0x0060
struct FSolarTables_AsyncMsg : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AsyncMsg>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AsyncMsg
// Struct Size::0x0020
struct FSolarTablesData_AsyncMsg : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       AsyncMsgType;                                                 // 0x0014(0x0004)
    float                                         ExpireTime;                                                   // 0x0018(0x0004)
    bool                                          IfRepeatPull;                                                 // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Solarland.SolarTables_AttributeReg
// Struct Size::0x0060
struct FSolarTables_AttributeReg : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AttributeReg>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AttributeReg
// Struct Size::0x0038
struct FSolarTablesData_AttributeReg : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DisplayName;                                                  // 0x0018(0x0010)
    float                                         Value;                                                        // 0x0028(0x0004)
    float                                         Min;                                                          // 0x002C(0x0004)
    float                                         Max;                                                          // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AutoDirector
// Struct Size::0x0060
struct FSolarTables_AutoDirector : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AutoDirector>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AutoDirector
// Struct Size::0x0030
struct FSolarTablesData_AutoDirector : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SpectateAreaRadius;                                           // 0x0014(0x0004)
    int32_t                                       CollectScoreWindow;                                           // 0x0018(0x0004)
    float                                         MinFocusTime;                                                 // 0x001C(0x0004)
    float                                         MaxFocusTime;                                                 // 0x0020(0x0004)
    float                                         NewCutThreshold;                                              // 0x0024(0x0004)
    float                                         PreFreeCameraTime;                                            // 0x0028(0x0004)
    int32_t                                       AutoDirectorMinEnableTime;                                    // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_AutoDirectorActivityScore
// Struct Size::0x0060
struct FSolarTables_AutoDirectorActivityScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_AutoDirectorActivityScore>Data;                                               // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_AutoDirectorActivityScore
// Struct Size::0x0018
struct FSolarTablesData_AutoDirectorActivityScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         Score;                                                        // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BackgroundProperty
// Struct Size::0x0060
struct FSolarTables_BackgroundProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BackgroundProperty>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BackgroundProperty
// Struct Size::0x0060
struct FSolarTablesData_BackgroundProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       NameCardBackgroundID;                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Backpack
// Struct Size::0x0060
struct FSolarTables_Backpack : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Backpack>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Backpack
// Struct Size::0x0040
struct FSolarTablesData_Backpack : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BackpackID;                                                   // 0x0014(0x0004)
    int32_t                                       groupid;                                                      // 0x0018(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x001C(0x0004)
    FSolarTablesLocalText                         Desc;                                                         // 0x0020(0x0004)
    FSolarTablesLocalText                         Detail;                                                       // 0x0024(0x0004)
    int32_t                                       ValidSlotCount;                                               // 0x0028(0x0004)
    int32_t                                       UnlockKey;                                                    // 0x002C(0x0004)
    TArray<int32_t>                               ValidItemType;                                                // 0x0030(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BackpackCard
// Struct Size::0x0060
struct FSolarTables_BackpackCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BackpackCard>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BackpackCard
// Struct Size::0x0060
struct FSolarTablesData_BackpackCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       BackpackID;                                                   // 0x0058(0x0004)
    int32_t                                       LimitTime;                                                    // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BackpackGrowthProperty
// Struct Size::0x0060
struct FSolarTables_BackpackGrowthProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BackpackGrowthProperty>Data;                                                  // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BackpackGrowthProperty
// Struct Size::0x00C8
struct FSolarTablesData_BackpackGrowthProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       GrowthItemType;                                               // 0x008C(0x0004)
    int32_t                                       GrowthPileForShotgunAmmo;                                     // 0x0090(0x0004)
    int32_t                                       GrowthPileForSniperRifleAmmo;                                 // 0x0094(0x0004)
    int32_t                                       GrowthPileForAssaultRifleAmmo;                                // 0x0098(0x0004)
    int32_t                                       GrowthPileForSMGAmmo;                                         // 0x009C(0x0004)
    int32_t                                       GrowthPileForHP;                                              // 0x00A0(0x0004)
    int32_t                                       GrowthPileForShieldA;                                         // 0x00A4(0x0004)
    int32_t                                       GrowthPileForShieldB;                                         // 0x00A8(0x0004)
    float                                         GrowthEffect;                                                 // 0x00AC(0x0004)
    FString                                       Sketch;                                                       // 0x00B0(0x0010)
    int32_t                                       SketchLevel;                                                  // 0x00C0(0x0004)
    int32_t                                       GrowthItemWorth;                                              // 0x00C4(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BackpackProperty
// Struct Size::0x0060
struct FSolarTables_BackpackProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BackpackProperty>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BackpackProperty
// Struct Size::0x0088
struct FSolarTablesData_BackpackProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       BackpackMeshPath;                                             // 0x0058(0x0010)
    FString                                       PreviewBPPath;                                                // 0x0068(0x0010)
    int32_t                                       StartFrame;                                                   // 0x0078(0x0004)
    int32_t                                       EndFrame;                                                     // 0x007C(0x0004)
    float                                         Length;                                                       // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BackpackTrailProperty
// Struct Size::0x0060
struct FSolarTables_BackpackTrailProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BackpackTrailProperty>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BackpackTrailProperty
// Struct Size::0x0078
struct FSolarTablesData_BackpackTrailProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       PreviewTrailPath;                                             // 0x0058(0x0010)
    FString                                       AssemblingId;                                                 // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BackpackUnlock
// Struct Size::0x0060
struct FSolarTables_BackpackUnlock : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BackpackUnlock> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BackpackUnlock
// Struct Size::0x0070
struct FSolarTablesData_BackpackUnlock : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Group;                                                        // 0x0014(0x0004)
    int32_t                                       Priority;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TMap<FString,FString>                         Cost;                                                         // 0x0020(0x0050)
};


// ScriptStruct  Solarland.SolarTables_BadWordsMapping
// Struct Size::0x0060
struct FSolarTables_BadWordsMapping : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BadWordsMapping>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BadWordsMapping
// Struct Size::0x0038
struct FSolarTablesData_BadWordsMapping : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       msg_type;                                                     // 0x0018(0x0010)
    FString                                       biztype;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BanCheating
// Struct Size::0x0060
struct FSolarTables_BanCheating : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BanCheating>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BanCheating
// Struct Size::0x0028
struct FSolarTablesData_BanCheating : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CheatTimesStart;                                              // 0x0014(0x0004)
    int32_t                                       CheatTimesEnd;                                                // 0x0018(0x0004)
    int32_t                                       Bantime;                                                      // 0x001C(0x0004)
    int32_t                                       BanLeaderboard;                                               // 0x0020(0x0004)
    int32_t                                       MatchDivide;                                                  // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BattleEndRankSettlement
// Struct Size::0x0060
struct FSolarTables_BattleEndRankSettlement : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BattleEndRankSettlement>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BattleEndRankSettlement
// Struct Size::0x0030
struct FSolarTablesData_BattleEndRankSettlement : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ruleID;                                                       // 0x0014(0x0004)
    int32_t                                       RealPerson;                                                   // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               ItemDrop;                                                     // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BattleLog
// Struct Size::0x0060
struct FSolarTables_BattleLog : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BattleLog>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BattleLog
// Struct Size::0x0030
struct FSolarTablesData_BattleLog : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       LogName;                                                      // 0x0018(0x0010)
    int32_t                                       Logon;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BattleRoyaleMode
// Struct Size::0x0060
struct FSolarTables_BattleRoyaleMode : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BattleRoyaleMode>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BattleRoyaleMode
// Struct Size::0x0050
struct FSolarTablesData_BattleRoyaleMode : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               GlobalOutcomes;                                               // 0x0018(0x0010)
    int32_t                                       BattleMap;                                                    // 0x0028(0x0004)
    int32_t                                       ReadyMap;                                                     // 0x002C(0x0004)
    float                                         ReadyStateTime;                                               // 0x0030(0x0004)
    int32_t                                       StartTime;                                                    // 0x0034(0x0004)
    float                                         EenTime;                                                      // 0x0038(0x0004)
    int32_t                                       CharacterEXPCoefficient;                                      // 0x003C(0x0004)
    TArray<FString>                               EventSets;                                                    // 0x0040(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BattleUpgradeContent
// Struct Size::0x0060
struct FSolarTables_BattleUpgradeContent : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BattleUpgradeContent>Data;                                                    // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BattleUpgradeContent
// Struct Size::0x0040
struct FSolarTablesData_BattleUpgradeContent : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               ModelID;                                                      // 0x0018(0x0010)
    int32_t                                       Grade;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<int32_t>                               UpgradeContent;                                               // 0x0030(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BattleUpgradeEffect
// Struct Size::0x0060
struct FSolarTables_BattleUpgradeEffect : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BattleUpgradeEffect>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BattleUpgradeEffect
// Struct Size::0x0020
struct FSolarTablesData_BattleUpgradeEffect : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_BattleUpgradeEffectTypeEffect;                                                  // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    int32_t                                       EffectValue;                                                  // 0x0018(0x0004)
    int32_t                                       StackingTimes;                                                // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BattleUpgradeEffectPool
// Struct Size::0x0060
struct FSolarTables_BattleUpgradeEffectPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BattleUpgradeEffectPool>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BattleUpgradeEffectPool
// Struct Size::0x0028
struct FSolarTablesData_BattleUpgradeEffectPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               Pool;                                                         // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Behavior
// Struct Size::0x0060
struct FSolarTables_Behavior : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Behavior>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Behavior
// Struct Size::0x0038
struct FSolarTablesData_Behavior : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_BehaviorType      BehaviorType;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    int32_t                                       CharacterGetExp;                                              // 0x0018(0x0004)
    int32_t                                       WeaponGetExp;                                                 // 0x001C(0x0004)
    int32_t                                       WeaponExp;                                                    // 0x0020(0x0004)
    int32_t                                       WeaponExp;                                                    // 0x0024(0x0004)
    int32_t                                       WeaponExp;                                                    // 0x0028(0x0004)
    FSolarTablesLocalText                         CharaGetExpText;                                              // 0x002C(0x0004)
    int32_t                                       WeaponGetExpText;                                             // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Benefit
// Struct Size::0x0060
struct FSolarTables_Benefit : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_Benefit>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Benefit
// Struct Size::0x0030
struct FSolarTablesData_Benefit : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    TArray<int32_t>                               RewardID;                                                     // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BindThirdPartyAccount
// Struct Size::0x0060
struct FSolarTables_BindThirdPartyAccount : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BindThirdPartyAccount>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BindThirdPartyAccount
// Struct Size::0x0050
struct FSolarTablesData_BindThirdPartyAccount : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       PlatformType;                                                 // 0x0014(0x0004)
    TArray<int32_t>                               Reward;                                                       // 0x0018(0x0010)
    FString                                       Icon;                                                         // 0x0028(0x0010)
    TArray<int32_t>                               EquipmentType;                                                // 0x0038(0x0010)
    bool                                          SupportTransferCode;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    int32_t                                       Name;                                                         // 0x004C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BotConfig
// Struct Size::0x0060
struct FSolarTables_BotConfig : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BotConfig>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BotConfig
// Struct Size::0x00D0
struct FSolarTablesData_BotConfig : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ConfigID;                                                     // 0x0014(0x0004)
    int32_t                                       DifficultyLevel;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       BattleBTPath;                                                 // 0x0020(0x0010)
    bool                                          EnableWarmTarget;                                             // 0x0030(0x0001)
    bool                                          EnableWarmDrop;                                               // 0x0031(0x0001)
    bool                                          InitDefaultWeapon;                                            // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
    int32_t                                       DefaultWeaponID;                                              // 0x0034(0x0004)
    float                                         AttackRange;                                                  // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<float>                                 ShootDisperse;                                                // 0x0040(0x0010)
    TArray<float>                                 HitRate;                                                      // 0x0050(0x0010)
    TArray<float>                                 DamageRate;                                                   // 0x0060(0x0010)
    TArray<float>                                 DamageFactor;                                                 // 0x0070(0x0010)
    TArray<float>                                 VehicleDamageFactor;                                          // 0x0080(0x0010)
    TArray<float>                                 DamageFactorToVehicle;                                        // 0x0090(0x0010)
    TArray<float>                                 DamageFactorToSummonItem;                                     // 0x00A0(0x0010)
    bool                                          PreventFatalDamage;                                           // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    int32_t                                       LootConfigID;                                                 // 0x00B4(0x0004)
    int32_t                                       TargetSelectConfigID;                                         // 0x00B8(0x0004)
    int32_t                                       TargetSelectConfigIDPlayer;                                   // 0x00BC(0x0004)
    TArray<int32_t>                               Mastery;                                                      // 0x00C0(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BotConfigPreset
// Struct Size::0x0060
struct FSolarTables_BotConfigPreset : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BotConfigPreset>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BotConfigPreset
// Struct Size::0x0028
struct FSolarTablesData_BotConfigPreset : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ConfigResPath;                                                // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BotLootConfig
// Struct Size::0x0060
struct FSolarTables_BotLootConfig : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BotLootConfig>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BotLootConfig
// Struct Size::0x0060
struct FSolarTablesData_BotLootConfig : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       BTResPath;                                                    // 0x0018(0x0010)
    float                                         RifleBaseValue;                                               // 0x0028(0x0004)
    float                                         ShotgunBaseValue;                                             // 0x002C(0x0004)
    float                                         SubmachinegunBaseValue;                                       // 0x0030(0x0004)
    float                                         SniperBaseValue;                                              // 0x0034(0x0004)
    float                                         WeaponQualityValue;                                           // 0x0038(0x0004)
    float                                         AmmoBaseValue;                                                // 0x003C(0x0004)
    float                                         AmmoMatchFactor;                                              // 0x0040(0x0004)
    float                                         ShieldBaseValue;                                              // 0x0044(0x0004)
    float                                         ShieldQualityValue;                                           // 0x0048(0x0004)
    float                                         JetpackBaseValue;                                             // 0x004C(0x0004)
    float                                         JetpackQualityValue;                                          // 0x0050(0x0004)
    float                                         MedkitBaseValue;                                              // 0x0054(0x0004)
    float                                         MedkitHPRatioFactor;                                          // 0x0058(0x0004)
    float                                         MoveCostFactor;                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BotPerceptionConfig
// Struct Size::0x0060
struct FSolarTables_BotPerceptionConfig : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BotPerceptionConfig>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BotPerceptionConfig
// Struct Size::0x0080
struct FSolarTablesData_BotPerceptionConfig : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         ThreatUpdateInterval;                                         // 0x0014(0x0004)
    float                                         AttackTriggerThreshold;                                       // 0x0018(0x0004)
    float                                         CancelAttackTriggerThreshold;                                 // 0x001C(0x0004)
    float                                         DistanceThreshold;                                            // 0x0020(0x0004)
    float                                         DistanceThresholdInSmoke;                                     // 0x0024(0x0004)
    float                                         DistanceThresholdInNightCome;                                 // 0x0028(0x0004)
    float                                         DistanceThresholdInNightComeEx;                               // 0x002C(0x0004)
    float                                         PeripheralVisionAngleDegrees;                                 // 0x0030(0x0004)
    float                                         SwitchTargetDifferenceValue;                                  // 0x0034(0x0004)
    float                                         SightIncreaseBase;                                            // 0x0038(0x0004)
    float                                         SightIncreaseDistanceFactor;                                  // 0x003C(0x0004)
    float                                         SightDecreaseBase;                                            // 0x0040(0x0004)
    float                                         SightDecreaseDistanceFactor;                                  // 0x0044(0x0004)
    float                                         SightDecreaseMax;                                             // 0x0048(0x0004)
    float                                         SightMaxValue;                                                // 0x004C(0x0004)
    float                                         HearingAddBase;                                               // 0x0050(0x0004)
    float                                         HearingAddDistanceFactor;                                     // 0x0054(0x0004)
    float                                         HearingDecreasePerTick;                                       // 0x0058(0x0004)
    float                                         HearingMaxValue;                                              // 0x005C(0x0004)
    float                                         BotThreatFactor;                                              // 0x0060(0x0004)
    float                                         PlayerThreatFactor;                                           // 0x0064(0x0004)
    float                                         DeathVergeFactor;                                             // 0x0068(0x0004)
    float                                         MaxDistanceThreatFactor;                                      // 0x006C(0x0004)
    float                                         DistanceThreatFactorDecayRate;                                // 0x0070(0x0004)
    float                                         AccompanyThreatMaxValue;                                      // 0x0074(0x0004)
    float                                         AccompanyThreatAddBase;                                       // 0x0078(0x0004)
    float                                         AccompanyDecreasePerTick;                                     // 0x007C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BpAward
// Struct Size::0x0060
struct FSolarTables_BpAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BpAward>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BpAward
// Struct Size::0x0050
struct FSolarTablesData_BpAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BpID;                                                         // 0x0014(0x0004)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    int32_t                                       Exp;                                                          // 0x001C(0x0004)
    int32_t                                       UpdateValue;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<int32_t>                               FreeAward;                                                    // 0x0028(0x0010)
    TArray<int32_t>                               PayAward;                                                     // 0x0038(0x0010)
    bool                                          UnlockExtraTask;                                              // 0x0048(0x0001)
    bool                                          BuyLevel;                                                     // 0x0049(0x0001)
    bool                                          LoopReward;                                                   // 0x004A(0x0001)
    char                                          pa_004B[0x0005]                                               // 0x004B(0x0005)
};


// ScriptStruct  Solarland.SolarTables_BpRefresh
// Struct Size::0x0060
struct FSolarTables_BpRefresh : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BpRefresh>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BpRefresh
// Struct Size::0x0020
struct FSolarTablesData_BpRefresh : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BpID;                                                         // 0x0014(0x0004)
    int32_t                                       RefreshId;                                                    // 0x0018(0x0004)
    int32_t                                       isRefresh;                                                    // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BpShow
// Struct Size::0x0060
struct FSolarTables_BpShow : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BpShow>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BpShow
// Struct Size::0x0030
struct FSolarTablesData_BpShow : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BpID;                                                         // 0x0014(0x0004)
    int32_t                                       AwardType;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Award;                                                        // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BpSystem
// Struct Size::0x0060
struct FSolarTables_BpSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BpSystem>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BpSystem
// Struct Size::0x00C8
struct FSolarTablesData_BpSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    TArray<int32_t>                               Unlock;                                                       // 0x0038(0x0010)
    TArray<int32_t>                               ExpBuy;                                                       // 0x0048(0x0010)
    TArray<int32_t>                               PayRefresh;                                                   // 0x0058(0x0010)
    int32_t                                       FreeRefreshNum;                                               // 0x0068(0x0004)
    int32_t                                       PayRefreshNum;                                                // 0x006C(0x0004)
    int32_t                                       isReset;                                                      // 0x0070(0x0004)
    int32_t                                       IsOpen;                                                       // 0x0074(0x0004)
    TArray<int32_t>                               ShareAward;                                                   // 0x0078(0x0010)
    TArray<int32_t>                               Recharge;                                                     // 0x0088(0x0010)
    int32_t                                       MoudleId;                                                     // 0x0098(0x0004)
    int32_t                                       MissionCard;                                                  // 0x009C(0x0004)
    int32_t                                       BPExpBuffID;                                                  // 0x00A0(0x0004)
    int32_t                                       CoinBuffID;                                                   // 0x00A4(0x0004)
    FString                                       BulePrintUnlockName;                                          // 0x00A8(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x00B8(0x0004)
    FSolarTablesLocalText                         TypeName;                                                     // 0x00BC(0x0004)
    FSolarTablesLocalText                         Des;                                                          // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
};


// ScriptStruct  Solarland.SolarTables_BpTask2
// Struct Size::0x0060
struct FSolarTables_BpTask2 : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BpTask2>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BpTask2
// Struct Size::0x0050
struct FSolarTablesData_BpTask2 : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BpID;                                                         // 0x0014(0x0004)
    int32_t                                       TaskType;                                                     // 0x0018(0x0004)
    int32_t                                       WeekCnt;                                                      // 0x001C(0x0004)
    TArray<int32_t>                               TaskPool;                                                     // 0x0020(0x0010)
    FString                                       UnlockTime;                                                   // 0x0030(0x0010)
    FString                                       LockTime;                                                     // 0x0040(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BpTaskRandom
// Struct Size::0x0060
struct FSolarTables_BpTaskRandom : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BpTaskRandom>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BpTaskRandom
// Struct Size::0x0038
struct FSolarTablesData_BpTaskRandom : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BpID;                                                         // 0x0014(0x0004)
    int32_t                                       TaskType;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               TaskPool;                                                     // 0x0020(0x0010)
    bool                                          IfGroupTask;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Solarland.SolarTables_BpUnlock
// Struct Size::0x0060
struct FSolarTables_BpUnlock : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BpUnlock>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BpUnlock
// Struct Size::0x0028
struct FSolarTablesData_BpUnlock : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       UnlockFlag;                                                   // 0x0014(0x0004)
    TArray<int32_t>                               ExtraAward;                                                   // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BREloScore
// Struct Size::0x0060
struct FSolarTables_BREloScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BREloScore>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BREloScore
// Struct Size::0x0048
struct FSolarTablesData_BREloScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EloStart;                                                     // 0x0014(0x0004)
    int32_t                                       EloEnd;                                                       // 0x0018(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x001C(0x0004)
    float                                         KillRealConfig;                                               // 0x0020(0x0004)
    float                                         DamageRealConfig;                                             // 0x0024(0x0004)
    float                                         KillAiConfig;                                                 // 0x0028(0x0004)
    float                                         DamageAiConfig;                                               // 0x002C(0x0004)
    int32_t                                       SubEloMaxAdding;                                              // 0x0030(0x0004)
    int32_t                                       SubEloMaxDeduction;                                           // 0x0034(0x0004)
    int32_t                                       K_RankRating;                                                 // 0x0038(0x0004)
    int32_t                                       K_EliRating;                                                  // 0x003C(0x0004)
    int32_t                                       K_DamRating;                                                  // 0x0040(0x0004)
    int32_t                                       EloK;                                                         // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Buff
// Struct Size::0x0060
struct FSolarTables_Buff : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Buff>           Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Buff
// Struct Size::0x0048
struct FSolarTablesData_Buff : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x0038(0x0004)
    FSolarTablesLocalText                         Des;                                                          // 0x003C(0x0004)
    float                                         Value;                                                        // 0x0040(0x0004)
    int32_t                                       Type;                                                         // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Building
// Struct Size::0x0060
struct FSolarTables_Building : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Building>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Building
// Struct Size::0x0068
struct FSolarTablesData_Building : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       BuildingType;                                                 // 0x0018(0x0010)
    FSolarTablesLocalText                         BuildingName;                                                 // 0x0028(0x0004)
    FSolarTablesLocalText                         BuildingDes;                                                  // 0x002C(0x0004)
    int32_t                                       FrontbuildingID;                                              // 0x0030(0x0004)
    int32_t                                       BuildingTime;                                                 // 0x0034(0x0004)
    TArray<int32_t>                               BuildingMaterials;                                            // 0x0038(0x0010)
    FString                                       BuildingBP;                                                   // 0x0048(0x0010)
    FString                                       BuildingMap;                                                  // 0x0058(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BusinessCardFrame
// Struct Size::0x0060
struct FSolarTables_BusinessCardFrame : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BusinessCardFrame>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BusinessCardFrame
// Struct Size::0x0078
struct FSolarTablesData_BusinessCardFrame : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       CardFramePath;                                                // 0x0058(0x0010)
    FString                                       CardFrameTexturePath;                                         // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SolarTables_BusinessFrame
// Struct Size::0x0060
struct FSolarTables_BusinessFrame : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_BusinessFrame>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_BusinessFrame
// Struct Size::0x0060
struct FSolarTablesData_BusinessFrame : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       BackpackID;                                                   // 0x0058(0x0004)
    int32_t                                       LimitTime;                                                    // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CapsuleProperty
// Struct Size::0x0060
struct FSolarTables_CapsuleProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CapsuleProperty>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CapsuleProperty
// Struct Size::0x0078
struct FSolarTablesData_CapsuleProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       CapsuleBPPath;                                                // 0x0058(0x0010)
    FString                                       PreviewBPPath;                                                // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CardDefault
// Struct Size::0x0060
struct FSolarTables_CardDefault : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CardDefault>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CardDefault
// Struct Size::0x0020
struct FSolarTablesData_CardDefault : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CardFrame;                                                    // 0x0014(0x0004)
    int32_t                                       CardPicID;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CardFrameID
// Struct Size::0x0060
struct FSolarTables_CardFrameID : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CardFrameID>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CardFrameID
// Struct Size::0x0018
struct FSolarTablesData_CardFrameID : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CardTab
// Struct Size::0x0060
struct FSolarTables_CardTab : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CardTab>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CardTab
// Struct Size::0x0020
struct FSolarTablesData_CardTab : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       TabList;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CarouselDraw
// Struct Size::0x0060
struct FSolarTables_CarouselDraw : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CarouselDraw>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CarouselDraw
// Struct Size::0x0058
struct FSolarTablesData_CarouselDraw : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Name;                                                         // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    int32_t                                       PropId;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               Price;                                                        // 0x0040(0x0010)
    int32_t                                       crateID;                                                      // 0x0050(0x0004)
    int32_t                                       Style;                                                        // 0x0054(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CaseToggleAlphabet
// Struct Size::0x0060
struct FSolarTables_CaseToggleAlphabet : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CaseToggleAlphabet>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CaseToggleAlphabet
// Struct Size::0x0098
struct FSolarTablesData_CaseToggleAlphabet : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    bool                                          IsLower;                                                      // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FString                                       de;                                                           // 0x0018(0x0010)
    FString                                       fr;                                                           // 0x0028(0x0010)
    FString                                       es;                                                           // 0x0038(0x0010)
    FString                                       pt;                                                           // 0x0048(0x0010)
    FString                                       it;                                                           // 0x0058(0x0010)
    FString                                       pl;                                                           // 0x0068(0x0010)
    FString                                       tr;                                                           // 0x0078(0x0010)
    FString                                       ru;                                                           // 0x0088(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CharacterAbility
// Struct Size::0x0060
struct FSolarTables_CharacterAbility : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterAbility>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterAbility
// Struct Size::0x0060
struct FSolarTablesData_CharacterAbility : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CharacterId;                                                  // 0x0014(0x0004)
    FString                                       DataAssetsPath;                                               // 0x0018(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x0028(0x0004)
    FSolarTablesLocalText                         Info;                                                         // 0x002C(0x0004)
    int32_t                                       DataID;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       AbilityBP;                                                    // 0x0038(0x0010)
    FString                                       Icon;                                                         // 0x0048(0x0010)
    int32_t                                       Data;                                                         // 0x0058(0x0004)
    bool                                          IfActive;                                                     // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
};


// ScriptStruct  Solarland.SolarTables_CharacterCard
// Struct Size::0x0060
struct FSolarTables_CharacterCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterCard>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterCard
// Struct Size::0x0060
struct FSolarTablesData_CharacterCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       CharacterId;                                                  // 0x0058(0x0004)
    int32_t                                       LimitTime;                                                    // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterExp
// Struct Size::0x0060
struct FSolarTables_CharacterExp : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterExp>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterExp
// Struct Size::0x0018
struct FSolarTablesData_CharacterExp : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Exp;                                                          // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterExpCard
// Struct Size::0x0060
struct FSolarTables_CharacterExpCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterExpCard>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterExpCard
// Struct Size::0x0060
struct FSolarTablesData_CharacterExpCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       CharacterExpValue;                                            // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterExpDoubleCard
// Struct Size::0x0060
struct FSolarTables_CharacterExpDoubleCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterExpDoubleCard>Data;                                                  // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterExpDoubleCard
// Struct Size::0x0068
struct FSolarTablesData_CharacterExpDoubleCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       MulExp;                                                       // 0x0058(0x0004)
    int32_t                                       UseType;                                                      // 0x005C(0x0004)
    int32_t                                       LimitTime;                                                    // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterGrow
// Struct Size::0x0060
struct FSolarTables_CharacterGrow : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterGrow>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterGrow
// Struct Size::0x0028
struct FSolarTablesData_CharacterGrow : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CharacterLevel;                                               // 0x0014(0x0004)
    int32_t                                       CharacterLevelUpExp;                                          // 0x0018(0x0004)
    enum class ESolarTablesEnum_CharacterLevelUpTypeCharacterLevelUpType;                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    int32_t                                       CharacterLeveUpValue;                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterInfo
// Struct Size::0x0060
struct FSolarTables_CharacterInfo : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterInfo>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterInfo
// Struct Size::0x0020
struct FSolarTablesData_CharacterInfo : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         StoryTitle;                                                   // 0x0014(0x0004)
    FSolarTablesLocalText                         StoryContent;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterName
// Struct Size::0x0060
struct FSolarTables_CharacterName : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterName>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterName
// Struct Size::0x0018
struct FSolarTablesData_CharacterName : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterPassiveAbility
// Struct Size::0x0060
struct FSolarTables_CharacterPassiveAbility : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterPassiveAbility>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterPassiveAbility
// Struct Size::0x0028
struct FSolarTablesData_CharacterPassiveAbility : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DataAssetsPath;                                               // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CharacterProperty
// Struct Size::0x0060
struct FSolarTables_CharacterProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterProperty>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterProperty
// Struct Size::0x0060
struct FSolarTablesData_CharacterProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       CharacterId;                                                  // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterRemove
// Struct Size::0x0060
struct FSolarTables_CharacterRemove : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterRemove>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterRemove
// Struct Size::0x0030
struct FSolarTablesData_CharacterRemove : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemType;                                                     // 0x0014(0x0004)
    int32_t                                       TableID;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               Compensation;                                                 // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CharacterSkinCard
// Struct Size::0x0060
struct FSolarTables_CharacterSkinCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterSkinCard>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterSkinCard
// Struct Size::0x0060
struct FSolarTablesData_CharacterSkinCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       CharacterSkinID;                                              // 0x0058(0x0004)
    int32_t                                       LimitTime;                                                    // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterSkinProperty
// Struct Size::0x0060
struct FSolarTables_CharacterSkinProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterSkinProperty>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterSkinProperty
// Struct Size::0x0060
struct FSolarTablesData_CharacterSkinProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       CharacterSkinID;                                              // 0x0058(0x0004)
    int32_t                                       Skin2CharacterID;                                             // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterStoreCategory
// Struct Size::0x0060
struct FSolarTables_CharacterStoreCategory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterStoreCategory>Data;                                                  // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterStoreCategory
// Struct Size::0x0038
struct FSolarTablesData_CharacterStoreCategory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       SortId;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               SubCategory;                                                  // 0x0020(0x0010)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    int32_t                                       SceneId;                                                      // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterStoreSubCategory
// Struct Size::0x0060
struct FSolarTables_CharacterStoreSubCategory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterStoreSubCategory>Data;                                               // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterStoreSubCategory
// Struct Size::0x0058
struct FSolarTablesData_CharacterStoreSubCategory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    int32_t                                       Srot;                                                         // 0x0028(0x0004)
    int32_t                                       MoudleId;                                                     // 0x002C(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    FString                                       RedHintKey;                                                   // 0x0038(0x0010)
    FString                                       RedHintPath;                                                  // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CharacterSuperAbility
// Struct Size::0x0060
struct FSolarTables_CharacterSuperAbility : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterSuperAbility>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterSuperAbility
// Struct Size::0x0028
struct FSolarTablesData_CharacterSuperAbility : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DataAssetsPath;                                               // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CharacterTacticalAbility
// Struct Size::0x0060
struct FSolarTables_CharacterTacticalAbility : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterTacticalAbility>Data;                                                // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterTacticalAbility
// Struct Size::0x0028
struct FSolarTablesData_CharacterTacticalAbility : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       DataAssetsPath;                                               // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CharacterType
// Struct Size::0x0060
struct FSolarTables_CharacterType : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterType>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterType
// Struct Size::0x0018
struct FSolarTablesData_CharacterType : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterUpgrade
// Struct Size::0x0060
struct FSolarTables_CharacterUpgrade : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterUpgrade>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterUpgrade
// Struct Size::0x0048
struct FSolarTablesData_CharacterUpgrade : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CharaId;                                                      // 0x0014(0x0004)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    FSolarTablesLocalText                         LevelName;                                                    // 0x001C(0x0004)
    FString                                       Icon;                                                         // 0x0020(0x0010)
    int32_t                                       TotalExp;                                                     // 0x0030(0x0004)
    int32_t                                       UnlockItem;                                                   // 0x0034(0x0004)
    FSolarTablesLocalText                         CharacterInfo;                                                // 0x0038(0x0004)
    int32_t                                       ReceiveCharacter;                                             // 0x003C(0x0004)
    FSolarTablesLocalText                         ReceiveName;                                                  // 0x0040(0x0004)
    FSolarTablesLocalText                         SendName;                                                     // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterUpgradeInfo
// Struct Size::0x0060
struct FSolarTables_CharacterUpgradeInfo : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterUpgradeInfo>Data;                                                    // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterUpgradeInfo
// Struct Size::0x0038
struct FSolarTablesData_CharacterUpgradeInfo : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CharaId;                                                      // 0x0014(0x0004)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Icon;                                                         // 0x0020(0x0010)
    int32_t                                       LocalTextId;                                                  // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterUpgradeLevel
// Struct Size::0x0060
struct FSolarTables_CharacterUpgradeLevel : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterUpgradeLevel>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterUpgradeLevel
// Struct Size::0x0030
struct FSolarTablesData_CharacterUpgradeLevel : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         LevelName;                                                    // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    int32_t                                       TotalExp;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CharacterVoiceover
// Struct Size::0x0060
struct FSolarTables_CharacterVoiceover : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CharacterVoiceover>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CharacterVoiceover
// Struct Size::0x0038
struct FSolarTablesData_CharacterVoiceover : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       QuickVoiceID;                                                 // 0x0014(0x0004)
    int32_t                                       CharacterId;                                                  // 0x0018(0x0004)
    int32_t                                       SkinId;                                                       // 0x001C(0x0004)
    FString                                       AudioEventName;                                               // 0x0020(0x0010)
    int32_t                                       LocalizationID;                                               // 0x0030(0x0004)
    int32_t                                       SubtitleDisplayText;                                          // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_charge
// Struct Size::0x0060
struct FSolarTables_charge : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_charge>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_charge
// Struct Size::0x0078
struct FSolarTablesData_charge : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Mark;                                                         // 0x0018(0x0010)
    FString                                       AppleId;                                                      // 0x0028(0x0010)
    FString                                       GoogleId;                                                     // 0x0038(0x0010)
    int32_t                                       BasicNum;                                                     // 0x0048(0x0004)
    int32_t                                       ExtraNum;                                                     // 0x004C(0x0004)
    float                                         RmbNum;                                                       // 0x0050(0x0004)
    float                                         TwdNum;                                                       // 0x0054(0x0004)
    float                                         UsNum;                                                        // 0x0058(0x0004)
    int32_t                                       Lotcoin;                                                      // 0x005C(0x0004)
    int32_t                                       ShopType;                                                     // 0x0060(0x0004)
    int32_t                                       ServerType;                                                   // 0x0064(0x0004)
    int32_t                                       CurrencyPlatformType;                                         // 0x0068(0x0004)
    int32_t                                       Level;                                                        // 0x006C(0x0004)
    int32_t                                       RechargeType;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ChargePlatform
// Struct Size::0x0060
struct FSolarTables_ChargePlatform : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ChargePlatform> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ChargePlatform
// Struct Size::0x0050
struct FSolarTablesData_ChargePlatform : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Platform;                                                     // 0x0018(0x0010)
    FSolarTablesLocalText                         PlatformLocal;                                                // 0x0028(0x0004)
    int32_t                                       CPTPC;                                                        // 0x002C(0x0004)
    int32_t                                       CPTIOS;                                                       // 0x0030(0x0004)
    int32_t                                       CPTAndriod;                                                   // 0x0034(0x0004)
    int32_t                                       CPTSteam;                                                     // 0x0038(0x0004)
    int32_t                                       CPTNS;                                                        // 0x003C(0x0004)
    int32_t                                       CPTPS;                                                        // 0x0040(0x0004)
    int32_t                                       CPTXBOX;                                                      // 0x0044(0x0004)
    int32_t                                       CPTCodashop;                                                  // 0x0048(0x0004)
    int32_t                                       CPTEpic;                                                      // 0x004C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ChargeReturn
// Struct Size::0x0060
struct FSolarTables_ChargeReturn : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ChargeReturn>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ChargeReturn
// Struct Size::0x0040
struct FSolarTablesData_ChargeReturn : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ChargeId;                                                     // 0x0014(0x0004)
    int32_t                                       ChargeNum;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               ReturnItem;                                                   // 0x0020(0x0010)
    int32_t                                       Day;                                                          // 0x0030(0x0004)
    int32_t                                       ReturnNum;                                                    // 0x0034(0x0004)
    int32_t                                       DaySum;                                                       // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CheckWindow
// Struct Size::0x0060
struct FSolarTables_CheckWindow : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CheckWindow>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CheckWindow
// Struct Size::0x0040
struct FSolarTablesData_CheckWindow : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       WindowType;                                                   // 0x0014(0x0004)
    bool                                          IfBlock;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FSolarTablesLocalText                         Content;                                                      // 0x001C(0x0004)
    FSolarTablesLocalText                         Title;                                                        // 0x0020(0x0004)
    bool                                          HasClose;                                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FSolarTablesLocalText                         CancelTip;                                                    // 0x0028(0x0004)
    FSolarTablesLocalText                         ConfirmTip;                                                   // 0x002C(0x0004)
    FSolarTablesLocalText                         CancelButton;                                                 // 0x0030(0x0004)
    FSolarTablesLocalText                         ConfirmButton;                                                // 0x0034(0x0004)
    bool                                          NeverShowCheck;                                               // 0x0038(0x0001)
    enum class ESolarTablesEnum_Duration          Duration;                                                     // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
};


// ScriptStruct  Solarland.SolarTables_Chest
// Struct Size::0x0060
struct FSolarTables_Chest : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Chest>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Chest
// Struct Size::0x00A0
struct FSolarTablesData_Chest : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       openType;                                                     // 0x008C(0x0004)
    int32_t                                       CostQuantity;                                                 // 0x0090(0x0004)
    int32_t                                       CostType;                                                     // 0x0094(0x0004)
    int32_t                                       OpenTime;                                                     // 0x0098(0x0004)
    int32_t                                       Drop;                                                         // 0x009C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ChestSpawn
// Struct Size::0x0060
struct FSolarTables_ChestSpawn : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ChestSpawn>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ChestSpawn
// Struct Size::0x0040
struct FSolarTablesData_ChestSpawn : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_ChestType         ChestType;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    TArray<int32_t>                               Chests;                                                       // 0x0018(0x0010)
    TArray<int32_t>                               Weight;                                                       // 0x0028(0x0010)
    int32_t                                       SpawnCount;                                                   // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ChestSpawnGroup
// Struct Size::0x0060
struct FSolarTables_ChestSpawnGroup : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ChestSpawnGroup>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ChestSpawnGroup
// Struct Size::0x0028
struct FSolarTablesData_ChestSpawnGroup : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               ChestGroup;                                                   // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Chunk
// Struct Size::0x0060
struct FSolarTables_Chunk : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Chunk>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Chunk
// Struct Size::0x0028
struct FSolarTablesData_Chunk : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ChunkID;                                                      // 0x0014(0x0004)
    FString                                       ChunkDir;                                                     // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_CircularCameras
// Struct Size::0x0060
struct FSolarTables_CircularCameras : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CircularCameras>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CircularCameras
// Struct Size::0x0030
struct FSolarTablesData_CircularCameras : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MiniDistance;                                                 // 0x0014(0x0004)
    float                                         BorderRatio;                                                  // 0x0018(0x0004)
    int32_t                                       FOV;                                                          // 0x001C(0x0004)
    int32_t                                       Pitch;                                                        // 0x0020(0x0004)
    int32_t                                       InitAngleWithMainDir;                                         // 0x0024(0x0004)
    float                                         BlendAlpha;                                                   // 0x0028(0x0004)
    float                                         AngularSpeed;                                                 // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ClanDemand
// Struct Size::0x0060
struct FSolarTables_ClanDemand : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanDemand>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanDemand
// Struct Size::0x0018
struct FSolarTablesData_ClanDemand : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         ListName;                                                     // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ClanDeviceType
// Struct Size::0x0060
struct FSolarTables_ClanDeviceType : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanDeviceType> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanDeviceType
// Struct Size::0x0028
struct FSolarTablesData_ClanDeviceType : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         ListName;                                                     // 0x0014(0x0004)
    TArray<FString>                               OSTypes;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ClanFlag
// Struct Size::0x0060
struct FSolarTables_ClanFlag : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanFlag>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanFlag
// Struct Size::0x0038
struct FSolarTablesData_ClanFlag : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       FlagIcon;                                                     // 0x0018(0x0010)
    FString                                       WebIcon;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ClanLevel
// Struct Size::0x0060
struct FSolarTables_ClanLevel : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanLevel>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanLevel
// Struct Size::0x0048
struct FSolarTablesData_ClanLevel : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         RankName;                                                     // 0x0014(0x0004)
    int32_t                                       RankStart;                                                    // 0x0018(0x0004)
    int32_t                                       RankEnd;                                                      // 0x001C(0x0004)
    int32_t                                       RankReduce;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       Icon;                                                         // 0x0028(0x0010)
    FString                                       Icon_s;                                                       // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ClanManage
// Struct Size::0x0060
struct FSolarTables_ClanManage : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanManage>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanManage
// Struct Size::0x0020
struct FSolarTablesData_ClanManage : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         ListName;                                                     // 0x0014(0x0004)
    bool                                          BeforeMatch;                                                  // 0x0018(0x0001)
    bool                                          DuringMatch;                                                  // 0x0019(0x0001)
    bool                                          AfterMatch;                                                   // 0x001A(0x0001)
    char                                          pa_001B[0x0005]                                               // 0x001B(0x0005)
};


// ScriptStruct  Solarland.SolarTables_ClanScore
// Struct Size::0x0060
struct FSolarTables_ClanScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanScore>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanScore
// Struct Size::0x0028
struct FSolarTablesData_ClanScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       TournamentType;                                               // 0x0014(0x0004)
    int32_t                                       BonusType;                                                    // 0x0018(0x0004)
    int32_t                                       Rank;                                                         // 0x001C(0x0004)
    int32_t                                       Score;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ClanSeason
// Struct Size::0x0060
struct FSolarTables_ClanSeason : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanSeason>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanSeason
// Struct Size::0x0048
struct FSolarTablesData_ClanSeason : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ClanSeasonName;                                               // 0x0018(0x0010)
    FString                                       StartTime;                                                    // 0x0028(0x0010)
    FString                                       EndTime;                                                      // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ClanType
// Struct Size::0x0060
struct FSolarTables_ClanType : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ClanType>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ClanType
// Struct Size::0x0018
struct FSolarTablesData_ClanType : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         ListName;                                                     // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Classes
// Struct Size::0x0060
struct FSolarTables_Classes : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Classes>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Classes
// Struct Size::0x0028
struct FSolarTablesData_Classes : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ClassName;                                                    // 0x0014(0x0004)
    int32_t                                       ClassSkillsOneName;                                           // 0x0018(0x0004)
    int32_t                                       ClassSkillsOneDescription;                                    // 0x001C(0x0004)
    int32_t                                       ClassSkillsTwoName;                                           // 0x0020(0x0004)
    int32_t                                       ClassSkillsTwoDescription;                                    // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CloseUpCameras
// Struct Size::0x0060
struct FSolarTables_CloseUpCameras : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CloseUpCameras> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CloseUpCameras
// Struct Size::0x0050
struct FSolarTablesData_CloseUpCameras : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       FOV;                                                          // 0x0014(0x0004)
    float                                         ViewDistance;                                                 // 0x0018(0x0004)
    int32_t                                       HorizontalAngle;                                              // 0x001C(0x0004)
    int32_t                                       VerticalAngle;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       TargetSocket;                                                 // 0x0028(0x0010)
    TArray<float>                                 Offset;                                                       // 0x0038(0x0010)
    int32_t                                       Roll;                                                         // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CN_City
// Struct Size::0x0060
struct FSolarTables_CN_City : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CN_City>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CN_City
// Struct Size::0x0020
struct FSolarTablesData_CN_City : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         CityName;                                                     // 0x0014(0x0004)
    int32_t                                       ProvinceID;                                                   // 0x0018(0x0004)
    bool                                          IsSingle;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Solarland.SolarTables_CN_District
// Struct Size::0x0060
struct FSolarTables_CN_District : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CN_District>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CN_District
// Struct Size::0x0020
struct FSolarTablesData_CN_District : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         DistrictName;                                                 // 0x0014(0x0004)
    int32_t                                       CityID;                                                       // 0x0018(0x0004)
    bool                                          IsSingle;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Solarland.SolarTables_CN_Province
// Struct Size::0x0060
struct FSolarTables_CN_Province : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CN_Province>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CN_Province
// Struct Size::0x0030
struct FSolarTablesData_CN_Province : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         ProvinceName;                                                 // 0x0014(0x0004)
    FString                                       ProvinceNameCode;                                             // 0x0018(0x0010)
    bool                                          IsInUse;                                                      // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Solarland.SolarTables_CoinProperty
// Struct Size::0x0060
struct FSolarTables_CoinProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CoinProperty>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CoinProperty
// Struct Size::0x0068
struct FSolarTablesData_CoinProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       CoinMeshPath;                                                 // 0x0058(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Collect
// Struct Size::0x0060
struct FSolarTables_Collect : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Collect>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Collect
// Struct Size::0x0098
struct FSolarTablesData_Collect : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       lobbyCollectId;                                               // 0x008C(0x0004)
    int32_t                                       Level;                                                        // 0x0090(0x0004)
    int32_t                                       EventId;                                                      // 0x0094(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CollectRedeemReward
// Struct Size::0x0060
struct FSolarTables_CollectRedeemReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CollectRedeemReward>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CollectRedeemReward
// Struct Size::0x0040
struct FSolarTablesData_CollectRedeemReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EventId;                                                      // 0x0014(0x0004)
    TArray<int32_t>                               Token;                                                        // 0x0018(0x0010)
    TArray<int32_t>                               Reward;                                                       // 0x0028(0x0010)
    int32_t                                       timeLimit;                                                    // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CollectRedeemTime
// Struct Size::0x0060
struct FSolarTables_CollectRedeemTime : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CollectRedeemTime>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CollectRedeemTime
// Struct Size::0x0050
struct FSolarTablesData_CollectRedeemTime : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       CDNURL;                                                       // 0x0018(0x0010)
    int32_t                                       Title;                                                        // 0x0028(0x0004)
    int32_t                                       Desc;                                                         // 0x002C(0x0004)
    int32_t                                       tokenID;                                                      // 0x0030(0x0004)
    int32_t                                       TokenWeekLimit;                                               // 0x0034(0x0004)
    FString                                       BPName;                                                       // 0x0038(0x0010)
    int32_t                                       Style;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Composing
// Struct Size::0x0060
struct FSolarTables_Composing : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Composing>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Composing
// Struct Size::0x0030
struct FSolarTablesData_Composing : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               RequiredItems;                                                // 0x0018(0x0010)
    int32_t                                       TargetItem;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ConsumableUsage
// Struct Size::0x0060
struct FSolarTables_ConsumableUsage : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ConsumableUsage>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ConsumableUsage
// Struct Size::0x0020
struct FSolarTablesData_ConsumableUsage : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         UsageDuration;                                                // 0x0014(0x0004)
    float                                         RestoreValue;                                                 // 0x0018(0x0004)
    float                                         CompensateThreshold;                                          // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CountryCode
// Struct Size::0x0060
struct FSolarTables_CountryCode : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CountryCode>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CountryCode
// Struct Size::0x0048
struct FSolarTablesData_CountryCode : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       CountryCode;                                                  // 0x0018(0x0010)
    FSolarTablesLocalText                         CountryName;                                                  // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       AreaName;                                                     // 0x0030(0x0010)
    bool                                          IsInUse;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    int32_t                                       AreaID;                                                       // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Coupon
// Struct Size::0x0060
struct FSolarTables_Coupon : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Coupon>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Coupon
// Struct Size::0x0060
struct FSolarTablesData_Coupon : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       CouponAmount;                                                 // 0x0058(0x0004)
    int32_t                                       ItemTime;                                                     // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Crate
// Struct Size::0x0060
struct FSolarTables_Crate : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Crate>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Crate
// Struct Size::0x0068
struct FSolarTablesData_Crate : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemEffect;                                                   // 0x0014(0x0004)
    FSolarTablesLocalText                         CrateName;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               CrateContain;                                                 // 0x0020(0x0010)
    TArray<int32_t>                               ItemServerLimit;                                              // 0x0030(0x0010)
    TArray<int32_t>                               PrizeDelete;                                                  // 0x0040(0x0010)
    TArray<int32_t>                               PrizeContain;                                                 // 0x0050(0x0010)
    int32_t                                       PrizeDetail;                                                  // 0x0060(0x0004)
    int32_t                                       LuckDrawGrand;                                                // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CratePool
// Struct Size::0x0060
struct FSolarTables_CratePool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CratePool>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CratePool
// Struct Size::0x0040
struct FSolarTablesData_CratePool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               PoolContain;                                                  // 0x0018(0x0010)
    TArray<int32_t>                               PoolDropLimit;                                                // 0x0028(0x0010)
    int32_t                                       PoolDropNum;                                                  // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CustomRoomPool
// Struct Size::0x0060
struct FSolarTables_CustomRoomPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CustomRoomPool> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CustomRoomPool
// Struct Size::0x0030
struct FSolarTablesData_CustomRoomPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               TotalPrize;                                                   // 0x0018(0x0010)
    int32_t                                       ServiceFeeRate;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CustomRoomPrize
// Struct Size::0x0060
struct FSolarTables_CustomRoomPrize : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CustomRoomPrize>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CustomRoomPrize
// Struct Size::0x0028
struct FSolarTablesData_CustomRoomPrize : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Rank;                                                         // 0x0014(0x0004)
    int32_t                                       MatchRule;                                                    // 0x0018(0x0004)
    float                                         PrizePercentage;                                              // 0x001C(0x0004)
    int32_t                                       PoolType;                                                     // 0x0020(0x0004)
    int32_t                                       LocID;                                                        // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_CustomServer
// Struct Size::0x0060
struct FSolarTables_CustomServer : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_CustomServer>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_CustomServer
// Struct Size::0x0048
struct FSolarTablesData_CustomServer : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ModeID;                                                       // 0x0014(0x0004)
    int32_t                                       MatchRule;                                                    // 0x0018(0x0004)
    int32_t                                       Name;                                                         // 0x001C(0x0004)
    FString                                       Icon;                                                         // 0x0020(0x0010)
    int32_t                                       PlayerNum;                                                    // 0x0030(0x0004)
    int32_t                                       MinFactionNum;                                                // 0x0034(0x0004)
    int32_t                                       MaxFactionNum;                                                // 0x0038(0x0004)
    int32_t                                       ModeDescription;                                              // 0x003C(0x0004)
    int32_t                                       FactionNum;                                                   // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_DailyReward
// Struct Size::0x0060
struct FSolarTables_DailyReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DailyReward>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DailyReward
// Struct Size::0x0030
struct FSolarTablesData_DailyReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ActivityId;                                                   // 0x0014(0x0004)
    int32_t                                       Day;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               ReturnItem;                                                   // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Dance
// Struct Size::0x0060
struct FSolarTables_Dance : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Dance>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Dance
// Struct Size::0x0088
struct FSolarTablesData_Dance : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       LoopTime;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       BlueprintPath;                                                // 0x0060(0x0010)
    int32_t                                       ShopID;                                                       // 0x0070(0x0004)
    bool                                          IfDefault;                                                    // 0x0074(0x0001)
    bool                                          IfShow;                                                       // 0x0075(0x0001)
    char                                          pa_0076[0x0002]                                               // 0x0076(0x0002)
    FString                                       BeginTime;                                                    // 0x0078(0x0010)
};


// ScriptStruct  Solarland.SolarTables_DayAndNight
// Struct Size::0x0060
struct FSolarTables_DayAndNight : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DayAndNight>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DayAndNight
// Struct Size::0x0020
struct FSolarTablesData_DayAndNight : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       TimeOfDays;                                                   // 0x0014(0x0004)
    int32_t                                       ChangingSpeed;                                                // 0x0018(0x0004)
    float                                         ChargingRate;                                                 // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_DeathBox
// Struct Size::0x0060
struct FSolarTables_DeathBox : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DeathBox>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DeathBox
// Struct Size::0x0070
struct FSolarTablesData_DeathBox : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       PreviewBPPath;                                                // 0x0058(0x0010)
    int32_t                                       InBattleID;                                                   // 0x0068(0x0004)
    bool                                          IfBotUse;                                                     // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  Solarland.SolarTables_DeathMatchScore
// Struct Size::0x0060
struct FSolarTables_DeathMatchScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DeathMatchScore>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DeathMatchScore
// Struct Size::0x0048
struct FSolarTablesData_DeathMatchScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       RankID;                                                       // 0x0014(0x0004)
    int32_t                                       EloStart;                                                     // 0x0018(0x0004)
    int32_t                                       EloEnd;                                                       // 0x001C(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0020(0x0004)
    int32_t                                       WinOrLose;                                                    // 0x0024(0x0004)
    float                                         AddScore;                                                     // 0x0028(0x0004)
    float                                         KillConfig;                                                   // 0x002C(0x0004)
    float                                         AssistConfig;                                                 // 0x0030(0x0004)
    float                                         ScoreConfig;                                                  // 0x0034(0x0004)
    float                                         MaxDeduction;                                                 // 0x0038(0x0004)
    float                                         MaxAdding;                                                    // 0x003C(0x0004)
    float                                         ActiveGuaranteed;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_DefaultPrice
// Struct Size::0x0060
struct FSolarTables_DefaultPrice : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DefaultPrice>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DefaultPrice
// Struct Size::0x0028
struct FSolarTablesData_DefaultPrice : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemType;                                                     // 0x0014(0x0004)
    int32_t                                       GradeId;                                                      // 0x0018(0x0004)
    int32_t                                       ItemPrice;                                                    // 0x001C(0x0004)
    int32_t                                       ItemReturn;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_DirectionBar
// Struct Size::0x0060
struct FSolarTables_DirectionBar : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DirectionBar>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DirectionBar
// Struct Size::0x0038
struct FSolarTablesData_DirectionBar : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Location;                                                     // 0x0018(0x0010)
    FString                                       iconname;                                                     // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_DiscountBuy
// Struct Size::0x0060
struct FSolarTables_DiscountBuy : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DiscountBuy>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DiscountBuy
// Struct Size::0x0028
struct FSolarTablesData_DiscountBuy : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               PackDetail;                                                   // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Division
// Struct Size::0x0060
struct FSolarTables_Division : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Division>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Division
// Struct Size::0x0060
struct FSolarTablesData_Division : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         DivisionShowName;                                             // 0x0014(0x0004)
    FString                                       DivisionShortName;                                            // 0x0018(0x0010)
    int32_t                                       TimeZone;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       DivisionLocs;                                                 // 0x0030(0x0010)
    TArray<FString>                               CountryList;                                                  // 0x0040(0x0010)
    FString                                       Icon;                                                         // 0x0050(0x0010)
};


// ScriptStruct  Solarland.SolarTables_DsCountry
// Struct Size::0x0060
struct FSolarTables_DsCountry : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DsCountry>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DsCountry
// Struct Size::0x0038
struct FSolarTablesData_DsCountry : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Zone;                                                         // 0x0018(0x0010)
    TArray<FString>                               Country;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_DsVariableRange
// Struct Size::0x0060
struct FSolarTables_DsVariableRange : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_DsVariableRange>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_DsVariableRange
// Struct Size::0x0040
struct FSolarTablesData_DsVariableRange : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       VariableName;                                                 // 0x0018(0x0010)
    float                                         ValueStart;                                                   // 0x0028(0x0004)
    float                                         ValueEnd;                                                     // 0x002C(0x0004)
    int32_t                                       ValueType;                                                    // 0x0030(0x0004)
    int32_t                                       Tolerance;                                                    // 0x0034(0x0004)
    int32_t                                       ProbeInterval;                                                // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EloGamesFactor
// Struct Size::0x0060
struct FSolarTables_EloGamesFactor : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EloGamesFactor> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EloGamesFactor
// Struct Size::0x0020
struct FSolarTablesData_EloGamesFactor : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       GameNum;                                                      // 0x0014(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0018(0x0004)
    float                                         EloFactor;                                                    // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Emote
// Struct Size::0x0060
struct FSolarTables_Emote : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Emote>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Emote
// Struct Size::0x00B0
struct FSolarTablesData_Emote : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       EmoteType;                                                    // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       EmoteBlueprintPath;                                           // 0x0060(0x0010)
    FString                                       EmoteResourcePath;                                            // 0x0070(0x0010)
    float                                         EmoteDuration;                                                // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FString                                       EmoteAppearSound;                                             // 0x0088(0x0010)
    FString                                       EmoteSound;                                                   // 0x0098(0x0010)
    int32_t                                       ShopID;                                                       // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EnergyProperty
// Struct Size::0x0060
struct FSolarTables_EnergyProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EnergyProperty> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EnergyProperty
// Struct Size::0x0098
struct FSolarTablesData_EnergyProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    float                                         AddedEnergyMax;                                               // 0x008C(0x0004)
    int32_t                                       EnergyModuleWorth;                                            // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EnforceISP
// Struct Size::0x0060
struct FSolarTables_EnforceISP : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EnforceISP>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EnforceISP
// Struct Size::0x0048
struct FSolarTablesData_EnforceISP : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Country;                                                      // 0x0018(0x0010)
    FString                                       isp;                                                          // 0x0028(0x0010)
    TArray<FString>                               Zone;                                                         // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ErrorCode
// Struct Size::0x0060
struct FSolarTables_ErrorCode : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ErrorCode>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ErrorCode
// Struct Size::0x0020
struct FSolarTablesData_ErrorCode : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_DisplayType       DisplayType;                                                  // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    int32_t                                       TipsTextID;                                                   // 0x0018(0x0004)
    int32_t                                       CheckWindowID;                                                // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EscapeExp
// Struct Size::0x0060
struct FSolarTables_EscapeExp : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EscapeExp>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EscapeExp
// Struct Size::0x0038
struct FSolarTablesData_EscapeExp : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_BehaviorType      BehaviorType;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    int32_t                                       CharacterGetExp;                                              // 0x0018(0x0004)
    int32_t                                       WeaponGetExp;                                                 // 0x001C(0x0004)
    int32_t                                       WeaponExp;                                                    // 0x0020(0x0004)
    int32_t                                       WeaponExp;                                                    // 0x0024(0x0004)
    int32_t                                       WeaponExp;                                                    // 0x0028(0x0004)
    FSolarTablesLocalText                         CharaGetExpText;                                              // 0x002C(0x0004)
    int32_t                                       WeaponGetExpText;                                             // 0x0030(0x0004)
    int32_t                                       ExpID;                                                        // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EShop
// Struct Size::0x0060
struct FSolarTables_EShop : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EShop>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EShop
// Struct Size::0x0040
struct FSolarTablesData_EShop : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               PoolGroupID;                                                  // 0x0018(0x0010)
    bool                                          IfMapShow;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TArray<int32_t>                               PoolRefreshTime;                                              // 0x0030(0x0010)
};


// ScriptStruct  Solarland.SolarTables_EShopDemoModel
// Struct Size::0x0060
struct FSolarTables_EShopDemoModel : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EShopDemoModel> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EShopDemoModel
// Struct Size::0x0018
struct FSolarTablesData_EShopDemoModel : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ModelID;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EShopGoodsPool
// Struct Size::0x0060
struct FSolarTables_EShopGoodsPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EShopGoodsPool> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EShopGoodsPool
// Struct Size::0x0060
struct FSolarTablesData_EShopGoodsPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               Equipments;                                                   // 0x0018(0x0010)
    TArray<int32_t>                               Prize;                                                        // 0x0028(0x0010)
    TArray<int32_t>                               Nums;                                                         // 0x0038(0x0010)
    TArray<int32_t>                               Weight;                                                       // 0x0048(0x0010)
    int32_t                                       NumbersToDisplay;                                             // 0x0058(0x0004)
    int32_t                                       ColdDown;                                                     // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EShopGoodsPoolGroup
// Struct Size::0x0060
struct FSolarTables_EShopGoodsPoolGroup : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EShopGoodsPoolGroup>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EShopGoodsPoolGroup
// Struct Size::0x0028
struct FSolarTablesData_EShopGoodsPoolGroup : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               PoolIDs;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_EShopSpawn
// Struct Size::0x0060
struct FSolarTables_EShopSpawn : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EShopSpawn>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EShopSpawn
// Struct Size::0x0038
struct FSolarTablesData_EShopSpawn : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               Eshops;                                                       // 0x0018(0x0010)
    TArray<int32_t>                               Weight;                                                       // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Event
// Struct Size::0x0060
struct FSolarTables_Event : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Event>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Event
// Struct Size::0x0038
struct FSolarTablesData_Event : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EventSetID;                                                   // 0x0014(0x0004)
    FString                                       Triger;                                                       // 0x0018(0x0010)
    TArray<int32_t>                               Excuter;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_EventBpAward
// Struct Size::0x0060
struct FSolarTables_EventBpAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EventBpAward>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EventBpAward
// Struct Size::0x0050
struct FSolarTablesData_EventBpAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EventBpID;                                                    // 0x0014(0x0004)
    int32_t                                       Level;                                                        // 0x0018(0x0004)
    int32_t                                       Exp;                                                          // 0x001C(0x0004)
    int32_t                                       UpdateValue;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<int32_t>                               FreeAward;                                                    // 0x0028(0x0010)
    TArray<int32_t>                               PayAward;                                                     // 0x0038(0x0010)
    bool                                          UnlockExtraTask;                                              // 0x0048(0x0001)
    bool                                          BuyLevel;                                                     // 0x0049(0x0001)
    bool                                          LoopReward;                                                   // 0x004A(0x0001)
    char                                          pa_004B[0x0005]                                               // 0x004B(0x0005)
};


// ScriptStruct  Solarland.SolarTables_EventBpShow
// Struct Size::0x0060
struct FSolarTables_EventBpShow : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EventBpShow>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EventBpShow
// Struct Size::0x0020
struct FSolarTablesData_EventBpShow : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EventBpID;                                                    // 0x0014(0x0004)
    int32_t                                       AwardType;                                                    // 0x0018(0x0004)
    int32_t                                       Award;                                                        // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EventBpSystem
// Struct Size::0x0060
struct FSolarTables_EventBpSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EventBpSystem>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EventBpSystem
// Struct Size::0x00C0
struct FSolarTablesData_EventBpSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    TArray<int32_t>                               Unlock;                                                       // 0x0038(0x0010)
    TArray<int32_t>                               ExpBuy;                                                       // 0x0048(0x0010)
    int32_t                                       IsOpen;                                                       // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<int32_t>                               Recharge;                                                     // 0x0060(0x0010)
    int32_t                                       MoudleId;                                                     // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    TArray<int32_t>                               Package;                                                      // 0x0078(0x0010)
    TArray<int32_t>                               SalesPrice;                                                   // 0x0088(0x0010)
    int32_t                                       BPExpBuffID;                                                  // 0x0098(0x0004)
    int32_t                                       CoinBuffID;                                                   // 0x009C(0x0004)
    FString                                       BulePrintUnlockName;                                          // 0x00A0(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x00B0(0x0004)
    FSolarTablesLocalText                         TypeName;                                                     // 0x00B4(0x0004)
    FSolarTablesLocalText                         Des;                                                          // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_EventBpTask
// Struct Size::0x0060
struct FSolarTables_EventBpTask : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EventBpTask>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EventBpTask
// Struct Size::0x0050
struct FSolarTablesData_EventBpTask : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EventBpID;                                                    // 0x0014(0x0004)
    int32_t                                       TaskType;                                                     // 0x0018(0x0004)
    int32_t                                       WeekCnt;                                                      // 0x001C(0x0004)
    TArray<int32_t>                               TaskPool;                                                     // 0x0020(0x0010)
    FString                                       UnlockTime;                                                   // 0x0030(0x0010)
    FString                                       LockTime;                                                     // 0x0040(0x0010)
};


// ScriptStruct  Solarland.SolarTables_EventBpTaskRandom
// Struct Size::0x0060
struct FSolarTables_EventBpTaskRandom : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_EventBpTaskRandom>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_EventBpTaskRandom
// Struct Size::0x0038
struct FSolarTablesData_EventBpTaskRandom : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EventBpID;                                                    // 0x0014(0x0004)
    int32_t                                       TaskType;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               TaskPool;                                                     // 0x0020(0x0010)
    bool                                          IfGroupTask;                                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Solarland.SolarTables_ExDownloadAward
// Struct Size::0x0060
struct FSolarTables_ExDownloadAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ExDownloadAward>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ExDownloadAward
// Struct Size::0x0028
struct FSolarTablesData_ExDownloadAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               Award;                                                        // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ExDownloadCharacterSkin
// Struct Size::0x0060
struct FSolarTables_ExDownloadCharacterSkin : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ExDownloadCharacterSkin>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ExDownloadCharacterSkin
// Struct Size::0x0030
struct FSolarTablesData_ExDownloadCharacterSkin : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         DownloadText;                                                 // 0x0014(0x0004)
    TArray<int32_t>                               SkinId;                                                       // 0x0018(0x0010)
    int32_t                                       Sort;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ExDownloadMap
// Struct Size::0x0060
struct FSolarTables_ExDownloadMap : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ExDownloadMap>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ExDownloadMap
// Struct Size::0x0028
struct FSolarTablesData_ExDownloadMap : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       GameModeMainID;                                               // 0x0014(0x0004)
    int32_t                                       GameModeGroupID;                                              // 0x0018(0x0004)
    int32_t                                       Sort;                                                         // 0x001C(0x0004)
    bool                                          IfShow;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Solarland.SolarTables_ExDownloadVoice
// Struct Size::0x0060
struct FSolarTables_ExDownloadVoice : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ExDownloadVoice>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ExDownloadVoice
// Struct Size::0x0020
struct FSolarTablesData_ExDownloadVoice : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       VoiceLanguage;                                                // 0x0014(0x0004)
    int32_t                                       Sort;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Executer
// Struct Size::0x0060
struct FSolarTables_Executer : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Executer>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Executer
// Struct Size::0x0028
struct FSolarTablesData_Executer : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_ExcuterType       ExcuterType;                                                  // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FString                                       Parameters;                                                   // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ExHDResource
// Struct Size::0x0060
struct FSolarTables_ExHDResource : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ExHDResource>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ExHDResource
// Struct Size::0x0030
struct FSolarTablesData_ExHDResource : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         DownloadText;                                                 // 0x0014(0x0004)
    TArray<int32_t>                               ChunkIDList;                                                  // 0x0018(0x0010)
    bool                                          IsOnlyOptional;                                               // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       Sort;                                                         // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ExtraEnergyProperty
// Struct Size::0x0060
struct FSolarTables_ExtraEnergyProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ExtraEnergyProperty>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ExtraEnergyProperty
// Struct Size::0x00D0
struct FSolarTablesData_ExtraEnergyProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       QualityColor;                                                 // 0x008C(0x0004)
    float                                         ExtraEnergyMax;                                               // 0x0090(0x0004)
    float                                         ExtraEnergyCharge;                                            // 0x0094(0x0004)
    float                                         ChargeCD;                                                     // 0x0098(0x0004)
    int32_t                                       ExtraEnergyWorth;                                             // 0x009C(0x0004)
    float                                         RechargeFrequencyFromSky;                                     // 0x00A0(0x0004)
    float                                         RechargeFrequencyFromDeathBox;                                // 0x00A4(0x0004)
    float                                         RechargeFrequencyFromPile;                                    // 0x00A8(0x0004)
    float                                         RechargeQuantityFromSky;                                      // 0x00AC(0x0004)
    float                                         RechargeQuantityFromDeathBox;                                 // 0x00B0(0x0004)
    float                                         RechargeQuantityFromPile;                                     // 0x00B4(0x0004)
    FString                                       Sketch;                                                       // 0x00B8(0x0010)
    int32_t                                       SketchLevel;                                                  // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Facility
// Struct Size::0x0060
struct FSolarTables_Facility : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Facility>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Facility
// Struct Size::0x0070
struct FSolarTablesData_Facility : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         FacilityName;                                                 // 0x0014(0x0004)
    FSolarTablesLocalText                         FacilityDes;                                                  // 0x0018(0x0004)
    FSolarTablesLocalText                         NextlvDes;                                                    // 0x001C(0x0004)
    TArray<int32_t>                               FrontbuildingID;                                              // 0x0020(0x0010)
    TArray<int32_t>                               FrontFacilityID;                                              // 0x0030(0x0010)
    int32_t                                       TargetFacilityID;                                             // 0x0040(0x0004)
    int32_t                                       FacilityTime;                                                 // 0x0044(0x0004)
    TArray<int32_t>                               FacilityMaterials;                                            // 0x0048(0x0010)
    TArray<FString>                               FacilityBP;                                                   // 0x0058(0x0010)
    float                                         Unlockfunction;                                               // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_FeatureUnlock
// Struct Size::0x0060
struct FSolarTables_FeatureUnlock : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_FeatureUnlock>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_FeatureUnlock
// Struct Size::0x0030
struct FSolarTablesData_FeatureUnlock : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Condition;                                                    // 0x0014(0x0004)
    int32_t                                       Formula;                                                      // 0x0018(0x0004)
    int32_t                                       Parameter;                                                    // 0x001C(0x0004)
    int32_t                                       Notice;                                                       // 0x0020(0x0004)
    bool                                          UnlockNotice;                                                 // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    int32_t                                       LocalText;                                                    // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_FollowProjectileCameras
// Struct Size::0x0060
struct FSolarTables_FollowProjectileCameras : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_FollowProjectileCameras>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_FollowProjectileCameras
// Struct Size::0x0038
struct FSolarTablesData_FollowProjectileCameras : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       FOV;                                                          // 0x0014(0x0004)
    float                                         Distance;                                                     // 0x0018(0x0004)
    int32_t                                       Yaw;                                                          // 0x001C(0x0004)
    int32_t                                       Pitch;                                                        // 0x0020(0x0004)
    int32_t                                       Roll;                                                         // 0x0024(0x0004)
    TArray<float>                                 Offset;                                                       // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_FriendEventPoint
// Struct Size::0x0060
struct FSolarTables_FriendEventPoint : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_FriendEventPoint>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_FriendEventPoint
// Struct Size::0x0020
struct FSolarTablesData_FriendEventPoint : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       FriendDay;                                                    // 0x0014(0x0004)
    int32_t                                       FriendPoint;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_FriendEventReward
// Struct Size::0x0060
struct FSolarTables_FriendEventReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_FriendEventReward>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_FriendEventReward
// Struct Size::0x0028
struct FSolarTablesData_FriendEventReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EventPoint;                                                   // 0x0014(0x0004)
    TArray<int32_t>                               EventReward;                                                  // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_FriendEventTime
// Struct Size::0x0060
struct FSolarTables_FriendEventTime : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_FriendEventTime>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_FriendEventTime
// Struct Size::0x0038
struct FSolarTablesData_FriendEventTime : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       EventStartTime;                                               // 0x0018(0x0010)
    FString                                       EventEndTime;                                                 // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_FrustrationGame
// Struct Size::0x0060
struct FSolarTables_FrustrationGame : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_FrustrationGame>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_FrustrationGame
// Struct Size::0x0028
struct FSolarTablesData_FrustrationGame : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MatchRule;                                                    // 0x0014(0x0004)
    int32_t                                       FrustrationType;                                              // 0x0018(0x0004)
    int32_t                                       RankStart;                                                    // 0x001C(0x0004)
    int32_t                                       RankEnd;                                                      // 0x0020(0x0004)
    int32_t                                       FrustrationValue;                                             // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_GameGroup
// Struct Size::0x0060
struct FSolarTables_GameGroup : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameGroup>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameGroup
// Struct Size::0x0018
struct FSolarTablesData_GameGroup : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    bool                                          IfOpenRank;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Solarland.SolarTables_GameMap
// Struct Size::0x0060
struct FSolarTables_GameMap : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameMap>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameMap
// Struct Size::0x00C0
struct FSolarTablesData_GameMap : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       MapName;                                                      // 0x0018(0x0010)
    FString                                       ResPath;                                                      // 0x0028(0x0010)
    int32_t                                       MapImage;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<float>                                 MapImageSize;                                                 // 0x0040(0x0010)
    TArray<float>                                 MapTopLeftCoord;                                              // 0x0050(0x0010)
    TArray<float>                                 MapRightBottomCoord;                                          // 0x0060(0x0010)
    TArray<int32_t>                               LocationIcon;                                                 // 0x0070(0x0010)
    TArray<FString>                               ItemSubLevels;                                                // 0x0080(0x0010)
    float                                         HorizonLineZ;                                                 // 0x0090(0x0004)
    float                                         TopZ;                                                         // 0x0094(0x0004)
    float                                         BottomZ;                                                      // 0x0098(0x0004)
    float                                         AverageZ;                                                     // 0x009C(0x0004)
    float                                         InitFogZ;                                                     // 0x00A0(0x0004)
    float                                         TargetFogZ;                                                   // 0x00A4(0x0004)
    float                                         MapFOV;                                                       // 0x00A8(0x0004)
    int32_t                                       Speed1;                                                       // 0x00AC(0x0004)
    int32_t                                       Speed2;                                                       // 0x00B0(0x0004)
    float                                         MapFOV1;                                                      // 0x00B4(0x0004)
    float                                         MapFOV2;                                                      // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_GameMode1
// Struct Size::0x0060
struct FSolarTables_GameMode1 : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameMode1>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameMode1
// Struct Size::0x0018
struct FSolarTablesData_GameMode1 : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_GameMode2
// Struct Size::0x0060
struct FSolarTables_GameMode2 : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameMode2>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameMode2
// Struct Size::0x0018
struct FSolarTablesData_GameMode2 : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_GameModeGroup
// Struct Size::0x0060
struct FSolarTables_GameModeGroup : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameModeGroup>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameModeGroup
// Struct Size::0x00A0
struct FSolarTablesData_GameModeGroup : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         ModeGroupName;                                                // 0x0014(0x0004)
    int32_t                                       SortId;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               ModeID;                                                       // 0x0020(0x0010)
    FString                                       GroupBg;                                                      // 0x0030(0x0010)
    FString                                       Icon_pc;                                                      // 0x0040(0x0010)
    FString                                       Icon_s;                                                       // 0x0050(0x0010)
    FString                                       Icon_mini;                                                    // 0x0060(0x0010)
    FString                                       Icon_recruit;                                                 // 0x0070(0x0010)
    int32_t                                       DefaultSelect;                                                // 0x0080(0x0004)
    bool                                          IfMultiple;                                                   // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
    FString                                       GuideVideoUrl;                                                // 0x0088(0x0010)
    bool                                          IfOpenRank;                                                   // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  Solarland.SolarTables_GameModeMain
// Struct Size::0x0060
struct FSolarTables_GameModeMain : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameModeMain>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameModeMain
// Struct Size::0x0188
struct FSolarTablesData_GameModeMain : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       groupid;                                                      // 0x0014(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0018(0x0004)
    FSolarTablesLocalText                         Desc;                                                         // 0x001C(0x0004)
    FSolarTablesLocalText                         DetailDes;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       Icon;                                                         // 0x0028(0x0010)
    FString                                       Icon_pc;                                                      // 0x0038(0x0010)
    FString                                       Icon_s;                                                       // 0x0048(0x0010)
    FString                                       Icon_recruit;                                                 // 0x0058(0x0010)
    FString                                       Icon_recruit_issue;                                           // 0x0068(0x0010)
    FString                                       Icon_mini;                                                    // 0x0078(0x0010)
    bool                                          Enabled;                                                      // 0x0088(0x0001)
    bool                                          IfRecruitShow;                                                // 0x0089(0x0001)
    char                                          pa_008A[0x0002]                                               // 0x008A(0x0002)
    int32_t                                       ModeType;                                                     // 0x008C(0x0004)
    int32_t                                       OutcomeSet;                                                   // 0x0090(0x0004)
    int32_t                                       LifeTime;                                                     // 0x0094(0x0004)
    TArray<int32_t>                               AccessClient;                                                 // 0x0098(0x0010)
    TArray<int32_t>                               AccessServer;                                                 // 0x00A8(0x0010)
    TArray<int32_t>                               AccessAccount;                                                // 0x00B8(0x0010)
    TArray<int32_t>                               AccessActivity;                                               // 0x00C8(0x0010)
    int32_t                                       UnlockLvl;                                                    // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
    TArray<int32_t>                               MatchRule;                                                    // 0x00E0(0x0010)
    int32_t                                       DefaultMatchRule;                                             // 0x00F0(0x0004)
    int32_t                                       Backpack;                                                     // 0x00F4(0x0004)
    FString                                       UIConfig;                                                     // 0x00F8(0x0010)
    FString                                       ModeConfig;                                                   // 0x0108(0x0010)
    FString                                       Parameters;                                                   // 0x0118(0x0010)
    int32_t                                       DefaultSelect;                                                // 0x0128(0x0004)
    bool                                          AIMatch;                                                      // 0x012C(0x0001)
    char                                          pa_012D[0x0003]                                               // 0x012D(0x0003)
    FString                                       SettlementBPPath;                                             // 0x0130(0x0010)
    bool                                          ReEnterBattle;                                                // 0x0140(0x0001)
    bool                                          IsAutoFillTeammate;                                           // 0x0141(0x0001)
    char                                          pa_0142[0x0006]                                               // 0x0142(0x0006)
    TArray<int32_t>                               CustomRoomNum;                                                // 0x0148(0x0010)
    bool                                          GetSupplyBox;                                                 // 0x0158(0x0001)
    char                                          pa_0159[0x0007]                                               // 0x0159(0x0007)
    TArray<int32_t>                               ChunkIDList;                                                  // 0x0160(0x0010)
    enum class ESolarTablesEnum_ClassModeType     ClassModeType;                                                // 0x0170(0x0001)
    bool                                          WarmUp;                                                       // 0x0171(0x0001)
    bool                                          EnableCustomRoomReplay;                                       // 0x0172(0x0001)
    bool                                          EnableReplayAutoDirector;                                     // 0x0173(0x0001)
    char                                          pa_0174[0x0004]                                               // 0x0174(0x0004)
    TArray<FString>                               OSTypes;                                                      // 0x0178(0x0010)
};


// ScriptStruct  Solarland.SolarTables_GameRuleGroup
// Struct Size::0x0060
struct FSolarTables_GameRuleGroup : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameRuleGroup>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameRuleGroup
// Struct Size::0x0020
struct FSolarTablesData_GameRuleGroup : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    bool                                          IfOpenRank;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Solarland.SolarTables_GameTimeLine
// Struct Size::0x0060
struct FSolarTables_GameTimeLine : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GameTimeLine>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GameTimeLine
// Struct Size::0x0050
struct FSolarTablesData_GameTimeLine : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               CheckEvent;                                                   // 0x0018(0x0010)
    int32_t                                       GameMode;                                                     // 0x0028(0x0004)
    int32_t                                       StartTime;                                                    // 0x002C(0x0004)
    int32_t                                       DaylightChange;                                               // 0x0030(0x0004)
    int32_t                                       AirDrops;                                                     // 0x0034(0x0004)
    bool                                          IfPoisonShrink;                                               // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    TArray<int32_t>                               RedZone;                                                      // 0x0040(0x0010)
};


// ScriptStruct  Solarland.SolarTables_GetPoint
// Struct Size::0x0060
struct FSolarTables_GetPoint : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GetPoint>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GetPoint
// Struct Size::0x0020
struct FSolarTablesData_GetPoint : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Point;                                                        // 0x0014(0x0004)
    int32_t                                       TaskValue;                                                    // 0x0018(0x0004)
    FSolarTablesLocalText                         TaskText;                                                     // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Gift
// Struct Size::0x0060
struct FSolarTables_Gift : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Gift>           Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Gift
// Struct Size::0x0028
struct FSolarTablesData_Gift : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FSolarTablesLocalText                         Des;                                                          // 0x0018(0x0004)
    float                                         MaxNormalHPCoef;                                              // 0x001C(0x0004)
    float                                         ArmorMaxCoef;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_GlobalOutcome
// Struct Size::0x0060
struct FSolarTables_GlobalOutcome : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GlobalOutcome>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GlobalOutcome
// Struct Size::0x0058
struct FSolarTablesData_GlobalOutcome : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               ItemIDs;                                                      // 0x0018(0x0010)
    TArray<int32_t>                               ItemNums;                                                     // 0x0028(0x0010)
    int32_t                                       SingleMaxTimes;                                               // 0x0038(0x0004)
    int32_t                                       TotalMaxTimes;                                                // 0x003C(0x0004)
    int32_t                                       TotalMinTimes;                                                // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<int32_t>                               AffectedOutcomes;                                             // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SolarTables_GlobalSensitivity
// Struct Size::0x0060
struct FSolarTables_GlobalSensitivity : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GlobalSensitivity>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GlobalSensitivity
// Struct Size::0x00A0
struct FSolarTablesData_GlobalSensitivity : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 HoldWeaponSensitivity;                                        // 0x0018(0x0010)
    TArray<float>                                 FireWeaponSensitivity;                                        // 0x0028(0x0010)
    float                                         ShoulderShootSenSItivity;                                     // 0x0038(0x0004)
    float                                         ShoulderShootFireSenSItivity;                                 // 0x003C(0x0004)
    TArray<float>                                 SkillSensitivity;                                             // 0x0040(0x0010)
    TArray<float>                                 SightSensitivity;                                             // 0x0050(0x0010)
    TArray<float>                                 VehicleDriverSensitivity;                                     // 0x0060(0x0010)
    TArray<float>                                 VehicleFireSensitivity;                                       // 0x0070(0x0010)
    TArray<float>                                 SuperSkillSensitivity;                                        // 0x0080(0x0010)
    TArray<float>                                 TacticalSkillSensitivity;                                     // 0x0090(0x0010)
};


// ScriptStruct  Solarland.SolarTables_GrowTaskLevelReward
// Struct Size::0x0060
struct FSolarTables_GrowTaskLevelReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GrowTaskLevelReward>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GrowTaskLevelReward
// Struct Size::0x0040
struct FSolarTablesData_GrowTaskLevelReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               LevelReward;                                                  // 0x0018(0x0010)
    int32_t                                       TaskID;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<int32_t>                               UnlockDisplay;                                                // 0x0030(0x0010)
};


// ScriptStruct  Solarland.SolarTables_GunProperty
// Struct Size::0x0060
struct FSolarTables_GunProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_GunProperty>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_GunProperty
// Struct Size::0x00E8
struct FSolarTablesData_GunProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       weaponid;                                                     // 0x008C(0x0004)
    bool                                          Disused;                                                      // 0x0090(0x0001)
    bool                                          IsFullMatched;                                                // 0x0091(0x0001)
    char                                          pa_0092[0x0006]                                               // 0x0092(0x0006)
    FString                                       BigIcon;                                                      // 0x0098(0x0010)
    int32_t                                       WeaponLv;                                                     // 0x00A8(0x0004)
    bool                                          UseWeaponAccessory;                                           // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    int32_t                                       WeaponAccessory1;                                             // 0x00B0(0x0004)
    int32_t                                       WeaponAccessory2;                                             // 0x00B4(0x0004)
    int32_t                                       WeaponAccessory3;                                             // 0x00B8(0x0004)
    int32_t                                       WeaponAccessory4;                                             // 0x00BC(0x0004)
    int32_t                                       WeaponAccessory5;                                             // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    TArray<int32_t>                               DefaultParts;                                                 // 0x00C8(0x0010)
    TArray<int32_t>                               PartSlots;                                                    // 0x00D8(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HalfMonthReward
// Struct Size::0x0060
struct FSolarTables_HalfMonthReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HalfMonthReward>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HalfMonthReward
// Struct Size::0x0040
struct FSolarTablesData_HalfMonthReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       HmId;                                                         // 0x0014(0x0004)
    int32_t                                       Exp;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               GoldReward;                                                   // 0x0020(0x0010)
    TArray<int32_t>                               DiamondReward;                                                // 0x0030(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HalfMonthSystem
// Struct Size::0x0060
struct FSolarTables_HalfMonthSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HalfMonthSystem>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HalfMonthSystem
// Struct Size::0x0078
struct FSolarTablesData_HalfMonthSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    int32_t                                       TaskLastTime;                                                 // 0x0038(0x0004)
    int32_t                                       ActivityLastTime;                                             // 0x003C(0x0004)
    TArray<int32_t>                               GoldPrice;                                                    // 0x0040(0x0010)
    TArray<int32_t>                               DiamondPrice;                                                 // 0x0050(0x0010)
    TArray<int32_t>                               GetGoldReward;                                                // 0x0060(0x0010)
    int32_t                                       GetDiamondReward;                                             // 0x0070(0x0004)
    int32_t                                       MaxExp;                                                       // 0x0074(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HalfMonthTask
// Struct Size::0x0060
struct FSolarTables_HalfMonthTask : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HalfMonthTask>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HalfMonthTask
// Struct Size::0x0030
struct FSolarTablesData_HalfMonthTask : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       HmId;                                                         // 0x0014(0x0004)
    int32_t                                       Day;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               TaskID;                                                       // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HelmetProperty
// Struct Size::0x0060
struct FSolarTables_HelmetProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HelmetProperty> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HelmetProperty
// Struct Size::0x00B0
struct FSolarTablesData_HelmetProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    FString                                       Sketch;                                                       // 0x0090(0x0010)
    int32_t                                       SketchLevel;                                                  // 0x00A0(0x0004)
    float                                         HeadshotDamageReductionRatio;                                 // 0x00A4(0x0004)
    int32_t                                       HelmetWorth;                                                  // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HeroPowerFormula
// Struct Size::0x0060
struct FSolarTables_HeroPowerFormula : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HeroPowerFormula>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HeroPowerFormula
// Struct Size::0x0028
struct FSolarTablesData_HeroPowerFormula : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0014(0x0004)
    int32_t                                       Battlerank;                                                   // 0x0018(0x0004)
    int32_t                                       RankScore;                                                    // 0x001C(0x0004)
    float                                         KillRealConfig;                                               // 0x0020(0x0004)
    float                                         KillAiConfig;                                                 // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HighlightDamageToEffect
// Struct Size::0x0060
struct FSolarTables_HighlightDamageToEffect : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HighlightDamageToEffect>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HighlightDamageToEffect
// Struct Size::0x0028
struct FSolarTablesData_HighlightDamageToEffect : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               EffectGroupRandomIds;                                         // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HighlightEffectGroup
// Struct Size::0x0060
struct FSolarTables_HighlightEffectGroup : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HighlightEffectGroup>Data;                                                    // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HighlightEffectGroup
// Struct Size::0x00C0
struct FSolarTablesData_HighlightEffectGroup : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TMap<FString,FString>                         CameraLens;                                                   // 0x0018(0x0050)
    TMap<FString,FString>                         SlomoEffect;                                                  // 0x0068(0x0050)
    int32_t                                       FollowProjectileID;                                           // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HighlightParams
// Struct Size::0x0060
struct FSolarTables_HighlightParams : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HighlightParams>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HighlightParams
// Struct Size::0x0078
struct FSolarTablesData_HighlightParams : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         Score_Weapon;                                                 // 0x0014(0x0004)
    float                                         Score_VehicleWeapon;                                          // 0x0018(0x0004)
    float                                         Score_VehicleHit;                                             // 0x001C(0x0004)
    float                                         Score_Vehicle;                                                // 0x0020(0x0004)
    float                                         Score_Ability;                                                // 0x0024(0x0004)
    float                                         Score_Utimate;                                                // 0x0028(0x0004)
    float                                         Score_IsDefenderOrReaper;                                     // 0x002C(0x0004)
    float                                         Score_Punch;                                                  // 0x0030(0x0004)
    float                                         Score_MinHeight;                                              // 0x0034(0x0004)
    float                                         Score_MaxHeight;                                              // 0x0038(0x0004)
    float                                         MinHeight;                                                    // 0x003C(0x0004)
    float                                         MaxHeight;                                                    // 0x0040(0x0004)
    float                                         KillCombineTimeOffset;                                        // 0x0044(0x0004)
    float                                         FirstKillPlayTimeBefore;                                      // 0x0048(0x0004)
    float                                         LastKillPlayTimeLater;                                        // 0x004C(0x0004)
    FString                                       DistScoreCurve;                                               // 0x0050(0x0010)
    FString                                       PunchIcon;                                                    // 0x0060(0x0010)
    int32_t                                       PunchLocTextID;                                               // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HighlightRating
// Struct Size::0x0060
struct FSolarTables_HighlightRating : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HighlightRating>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HighlightRating
// Struct Size::0x0030
struct FSolarTablesData_HighlightRating : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Name;                                                         // 0x0018(0x0010)
    float                                         MinScore;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HistoryRankReward
// Struct Size::0x0060
struct FSolarTables_HistoryRankReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HistoryRankReward>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HistoryRankReward
// Struct Size::0x0030
struct FSolarTablesData_HistoryRankReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       RankID;                                                       // 0x0014(0x0004)
    int32_t                                       LevelID;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               RankReward;                                                   // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HomeConstruct
// Struct Size::0x0060
struct FSolarTables_HomeConstruct : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HomeConstruct>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomeConstruct
// Struct Size::0x0070
struct FSolarTablesData_HomeConstruct : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ObjectType;                                                   // 0x0018(0x0010)
    FString                                       ObjectType;                                                   // 0x0028(0x0010)
    FString                                       ObjectTypeInList;                                             // 0x0038(0x0010)
    FString                                       ObjectTypeInList;                                             // 0x0048(0x0010)
    int32_t                                       Cost;                                                         // 0x0058(0x0004)
    bool                                          isShowInList;                                                 // 0x005C(0x0001)
    bool                                          isForceShowInList;                                            // 0x005D(0x0001)
    char                                          pa_005E[0x0002]                                               // 0x005E(0x0002)
    int32_t                                       UnlockHomeLevel;                                              // 0x0060(0x0004)
    int32_t                                       ComposingID;                                                  // 0x0064(0x0004)
    bool                                          isDrawable;                                                   // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       Order;                                                        // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HomeDevice
// Struct Size::0x0060
struct FSolarTables_HomeDevice : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HomeDevice>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomeDevice
// Struct Size::0x0070
struct FSolarTablesData_HomeDevice : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ObjectType;                                                   // 0x0018(0x0010)
    FString                                       ObjectType;                                                   // 0x0028(0x0010)
    FString                                       ObjectTypeInList;                                             // 0x0038(0x0010)
    FString                                       ObjectTypeInList;                                             // 0x0048(0x0010)
    int32_t                                       Cost;                                                         // 0x0058(0x0004)
    bool                                          isShowInList;                                                 // 0x005C(0x0001)
    bool                                          isForceShowInList;                                            // 0x005D(0x0001)
    char                                          pa_005E[0x0002]                                               // 0x005E(0x0002)
    int32_t                                       UnlockHomeLevel;                                              // 0x0060(0x0004)
    int32_t                                       ComposingID;                                                  // 0x0064(0x0004)
    bool                                          isDrawable;                                                   // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       Order;                                                        // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HomeExpCard
// Struct Size::0x0060
struct FSolarTables_HomeExpCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HomeExpCard>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomeExpCard
// Struct Size::0x0060
struct FSolarTablesData_HomeExpCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       HomeExpValue;                                                 // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HomeLevel
// Struct Size::0x0060
struct FSolarTables_HomeLevel : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HomeLevel>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomeLevel
// Struct Size::0x0058
struct FSolarTablesData_HomeLevel : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Exp;                                                          // 0x0014(0x0004)
    int32_t                                       UpdateValue;                                                  // 0x0018(0x0004)
    int32_t                                       BuildHeight;                                                  // 0x001C(0x0004)
    int32_t                                       BuildWidth;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       EnterRes;                                                     // 0x0028(0x0010)
    int32_t                                       GiftMailType;                                                 // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               GiftContent;                                                  // 0x0040(0x0010)
    int32_t                                       CostLimit;                                                    // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HomeObjects
// Struct Size::0x0060
struct FSolarTables_HomeObjects : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HomeObjects>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomeObjects
// Struct Size::0x0070
struct FSolarTablesData_HomeObjects : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ObjectType;                                                   // 0x0018(0x0010)
    FString                                       ObjectType;                                                   // 0x0028(0x0010)
    FString                                       ObjectTypeInList;                                             // 0x0038(0x0010)
    FString                                       ObjectTypeInList;                                             // 0x0048(0x0010)
    int32_t                                       Cost;                                                         // 0x0058(0x0004)
    bool                                          isShowInList;                                                 // 0x005C(0x0001)
    bool                                          isForceShowInList;                                            // 0x005D(0x0001)
    char                                          pa_005E[0x0002]                                               // 0x005E(0x0002)
    int32_t                                       UnlockHomeLevel;                                              // 0x0060(0x0004)
    int32_t                                       ComposingID;                                                  // 0x0064(0x0004)
    bool                                          isDrawable;                                                   // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       Order;                                                        // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HomeObjectTypes
// Struct Size::0x0060
struct FSolarTables_HomeObjectTypes : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_HomeObjectTypes>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomeObjectTypes
// Struct Size::0x0038
struct FSolarTablesData_HomeObjectTypes : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x0020(0x0004)
    int32_t                                       TypeLevel;                                                    // 0x0024(0x0004)
    FString                                       ParentType;                                                   // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HomePit
// Struct Size::0x0060
struct FSolarTables_HomePit : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HomePit>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomePit
// Struct Size::0x0038
struct FSolarTablesData_HomePit : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       PitType;                                                      // 0x0014(0x0004)
    TArray<int32_t>                               BudFacID;                                                     // 0x0018(0x0010)
    TArray<int32_t>                               BudFacLevel;                                                  // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HomePreset
// Struct Size::0x0060
struct FSolarTables_HomePreset : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HomePreset>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HomePreset
// Struct Size::0x0028
struct FSolarTablesData_HomePreset : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       DefaultPresetNumber;                                          // 0x0014(0x0004)
    FString                                       BuildData;                                                    // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_HotSpot
// Struct Size::0x0060
struct FSolarTables_HotSpot : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HotSpot>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HotSpot
// Struct Size::0x0030
struct FSolarTablesData_HotSpot : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       UIResource;                                                   // 0x0018(0x0010)
    float                                         JumpTime;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_HuntScore
// Struct Size::0x0060
struct FSolarTables_HuntScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_HuntScore>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_HuntScore
// Struct Size::0x0040
struct FSolarTablesData_HuntScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       RankID;                                                       // 0x0014(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0018(0x0004)
    int32_t                                       Escape;                                                       // 0x001C(0x0004)
    float                                         AddScore;                                                     // 0x0020(0x0004)
    float                                         KillConfig;                                                   // 0x0024(0x0004)
    float                                         AssistConfig;                                                 // 0x0028(0x0004)
    float                                         Cardconfig;                                                   // 0x002C(0x0004)
    float                                         MaxDeduction;                                                 // 0x0030(0x0004)
    float                                         MaxAdding;                                                    // 0x0034(0x0004)
    float                                         ActiveGuaranteed;                                             // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_InputAction
// Struct Size::0x0060
struct FSolarTables_InputAction : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_InputAction>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_InputAction
// Struct Size::0x0028
struct FSolarTablesData_InputAction : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    bool                                          bFlagBigMap;                                                  // 0x0020(0x0001)
    bool                                          bFlagBackpack;                                                // 0x0021(0x0001)
    bool                                          bFlagChat;                                                    // 0x0022(0x0001)
    bool                                          bFlagParachute;                                               // 0x0023(0x0001)
    bool                                          bFlagSpectate;                                                // 0x0024(0x0001)
    bool                                          bFlagTeamDeath;                                               // 0x0025(0x0001)
    bool                                          bFlagRelive;                                                  // 0x0026(0x0001)
    char                                          pa_0027[0x0001]                                               // 0x0027(0x0001)
};


// ScriptStruct  Solarland.SolarTables_InputGamepadDetail
// Struct Size::0x0060
struct FSolarTables_InputGamepadDetail : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_InputGamepadDetail>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_InputGamepadDetail
// Struct Size::0x00B0
struct FSolarTablesData_InputGamepadDetail : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       KeyStr1;                                                      // 0x0020(0x0010)
    FString                                       DisplayName1;                                                 // 0x0030(0x0010)
    FString                                       ImgPath1;                                                     // 0x0040(0x0010)
    FString                                       KeyStr2;                                                      // 0x0050(0x0010)
    FString                                       DisplayName2;                                                 // 0x0060(0x0010)
    FString                                       ImgPath2;                                                     // 0x0070(0x0010)
    FString                                       KeyStr3;                                                      // 0x0080(0x0010)
    FString                                       DisplayName3;                                                 // 0x0090(0x0010)
    FString                                       ImgPath3;                                                     // 0x00A0(0x0010)
};


// ScriptStruct  Solarland.SolarTables_InputGamepadMapping
// Struct Size::0x0060
struct FSolarTables_InputGamepadMapping : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_InputGamepadMapping>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_InputGamepadMapping
// Struct Size::0x00C8
struct FSolarTablesData_InputGamepadMapping : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         DisplayName;                                                  // 0x0014(0x0004)
    TArray<FString>                               RelatedActionsTap;                                            // 0x0018(0x0010)
    TArray<FString>                               RelatedActionsDoubleTap;                                      // 0x0028(0x0010)
    TArray<FString>                               RelatedActionsHold;                                           // 0x0038(0x0010)
    enum class ESolarTablesEnum_InputGamepadType  InputType;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<FString>                               DefaultKeys;                                                  // 0x0050(0x0010)
    TArray<FString>                               DefaultKeys;                                                  // 0x0060(0x0010)
    TArray<FString>                               DefaultKeys;                                                  // 0x0070(0x0010)
    TArray<FString>                               DefaultKeys;                                                  // 0x0080(0x0010)
    TArray<FString>                               DefaultKeys;                                                  // 0x0090(0x0010)
    TArray<FString>                               DefaultKeys;                                                  // 0x00A0(0x0010)
    TArray<FString>                               DefaultKeys;                                                  // 0x00B0(0x0010)
    enum class ESolarTablesEnum_GamepadCtrlType   GamepadCtrlType;                                              // 0x00C0(0x0001)
    char                                          pa_00C1[0x0007]                                               // 0x00C1(0x0007)
};


// ScriptStruct  Solarland.SolarTables_InputGamepadPreset
// Struct Size::0x0060
struct FSolarTables_InputGamepadPreset : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_InputGamepadPreset>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_InputGamepadPreset
// Struct Size::0x0018
struct FSolarTablesData_InputGamepadPreset : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Desc;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_InputMapping
// Struct Size::0x0060
struct FSolarTables_InputMapping : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_InputMapping>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_InputMapping
// Struct Size::0x0090
struct FSolarTablesData_InputMapping : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       ActionName;                                                   // 0x0020(0x0010)
    enum class ESolarTablesEnum_InputActionType   ActionType;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Scale;                                                        // 0x0034(0x0004)
    enum class ESolarTablesEnum_InputTriggerType  TriggerType;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FString                                       FirstDefaultKeys;                                             // 0x0040(0x0010)
    FString                                       SecondDefaultKeys;                                            // 0x0050(0x0010)
    FString                                       ThirdDefaultKeys;                                             // 0x0060(0x0010)
    enum class ESolarTablesEnum_InputCtrlType     CtrlType;                                                     // 0x0070(0x0001)
    enum class ESolarTablesEnum_InputContextType  ContextType;                                                  // 0x0071(0x0001)
    enum class ESolarTablesEnum_InputRelatedType  RelatedType;                                                  // 0x0072(0x0001)
    char                                          pa_0073[0x0001]                                               // 0x0073(0x0001)
    FSolarTablesLocalText                         ActionDisplayName;                                            // 0x0074(0x0004)
    FSolarTablesLocalText                         ActionTipsDesc;                                               // 0x0078(0x0004)
    enum class ESolarTablesEnum_InputTabType      TabType;                                                      // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
    int32_t                                       GroupIndex;                                                   // 0x0080(0x0004)
    FSolarTablesLocalText                         GroupTitle;                                                   // 0x0084(0x0004)
    bool                                          AffectedByActionTipsSettings;                                 // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  Solarland.SolarTables_InputSensitivity
// Struct Size::0x0060
struct FSolarTables_InputSensitivity : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_InputSensitivity>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_InputSensitivity
// Struct Size::0x0030
struct FSolarTablesData_InputSensitivity : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         FovValue;                                                     // 0x0014(0x0004)
    float                                         HipToAdsTime;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       FovChangeCurve;                                               // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Item
// Struct Size::0x0060
struct FSolarTables_Item : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Item>           Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Item
// Struct Size::0x0058
struct FSolarTablesData_Item : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
};


// ScriptStruct  Solarland.SolarTables_ItemBehavior
// Struct Size::0x0060
struct FSolarTables_ItemBehavior : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemBehavior>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemBehavior
// Struct Size::0x0090
struct FSolarTablesData_ItemBehavior : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       BehaviorExpID;                                                // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ItemCustomType
// Struct Size::0x0060
struct FSolarTables_ItemCustomType : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemCustomType> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemCustomType
// Struct Size::0x0028
struct FSolarTablesData_ItemCustomType : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               ItemIDs;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ItemInBattle
// Struct Size::0x0060
struct FSolarTables_ItemInBattle : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemInBattle>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemInBattle
// Struct Size::0x0090
struct FSolarTablesData_ItemInBattle : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ItemPrice
// Struct Size::0x0060
struct FSolarTables_ItemPrice : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemPrice>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemPrice
// Struct Size::0x0018
struct FSolarTablesData_ItemPrice : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemPrice;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ItemQuality
// Struct Size::0x0060
struct FSolarTables_ItemQuality : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemQuality>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemQuality
// Struct Size::0x0100
struct FSolarTablesData_ItemQuality : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Color;                                                        // 0x0018(0x0010)
    TArray<float>                                 HUDColor;                                                     // 0x0028(0x0010)
    TArray<float>                                 OutsideColor;                                                 // 0x0038(0x0010)
    TArray<float>                                 InsideColor;                                                  // 0x0048(0x0010)
    TArray<float>                                 HighQualityColor;                                             // 0x0058(0x0010)
    TArray<float>                                 LowQualityColor;                                              // 0x0068(0x0010)
    TArray<float>                                 MarkBackgroundColor;                                          // 0x0078(0x0010)
    int32_t                                       MarkBackgroundIndex;                                          // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    TArray<float>                                 HUDBGColor;                                                   // 0x0090(0x0010)
    TArray<float>                                 HUDDecorateColor;                                             // 0x00A0(0x0010)
    FString                                       Qualitypic;                                                   // 0x00B0(0x0010)
    FString                                       QualityColor;                                                 // 0x00C0(0x0010)
    FString                                       Qualitystr;                                                   // 0x00D0(0x0010)
    FString                                       QualityBG;                                                    // 0x00E0(0x0010)
    FString                                       QualityBG2;                                                   // 0x00F0(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ItemSound
// Struct Size::0x0060
struct FSolarTables_ItemSound : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemSound>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemSound
// Struct Size::0x0048
struct FSolarTablesData_ItemSound : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       PickupSound;                                                  // 0x0018(0x0010)
    FString                                       EquippedSound;                                                // 0x0028(0x0010)
    FString                                       PassiveSound;                                                 // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ItemType
// Struct Size::0x0060
struct FSolarTables_ItemType : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemType>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemType
// Struct Size::0x0028
struct FSolarTablesData_ItemType : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         TypeText;                                                     // 0x0014(0x0004)
    bool                                          IfSpecial;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       ShowSortId;                                                   // 0x001C(0x0004)
    bool                                          IfOwn;                                                        // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Solarland.SolarTables_ItemWeaponParts
// Struct Size::0x0060
struct FSolarTables_ItemWeaponParts : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ItemWeaponParts>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ItemWeaponParts
// Struct Size::0x00C8
struct FSolarTablesData_ItemWeaponParts : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       PartsType;                                                    // 0x008C(0x0004)
    int32_t                                       Level;                                                        // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
    FString                                       PreviewIcon;                                                  // 0x0098(0x0010)
    TArray<int32_t>                               WeaponType;                                                   // 0x00A8(0x0010)
    TArray<FSolarTablesLocalText>                 RuleTips;                                                     // 0x00B8(0x0010)
};


// ScriptStruct  Solarland.SolarTables_JetPackModuleProperty
// Struct Size::0x0060
struct FSolarTables_JetPackModuleProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_JetPackModuleProperty>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_JetPackModuleProperty
// Struct Size::0x00D0
struct FSolarTablesData_JetPackModuleProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       VerticalDashSpeedTimes;                                       // 0x008C(0x0004)
    int32_t                                       HorizontalDashSpeedTimes;                                     // 0x0090(0x0004)
    float                                         VerticalDashSpeedScale;                                       // 0x0094(0x0004)
    float                                         HorizontalDashSpeedScale;                                     // 0x0098(0x0004)
    float                                         VerticalDashCoolDownScale;                                    // 0x009C(0x0004)
    float                                         HorizontalDashCoolDownScale;                                  // 0x00A0(0x0004)
    float                                         VerticalDashEnergyScale;                                      // 0x00A4(0x0004)
    float                                         HorizontalDashEnergyScale;                                    // 0x00A8(0x0004)
    float                                         VerticalChargingScale;                                        // 0x00AC(0x0004)
    float                                         HorizontalChargingScale;                                      // 0x00B0(0x0004)
    int32_t                                       JetPackModuleWorth;                                           // 0x00B4(0x0004)
    FString                                       Sketch;                                                       // 0x00B8(0x0010)
    int32_t                                       SketchLevel;                                                  // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_JumpSystem
// Struct Size::0x0060
struct FSolarTables_JumpSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_JumpSystem>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_JumpSystem
// Struct Size::0x0020
struct FSolarTablesData_JumpSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MinLevel;                                                     // 0x0014(0x0004)
    bool                                          bMatchJump;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  Solarland.SolarTables_KDDemand
// Struct Size::0x0060
struct FSolarTables_KDDemand : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_KDDemand>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_KDDemand
// Struct Size::0x0018
struct FSolarTablesData_KDDemand : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         ListName;                                                     // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_KillNotify
// Struct Size::0x0060
struct FSolarTables_KillNotify : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_KillNotify>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_KillNotify
// Struct Size::0x00D8
struct FSolarTablesData_KillNotify : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       KillNotifyPath;                                               // 0x0058(0x0010)
    FString                                       KillNotifySpecialPath;                                        // 0x0068(0x0010)
    FString                                       KillNotifyBackGroundPath;                                     // 0x0078(0x0010)
    FString                                       KillNotifyBackground;                                         // 0x0088(0x0010)
    FString                                       TextColor;                                                    // 0x0098(0x0010)
    FString                                       IconColor;                                                    // 0x00A8(0x0010)
    FString                                       BackgroundColor;                                              // 0x00B8(0x0010)
    FString                                       Param;                                                        // 0x00C8(0x0010)
};


// ScriptStruct  Solarland.SolarTables_KillNotifyCard
// Struct Size::0x0060
struct FSolarTables_KillNotifyCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_KillNotifyCard> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_KillNotifyCard
// Struct Size::0x0060
struct FSolarTablesData_KillNotifyCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       KillNotifyId;                                                 // 0x0058(0x0004)
    int32_t                                       LimitTime;                                                    // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_LanguageSwitcher
// Struct Size::0x0060
struct FSolarTables_LanguageSwitcher : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_LanguageSwitcher>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LanguageSwitcher
// Struct Size::0x0060
struct FSolarTablesData_LanguageSwitcher : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       ButtonText;                                                   // 0x0020(0x0010)
    bool                                          IfOpened;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       LanguageIndex;                                                // 0x0034(0x0004)
    FString                                       MarqueeDirection;                                             // 0x0038(0x0010)
    FString                                       TextAbbr;                                                     // 0x0048(0x0010)
    int32_t                                       VoiceID;                                                      // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Like
// Struct Size::0x0060
struct FSolarTables_Like : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Like>           Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Like
// Struct Size::0x0038
struct FSolarTablesData_Like : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       heat_degree;                                                  // 0x0014(0x0004)
    int32_t                                       keep_max;                                                     // 0x0018(0x0004)
    int32_t                                       default_num;                                                  // 0x001C(0x0004)
    int32_t                                       keep_time;                                                    // 0x0020(0x0004)
    int32_t                                       hit_countdown;                                                // 0x0024(0x0004)
    int32_t                                       show_time;                                                    // 0x0028(0x0004)
    float                                         show_proportion;                                              // 0x002C(0x0004)
    int32_t                                       visit_hit;                                                    // 0x0030(0x0004)
    int32_t                                       interact_num;                                                 // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_LikeVariable
// Struct Size::0x0060
struct FSolarTables_LikeVariable : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_LikeVariable>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LikeVariable
// Struct Size::0x0030
struct FSolarTablesData_LikeVariable : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       Value;                                                        // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_LimEmojiData
// Struct Size::0x0060
struct FSolarTables_LimEmojiData : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LimEmojiData>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LimEmojiData
// Struct Size::0x0038
struct FSolarTablesData_LimEmojiData : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       EmojiName;                                                    // 0x0018(0x0010)
    FString                                       TexPath;                                                      // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Loading
// Struct Size::0x0060
struct FSolarTables_Loading : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Loading>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Loading
// Struct Size::0x0098
struct FSolarTablesData_Loading : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               DisplayInterface;                                             // 0x0018(0x0010)
    FSolarTablesLocalText                         LoadingTip;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       BGIcon;                                                       // 0x0030(0x0010)
    FString                                       Level;                                                        // 0x0040(0x0010)
    FString                                       BGImage;                                                      // 0x0050(0x0010)
    FString                                       LoadingTips;                                                  // 0x0060(0x0010)
    int32_t                                       LoadingTime;                                                  // 0x0070(0x0004)
    int32_t                                       LoadingTipTime;                                               // 0x0074(0x0004)
    bool                                          IsInOrder;                                                    // 0x0078(0x0001)
    char                                          pa_0079[0x0007]                                               // 0x0079(0x0007)
    FString                                       LoadingUI;                                                    // 0x0080(0x0010)
    bool                                          UseSeamlessLoading;                                           // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
};


// ScriptStruct  Solarland.SolarTables_LoadingTips
// Struct Size::0x0060
struct FSolarTables_LoadingTips : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LoadingTips>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LoadingTips
// Struct Size::0x0018
struct FSolarTablesData_LoadingTips : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         LoadingTip;                                                   // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_LobbyAutoDownload
// Struct Size::0x0060
struct FSolarTables_LobbyAutoDownload : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LobbyAutoDownload>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LobbyAutoDownload
// Struct Size::0x0020
struct FSolarTablesData_LobbyAutoDownload : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ChunkID;                                                      // 0x0014(0x0004)
    int32_t                                       ChunkName;                                                    // 0x0018(0x0004)
    bool                                          IncludeMain;                                                  // 0x001C(0x0001)
    bool                                          IncludeOptional;                                              // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  Solarland.SolarTables_LobbyMatch
// Struct Size::0x0060
struct FSolarTables_LobbyMatch : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LobbyMatch>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LobbyMatch
// Struct Size::0x0020
struct FSolarTablesData_LobbyMatch : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_LobbyMatchEnterTypeIdleCaptain;                                                 // 0x0014(0x0001)
    enum class ESolarTablesEnum_LobbyMatchEnterTypeIdleSingle;                                                  // 0x0015(0x0001)
    enum class ESolarTablesEnum_LobbyMatchEnterTypeIdleMemberNormal;                                            // 0x0016(0x0001)
    enum class ESolarTablesEnum_LobbyMatchEnterTypeIdleMemberPrepared;                                          // 0x0017(0x0001)
    enum class ESolarTablesEnum_LobbyMatchEnterTypeMatchingCaptain;                                             // 0x0018(0x0001)
    enum class ESolarTablesEnum_LobbyMatchEnterTypeMatchingMember;                                              // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
};


// ScriptStruct  Solarland.SolarTables_LobbyModule
// Struct Size::0x0060
struct FSolarTables_LobbyModule : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LobbyModule>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LobbyModule
// Struct Size::0x0048
struct FSolarTablesData_LobbyModule : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SceneId;                                                      // 0x0014(0x0004)
    bool                                          IsPlayIdleshowVoice;                                          // 0x0018(0x0001)
    bool                                          IsChangeCharacterEffect;                                      // 0x0019(0x0001)
    bool                                          isDefault;                                                    // 0x001A(0x0001)
    char                                          pa_001B[0x0005]                                               // 0x001B(0x0005)
    TArray<FString>                               StateGroupNames;                                              // 0x0020(0x0010)
    TArray<FString>                               StateNames;                                                   // 0x0030(0x0010)
    int32_t                                       ProtectTime;                                                  // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Localization
// Struct Size::0x0060
struct FSolarTables_Localization : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization
// Struct Size::0x0168
struct FSolarTablesData_Localization : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Localization_BattleUI
// Struct Size::0x0060
struct FSolarTables_Localization_BattleUI : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization_BattleUI>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization_BattleUI
// Struct Size::0x0168
struct FSolarTablesData_Localization_BattleUI : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Localization_EventSystem
// Struct Size::0x0060
struct FSolarTables_Localization_EventSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization_EventSystem>Data;                                                // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization_EventSystem
// Struct Size::0x0168
struct FSolarTablesData_Localization_EventSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Localization_General
// Struct Size::0x0060
struct FSolarTables_Localization_General : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization_General>Data;                                                    // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization_General
// Struct Size::0x0168
struct FSolarTablesData_Localization_General : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Localization_Heroes
// Struct Size::0x0060
struct FSolarTables_Localization_Heroes : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization_Heroes>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization_Heroes
// Struct Size::0x0168
struct FSolarTablesData_Localization_Heroes : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Localization_Item
// Struct Size::0x0060
struct FSolarTables_Localization_Item : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization_Item>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization_Item
// Struct Size::0x0168
struct FSolarTablesData_Localization_Item : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Localization_Tournament
// Struct Size::0x0060
struct FSolarTables_Localization_Tournament : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization_Tournament>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization_Tournament
// Struct Size::0x0168
struct FSolarTablesData_Localization_Tournament : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Localization_Uncategorized
// Struct Size::0x0060
struct FSolarTables_Localization_Uncategorized : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Localization_Uncategorized>Data;                                              // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Localization_Uncategorized
// Struct Size::0x0168
struct FSolarTablesData_Localization_Uncategorized : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       zh_TW;                                                        // 0x0058(0x0010)
    FString                                       ja;                                                           // 0x0068(0x0010)
    FString                                       ko;                                                           // 0x0078(0x0010)
    FString                                       fr;                                                           // 0x0088(0x0010)
    FString                                       de;                                                           // 0x0098(0x0010)
    FString                                       ru;                                                           // 0x00A8(0x0010)
    FString                                       ar;                                                           // 0x00B8(0x0010)
    FString                                       tr;                                                           // 0x00C8(0x0010)
    FString                                       tl;                                                           // 0x00D8(0x0010)
    FString                                       es;                                                           // 0x00E8(0x0010)
    FString                                       hi;                                                           // 0x00F8(0x0010)
    FString                                       vi;                                                           // 0x0108(0x0010)
    FString                                       th;                                                           // 0x0118(0x0010)
    FString                                       it;                                                           // 0x0128(0x0010)
    FString                                       pl;                                                           // 0x0138(0x0010)
    FString                                       po;                                                           // 0x0148(0x0010)
    FString                                       Op;                                                           // 0x0158(0x0010)
};


// ScriptStruct  Solarland.SolarTables_LockCamera
// Struct Size::0x0060
struct FSolarTables_LockCamera : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LockCamera>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LockCamera
// Struct Size::0x0058
struct FSolarTablesData_LockCamera : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       OBLockCameraBindBoneName;                                     // 0x0018(0x0010)
    TArray<float>                                 OBLockCameraBindBoneOffset;                                   // 0x0028(0x0010)
    float                                         OBInitLockDistance;                                           // 0x0038(0x0004)
    float                                         OBMinLockDistance;                                            // 0x003C(0x0004)
    float                                         OBMaxLockDistance;                                            // 0x0040(0x0004)
    float                                         OBMinLockPitch;                                               // 0x0044(0x0004)
    float                                         OBMaxLockPitch;                                               // 0x0048(0x0004)
    float                                         OBPitchAdjustTriggerFloor;                                    // 0x004C(0x0004)
    float                                         OBPitchAdjustValue;                                           // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Solarland.SolarTables_LoginReward
// Struct Size::0x0060
struct FSolarTables_LoginReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LoginReward>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LoginReward
// Struct Size::0x0020
struct FSolarTablesData_LoginReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemID;                                                       // 0x0014(0x0004)
    int32_t                                       ItemNum;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_LookAtCameras
// Struct Size::0x0060
struct FSolarTables_LookAtCameras : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LookAtCameras>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LookAtCameras
// Struct Size::0x0030
struct FSolarTablesData_LookAtCameras : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MiniDistance;                                                 // 0x0014(0x0004)
    float                                         BorderRatio;                                                  // 0x0018(0x0004)
    int32_t                                       FOV;                                                          // 0x001C(0x0004)
    int32_t                                       Pitch;                                                        // 0x0020(0x0004)
    int32_t                                       InitAngleWithMainDir;                                         // 0x0024(0x0004)
    float                                         BlendAlpha;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Lore
// Struct Size::0x0060
struct FSolarTables_Lore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Lore>           Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Lore
// Struct Size::0x0018
struct FSolarTablesData_Lore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       TextDescription;                                              // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_LuckDraw
// Struct Size::0x0060
struct FSolarTables_LuckDraw : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_LuckDraw>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_LuckDraw
// Struct Size::0x0070
struct FSolarTablesData_LuckDraw : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    int32_t                                       PropId;                                                       // 0x0038(0x0004)
    int32_t                                       PriceOne;                                                     // 0x003C(0x0004)
    int32_t                                       DiscountOne;                                                  // 0x0040(0x0004)
    int32_t                                       PriceTen;                                                     // 0x0044(0x0004)
    int32_t                                       DiscountTen;                                                  // 0x0048(0x0004)
    int32_t                                       crateID;                                                      // 0x004C(0x0004)
    int32_t                                       LuckMaxNum;                                                   // 0x0050(0x0004)
    int32_t                                       FreeNum;                                                      // 0x0054(0x0004)
    FString                                       BoxSequencePath;                                              // 0x0058(0x0010)
    int32_t                                       MoudleId;                                                     // 0x0068(0x0004)
    int32_t                                       Style;                                                        // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MailContent
// Struct Size::0x0060
struct FSolarTables_MailContent : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MailContent>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MailContent
// Struct Size::0x0050
struct FSolarTablesData_MailContent : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MailType;                                                     // 0x0014(0x0004)
    int32_t                                       MailFormat;                                                   // 0x0018(0x0004)
    FSolarTablesLocalText                         Title;                                                        // 0x001C(0x0004)
    FString                                       Content;                                                      // 0x0020(0x0010)
    FString                                       Sender;                                                       // 0x0030(0x0010)
    FSolarTablesLocalText                         ListContent;                                                  // 0x0040(0x0004)
    int32_t                                       RefId;                                                        // 0x0044(0x0004)
    int32_t                                       ExpireTime;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MapMarkIcon
// Struct Size::0x0060
struct FSolarTables_MapMarkIcon : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MapMarkIcon>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MapMarkIcon
// Struct Size::0x0038
struct FSolarTablesData_MapMarkIcon : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       AtlasPath;                                                    // 0x0018(0x0010)
    TArray<float>                                 IconSize;                                                     // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_MapPOI
// Struct Size::0x0060
struct FSolarTables_MapPOI : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MapPOI>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MapPOI
// Struct Size::0x0028
struct FSolarTablesData_MapPOI : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       mapID;                                                        // 0x0014(0x0004)
    int32_t                                       Type;                                                         // 0x0018(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x001C(0x0004)
    FSolarTablesLocalText                         Desc;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MapPOIName
// Struct Size::0x0060
struct FSolarTables_MapPOIName : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MapPOIName>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MapPOIName
// Struct Size::0x0018
struct FSolarTablesData_MapPOIName : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MatchAIStrategy
// Struct Size::0x0060
struct FSolarTables_MatchAIStrategy : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MatchAIStrategy>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MatchAIStrategy
// Struct Size::0x0038
struct FSolarTablesData_MatchAIStrategy : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       AiLevel;                                                      // 0x0014(0x0004)
    int32_t                                       MLApply;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               DifficultyLevelModifyRange;                                   // 0x0020(0x0010)
    bool                                          EnableTeamManager;                                            // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       TimelineID;                                                   // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MatchPlatform
// Struct Size::0x0060
struct FSolarTables_MatchPlatform : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MatchPlatform>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MatchPlatform
// Struct Size::0x0038
struct FSolarTablesData_MatchPlatform : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       MatchMode;                                                    // 0x0018(0x0010)
    TArray<int32_t>                               MatchPlatform;                                                // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_MatchPool
// Struct Size::0x0060
struct FSolarTables_MatchPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MatchPool>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MatchPool
// Struct Size::0x0038
struct FSolarTablesData_MatchPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       MatchMode;                                                    // 0x0018(0x0010)
    TArray<int32_t>                               MatchPlatform;                                                // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_MatchRule
// Struct Size::0x0060
struct FSolarTables_MatchRule : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MatchRule>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MatchRule
// Struct Size::0x0078
struct FSolarTablesData_MatchRule : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MatchType;                                                    // 0x0014(0x0004)
    int32_t                                       GameRuleGroupID;                                              // 0x0018(0x0004)
    int32_t                                       MinPlayer;                                                    // 0x001C(0x0004)
    int32_t                                       MaxPlayer;                                                    // 0x0020(0x0004)
    int32_t                                       NumMode;                                                      // 0x0024(0x0004)
    int32_t                                       StopMatchTime;                                                // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<int32_t>                               PlayerStructure;                                              // 0x0030(0x0010)
    int32_t                                       MinGroup;                                                     // 0x0040(0x0004)
    int32_t                                       EloSettleType;                                                // 0x0044(0x0004)
    int32_t                                       RankSettleType;                                               // 0x0048(0x0004)
    int32_t                                       groupid;                                                      // 0x004C(0x0004)
    int32_t                                       RankGroupNameID;                                              // 0x0050(0x0004)
    bool                                          MatchSameBattle;                                              // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    int32_t                                       KeepMatchTimeID;                                              // 0x0058(0x0004)
    int32_t                                       OBNum;                                                        // 0x005C(0x0004)
    bool                                          MaxPlayerStopMatch;                                           // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    int32_t                                       StatisticsType;                                               // 0x0064(0x0004)
    int32_t                                       HistoryModeType;                                              // 0x0068(0x0004)
    bool                                          HeroCombatAbility;                                            // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    int32_t                                       RestartMatchTime;                                             // 0x0070(0x0004)
    bool                                          IsRecommend;                                                  // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
};


// ScriptStruct  Solarland.SolarTables_MatchStrategy
// Struct Size::0x0060
struct FSolarTables_MatchStrategy : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MatchStrategy>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MatchStrategy
// Struct Size::0x0018
struct FSolarTablesData_MatchStrategy : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MaterialProperty
// Struct Size::0x0060
struct FSolarTables_MaterialProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MaterialProperty>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MaterialProperty
// Struct Size::0x0070
struct FSolarTablesData_MaterialProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       Prize;                                                        // 0x0058(0x0004)
    bool                                          IfCollection;                                                 // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    int32_t                                       Level;                                                        // 0x0060(0x0004)
    FSolarTablesLocalText                         CoverName;                                                    // 0x0064(0x0004)
    int32_t                                       Substitution;                                                 // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Medal
// Struct Size::0x0060
struct FSolarTables_Medal : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Medal>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Medal
// Struct Size::0x0020
struct FSolarTablesData_Medal : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MedalType;                                                    // 0x0014(0x0004)
    FSolarTablesLocalText                         MedalName;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MedalCategory
// Struct Size::0x0060
struct FSolarTables_MedalCategory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MedalCategory>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MedalCategory
// Struct Size::0x0020
struct FSolarTablesData_MedalCategory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       TargetTab;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MergeRule
// Struct Size::0x0060
struct FSolarTables_MergeRule : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MergeRule>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MergeRule
// Struct Size::0x0020
struct FSolarTablesData_MergeRule : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MatchType;                                                    // 0x0014(0x0004)
    int32_t                                       MergeTime;                                                    // 0x0018(0x0004)
    int32_t                                       MergePoolNum;                                                 // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MissionCard
// Struct Size::0x0060
struct FSolarTables_MissionCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MissionCard>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MissionCard
// Struct Size::0x0018
struct FSolarTablesData_MissionCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MissionCardNo;                                                // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MLApplication
// Struct Size::0x0060
struct FSolarTables_MLApplication : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MLApplication>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MLApplication
// Struct Size::0x0058
struct FSolarTablesData_MLApplication : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Zone;                                                         // 0x0018(0x0010)
    TArray<int32_t>                               MLRatio;                                                      // 0x0028(0x0010)
    TArray<int32_t>                               MLDifficulty;                                                 // 0x0038(0x0010)
    TArray<int32_t>                               MLStyle;                                                      // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SolarTables_MonsterAICharacterSettings
// Struct Size::0x0060
struct FSolarTables_MonsterAICharacterSettings : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MonsterAICharacterSettings>Data;                                              // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MonsterAICharacterSettings
// Struct Size::0x0048
struct FSolarTablesData_MonsterAICharacterSettings : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    bool                                          IsNPC;                                                        // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         HPOverride;                                                   // 0x0018(0x0004)
    int32_t                                       OutcomeID;                                                    // 0x001C(0x0004)
    int32_t                                       DeathBoxId;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       BPResPath;                                                    // 0x0028(0x0010)
    FString                                       StrengthTableName;                                            // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_MonsterAISpawnSettings
// Struct Size::0x0060
struct FSolarTables_MonsterAISpawnSettings : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MonsterAISpawnSettings>Data;                                                  // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MonsterAISpawnSettings
// Struct Size::0x0040
struct FSolarTablesData_MonsterAISpawnSettings : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MonsterGroupSizeMin;                                          // 0x0014(0x0004)
    int32_t                                       MonsterGroupSizeMax;                                          // 0x0018(0x0004)
    int32_t                                       NumberMonsterGroupMin;                                        // 0x001C(0x0004)
    int32_t                                       NumberOfMonsterGroupMax;                                      // 0x0020(0x0004)
    float                                         MonsterSpawnCoolDown;                                         // 0x0024(0x0004)
    float                                         MonsterSpawnStartTime;                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       AICharacterProbability;                                       // 0x0030(0x0010)
};


// ScriptStruct  Solarland.SolarTables_MonthlyEventReward
// Struct Size::0x0060
struct FSolarTables_MonthlyEventReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MonthlyEventReward>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MonthlyEventReward
// Struct Size::0x0030
struct FSolarTablesData_MonthlyEventReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       RewardSkinID;                                                 // 0x0014(0x0004)
    int32_t                                       RewardPoint;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               RewardID;                                                     // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_MonthlyEventTime
// Struct Size::0x0060
struct FSolarTables_MonthlyEventTime : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MonthlyEventTime>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MonthlyEventTime
// Struct Size::0x0040
struct FSolarTablesData_MonthlyEventTime : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       EventStartTime;                                               // 0x0018(0x0010)
    FString                                       EventEndTime;                                                 // 0x0028(0x0010)
    int32_t                                       EventDuration;                                                // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_MovementSpeed
// Struct Size::0x0060
struct FSolarTables_MovementSpeed : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_MovementSpeed>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_MovementSpeed
// Struct Size::0x0028
struct FSolarTablesData_MovementSpeed : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         SprintSpeed;                                                  // 0x0014(0x0004)
    float                                         StandSpeed;                                                   // 0x0018(0x0004)
    float                                         CrouchSpeed;                                                  // 0x001C(0x0004)
    float                                         ADSStandSpeed;                                                // 0x0020(0x0004)
    float                                         ADSCrouchSpeed;                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_NameCardBackground
// Struct Size::0x0060
struct FSolarTables_NameCardBackground : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NameCardBackground>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NameCardBackground
// Struct Size::0x0048
struct FSolarTablesData_NameCardBackground : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemID;                                                       // 0x0014(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0018(0x0004)
    int32_t                                       ShopID;                                                       // 0x001C(0x0004)
    int32_t                                       Exclusive;                                                    // 0x0020(0x0004)
    int32_t                                       IsAIEquiped;                                                  // 0x0024(0x0004)
    FString                                       BackgroundPath;                                               // 0x0028(0x0010)
    FString                                       BackgroundTexturePath;                                        // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_NameCardBackgroundItem
// Struct Size::0x0060
struct FSolarTables_NameCardBackgroundItem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NameCardBackgroundItem>Data;                                                  // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NameCardBackgroundItem
// Struct Size::0x0088
struct FSolarTablesData_NameCardBackgroundItem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       NameCardBackgroundID;                                         // 0x0058(0x0004)
    int32_t                                       Exclusive;                                                    // 0x005C(0x0004)
    int32_t                                       IsAIEquiped;                                                  // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FString                                       BackgroundPath;                                               // 0x0068(0x0010)
    FString                                       BackgroundTexturePath;                                        // 0x0078(0x0010)
};


// ScriptStruct  Solarland.SolarTables_NameCardPose
// Struct Size::0x0060
struct FSolarTables_NameCardPose : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NameCardPose>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NameCardPose
// Struct Size::0x0078
struct FSolarTablesData_NameCardPose : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemID;                                                       // 0x0014(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0018(0x0004)
    int32_t                                       ShopID;                                                       // 0x001C(0x0004)
    int32_t                                       Exclusive;                                                    // 0x0020(0x0004)
    int32_t                                       IsAIEquiped;                                                  // 0x0024(0x0004)
    FString                                       PosePath;                                                     // 0x0028(0x0010)
    FString                                       PosePath_M;                                                   // 0x0038(0x0010)
    FString                                       PosePath_F;                                                   // 0x0048(0x0010)
    FString                                       PosePath_MCP;                                                 // 0x0058(0x0010)
    FString                                       PosePath_FFM;                                                 // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SolarTables_NewBpAward
// Struct Size::0x0060
struct FSolarTables_NewBpAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewBpAward>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewBpAward
// Struct Size::0x0038
struct FSolarTablesData_NewBpAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SeasonID;                                                     // 0x0014(0x0004)
    int32_t                                       SeasonLevel;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               Award;                                                        // 0x0020(0x0010)
    bool                                          LoopReward;                                                   // 0x0030(0x0001)
    bool                                          IsShow;                                                       // 0x0031(0x0001)
    bool                                          IsView;                                                       // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
    int32_t                                       Stage;                                                        // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_NewBPExtraAward
// Struct Size::0x0060
struct FSolarTables_NewBPExtraAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewBPExtraAward>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewBPExtraAward
// Struct Size::0x0038
struct FSolarTablesData_NewBPExtraAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BpID;                                                         // 0x0014(0x0004)
    int32_t                                       SeasonLevel;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               Award;                                                        // 0x0020(0x0010)
    int32_t                                       ExtraSeasonLevel;                                             // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_NewBpSystem
// Struct Size::0x0060
struct FSolarTables_NewBpSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewBpSystem>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewBpSystem
// Struct Size::0x00A0
struct FSolarTablesData_NewBpSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MoudleId;                                                     // 0x0014(0x0004)
    TArray<int32_t>                               NormalBPUnlock;                                               // 0x0018(0x0010)
    TArray<int32_t>                               ExtraBPUnlock;                                                // 0x0028(0x0010)
    int32_t                                       PackEventID;                                                  // 0x0038(0x0004)
    int32_t                                       NormalBPExpBuffID;                                            // 0x003C(0x0004)
    int32_t                                       ExtraBPExpBuffID;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<int32_t>                               Award;                                                        // 0x0048(0x0010)
    int32_t                                       ExtraSeasonLevel;                                             // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       BulePrintUnlockName;                                          // 0x0060(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x0070(0x0004)
    FSolarTablesLocalText                         TypeName;                                                     // 0x0074(0x0004)
    FSolarTablesLocalText                         Des;                                                          // 0x0078(0x0004)
    int32_t                                       Stage;                                                        // 0x007C(0x0004)
    TArray<int32_t>                               NormalBPShow;                                                 // 0x0080(0x0010)
    TArray<int32_t>                               ExtraBPShow;                                                  // 0x0090(0x0010)
};


// ScriptStruct  Solarland.SolarTables_NewLuckDraw
// Struct Size::0x0060
struct FSolarTables_NewLuckDraw : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewLuckDraw>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewLuckDraw
// Struct Size::0x0080
struct FSolarTablesData_NewLuckDraw : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Name;                                                         // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    int32_t                                       PropId;                                                       // 0x0038(0x0004)
    int32_t                                       PriceOne;                                                     // 0x003C(0x0004)
    int32_t                                       DiscountOne;                                                  // 0x0040(0x0004)
    int32_t                                       PriceTen;                                                     // 0x0044(0x0004)
    int32_t                                       DiscountTen;                                                  // 0x0048(0x0004)
    int32_t                                       crateID;                                                      // 0x004C(0x0004)
    int32_t                                       LuckMaxNum;                                                   // 0x0050(0x0004)
    int32_t                                       FreeNum;                                                      // 0x0054(0x0004)
    TArray<int32_t>                               AccumulateItem;                                               // 0x0058(0x0010)
    FString                                       BoxSequencePath;                                              // 0x0068(0x0010)
    int32_t                                       MoudleId;                                                     // 0x0078(0x0004)
    int32_t                                       Style;                                                        // 0x007C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_NewRankSeasonReward
// Struct Size::0x0060
struct FSolarTables_NewRankSeasonReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewRankSeasonReward>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewRankSeasonReward
// Struct Size::0x0030
struct FSolarTablesData_NewRankSeasonReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SeasonID;                                                     // 0x0014(0x0004)
    int32_t                                       RankID;                                                       // 0x0018(0x0004)
    int32_t                                       LevelID;                                                      // 0x001C(0x0004)
    TArray<int32_t>                               RankReward;                                                   // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_NewSeasonBpAward
// Struct Size::0x0060
struct FSolarTables_NewSeasonBpAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewSeasonBpAward>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewSeasonBpAward
// Struct Size::0x0038
struct FSolarTablesData_NewSeasonBpAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SeasonID;                                                     // 0x0014(0x0004)
    int32_t                                       SeasonLevel;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               Award;                                                        // 0x0020(0x0010)
    bool                                          LoopReward;                                                   // 0x0030(0x0001)
    bool                                          IsShow;                                                       // 0x0031(0x0001)
    bool                                          IsView;                                                       // 0x0032(0x0001)
    char                                          pa_0033[0x0001]                                               // 0x0033(0x0001)
    int32_t                                       Stage;                                                        // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_NewSeasonBpSystem
// Struct Size::0x0060
struct FSolarTables_NewSeasonBpSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewSeasonBpSystem>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewSeasonBpSystem
// Struct Size::0x0078
struct FSolarTablesData_NewSeasonBpSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MoudleId;                                                     // 0x0014(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0018(0x0004)
    FSolarTablesLocalText                         TypeName;                                                     // 0x001C(0x0004)
    FSolarTablesLocalText                         Des;                                                          // 0x0020(0x0004)
    int32_t                                       Stage;                                                        // 0x0024(0x0004)
    TArray<int32_t>                               PermanentTaskAwardDaily;                                      // 0x0028(0x0010)
    TArray<int32_t>                               PermanentTaskAwardWeek;                                       // 0x0038(0x0010)
    TArray<int32_t>                               TaskRandomRuleDaily;                                          // 0x0048(0x0010)
    TArray<int32_t>                               TaskRandomRuleWeek;                                           // 0x0058(0x0010)
    TArray<int32_t>                               TaskRefreshPrice;                                             // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SolarTables_NewSeasonBpTask
// Struct Size::0x0060
struct FSolarTables_NewSeasonBpTask : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_NewSeasonBpTask>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NewSeasonBpTask
// Struct Size::0x0030
struct FSolarTablesData_NewSeasonBpTask : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       BpID;                                                         // 0x0014(0x0004)
    int32_t                                       TaskType;                                                     // 0x0018(0x0004)
    int32_t                                       Difficulty;                                                   // 0x001C(0x0004)
    int32_t                                       TaskID;                                                       // 0x0020(0x0004)
    int32_t                                       GroupTaskId;                                                  // 0x0024(0x0004)
    bool                                          IfRefresh;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  Solarland.SolarTables_Notification
// Struct Size::0x0060
struct FSolarTables_Notification : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Notification>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Notification
// Struct Size::0x0028
struct FSolarTablesData_Notification : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         NoticeText;                                                   // 0x0014(0x0004)
    int32_t                                       NoticeType;                                                   // 0x0018(0x0004)
    float                                         NoticeTime;                                                   // 0x001C(0x0004)
    int32_t                                       NoticeFunction;                                               // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_NotificationImage
// Struct Size::0x0060
struct FSolarTables_NotificationImage : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_NotificationImage>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_NotificationImage
// Struct Size::0x0030
struct FSolarTablesData_NotificationImage : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       ImageIcon;                                                    // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ObGift
// Struct Size::0x0060
struct FSolarTables_ObGift : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ObGift>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ObGift
// Struct Size::0x0070
struct FSolarTablesData_ObGift : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       gift_type;                                                    // 0x0014(0x0004)
    FString                                       item_name;                                                    // 0x0018(0x0010)
    FString                                       item_back_res;                                                // 0x0028(0x0010)
    FString                                       item_text_res;                                                // 0x0038(0x0010)
    int32_t                                       gift_hot_num;                                                 // 0x0048(0x0004)
    int32_t                                       currency_type;                                                // 0x004C(0x0004)
    int32_t                                       item_price;                                                   // 0x0050(0x0004)
    float                                         item_back;                                                    // 0x0054(0x0004)
    int32_t                                       item_show_time;                                               // 0x0058(0x0004)
    int32_t                                       item_id;                                                      // 0x005C(0x0004)
    int32_t                                       small_time;                                                   // 0x0060(0x0004)
    int32_t                                       interact_num;                                                 // 0x0064(0x0004)
    int32_t                                       CD;                                                           // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_oldchargeshop
// Struct Size::0x0060
struct FSolarTables_oldchargeshop : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_oldchargeshop>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_oldchargeshop
// Struct Size::0x0030
struct FSolarTablesData_oldchargeshop : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       NewId;                                                        // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Outcome
// Struct Size::0x0060
struct FSolarTables_Outcome : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Outcome>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Outcome
// Struct Size::0x0070
struct FSolarTablesData_Outcome : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       OutcomeType;                                                  // 0x0014(0x0004)
    int32_t                                       MaxTimes;                                                     // 0x0018(0x0004)
    int32_t                                       MinTimes;                                                     // 0x001C(0x0004)
    TArray<int32_t>                               Contents;                                                     // 0x0020(0x0010)
    TArray<int32_t>                               LimitId;                                                      // 0x0030(0x0010)
    TArray<int32_t>                               LimitIdMax;                                                   // 0x0040(0x0010)
    TArray<int32_t>                               LimitIdMin;                                                   // 0x0050(0x0010)
    FString                                       Refresh;                                                      // 0x0060(0x0010)
};


// ScriptStruct  Solarland.SolarTables_OutcomeContent
// Struct Size::0x0060
struct FSolarTables_OutcomeContent : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_OutcomeContent> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_OutcomeContent
// Struct Size::0x0040
struct FSolarTablesData_OutcomeContent : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemID;                                                       // 0x0014(0x0004)
    int32_t                                       Weight;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               RandomNum;                                                    // 0x0020(0x0010)
    int32_t                                       MaxTimes;                                                     // 0x0030(0x0004)
    int32_t                                       MinTimes;                                                     // 0x0034(0x0004)
    int32_t                                       RelatedContentID;                                             // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_OutcomeSet
// Struct Size::0x0060
struct FSolarTables_OutcomeSet : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_OutcomeSet>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_OutcomeSet
// Struct Size::0x0038
struct FSolarTablesData_OutcomeSet : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               OutcomeRef;                                                   // 0x0018(0x0010)
    TArray<int32_t>                               GlobalOutcome;                                                // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_PackageInGameUnlock
// Struct Size::0x0060
struct FSolarTables_PackageInGameUnlock : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PackageInGameUnlock>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PackageInGameUnlock
// Struct Size::0x0028
struct FSolarTablesData_PackageInGameUnlock : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Level;                                                        // 0x0014(0x0004)
    int32_t                                       Priority;                                                     // 0x0018(0x0004)
    int32_t                                       Prize;                                                        // 0x001C(0x0004)
    int32_t                                       Currency;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_PickupPriorityItem
// Struct Size::0x0060
struct FSolarTables_PickupPriorityItem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PickupPriorityItem>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PickupPriorityItem
// Struct Size::0x0020
struct FSolarTablesData_PickupPriorityItem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       PriorityValue;                                                // 0x0014(0x0004)
    int32_t                                       MutiAutoPickup;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_PickupPriorityWeaponPart
// Struct Size::0x0060
struct FSolarTables_PickupPriorityWeaponPart : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PickupPriorityWeaponPart>Data;                                                // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PickupPriorityWeaponPart
// Struct Size::0x0018
struct FSolarTablesData_PickupPriorityWeaponPart : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       PriorityValue;                                                // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Plat
// Struct Size::0x0060
struct FSolarTables_Plat : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Plat>           Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Plat
// Struct Size::0x0050
struct FSolarTablesData_Plat : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       AppId;                                                        // 0x0014(0x0004)
    FString                                       PlatName;                                                     // 0x0018(0x0010)
    FString                                       ServerRegion;                                                 // 0x0028(0x0010)
    FString                                       Phase;                                                        // 0x0038(0x0010)
    bool                                          isNew;                                                        // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Solarland.SolarTables_PlayerOperationListLayout
// Struct Size::0x0060
struct FSolarTables_PlayerOperationListLayout : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PlayerOperationListLayout>Data;                                               // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PlayerOperationListLayout
// Struct Size::0x0048
struct FSolarTablesData_PlayerOperationListLayout : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       UIName;                                                       // 0x0018(0x0010)
    int32_t                                       Normal;                                                       // 0x0028(0x0004)
    int32_t                                       Driver;                                                       // 0x002C(0x0004)
    int32_t                                       Passgner;                                                     // 0x0030(0x0004)
    int32_t                                       EquipVehicleWeapon;                                           // 0x0034(0x0004)
    int32_t                                       Cruising;                                                     // 0x0038(0x0004)
    int32_t                                       Parachuting;                                                  // 0x003C(0x0004)
    int32_t                                       Swimming;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_PlayerPool
// Struct Size::0x0060
struct FSolarTables_PlayerPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PlayerPool>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PlayerPool
// Struct Size::0x0048
struct FSolarTablesData_PlayerPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ActivityId;                                                   // 0x0014(0x0004)
    int32_t                                       isNew;                                                        // 0x0018(0x0004)
    int32_t                                       HistoryCharge;                                                // 0x001C(0x0004)
    FString                                       AccountRegion;                                                // 0x0020(0x0010)
    TArray<int32_t>                               PackId;                                                       // 0x0030(0x0010)
    int32_t                                       ChargeId;                                                     // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_PopUp
// Struct Size::0x0060
struct FSolarTables_PopUp : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_PopUp>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PopUp
// Struct Size::0x0030
struct FSolarTablesData_PopUp : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       Value;                                                        // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_PopUpSystem
// Struct Size::0x0060
struct FSolarTables_PopUpSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PopUpSystem>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PopUpSystem
// Struct Size::0x0028
struct FSolarTablesData_PopUpSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       PopUpPriority;                                                // 0x0014(0x0004)
    int32_t                                       BlockOrNot;                                                   // 0x0018(0x0004)
    int32_t                                       PopUpRule;                                                    // 0x001C(0x0004)
    int32_t                                       HoldTime;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_PoseProperty
// Struct Size::0x0060
struct FSolarTables_PoseProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PoseProperty>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PoseProperty
// Struct Size::0x0060
struct FSolarTablesData_PoseProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       NameCardPoseID;                                               // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_PreTeamPool
// Struct Size::0x0060
struct FSolarTables_PreTeamPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PreTeamPool>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PreTeamPool
// Struct Size::0x0038
struct FSolarTablesData_PreTeamPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FString>                               MatchTeam;                                                    // 0x0018(0x0010)
    FString                                       PreTeamPool;                                                  // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_PrivilegeAsset
// Struct Size::0x0060
struct FSolarTables_PrivilegeAsset : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PrivilegeAsset> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PrivilegeAsset
// Struct Size::0x0068
struct FSolarTablesData_PrivilegeAsset : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       LobbyIcon;                                                    // 0x0018(0x0010)
    FString                                       Hero;                                                         // 0x0028(0x0010)
    FString                                       HeroSkin;                                                     // 0x0038(0x0010)
    FString                                       WeaponSkin;                                                   // 0x0048(0x0010)
    FString                                       VehicleSkin;                                                  // 0x0058(0x0010)
};


// ScriptStruct  Solarland.SolarTables_PrivilegeConditions
// Struct Size::0x0060
struct FSolarTables_PrivilegeConditions : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PrivilegeConditions>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PrivilegeConditions
// Struct Size::0x0068
struct FSolarTablesData_PrivilegeConditions : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Note;                                                         // 0x0018(0x0010)
    bool                                          Enabled;                                                      // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       IpTable;                                                      // 0x002C(0x0004)
    FString                                       StartTime;                                                    // 0x0030(0x0010)
    FString                                       EndTime;                                                      // 0x0040(0x0010)
    TArray<FString>                               Platform;                                                     // 0x0050(0x0010)
    int32_t                                       PrivilegeContent;                                             // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_PrivilegeContent
// Struct Size::0x0060
struct FSolarTables_PrivilegeContent : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PrivilegeContent>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PrivilegeContent
// Struct Size::0x0070
struct FSolarTablesData_PrivilegeContent : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Name;                                                         // 0x0014(0x0004)
    FString                                       URL;                                                          // 0x0018(0x0010)
    int32_t                                       ArtRes;                                                       // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<int32_t>                               Hero;                                                         // 0x0030(0x0010)
    TArray<int32_t>                               HeroSkin;                                                     // 0x0040(0x0010)
    TArray<int32_t>                               WeaponSkin;                                                   // 0x0050(0x0010)
    TArray<int32_t>                               VehicleSkin;                                                  // 0x0060(0x0010)
};


// ScriptStruct  Solarland.SolarTables_PrivilegeIpTable
// Struct Size::0x0060
struct FSolarTables_PrivilegeIpTable : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_PrivilegeIpTable>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_PrivilegeIpTable
// Struct Size::0x0038
struct FSolarTablesData_PrivilegeIpTable : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       groupid;                                                      // 0x0014(0x0004)
    FString                                       IPAddress;                                                    // 0x0018(0x0010)
    FString                                       Note;                                                         // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Questionnaire
// Struct Size::0x0060
struct FSolarTables_Questionnaire : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Questionnaire>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Questionnaire
// Struct Size::0x0028
struct FSolarTablesData_Questionnaire : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       QuesOrder;                                                    // 0x0014(0x0004)
    int32_t                                       QuesID;                                                       // 0x0018(0x0004)
    int32_t                                       condition1;                                                   // 0x001C(0x0004)
    int32_t                                       condition2;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_QuickChat
// Struct Size::0x0060
struct FSolarTables_QuickChat : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_QuickChat>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_QuickChat
// Struct Size::0x0158
struct FSolarTablesData_QuickChat : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       LocalizationID;                                               // 0x0014(0x0004)
    FString                                       zh_CN;                                                        // 0x0018(0x0010)
    FString                                       en;                                                           // 0x0028(0x0010)
    FString                                       pt;                                                           // 0x0038(0x0010)
    FString                                       ind;                                                          // 0x0048(0x0010)
    FString                                       fr;                                                           // 0x0058(0x0010)
    FString                                       de;                                                           // 0x0068(0x0010)
    FString                                       ru;                                                           // 0x0078(0x0010)
    FString                                       ar;                                                           // 0x0088(0x0010)
    FString                                       es;                                                           // 0x0098(0x0010)
    FString                                       hi;                                                           // 0x00A8(0x0010)
    FString                                       it;                                                           // 0x00B8(0x0010)
    FString                                       ja;                                                           // 0x00C8(0x0010)
    FString                                       ko;                                                           // 0x00D8(0x0010)
    FString                                       ms;                                                           // 0x00E8(0x0010)
    FString                                       pl;                                                           // 0x00F8(0x0010)
    FString                                       th;                                                           // 0x0108(0x0010)
    FString                                       tl;                                                           // 0x0118(0x0010)
    FString                                       tr;                                                           // 0x0128(0x0010)
    FString                                       vi;                                                           // 0x0138(0x0010)
    FString                                       zh_TW;                                                        // 0x0148(0x0010)
};


// ScriptStruct  Solarland.SolarTables_QuickVoice
// Struct Size::0x0060
struct FSolarTables_QuickVoice : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_QuickVoice>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_QuickVoice
// Struct Size::0x0088
struct FSolarTablesData_QuickVoice : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    bool                                          CharacterMustHave;                                            // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    int32_t                                       LocalizationID;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       AudioEventName;                                               // 0x0030(0x0010)
    FString                                       AudioEventNameFemale;                                         // 0x0040(0x0010)
    int32_t                                       IsMarkIcon;                                                   // 0x0050(0x0004)
    int32_t                                       PassiveTriggeredCD;                                           // 0x0054(0x0004)
    int32_t                                       PassiveTriggeredProb;                                         // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       ReplyMessageID;                                               // 0x0060(0x0010)
    FString                                       MarkTextureResName;                                           // 0x0070(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RaffleCenter
// Struct Size::0x0060
struct FSolarTables_RaffleCenter : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RaffleCenter>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RaffleCenter
// Struct Size::0x0040
struct FSolarTablesData_RaffleCenter : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       SortId;                                                       // 0x0018(0x0004)
    int32_t                                       DrawType;                                                     // 0x001C(0x0004)
    int32_t                                       BoxID;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FString                                       Banner;                                                       // 0x0028(0x0010)
    int32_t                                       MoudleId;                                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RaffleProbabilityShow
// Struct Size::0x0060
struct FSolarTables_RaffleProbabilityShow : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RaffleProbabilityShow>Data;                                                   // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RaffleProbabilityShow
// Struct Size::0x0038
struct FSolarTablesData_RaffleProbabilityShow : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemID;                                                       // 0x0014(0x0004)
    int32_t                                       Num;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       Probability;                                                  // 0x0020(0x0010)
    int32_t                                       RaffleItemID;                                                 // 0x0030(0x0004)
    int32_t                                       RaffleType;                                                   // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RaffleRuleText
// Struct Size::0x0060
struct FSolarTables_RaffleRuleText : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RaffleRuleText> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RaffleRuleText
// Struct Size::0x0018
struct FSolarTablesData_RaffleRuleText : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         RuleText;                                                     // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RandomPack
// Struct Size::0x0060
struct FSolarTables_RandomPack : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RandomPack>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RandomPack
// Struct Size::0x0040
struct FSolarTablesData_RandomPack : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       StartTime;                                                    // 0x0018(0x0010)
    FString                                       EndTime;                                                      // 0x0028(0x0010)
    int32_t                                       ActivateLastTime;                                             // 0x0038(0x0004)
    int32_t                                       ConsumeItem;                                                  // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RandomReward
// Struct Size::0x0060
struct FSolarTables_RandomReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RandomReward>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RandomReward
// Struct Size::0x00B8
struct FSolarTablesData_RandomReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       RandomType;                                                   // 0x008C(0x0004)
    int32_t                                       SelfAdjustType;                                               // 0x0090(0x0004)
    int32_t                                       MaxTimes;                                                     // 0x0094(0x0004)
    int32_t                                       MinTimes;                                                     // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    TArray<int32_t>                               RewardContent;                                                // 0x00A0(0x0010)
    bool                                          ReturnPool;                                                   // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  Solarland.SolarTables_RankDynamicElo
// Struct Size::0x0060
struct FSolarTables_RankDynamicElo : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankDynamicElo> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankDynamicElo
// Struct Size::0x0030
struct FSolarTablesData_RankDynamicElo : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EloDifference;                                                // 0x0014(0x0004)
    TArray<int32_t>                               MatchRuleID;                                                  // 0x0018(0x0010)
    int32_t                                       MaxScore;                                                     // 0x0028(0x0004)
    int32_t                                       EffectiveTimes;                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RankGroupName
// Struct Size::0x0060
struct FSolarTables_RankGroupName : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankGroupName>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankGroupName
// Struct Size::0x0018
struct FSolarTablesData_RankGroupName : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         GroupName;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RankIcon
// Struct Size::0x0060
struct FSolarTables_RankIcon : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankIcon>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankIcon
// Struct Size::0x0028
struct FSolarTablesData_RankIcon : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_RankLevel
// Struct Size::0x0060
struct FSolarTables_RankLevel : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankLevel>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankLevel
// Struct Size::0x0090
struct FSolarTablesData_RankLevel : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       RankID;                                                       // 0x0014(0x0004)
    FSolarTablesLocalText                         RankName;                                                     // 0x0018(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x001C(0x0004)
    int32_t                                       LevelID;                                                      // 0x0020(0x0004)
    int32_t                                       RankStart;                                                    // 0x0024(0x0004)
    int32_t                                       RankEnd;                                                      // 0x0028(0x0004)
    int32_t                                       RankProtect;                                                  // 0x002C(0x0004)
    int32_t                                       FrustrationValue;                                             // 0x0030(0x0004)
    int32_t                                       RankReduce;                                                   // 0x0034(0x0004)
    FString                                       Icon;                                                         // 0x0038(0x0010)
    FString                                       Icon_s;                                                       // 0x0048(0x0010)
    FString                                       IconWord;                                                     // 0x0058(0x0010)
    FString                                       IconWord_s;                                                   // 0x0068(0x0010)
    int32_t                                       Act_Pub_Elo;                                                  // 0x0078(0x0004)
    int32_t                                       Act_Pub_Rank;                                                 // 0x007C(0x0004)
    int32_t                                       Plugin_Pub_Rank;                                              // 0x0080(0x0004)
    int32_t                                       Plugin_Pub_Elo;                                               // 0x0084(0x0004)
    int32_t                                       RandomLowerLimit;                                             // 0x0088(0x0004)
    int32_t                                       RandomUpLimit;                                                // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RankList
// Struct Size::0x0060
struct FSolarTables_RankList : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankList>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankList
// Struct Size::0x0090
struct FSolarTablesData_RankList : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       ListLvl;                                                      // 0x0018(0x0004)
    int32_t                                       ListNum;                                                      // 0x001C(0x0004)
    TArray<FSolarTablesLocalText>                 Title;                                                        // 0x0020(0x0010)
    TArray<FString>                               ListInfoFormat;                                               // 0x0030(0x0010)
    int32_t                                       ListResetNum;                                                 // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<float>                                 ListFormula;                                                  // 0x0048(0x0010)
    TArray<int32_t>                               RuleIDs;                                                      // 0x0058(0x0010)
    int32_t                                       Sort;                                                         // 0x0068(0x0004)
    int32_t                                       FeatureUnlockID;                                              // 0x006C(0x0004)
    int32_t                                       BottonCond;                                                   // 0x0070(0x0004)
    bool                                          RankArea;                                                     // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    TArray<int32_t>                               RankTabList;                                                  // 0x0078(0x0010)
    int32_t                                       MonitorNum;                                                   // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RankMatch
// Struct Size::0x0060
struct FSolarTables_RankMatch : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankMatch>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankMatch
// Struct Size::0x0078
struct FSolarTablesData_RankMatch : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MatchType;                                                    // 0x0014(0x0004)
    int32_t                                       NumOfAI;                                                      // 0x0018(0x0004)
    int32_t                                       AiLevel;                                                      // 0x001C(0x0004)
    FString                                       AILevelConfig;                                                // 0x0020(0x0010)
    int32_t                                       AITeamPresetsID;                                              // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<int32_t>                               AIDifficultLevelModifyRanges;                                 // 0x0038(0x0010)
    bool                                          EnableTeamManager;                                            // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TArray<int32_t>                               MLApplication;                                                // 0x0050(0x0010)
    int32_t                                       MLApply;                                                      // 0x0060(0x0004)
    int32_t                                       MaxWait;                                                      // 0x0064(0x0004)
    int32_t                                       StopMatchTime;                                                // 0x0068(0x0004)
    bool                                          HasAITeammate;                                                // 0x006C(0x0001)
    bool                                          AIAccompany;                                                  // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
    int32_t                                       AIAccompanyTimeline;                                          // 0x0070(0x0004)
    int32_t                                       MinPlayer;                                                    // 0x0074(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RankMatchBotTeamPresets
// Struct Size::0x0060
struct FSolarTables_RankMatchBotTeamPresets : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankMatchBotTeamPresets>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankMatchBotTeamPresets
// Struct Size::0x0028
struct FSolarTablesData_RankMatchBotTeamPresets : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               BotTeamPresets;                                               // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_RankNum
// Struct Size::0x0060
struct FSolarTables_RankNum : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankNum>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankNum
// Struct Size::0x0018
struct FSolarTablesData_RankNum : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RankScore
// Struct Size::0x0060
struct FSolarTables_RankScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankScore>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankScore
// Struct Size::0x0038
struct FSolarTablesData_RankScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       RankID;                                                       // 0x0014(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0018(0x0004)
    int32_t                                       Battlerank;                                                   // 0x001C(0x0004)
    float                                         AddScore;                                                     // 0x0020(0x0004)
    float                                         KillConfig;                                                   // 0x0024(0x0004)
    float                                         AssistConfig;                                                 // 0x0028(0x0004)
    float                                         MaxDeduction;                                                 // 0x002C(0x0004)
    float                                         MaxAdding;                                                    // 0x0030(0x0004)
    float                                         ActiveGuaranteed;                                             // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RankSeasonReward
// Struct Size::0x0060
struct FSolarTables_RankSeasonReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RankSeasonReward>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RankSeasonReward
// Struct Size::0x0058
struct FSolarTablesData_RankSeasonReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SeasonID;                                                     // 0x0014(0x0004)
    int32_t                                       LevelID;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               RankReward;                                                   // 0x0020(0x0010)
    TArray<int32_t>                               RankRewardShow;                                               // 0x0030(0x0010)
    TArray<int32_t>                               RankReward_Normal;                                            // 0x0040(0x0010)
    int32_t                                       RankRewardSession;                                            // 0x0050(0x0004)
    bool                                          IfRankRewardCore;                                             // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  Solarland.SolarTables_RatingStandard
// Struct Size::0x0060
struct FSolarTables_RatingStandard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RatingStandard> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RatingStandard
// Struct Size::0x0020
struct FSolarTablesData_RatingStandard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MinRating;                                                    // 0x0014(0x0004)
    int32_t                                       MinRating;                                                    // 0x0018(0x0004)
    int32_t                                       GradeLevel;                                                   // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RedZone
// Struct Size::0x0060
struct FSolarTables_RedZone : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RedZone>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RedZone
// Struct Size::0x0028
struct FSolarTablesData_RedZone : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         RedZoneRadius;                                                // 0x0014(0x0004)
    float                                         RedZoneDuration;                                              // 0x0018(0x0004)
    int32_t                                       BombId;                                                       // 0x001C(0x0004)
    int32_t                                       MinBomb;                                                      // 0x0020(0x0004)
    int32_t                                       MaxBomb;                                                      // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_RedZoneBomb
// Struct Size::0x0060
struct FSolarTables_RedZoneBomb : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_RedZoneBomb>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_RedZoneBomb
// Struct Size::0x0030
struct FSolarTablesData_RedZoneBomb : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         BombDamageRadis;                                              // 0x0014(0x0004)
    float                                         BombCharacterMaxDamage;                                       // 0x0018(0x0004)
    float                                         BombCharacterMinDamage;                                       // 0x001C(0x0004)
    float                                         BombVehicleMaxDamege;                                         // 0x0020(0x0004)
    float                                         BombVehicleMinDamege;                                         // 0x0024(0x0004)
    float                                         BombCharacterInVehicleSlidingScale;                           // 0x0028(0x0004)
    float                                         BombLandingTime;                                              // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ReplayInputPrompt
// Struct Size::0x0060
struct FSolarTables_ReplayInputPrompt : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ReplayInputPrompt>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ReplayInputPrompt
// Struct Size::0x0040
struct FSolarTablesData_ReplayInputPrompt : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FString>                               ActionList;                                                   // 0x0018(0x0010)
    TArray<enum class ESolarTablesEnum_ReplayShortcutShowType>ShowCase;                                         // 0x0028(0x0010)
    enum class ESolarTablesEnum_ReplayShortcutCategoryCategory;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Solarland.SolarTables_Reportoptions
// Struct Size::0x0060
struct FSolarTables_Reportoptions : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Reportoptions>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Reportoptions
// Struct Size::0x0028
struct FSolarTablesData_Reportoptions : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         options;                                                      // 0x0014(0x0004)
    int32_t                                       anticheatid;                                                  // 0x0018(0x0004)
    int32_t                                       option1;                                                      // 0x001C(0x0004)
    int32_t                                       Sort;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Rescue
// Struct Size::0x0060
struct FSolarTables_Rescue : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Rescue>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Rescue
// Struct Size::0x0068
struct FSolarTablesData_Rescue : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         RescueMaxDistance;                                            // 0x0014(0x0004)
    float                                         FallenHp;                                                     // 0x0018(0x0004)
    float                                         RescueRecoveryHp;                                             // 0x001C(0x0004)
    int32_t                                       RescueTime;                                                   // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<float>                                 FallenLossHp;                                                 // 0x0028(0x0010)
    TArray<float>                                 FallenMoveLossHp;                                             // 0x0038(0x0010)
    float                                         FallenMoveSpeed;                                              // 0x0048(0x0004)
    float                                         RescueMoveSpeed;                                              // 0x004C(0x0004)
    float                                         InvincibleTime;                                               // 0x0050(0x0004)
    float                                         MaxRescueAngle;                                               // 0x0054(0x0004)
    float                                         RemindRescueCooldownTime;                                     // 0x0058(0x0004)
    float                                         RemindRescueSoundCD;                                          // 0x005C(0x0004)
    int32_t                                       RemindRescueSoundIndex;                                       // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SanctuaryMaterial
// Struct Size::0x0060
struct FSolarTables_SanctuaryMaterial : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SanctuaryMaterial>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SanctuaryMaterial
// Struct Size::0x0048
struct FSolarTablesData_SanctuaryMaterial : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ShowOrder;                                                    // 0x0014(0x0004)
    FString                                       IconSmall;                                                    // 0x0018(0x0010)
    bool                                          isBuyable;                                                    // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FString                                       Currency;                                                     // 0x0030(0x0010)
    int32_t                                       ShopID;                                                       // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SceneChange
// Struct Size::0x0060
struct FSolarTables_SceneChange : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SceneChange>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SceneChange
// Struct Size::0x0068
struct FSolarTablesData_SceneChange : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       MobileMapPath;                                                // 0x0018(0x0010)
    FString                                       MapPath;                                                      // 0x0028(0x0010)
    bool                                          isReflected;                                                  // 0x0038(0x0001)
    bool                                          CameraChange;                                                 // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
    TArray<FString>                               StateGroupNames;                                              // 0x0040(0x0010)
    TArray<FString>                               StateNames;                                                   // 0x0050(0x0010)
    int32_t                                       ProtectTime;                                                  // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SeasonCE
// Struct Size::0x0060
struct FSolarTables_SeasonCE : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SeasonCE>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SeasonCE
// Struct Size::0x0048
struct FSolarTablesData_SeasonCE : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CEID;                                                         // 0x0014(0x0004)
    int32_t                                       CEMedalType;                                                  // 0x0018(0x0004)
    int32_t                                       CEMedalRank;                                                  // 0x001C(0x0004)
    int32_t                                       CEValue;                                                      // 0x0020(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0024(0x0004)
    FString                                       CEMedalIcon;                                                  // 0x0028(0x0010)
    FString                                       CEMedalIconS;                                                 // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_SeasonEloReset
// Struct Size::0x0060
struct FSolarTables_SeasonEloReset : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SeasonEloReset> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SeasonEloReset
// Struct Size::0x0020
struct FSolarTablesData_SeasonEloReset : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EloStart;                                                     // 0x0014(0x0004)
    int32_t                                       EloEnd;                                                       // 0x0018(0x0004)
    int32_t                                       RankReduce;                                                   // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SeasonExchangeShop
// Struct Size::0x0060
struct FSolarTables_SeasonExchangeShop : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SeasonExchangeShop>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SeasonExchangeShop
// Struct Size::0x0048
struct FSolarTablesData_SeasonExchangeShop : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SeasonID;                                                     // 0x0014(0x0004)
    TArray<int32_t>                               PayItemID;                                                    // 0x0018(0x0010)
    TArray<int32_t>                               ChargeItemID;                                                 // 0x0028(0x0010)
    int32_t                                       Limit;                                                        // 0x0038(0x0004)
    int32_t                                       timeLimit;                                                    // 0x003C(0x0004)
    int32_t                                       UnlockLimitLvl;                                               // 0x0040(0x0004)
    int32_t                                       UnlockLimitRank;                                              // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SeasonExchargeShop
// Struct Size::0x0060
struct FSolarTables_SeasonExchargeShop : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SeasonExchargeShop>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SeasonExchargeShop
// Struct Size::0x0050
struct FSolarTablesData_SeasonExchargeShop : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       SeasonID;                                                     // 0x0014(0x0004)
    TArray<int32_t>                               PayItemID;                                                    // 0x0018(0x0010)
    TArray<int32_t>                               ChargeItemID;                                                 // 0x0028(0x0010)
    int32_t                                       Limit;                                                        // 0x0038(0x0004)
    int32_t                                       timeLimit;                                                    // 0x003C(0x0004)
    TArray<int32_t>                               UnlockLimit;                                                  // 0x0040(0x0010)
};


// ScriptStruct  Solarland.SolarTables_SeasonInfo
// Struct Size::0x0060
struct FSolarTables_SeasonInfo : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SeasonInfo>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SeasonInfo
// Struct Size::0x0080
struct FSolarTablesData_SeasonInfo : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       SeasonName;                                                   // 0x0018(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       StartTime;                                                    // 0x0030(0x0010)
    FString                                       EndTime;                                                      // 0x0040(0x0010)
    FSolarTablesLocalText                         StartText;                                                    // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       AnimName;                                                     // 0x0058(0x0010)
    bool                                          IsOpenStandings;                                              // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
    TArray<int32_t>                               SkinId;                                                       // 0x0070(0x0010)
};


// ScriptStruct  Solarland.SolarTables_SeasonRankReset
// Struct Size::0x0060
struct FSolarTables_SeasonRankReset : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SeasonRankReset>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SeasonRankReset
// Struct Size::0x0020
struct FSolarTablesData_SeasonRankReset : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       RankStart;                                                    // 0x0014(0x0004)
    int32_t                                       RankEnd;                                                      // 0x0018(0x0004)
    int32_t                                       RankReduce;                                                   // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SecondMode
// Struct Size::0x0060
struct FSolarTables_SecondMode : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SecondMode>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SecondMode
// Struct Size::0x0028
struct FSolarTablesData_SecondMode : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       UpperLimit;                                                   // 0x0014(0x0004)
    float                                         RestoreProgressPerSec;                                        // 0x0018(0x0004)
    float                                         RestoreProgressPerKill;                                       // 0x001C(0x0004)
    float                                         RestoreProgressPerDmg;                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SetData
// Struct Size::0x0060
struct FSolarTables_SetData : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SetData>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SetData
// Struct Size::0x0018
struct FSolarTablesData_SetData : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SettlementPunishment
// Struct Size::0x0060
struct FSolarTables_SettlementPunishment : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SettlementPunishment>Data;                                                    // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SettlementPunishment
// Struct Size::0x0030
struct FSolarTablesData_SettlementPunishment : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         GoldPunishmentRatio;                                          // 0x0014(0x0004)
    float                                         ExpPunishmentRatio;                                           // 0x0018(0x0004)
    float                                         ProficiencyPunishmentRatio;                                   // 0x001C(0x0004)
    float                                         RankPunishmentRatio;                                          // 0x0020(0x0004)
    int32_t                                       RankPunishment;                                               // 0x0024(0x0004)
    float                                         HeroPunishmentRatio;                                          // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Shard
// Struct Size::0x0060
struct FSolarTables_Shard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Shard>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Shard
// Struct Size::0x0070
struct FSolarTablesData_Shard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       ItemID;                                                       // 0x0058(0x0004)
    int32_t                                       SyntheticNum;                                                 // 0x005C(0x0004)
    TArray<int32_t>                               Approach;                                                     // 0x0060(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Share
// Struct Size::0x0060
struct FSolarTables_Share : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Share>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Share
// Struct Size::0x0028
struct FSolarTablesData_Share : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_ShareType         ShareType;                                                    // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FString                                       ShareReason;                                                  // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ShieldProperty
// Struct Size::0x0060
struct FSolarTables_ShieldProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ShieldProperty> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ShieldProperty
// Struct Size::0x00F0
struct FSolarTablesData_ShieldProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    float                                         MaxValue;                                                     // 0x008C(0x0004)
    float                                         RecoverySpeed;                                                // 0x0090(0x0004)
    float                                         EnergyCost;                                                   // 0x0094(0x0004)
    int32_t                                       CoolDownTime;                                                 // 0x0098(0x0004)
    float                                         RecoveryDuration;                                             // 0x009C(0x0004)
    float                                         RecoveryDurationB;                                            // 0x00A0(0x0004)
    float                                         RecoveryAmount;                                               // 0x00A4(0x0004)
    float                                         EnergyConsumption;                                            // 0x00A8(0x0004)
    int32_t                                       ShieldWorth;                                                  // 0x00AC(0x0004)
    FString                                       Sketch;                                                       // 0x00B0(0x0010)
    int32_t                                       SketchLevel;                                                  // 0x00C0(0x0004)
    int32_t                                       QualityColor;                                                 // 0x00C4(0x0004)
    int32_t                                       AutoRecharge;                                                 // 0x00C8(0x0004)
    float                                         LeaveCombatTime;                                              // 0x00CC(0x0004)
    float                                         AutoRechargeInterval;                                         // 0x00D0(0x0004)
    float                                         AutoRechargeValue;                                            // 0x00D4(0x0004)
    int32_t                                       NextUpgradeCost;                                              // 0x00D8(0x0004)
    int32_t                                       NextUpgradeItemID;                                            // 0x00DC(0x0004)
    int32_t                                       UpgradeItemCost;                                              // 0x00E0(0x0004)
    float                                         UpgradeTimeCost;                                              // 0x00E4(0x0004)
    float                                         ShieldRechargeDelayTime;                                      // 0x00E8(0x0004)
    float                                         ShieldRecoveryTime;                                           // 0x00EC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ShopCategory
// Struct Size::0x0060
struct FSolarTables_ShopCategory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ShopCategory>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ShopCategory
// Struct Size::0x0030
struct FSolarTablesData_ShopCategory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       TabList;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               SubCategory;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ShopProperty
// Struct Size::0x0060
struct FSolarTables_ShopProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ShopProperty>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ShopProperty
// Struct Size::0x00C0
struct FSolarTablesData_ShopProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ShopID;                                                       // 0x0014(0x0004)
    int32_t                                       Category;                                                     // 0x0018(0x0004)
    int32_t                                       SubCategory;                                                  // 0x001C(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0020(0x0004)
    int32_t                                       ItemID;                                                       // 0x0024(0x0004)
    int32_t                                       ItemNum;                                                      // 0x0028(0x0004)
    int32_t                                       DiamondPrice;                                                 // 0x002C(0x0004)
    int32_t                                       DiamondDiscount;                                              // 0x0030(0x0004)
    int32_t                                       GoldPrice;                                                    // 0x0034(0x0004)
    int32_t                                       GoldDiscount;                                                 // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               CoinPrice;                                                    // 0x0040(0x0010)
    int32_t                                       WishDiscount;                                                 // 0x0050(0x0004)
    int32_t                                       PileNum;                                                      // 0x0054(0x0004)
    int32_t                                       Promotion;                                                    // 0x0058(0x0004)
    int32_t                                       Limit;                                                        // 0x005C(0x0004)
    int32_t                                       LimitNum;                                                     // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FString                                       BeginTime;                                                    // 0x0068(0x0010)
    FString                                       EndTime;                                                      // 0x0078(0x0010)
    int32_t                                       status;                                                       // 0x0088(0x0004)
    int32_t                                       Sort;                                                         // 0x008C(0x0004)
    bool                                          Gift;                                                         // 0x0090(0x0001)
    char                                          pa_0091[0x0007]                                               // 0x0091(0x0007)
    FString                                       RecommendIcon;                                                // 0x0098(0x0010)
    int32_t                                       HomeLvmin;                                                    // 0x00A8(0x0004)
    int32_t                                       HomeLvmax;                                                    // 0x00AC(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x00B0(0x0010)
};


// ScriptStruct  Solarland.SolarTables_ShopRecommend
// Struct Size::0x0060
struct FSolarTables_ShopRecommend : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ShopRecommend>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ShopRecommend
// Struct Size::0x0050
struct FSolarTablesData_ShopRecommend : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ShopPropertyid;                                               // 0x0014(0x0004)
    int32_t                                       Recommendid;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       BeginTime;                                                    // 0x0020(0x0010)
    FString                                       EndTime;                                                      // 0x0030(0x0010)
    FString                                       Banner;                                                       // 0x0040(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Signedcard
// Struct Size::0x0060
struct FSolarTables_Signedcard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Signedcard>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Signedcard
// Struct Size::0x0060
struct FSolarTablesData_Signedcard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       PeriodOfValidity;                                             // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Skin
// Struct Size::0x0060
struct FSolarTables_Skin : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Skin>           Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Skin
// Struct Size::0x00F8
struct FSolarTablesData_Skin : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       CharaId;                                                      // 0x0014(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0018(0x0004)
    bool                                          IfShow;                                                       // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FDateTime                                     BeginTime;                                                    // 0x0020(0x0008)
    int32_t                                       ShopPropertyid;                                               // 0x0028(0x0004)
    FSolarTablesLocalText                         SourceTag;                                                    // 0x002C(0x0004)
    int32_t                                       ItemID;                                                       // 0x0030(0x0004)
    int32_t                                       SkinGroup;                                                    // 0x0034(0x0004)
    int32_t                                       SkinType;                                                     // 0x0038(0x0004)
    int32_t                                       TaskID;                                                       // 0x003C(0x0004)
    FString                                       MVPDataAssetPath;                                             // 0x0040(0x0010)
    FString                                       MVPSequencePath;                                              // 0x0050(0x0010)
    int32_t                                       SceneId;                                                      // 0x0060(0x0004)
    bool                                          IsMVP;                                                        // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    FString                                       CharacterSkinResource;                                        // 0x0068(0x0010)
    FString                                       CharacterLobbySkinResource;                                   // 0x0078(0x0010)
    FString                                       ChunkDir;                                                     // 0x0088(0x0010)
    int32_t                                       ChunkID;                                                      // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    FString                                       CharacterLowSkinResource;                                     // 0x00A0(0x0010)
    TArray<int32_t>                               CharacterPrologue;                                            // 0x00B0(0x0010)
    FString                                       CharacterProtrait;                                            // 0x00C0(0x0010)
    int32_t                                       SkinSort;                                                     // 0x00D0(0x0004)
    int32_t                                       MVPSettlementStartFrame;                                      // 0x00D4(0x0004)
    int32_t                                       MVPSettlementEndFrame;                                        // 0x00D8(0x0004)
    int32_t                                       MVPAnchorPoint;                                               // 0x00DC(0x0004)
    FString                                       IdleShowSequencePath;                                         // 0x00E0(0x0010)
    int32_t                                       UngradeID;                                                    // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SlotUnlockProperty
// Struct Size::0x0060
struct FSolarTables_SlotUnlockProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SlotUnlockProperty>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SlotUnlockProperty
// Struct Size::0x0098
struct FSolarTablesData_SlotUnlockProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemType;                                                     // 0x0030(0x0004)
    bool                                          IfReplace;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       Pile;                                                         // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FString                                       AbilityBP;                                                    // 0x0040(0x0010)
    FString                                       ItemBP;                                                       // 0x0050(0x0010)
    FString                                       AudioEventName;                                               // 0x0060(0x0010)
    bool                                          UseOnPickup;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FSolarTablesLocalText                         DetailedInfo;                                                 // 0x0074(0x0004)
    FString                                       MarkTextureResName;                                           // 0x0078(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0088(0x0004)
    int32_t                                       UnlockNum;                                                    // 0x008C(0x0004)
    int32_t                                       BelongLevel;                                                  // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SmokeColor
// Struct Size::0x0060
struct FSolarTables_SmokeColor : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SmokeColor>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SmokeColor
// Struct Size::0x0028
struct FSolarTablesData_SmokeColor : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       SmokeColor;                                                   // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_SocialCommunity
// Struct Size::0x0060
struct FSolarTables_SocialCommunity : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SocialCommunity>Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SocialCommunity
// Struct Size::0x0068
struct FSolarTablesData_SocialCommunity : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       urlDiscord;                                                   // 0x0018(0x0010)
    FString                                       urlTT;                                                        // 0x0028(0x0010)
    FString                                       urlYoutube;                                                   // 0x0038(0x0010)
    FString                                       urlFB;                                                        // 0x0048(0x0010)
    FString                                       urlINS;                                                       // 0x0058(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Statistics
// Struct Size::0x0060
struct FSolarTables_Statistics : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Statistics>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Statistics
// Struct Size::0x0018
struct FSolarTablesData_Statistics : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Strategy
// Struct Size::0x0060
struct FSolarTables_Strategy : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Strategy>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Strategy
// Struct Size::0x0038
struct FSolarTablesData_Strategy : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Priority;                                                     // 0x0014(0x0004)
    int32_t                                       Numbers;                                                      // 0x0018(0x0004)
    int32_t                                       Continuity;                                                   // 0x001C(0x0004)
    FString                                       Address;                                                      // 0x0020(0x0010)
    FSolarTablesLocalText                         TipsText;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SubCategory
// Struct Size::0x0060
struct FSolarTables_SubCategory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SubCategory>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SubCategory
// Struct Size::0x0038
struct FSolarTablesData_SubCategory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    int32_t                                       Srot;                                                         // 0x0028(0x0004)
    int32_t                                       MoudleId;                                                     // 0x002C(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SupplyBox
// Struct Size::0x0060
struct FSolarTables_SupplyBox : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SupplyBox>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SupplyBox
// Struct Size::0x0090
struct FSolarTablesData_SupplyBox : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       LobbyModuleID;                                                // 0x0014(0x0004)
    int32_t                                       AnimSceneID;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       AnimPath;                                                     // 0x0020(0x0010)
    FString                                       AnimPathTen;                                                  // 0x0030(0x0010)
    FString                                       SupplyBoxPreviewBP;                                           // 0x0040(0x0010)
    int32_t                                       ShopID1;                                                      // 0x0050(0x0004)
    int32_t                                       ShopID10;                                                     // 0x0054(0x0004)
    TArray<int32_t>                               BoxClasses;                                                   // 0x0058(0x0010)
    int32_t                                       AllClassId;                                                   // 0x0068(0x0004)
    bool                                          BigFloor;                                                     // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
    FSolarTablesLocalText                         BigFloorText;                                                 // 0x0070(0x0004)
    int32_t                                       BigFloorNum;                                                  // 0x0074(0x0004)
    bool                                          SmallFloor;                                                   // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    FSolarTablesLocalText                         SmallFloorText;                                               // 0x007C(0x0004)
    int32_t                                       SmallFloorNum;                                                // 0x0080(0x0004)
    int32_t                                       CardId;                                                       // 0x0084(0x0004)
    int32_t                                       ExchangeId;                                                   // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SupplyBoxAchieve
// Struct Size::0x0060
struct FSolarTables_SupplyBoxAchieve : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SupplyBoxAchieve>Data;                                                        // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SupplyBoxAchieve
// Struct Size::0x0038
struct FSolarTablesData_SupplyBoxAchieve : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemID;                                                       // 0x0014(0x0004)
    bool                                          isClose;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TArray<int32_t>                               JumpID;                                                       // 0x0020(0x0010)
    FSolarTablesLocalText                         JumpText;                                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SupplyBoxCard
// Struct Size::0x0060
struct FSolarTables_SupplyBoxCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SupplyBoxCard>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SupplyBoxCard
// Struct Size::0x0068
struct FSolarTablesData_SupplyBoxCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    FString                                       SupplyBoxCardPreviewBP;                                       // 0x0058(0x0010)
};


// ScriptStruct  Solarland.SolarTables_SupplyBoxClass
// Struct Size::0x0060
struct FSolarTables_SupplyBoxClass : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SupplyBoxClass> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SupplyBoxClass
// Struct Size::0x0048
struct FSolarTablesData_SupplyBoxClass : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               TypeList;                                                     // 0x0018(0x0010)
    FSolarTablesLocalText                         Name;                                                         // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       Icon;                                                         // 0x0030(0x0010)
    int32_t                                       TabSortId;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SupplyBoxItem
// Struct Size::0x0060
struct FSolarTables_SupplyBoxItem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SupplyBoxItem>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SupplyBoxItem
// Struct Size::0x0040
struct FSolarTablesData_SupplyBoxItem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemID;                                                       // 0x0014(0x0004)
    int32_t                                       ItemNum;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               Change;                                                       // 0x0020(0x0010)
    int32_t                                       SortId;                                                       // 0x0030(0x0004)
    int32_t                                       ItemPR;                                                       // 0x0034(0x0004)
    bool                                          BigFloorItem;                                                 // 0x0038(0x0001)
    bool                                          SmallFloorItem;                                               // 0x0039(0x0001)
    char                                          pa_003A[0x0002]                                               // 0x003A(0x0002)
    int32_t                                       SupplyItemEffects;                                            // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_SupplyBoxPool
// Struct Size::0x0060
struct FSolarTables_SupplyBoxPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_SupplyBoxPool>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_SupplyBoxPool
// Struct Size::0x0030
struct FSolarTablesData_SupplyBoxPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       TypePR;                                                       // 0x0014(0x0004)
    int32_t                                       TypeFloor;                                                    // 0x0018(0x0004)
    int32_t                                       SortId;                                                       // 0x001C(0x0004)
    TArray<int32_t>                               ItemList;                                                     // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Tables
// Struct Size::0x96C8
struct FSolarTables_Tables
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FSolarTables_AbilityData                      AbilityData;                                                  // 0x0008(0x0060)
    FSolarTables_Account                          Account;                                                      // 0x0068(0x0060)
    FSolarTables_AccountAvatar                    AccountAvatar;                                                // 0x00C8(0x0060)
    FSolarTables_AccountFixedExp                  AccountFixedExp;                                              // 0x0128(0x0060)
    FSolarTables_AccountFlag                      AccountFlag;                                                  // 0x0188(0x0060)
    FSolarTables_AccountSettleExp                 AccountSettleExp;                                             // 0x01E8(0x0060)
    FSolarTables_Action                           Action;                                                       // 0x0248(0x0060)
    FSolarTables_ActiveValue                      activeValue;                                                  // 0x02A8(0x0060)
    FSolarTables_AdditionalChunkSetting           AdditionalChunkSetting;                                       // 0x0308(0x0060)
    FSolarTables_AICharacterSettings              AICharacterSettings;                                          // 0x0368(0x0060)
    FSolarTables_MonsterAICharacterSettings       MonsterAICharacterSettings;                                   // 0x03C8(0x0060)
    FSolarTables_MonsterAISpawnSettings           MonsterAISpawnSettings;                                       // 0x0428(0x0060)
    FSolarTables_TinGuardStrengthSetting          TinGuardStrengthSetting;                                      // 0x0488(0x0060)
    FSolarTables_ZomFStrengthSetting              ZomFStrengthSetting;                                          // 0x04E8(0x0060)
    FSolarTables_ZomMStrengthSetting              ZomMStrengthSetting;                                          // 0x0548(0x0060)
    FSolarTables_Airline                          Airline;                                                      // 0x05A8(0x0060)
    FSolarTables_AIBackPack                       AIBackPack;                                                   // 0x0608(0x0060)
    FSolarTables_AICapsule                        AICapsule;                                                    // 0x0668(0x0060)
    FSolarTables_AICharacter                      AICharacter;                                                  // 0x06C8(0x0060)
    FSolarTables_AIMLConfig                       AIMLConfig;                                                   // 0x0728(0x0060)
    FSolarTables_AITrail                          AITrail;                                                      // 0x0788(0x0060)
    FSolarTables_BotConfig                        BotConfig;                                                    // 0x07E8(0x0060)
    FSolarTables_BotLootConfig                    BotLootConfig;                                                // 0x0848(0x0060)
    FSolarTables_BotPerceptionConfig              BotPerceptionConfig;                                          // 0x08A8(0x0060)
    FSolarTables_Armory                           Armory;                                                       // 0x0908(0x0060)
    FSolarTables_AttributeReg                     AttributeReg;                                                 // 0x0968(0x0060)
    FSolarTables_Backpack                         Backpack;                                                     // 0x09C8(0x0060)
    FSolarTables_BackpackUnlock                   BackpackUnlock;                                               // 0x0A28(0x0060)
    FSolarTables_BadWordsMapping                  BadWordsMapping;                                              // 0x0A88(0x0060)
    FSolarTables_BanCheating                      BanCheating;                                                  // 0x0AE8(0x0060)
    FSolarTables_BattleUpgradeContent             BattleUpgradeContent;                                         // 0x0B48(0x0060)
    FSolarTables_BattleUpgradeEffect              BattleUpgradeEffect;                                          // 0x0BA8(0x0060)
    FSolarTables_BattleUpgradeEffectPool          BattleUpgradeEffectPool;                                      // 0x0C08(0x0060)
    FSolarTables_BattleEndRankSettlement          BattleEndRankSettlement;                                      // 0x0C68(0x0060)
    FSolarTables_BattleLog                        BattleLog;                                                    // 0x0CC8(0x0060)
    FSolarTables_BpAward                          BpAward;                                                      // 0x0D28(0x0060)
    FSolarTables_BpRefresh                        BpRefresh;                                                    // 0x0D88(0x0060)
    FSolarTables_BpShow                           BpShow;                                                       // 0x0DE8(0x0060)
    FSolarTables_BpSystem                         BpSystem;                                                     // 0x0E48(0x0060)
    FSolarTables_BpTask2                          BpTask2;                                                      // 0x0EA8(0x0060)
    FSolarTables_BpTaskRandom                     BpTaskRandom;                                                 // 0x0F08(0x0060)
    FSolarTables_BpUnlock                         BpUnlock;                                                     // 0x0F68(0x0060)
    FSolarTables_MissionCard                      MissionCard;                                                  // 0x0FC8(0x0060)
    FSolarTables_EventBpAward                     EventBpAward;                                                 // 0x1028(0x0060)
    FSolarTables_EventBpShow                      EventBpShow;                                                  // 0x1088(0x0060)
    FSolarTables_EventBpSystem                    EventBpSystem;                                                // 0x10E8(0x0060)
    FSolarTables_EventBpTask                      EventBpTask;                                                  // 0x1148(0x0060)
    FSolarTables_EventBpTaskRandom                EventBpTaskRandom;                                            // 0x11A8(0x0060)
    FSolarTables_NewBpAward                       NewBpAward;                                                   // 0x1208(0x0060)
    FSolarTables_NewBpSystem                      NewBpSystem;                                                  // 0x1268(0x0060)
    FSolarTables_NewSeasonBpAward                 NewSeasonBpAward;                                             // 0x12C8(0x0060)
    FSolarTables_NewSeasonBpSystem                NewSeasonBpSystem;                                            // 0x1328(0x0060)
    FSolarTables_NewSeasonBpTask                  NewSeasonBpTask;                                              // 0x1388(0x0060)
    FSolarTables_SeasonExchangeShop               SeasonExchangeShop;                                           // 0x13E8(0x0060)
    FSolarTables_Behavior                         Behavior;                                                     // 0x1448(0x0060)
    FSolarTables_EscapeExp                        EscapeExp;                                                    // 0x14A8(0x0060)
    FSolarTables_Benefit                          Benefit;                                                      // 0x1508(0x0060)
    FSolarTables_BindThirdPartyAccount            BindThirdPartyAccount;                                        // 0x1568(0x0060)
    FSolarTables_Buff                             Buff;                                                         // 0x15C8(0x0060)
    FSolarTables_CardDefault                      CardDefault;                                                  // 0x1628(0x0060)
    FSolarTables_CardFrameID                      CardFrameID;                                                  // 0x1688(0x0060)
    FSolarTables_CardTab                          CardTab;                                                      // 0x16E8(0x0060)
    FSolarTables_MedalCategory                    MedalCategory;                                                // 0x1748(0x0060)
    FSolarTables_CaseToggleAlphabet               CaseToggleAlphabet;                                           // 0x17A8(0x0060)
    FSolarTables_UnitCharacter                    UnitCharacter;                                                // 0x1808(0x0060)
    FSolarTables_CharacterAbility                 CharacterAbility;                                             // 0x1868(0x0060)
    FSolarTables_CharacterExp                     CharacterExp;                                                 // 0x18C8(0x0060)
    FSolarTables_CharacterGrow                    CharacterGrow;                                                // 0x1928(0x0060)
    FSolarTables_CharacterInfo                    CharacterInfo;                                                // 0x1988(0x0060)
    FSolarTables_CharacterPassiveAbility          CharacterPassiveAbility;                                      // 0x19E8(0x0060)
    FSolarTables_CharacterRemove                  CharacterRemove;                                              // 0x1A48(0x0060)
    FSolarTables_CharacterStoreCategory           CharacterStoreCategory;                                       // 0x1AA8(0x0060)
    FSolarTables_CharacterStoreSubCategory        CharacterStoreSubCategory;                                    // 0x1B08(0x0060)
    FSolarTables_CharacterSuperAbility            CharacterSuperAbility;                                        // 0x1B68(0x0060)
    FSolarTables_CharacterTacticalAbility         CharacterTacticalAbility;                                     // 0x1BC8(0x0060)
    FSolarTables_CharacterUpgrade                 CharacterUpgrade;                                             // 0x1C28(0x0060)
    FSolarTables_CharacterUpgradeLevel            CharacterUpgradeLevel;                                        // 0x1C88(0x0060)
    FSolarTables_GetPoint                         GetPoint;                                                     // 0x1CE8(0x0060)
    FSolarTables_RankIcon                         RankIcon;                                                     // 0x1D48(0x0060)
    FSolarTables_CharacterUpgradeInfo             CharacterUpgradeInfo;                                         // 0x1DA8(0x0060)
    FSolarTables_charge                           Charge;                                                       // 0x1E08(0x0060)
    FSolarTables_oldchargeshop                    oldchargeshop;                                                // 0x1E68(0x0060)
    FSolarTables_ChargePlatform                   ChargePlatform;                                               // 0x1EC8(0x0060)
    FSolarTables_CheckWindow                      CheckWindow;                                                  // 0x1F28(0x0060)
    FSolarTables_ChestSpawn                       ChestSpawn;                                                   // 0x1F88(0x0060)
    FSolarTables_ChestSpawnGroup                  ChestSpawnGroup;                                              // 0x1FE8(0x0060)
    FSolarTables_ClanDemand                       ClanDemand;                                                   // 0x2048(0x0060)
    FSolarTables_ClanDeviceType                   ClanDeviceType;                                               // 0x20A8(0x0060)
    FSolarTables_ClanFlag                         ClanFlag;                                                     // 0x2108(0x0060)
    FSolarTables_ClanManage                       ClanManage;                                                   // 0x2168(0x0060)
    FSolarTables_ClanType                         ClanType;                                                     // 0x21C8(0x0060)
    FSolarTables_KDDemand                         KDDemand;                                                     // 0x2228(0x0060)
    FSolarTables_ClanLevel                        ClanLevel;                                                    // 0x2288(0x0060)
    FSolarTables_ClanScore                        ClanScore;                                                    // 0x22E8(0x0060)
    FSolarTables_ClanSeason                       ClanSeason;                                                   // 0x2348(0x0060)
    FSolarTables_Classes                          Classes;                                                      // 0x23A8(0x0060)
    FSolarTables_CollectRedeemReward              CollectRedeemReward;                                          // 0x2408(0x0060)
    FSolarTables_CollectRedeemTime                CollectRedeemTime;                                            // 0x2468(0x0060)
    FSolarTables_ConsumableUsage                  ConsumableUsage;                                              // 0x24C8(0x0060)
    FSolarTables_AreaCode                         AreaCode;                                                     // 0x2528(0x0060)
    FSolarTables_CN_City                          CN_City;                                                      // 0x2588(0x0060)
    FSolarTables_CN_District                      CN_District;                                                  // 0x25E8(0x0060)
    FSolarTables_CN_Province                      CN_Province;                                                  // 0x2648(0x0060)
    FSolarTables_CountryCode                      CountryCode;                                                  // 0x26A8(0x0060)
    FSolarTables_Crate                            Crate;                                                        // 0x2708(0x0060)
    FSolarTables_CratePool                        CratePool;                                                    // 0x2768(0x0060)
    FSolarTables_CustomRoomPool                   CustomRoomPool;                                               // 0x27C8(0x0060)
    FSolarTables_CustomRoomPrize                  CustomRoomPrize;                                              // 0x2828(0x0060)
    FSolarTables_DayAndNight                      DayAndNight;                                                  // 0x2888(0x0060)
    FSolarTables_DirectionBar                     DirectionBar;                                                 // 0x28E8(0x0060)
    FSolarTables_Division                         Division;                                                     // 0x2948(0x0060)
    FSolarTables_DsCountry                        DsCountry;                                                    // 0x29A8(0x0060)
    FSolarTables_DsVariableRange                  DsVariableRange;                                              // 0x2A08(0x0060)
    FSolarTables_ErrorCode                        ErrorCode;                                                    // 0x2A68(0x0060)
    FSolarTables_EShop                            EShop;                                                        // 0x2AC8(0x0060)
    FSolarTables_EShopDemoModel                   EShopDemoModel;                                               // 0x2B28(0x0060)
    FSolarTables_EShopGoodsPool                   EShopGoodsPool;                                               // 0x2B88(0x0060)
    FSolarTables_EShopGoodsPoolGroup              EShopGoodsPoolGroup;                                          // 0x2BE8(0x0060)
    FSolarTables_EShopSpawn                       EShopSpawn;                                                   // 0x2C48(0x0060)
    FSolarTables_Event                            Event;                                                        // 0x2CA8(0x0060)
    FSolarTables_Executer                         Executer;                                                     // 0x2D08(0x0060)
    FSolarTables_ExDownloadAward                  ExDownloadAward;                                              // 0x2D68(0x0060)
    FSolarTables_ExDownloadCharacterSkin          ExDownloadCharacterSkin;                                      // 0x2DC8(0x0060)
    FSolarTables_ExDownloadMap                    ExDownloadMap;                                                // 0x2E28(0x0060)
    FSolarTables_ExDownloadVoice                  ExDownloadVoice;                                              // 0x2E88(0x0060)
    FSolarTables_ExHDResource                     ExHDResource;                                                 // 0x2EE8(0x0060)
    FSolarTables_FeatureUnlock                    FeatureUnlock;                                                // 0x2F48(0x0060)
    FSolarTables_FriendEventPoint                 FriendEventPoint;                                             // 0x2FA8(0x0060)
    FSolarTables_FriendEventReward                FriendEventReward;                                            // 0x3008(0x0060)
    FSolarTables_FriendEventTime                  FriendEventTime;                                              // 0x3068(0x0060)
    FSolarTables_BattleRoyaleMode                 BattleRoyaleMode;                                             // 0x30C8(0x0060)
    FSolarTables_Chunk                            Chunk;                                                        // 0x3128(0x0060)
    FSolarTables_CustomServer                     CustomServer;                                                 // 0x3188(0x0060)
    FSolarTables_GameModeGroup                    GameModeGroup;                                                // 0x31E8(0x0060)
    FSolarTables_GameModeMain                     GameModeMain;                                                 // 0x3248(0x0060)
    FSolarTables_GameRuleGroup                    GameRuleGroup;                                                // 0x32A8(0x0060)
    FSolarTables_Loading                          Loading;                                                      // 0x3308(0x0060)
    FSolarTables_LoadingTips                      LoadingTips;                                                  // 0x3368(0x0060)
    FSolarTables_OutcomeSet                       OutcomeSet;                                                   // 0x33C8(0x0060)
    FSolarTables_GameTimeLine                     GameTimeLine;                                                 // 0x3428(0x0060)
    FSolarTables_Gift                             Gift;                                                         // 0x3488(0x0060)
    FSolarTables_GlobalOutcome                    GlobalOutcome;                                                // 0x34E8(0x0060)
    FSolarTables_GlobalSensitivity                GlobalSensitivity;                                            // 0x3548(0x0060)
    FSolarTables_GrowTaskLevelReward              GrowTaskLevelReward;                                          // 0x35A8(0x0060)
    FSolarTables_HalfMonthReward                  HalfMonthReward;                                              // 0x3608(0x0060)
    FSolarTables_HalfMonthSystem                  HalfMonthSystem;                                              // 0x3668(0x0060)
    FSolarTables_HalfMonthTask                    HalfMonthTask;                                                // 0x36C8(0x0060)
    FSolarTables_HeroPowerFormula                 HeroPowerFormula;                                             // 0x3728(0x0060)
    FSolarTables_RatingStandard                   RatingStandard;                                               // 0x3788(0x0060)
    FSolarTables_HomeLevel                        HomeLevel;                                                    // 0x37E8(0x0060)
    FSolarTables_HomeObjects                      HomeObjects;                                                  // 0x3848(0x0060)
    FSolarTables_HomeConstruct                    HomeConstruct;                                                // 0x38A8(0x0060)
    FSolarTables_HomeDevice                       HomeDevice;                                                   // 0x3908(0x0060)
    FSolarTables_HomeObjectTypes                  HomeObjectTypes;                                              // 0x3968(0x0060)
    FSolarTables_HomePreset                       HomePreset;                                                   // 0x39C8(0x0060)
    FSolarTables_InputGamepadMapping              InputGamepadMapping;                                          // 0x3A28(0x0060)
    FSolarTables_InputGamepadPreset               InputGamepadPreset;                                           // 0x3A88(0x0060)
    FSolarTables_InputGamepadDetail               InputGamepadDetail;                                           // 0x3AE8(0x0060)
    FSolarTables_InputAction                      InputAction;                                                  // 0x3B48(0x0060)
    FSolarTables_InputMapping                     InputMapping;                                                 // 0x3BA8(0x0060)
    FSolarTables_InputSensitivity                 InputSensitivity;                                             // 0x3C08(0x0060)
    FSolarTables_Item                             Item;                                                         // 0x3C68(0x0060)
    FSolarTables_AccountAvatarFrame               AccountAvatarFrame;                                           // 0x3CC8(0x0060)
    FSolarTables_AccountAvatarItem                AccountAvatarItem;                                            // 0x3D28(0x0060)
    FSolarTables_AccountChat                      AccountChat;                                                  // 0x3D88(0x0060)
    FSolarTables_AccountExp                       AccountExp;                                                   // 0x3DE8(0x0060)
    FSolarTables_BackgroundProperty               BackgroundProperty;                                           // 0x3E48(0x0060)
    FSolarTables_BackpackCard                     BackpackCard;                                                 // 0x3EA8(0x0060)
    FSolarTables_BackpackProperty                 BackpackProperty;                                             // 0x3F08(0x0060)
    FSolarTables_BackpackTrailProperty            BackpackTrailProperty;                                        // 0x3F68(0x0060)
    FSolarTables_BusinessCardFrame                BusinessCardFrame;                                            // 0x3FC8(0x0060)
    FSolarTables_BusinessFrame                    BusinessFrame;                                                // 0x4028(0x0060)
    FSolarTables_CapsuleProperty                  CapsuleProperty;                                              // 0x4088(0x0060)
    FSolarTables_CharacterCard                    CharacterCard;                                                // 0x40E8(0x0060)
    FSolarTables_CharacterExpCard                 CharacterExpCard;                                             // 0x4148(0x0060)
    FSolarTables_CharacterExpDoubleCard           CharacterExpDoubleCard;                                       // 0x41A8(0x0060)
    FSolarTables_CharacterProperty                CharacterProperty;                                            // 0x4208(0x0060)
    FSolarTables_CharacterSkinCard                CharacterSkinCard;                                            // 0x4268(0x0060)
    FSolarTables_CharacterSkinProperty            CharacterSkinProperty;                                        // 0x42C8(0x0060)
    FSolarTables_CoinProperty                     CoinProperty;                                                 // 0x4328(0x0060)
    FSolarTables_Coupon                           Coupon;                                                       // 0x4388(0x0060)
    FSolarTables_Dance                            Dance;                                                        // 0x43E8(0x0060)
    FSolarTables_DeathBox                         DeathBox;                                                     // 0x4448(0x0060)
    FSolarTables_Emote                            Emote;                                                        // 0x44A8(0x0060)
    FSolarTables_HomeExpCard                      HomeExpCard;                                                  // 0x4508(0x0060)
    FSolarTables_KillNotify                       KillNotify;                                                   // 0x4568(0x0060)
    FSolarTables_KillNotifyCard                   KillNotifyCard;                                               // 0x45C8(0x0060)
    FSolarTables_MaterialProperty                 MaterialProperty;                                             // 0x4628(0x0060)
    FSolarTables_NameCardBackgroundItem           NameCardBackgroundItem;                                       // 0x4688(0x0060)
    FSolarTables_PoseProperty                     PoseProperty;                                                 // 0x46E8(0x0060)
    FSolarTables_Shard                            Shard;                                                        // 0x4748(0x0060)
    FSolarTables_Signedcard                       Signedcard;                                                   // 0x47A8(0x0060)
    FSolarTables_SupplyBoxCard                    SupplyBoxCard;                                                // 0x4808(0x0060)
    FSolarTables_VehicleSkinProperty              VehicleSkinProperty;                                          // 0x4868(0x0060)
    FSolarTables_Voice                            Voice;                                                        // 0x48C8(0x0060)
    FSolarTables_WeaponExp                        WeaponExp;                                                    // 0x4928(0x0060)
    FSolarTables_WeaponExpDoubleCard              WeaponExpDoubleCard;                                          // 0x4988(0x0060)
    FSolarTables_WeaponSkinCard                   WeaponSkinCard;                                               // 0x49E8(0x0060)
    FSolarTables_WeaponSkinProperty               WeaponSkinProperty;                                           // 0x4A48(0x0060)
    FSolarTables_ItemType                         ItemType;                                                     // 0x4AA8(0x0060)
    FSolarTables_ItemCustomType                   ItemCustomType;                                               // 0x4B08(0x0060)
    FSolarTables_ItemInBattle                     ItemInBattle;                                                 // 0x4B68(0x0060)
    FSolarTables_ArmorProperty                    ArmorProperty;                                                // 0x4BC8(0x0060)
    FSolarTables_BackpackGrowthProperty           BackpackGrowthProperty;                                       // 0x4C28(0x0060)
    FSolarTables_Chest                            Chest;                                                        // 0x4C88(0x0060)
    FSolarTables_Collect                          Collect;                                                      // 0x4CE8(0x0060)
    FSolarTables_EnergyProperty                   EnergyProperty;                                               // 0x4D48(0x0060)
    FSolarTables_ExtraEnergyProperty              ExtraEnergyProperty;                                          // 0x4DA8(0x0060)
    FSolarTables_GunProperty                      GunProperty;                                                  // 0x4E08(0x0060)
    FSolarTables_HelmetProperty                   HelmetProperty;                                               // 0x4E68(0x0060)
    FSolarTables_ItemBehavior                     ItemBehavior;                                                 // 0x4EC8(0x0060)
    FSolarTables_ItemWeaponParts                  ItemWeaponParts;                                              // 0x4F28(0x0060)
    FSolarTables_JetPackModuleProperty            JetPackModuleProperty;                                        // 0x4F88(0x0060)
    FSolarTables_RandomReward                     RandomReward;                                                 // 0x4FE8(0x0060)
    FSolarTables_ShieldProperty                   ShieldProperty;                                               // 0x5048(0x0060)
    FSolarTables_SlotUnlockProperty               SlotUnlockProperty;                                           // 0x50A8(0x0060)
    FSolarTables_DefaultPrice                     DefaultPrice;                                                 // 0x5108(0x0060)
    FSolarTables_ItemPrice                        ItemPrice;                                                    // 0x5168(0x0060)
    FSolarTables_ItemQuality                      ItemQuality;                                                  // 0x51C8(0x0060)
    FSolarTables_ItemSound                        ItemSound;                                                    // 0x5228(0x0060)
    FSolarTables_JumpSystem                       JumpSystem;                                                   // 0x5288(0x0060)
    FSolarTables_Like                             Like;                                                         // 0x52E8(0x0060)
    FSolarTables_LikeVariable                     LikeVariable;                                                 // 0x5348(0x0060)
    FSolarTables_PopUp                            PopUp;                                                        // 0x53A8(0x0060)
    FSolarTables_LimEmojiData                     LimEmojiData;                                                 // 0x5408(0x0060)
    FSolarTables_LobbyAutoDownload                LobbyAutoDownload;                                            // 0x5468(0x0060)
    FSolarTables_LobbyMatch                       LobbyMatch;                                                   // 0x54C8(0x0060)
    FSolarTables_LobbyModule                      LobbyModule;                                                  // 0x5528(0x0060)
    FSolarTables_SceneChange                      SceneChange;                                                  // 0x5588(0x0060)
    FSolarTables_LanguageSwitcher                 LanguageSwitcher;                                             // 0x55E8(0x0060)
    FSolarTables_Localization                     Localization;                                                 // 0x5648(0x0060)
    FSolarTables_Localization_BattleUI            Localization_BattleUI;                                        // 0x56A8(0x0060)
    FSolarTables_Localization_EventSystem         Localization_EventSystem;                                     // 0x5708(0x0060)
    FSolarTables_Localization_General             Localization_General;                                         // 0x5768(0x0060)
    FSolarTables_Localization_Heroes              Localization_Heroes;                                          // 0x57C8(0x0060)
    FSolarTables_Localization_Item                Localization_Item;                                            // 0x5828(0x0060)
    FSolarTables_Localization_Tournament          Localization_Tournament;                                      // 0x5888(0x0060)
    FSolarTables_Localization_Uncategorized       Localization_Uncategorized;                                   // 0x58E8(0x0060)
    FSolarTables_LoginReward                      LoginReward;                                                  // 0x5948(0x0060)
    FSolarTables_Lore                             Lore;                                                         // 0x59A8(0x0060)
    FSolarTables_CarouselDraw                     CarouselDraw;                                                 // 0x5A08(0x0060)
    FSolarTables_LuckDraw                         LuckDraw;                                                     // 0x5A68(0x0060)
    FSolarTables_NewLuckDraw                      NewLuckDraw;                                                  // 0x5AC8(0x0060)
    FSolarTables_MailContent                      MailContent;                                                  // 0x5B28(0x0060)
    FSolarTables_GameMap                          GameMap;                                                      // 0x5B88(0x0060)
    FSolarTables_MapMarkIcon                      MapMarkIcon;                                                  // 0x5BE8(0x0060)
    FSolarTables_MapPOI                           MapPOI;                                                       // 0x5C48(0x0060)
    FSolarTables_MatchAIStrategy                  MatchAIStrategy;                                              // 0x5CA8(0x0060)
    FSolarTables_MatchRule                        MatchRule;                                                    // 0x5D08(0x0060)
    FSolarTables_MLApplication                    MLApplication;                                                // 0x5D68(0x0060)
    FSolarTables_RankMatch                        RankMatch;                                                    // 0x5DC8(0x0060)
    FSolarTables_WinningScore                     WinningScore;                                                 // 0x5E28(0x0060)
    FSolarTables_MatchPool                        MatchPool;                                                    // 0x5E88(0x0060)
    FSolarTables_MatchStrategy                    MatchStrategy;                                                // 0x5EE8(0x0060)
    FSolarTables_PreTeamPool                      PreTeamPool;                                                  // 0x5F48(0x0060)
    FSolarTables_TeamScore                        TeamScore;                                                    // 0x5FA8(0x0060)
    FSolarTables_MonthlyEventReward               MonthlyEventReward;                                           // 0x6008(0x0060)
    FSolarTables_MonthlyEventTime                 MonthlyEventTime;                                             // 0x6068(0x0060)
    FSolarTables_MovementSpeed                    MovementSpeed;                                                // 0x60C8(0x0060)
    FSolarTables_NameCardBackground               NameCardBackground;                                           // 0x6128(0x0060)
    FSolarTables_NameCardPose                     NameCardPose;                                                 // 0x6188(0x0060)
    FSolarTables_PrivilegeAsset                   PrivilegeAsset;                                               // 0x61E8(0x0060)
    FSolarTables_PrivilegeConditions              PrivilegeConditions;                                          // 0x6248(0x0060)
    FSolarTables_PrivilegeContent                 PrivilegeContent;                                             // 0x62A8(0x0060)
    FSolarTables_PrivilegeIpTable                 PrivilegeIpTable;                                             // 0x6308(0x0060)
    FSolarTables_Notification                     Notification;                                                 // 0x6368(0x0060)
    FSolarTables_NotificationImage                NotificationImage;                                            // 0x63C8(0x0060)
    FSolarTables_ObGift                           ObGift;                                                       // 0x6428(0x0060)
    FSolarTables_Outcome                          Outcome;                                                      // 0x6488(0x0060)
    FSolarTables_OutcomeContent                   OutcomeContent;                                               // 0x64E8(0x0060)
    FSolarTables_PackageInGameUnlock              PackageInGameUnlock;                                          // 0x6548(0x0060)
    FSolarTables_PickupPriorityItem               PickupPriorityItem;                                           // 0x65A8(0x0060)
    FSolarTables_PickupPriorityWeaponPart         PickupPriorityWeaponPart;                                     // 0x6608(0x0060)
    FSolarTables_Plat                             Plat;                                                         // 0x6668(0x0060)
    FSolarTables_AsyncMsg                         AsyncMsg;                                                     // 0x66C8(0x0060)
    FSolarTables_PopUpSystem                      PopUpSystem;                                                  // 0x6728(0x0060)
    FSolarTables_Questionnaire                    Questionnaire;                                                // 0x6788(0x0060)
    FSolarTables_CharacterVoiceover               CharacterVoiceover;                                           // 0x67E8(0x0060)
    FSolarTables_QuickChat                        QuickChat;                                                    // 0x6848(0x0060)
    FSolarTables_QuickVoice                       QuickVoice;                                                   // 0x68A8(0x0060)
    FSolarTables_VODownload                       VODownload;                                                   // 0x6908(0x0060)
    FSolarTables_RaffleCenter                     RaffleCenter;                                                 // 0x6968(0x0060)
    FSolarTables_RaffleProbabilityShow            RaffleProbabilityShow;                                        // 0x69C8(0x0060)
    FSolarTables_RaffleRuleText                   RaffleRuleText;                                               // 0x6A28(0x0060)
    FSolarTables_ChargeReturn                     ChargeReturn;                                                 // 0x6A88(0x0060)
    FSolarTables_DiscountBuy                      DiscountBuy;                                                  // 0x6AE8(0x0060)
    FSolarTables_PlayerPool                       PlayerPool;                                                   // 0x6B48(0x0060)
    FSolarTables_RandomPack                       RandomPack;                                                   // 0x6BA8(0x0060)
    FSolarTables_RankDynamicElo                   RankDynamicElo;                                               // 0x6C08(0x0060)
    FSolarTables_BREloScore                       BREloScore;                                                   // 0x6C68(0x0060)
    FSolarTables_DeathMatchScore                  DeathMatchScore;                                              // 0x6CC8(0x0060)
    FSolarTables_EloGamesFactor                   EloGamesFactor;                                               // 0x6D28(0x0060)
    FSolarTables_HistoryRankReward                HistoryRankReward;                                            // 0x6D88(0x0060)
    FSolarTables_HuntScore                        HuntScore;                                                    // 0x6DE8(0x0060)
    FSolarTables_NewRankSeasonReward              NewRankSeasonReward;                                          // 0x6E48(0x0060)
    FSolarTables_RankGroupName                    RankGroupName;                                                // 0x6EA8(0x0060)
    FSolarTables_RankLevel                        RankLevel;                                                    // 0x6F08(0x0060)
    FSolarTables_RankList                         RankList;                                                     // 0x6F68(0x0060)
    FSolarTables_RankScore                        RankScore;                                                    // 0x6FC8(0x0060)
    FSolarTables_RankSeasonReward                 RankSeasonReward;                                             // 0x7028(0x0060)
    FSolarTables_SeasonEloReset                   SeasonEloReset;                                               // 0x7088(0x0060)
    FSolarTables_SeasonInfo                       SeasonInfo;                                                   // 0x70E8(0x0060)
    FSolarTables_SeasonRankReset                  SeasonRankReset;                                              // 0x7148(0x0060)
    FSolarTables_RedZone                          RedZone;                                                      // 0x71A8(0x0060)
    FSolarTables_RedZoneBomb                      RedZoneBomb;                                                  // 0x7208(0x0060)
    FSolarTables_CircularCameras                  CircularCameras;                                              // 0x7268(0x0060)
    FSolarTables_CloseUpCameras                   CloseUpCameras;                                               // 0x72C8(0x0060)
    FSolarTables_FollowProjectileCameras          FollowProjectileCameras;                                      // 0x7328(0x0060)
    FSolarTables_LockCamera                       LockCamera;                                                   // 0x7388(0x0060)
    FSolarTables_LookAtCameras                    LookAtCameras;                                                // 0x73E8(0x0060)
    FSolarTables_VictimCameras                    VictimCameras;                                                // 0x7448(0x0060)
    FSolarTables_HighlightDamageToEffect          HighlightDamageToEffect;                                      // 0x74A8(0x0060)
    FSolarTables_HighlightEffectGroup             HighlightEffectGroup;                                         // 0x7508(0x0060)
    FSolarTables_HighlightParams                  HighlightParams;                                              // 0x7568(0x0060)
    FSolarTables_HighlightRating                  HighlightRating;                                              // 0x75C8(0x0060)
    FSolarTables_ReplayInputPrompt                ReplayInputPrompt;                                            // 0x7628(0x0060)
    FSolarTables_AutoDirector                     AutoDirector;                                                 // 0x7688(0x0060)
    FSolarTables_AutoDirectorActivityScore        AutoDirectorActivityScore;                                    // 0x76E8(0x0060)
    FSolarTables_HotSpot                          HotSpot;                                                      // 0x7748(0x0060)
    FSolarTables_Reportoptions                    Reportoptions;                                                // 0x77A8(0x0060)
    FSolarTables_Rescue                           Rescue;                                                       // 0x7808(0x0060)
    FSolarTables_Building                         Building;                                                     // 0x7868(0x0060)
    FSolarTables_Composing                        Composing;                                                    // 0x78C8(0x0060)
    FSolarTables_Facility                         Facility;                                                     // 0x7928(0x0060)
    FSolarTables_HomePit                          HomePit;                                                      // 0x7988(0x0060)
    FSolarTables_SanctuaryMaterial                SanctuaryMaterial;                                            // 0x79E8(0x0060)
    FSolarTables_WeaponWall                       WeaponWall;                                                   // 0x7A48(0x0060)
    FSolarTables_SetData                          SetData;                                                      // 0x7AA8(0x0060)
    FSolarTables_SettlementPunishment             SettlementPunishment;                                         // 0x7B08(0x0060)
    FSolarTables_Share                            Share;                                                        // 0x7B68(0x0060)
    FSolarTables_ShopCategory                     ShopCategory;                                                 // 0x7BC8(0x0060)
    FSolarTables_ShopProperty                     ShopProperty;                                                 // 0x7C28(0x0060)
    FSolarTables_ShopRecommend                    ShopRecommend;                                                // 0x7C88(0x0060)
    FSolarTables_SubCategory                      SubCategory;                                                  // 0x7CE8(0x0060)
    FSolarTables_Skin                             Skin;                                                         // 0x7D48(0x0060)
    FSolarTables_SmokeColor                       SmokeColor;                                                   // 0x7DA8(0x0060)
    FSolarTables_SocialCommunity                  SocialCommunity;                                              // 0x7E08(0x0060)
    FSolarTables_Statistics                       Statistics;                                                   // 0x7E68(0x0060)
    FSolarTables_Strategy                         Strategy;                                                     // 0x7EC8(0x0060)
    FSolarTables_SupplyBox                        SupplyBox;                                                    // 0x7F28(0x0060)
    FSolarTables_SupplyBoxAchieve                 SupplyBoxAchieve;                                             // 0x7F88(0x0060)
    FSolarTables_SupplyBoxClass                   SupplyBoxClass;                                               // 0x7FE8(0x0060)
    FSolarTables_SupplyBoxItem                    SupplyBoxItem;                                                // 0x8048(0x0060)
    FSolarTables_SupplyBoxPool                    SupplyBoxPool;                                                // 0x80A8(0x0060)
    FSolarTables_AchieveAward                     AchieveAward;                                                 // 0x8108(0x0060)
    FSolarTables_AchieveCategory                  AchieveCategory;                                              // 0x8168(0x0060)
    FSolarTables_AchieveGroupName                 AchieveGroupName;                                             // 0x81C8(0x0060)
    FSolarTables_Achievement                      Achievement;                                                  // 0x8228(0x0060)
    FSolarTables_Medal                            Medal;                                                        // 0x8288(0x0060)
    FSolarTables_SeasonCE                         SeasonCE;                                                     // 0x82E8(0x0060)
    FSolarTables_TargetCategory                   TargetCategory;                                               // 0x8348(0x0060)
    FSolarTables_CharacterName                    CharacterName;                                                // 0x83A8(0x0060)
    FSolarTables_CharacterType                    CharacterType;                                                // 0x8408(0x0060)
    FSolarTables_GameMode1                        GameMode1;                                                    // 0x8468(0x0060)
    FSolarTables_GameMode2                        GameMode2;                                                    // 0x84C8(0x0060)
    FSolarTables_MapPOIName                       MapPOIName;                                                   // 0x8528(0x0060)
    FSolarTables_RankNum                          RankNum;                                                      // 0x8588(0x0060)
    FSolarTables_WeaponType                       WeaponType;                                                   // 0x85E8(0x0060)
    FSolarTables_TaskProgress                     TaskProgress;                                                 // 0x8648(0x0060)
    FSolarTables_TaskSystem                       TaskSystem;                                                   // 0x86A8(0x0060)
    FSolarTables_TopUP                            TopUP;                                                        // 0x8708(0x0060)
    FSolarTables_TopUPCharge                      TopUPCharge;                                                  // 0x8768(0x0060)
    FSolarTables_TournamentActivityFormula        TournamentActivityFormula;                                    // 0x87C8(0x0060)
    FSolarTables_TournamentActivityRankScore      TournamentActivityRankScore;                                  // 0x8828(0x0060)
    FSolarTables_TournamentMemberFactor           TournamentMemberFactor;                                       // 0x8888(0x0060)
    FSolarTables_Translation                      Translation;                                                  // 0x88E8(0x0060)
    FSolarTables_Triger                           Triger;                                                       // 0x8948(0x0060)
    FSolarTables_UICustomRecord                   UICustomRecord;                                               // 0x89A8(0x0060)
    FSolarTables_PlayerOperationListLayout        PlayerOperationListLayout;                                    // 0x8A08(0x0060)
    FSolarTables_Variables                        Variables;                                                    // 0x8A68(0x0060)
    FSolarTables_Vehicle                          Vehicle;                                                      // 0x8AC8(0x0060)
    FSolarTables_VehicleLobbySkill                VehicleLobbySkill;                                            // 0x8B28(0x0060)
    FSolarTables_VehicleSkin                      VehicleSkin;                                                  // 0x8B88(0x0060)
    FSolarTables_VehicleType                      VehicleType;                                                  // 0x8BE8(0x0060)
    FSolarTables_VehicleSpawn                     VehicleSpawn;                                                 // 0x8C48(0x0060)
    FSolarTables_VehicleSpawnGroup                VehicleSpawnGroup;                                            // 0x8CA8(0x0060)
    FSolarTables_Vipcard                          Vipcard;                                                      // 0x8D08(0x0060)
    FSolarTables_VipSignAward                     VipSignAward;                                                 // 0x8D68(0x0060)
    FSolarTables_Warehouse                        Warehouse;                                                    // 0x8DC8(0x0060)
    FSolarTables_FrustrationGame                  FrustrationGame;                                              // 0x8E28(0x0060)
    FSolarTables_WarmGame                         WarmGame;                                                     // 0x8E88(0x0060)
    FSolarTables_WarmGameMode                     WarmGameMode;                                                 // 0x8EE8(0x0060)
    FSolarTables_WarmGameSkip                     WarmGameSkip;                                                 // 0x8F48(0x0060)
    FSolarTables_WeaponDamage                     WeaponDamage;                                                 // 0x8FA8(0x0060)
    FSolarTables_Weapon                           Weapon;                                                       // 0x9008(0x0060)
    FSolarTables_WeaponAmmo                       WeaponAmmo;                                                   // 0x9068(0x0060)
    FSolarTables_WeaponBattleUpgrade              WeaponBattleUpgrade;                                          // 0x90C8(0x0060)
    FSolarTables_WeaponDefault                    WeaponDefault;                                                // 0x9128(0x0060)
    FSolarTables_WeaponKillTip                    WeaponKillTip;                                                // 0x9188(0x0060)
    FSolarTables_WeaponLevelReward                WeaponLevelReward;                                            // 0x91E8(0x0060)
    FSolarTables_WeaponParts                      WeaponParts;                                                  // 0x9248(0x0060)
    FSolarTables_WeaponProficiency                WeaponProficiency;                                            // 0x92A8(0x0060)
    FSolarTables_WeaponQuality                    WeaponQuality;                                                // 0x9308(0x0060)
    FSolarTables_SecondMode                       SecondMode;                                                   // 0x9368(0x0060)
    FSolarTables_WeaponSkin                       WeaponSkin;                                                   // 0x93C8(0x0060)
    FSolarTables_WeaponSound                      WeaponSound;                                                  // 0x9428(0x0060)
    FSolarTables_WeekChaAward                     WeekChaAward;                                                 // 0x9488(0x0060)
    FSolarTables_WeekChallenge                    WeekChallenge;                                                // 0x94E8(0x0060)
    FSolarTables_DailyReward                      DailyReward;                                                  // 0x9548(0x0060)
    FSolarTables_WeekFree                         WeekFree;                                                     // 0x95A8(0x0060)
    FSolarTables_EnforceISP                       EnforceISP;                                                   // 0x9608(0x0060)
    FSolarTables_ZonePing                         ZonePing;                                                     // 0x9668(0x0060)
};


// ScriptStruct  Solarland.SolarTables_ZonePing
// Struct Size::0x0060
struct FSolarTables_ZonePing : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ZonePing>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ZonePing
// Struct Size::0x0048
struct FSolarTablesData_ZonePing : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Zone;                                                         // 0x0018(0x0010)
    TArray<FString>                               zonelist;                                                     // 0x0028(0x0010)
    TArray<FString>                               Country;                                                      // 0x0038(0x0010)
};


// ScriptStruct  Solarland.SolarTables_WeekFree
// Struct Size::0x0060
struct FSolarTables_WeekFree : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeekFree>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeekFree
// Struct Size::0x0058
struct FSolarTablesData_WeekFree : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ActivateLastTime;                                             // 0x0014(0x0004)
    int32_t                                       SignInLastTime;                                               // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       BPName;                                                       // 0x0020(0x0010)
    int32_t                                       Style;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<int32_t>                               FinalReward;                                                  // 0x0038(0x0010)
    TArray<int32_t>                               DailyRewardList;                                              // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SolarTables_WeekChallenge
// Struct Size::0x0060
struct FSolarTables_WeekChallenge : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeekChallenge>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeekChallenge
// Struct Size::0x0038
struct FSolarTablesData_WeekChallenge : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Priority;                                                     // 0x0014(0x0004)
    int32_t                                       GameMode;                                                     // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               ModeID;                                                       // 0x0020(0x0010)
    FSolarTablesLocalText                         Title;                                                        // 0x0030(0x0004)
    bool                                          IfRefresh;                                                    // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  Solarland.SolarTables_WeekChaAward
// Struct Size::0x0060
struct FSolarTables_WeekChaAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeekChaAward>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeekChaAward
// Struct Size::0x0058
struct FSolarTablesData_WeekChaAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               RankValue;                                                    // 0x0018(0x0010)
    FSolarTablesLocalText                         RankName;                                                     // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       AchieveIcon;                                                  // 0x0030(0x0010)
    int32_t                                       RankLevel;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<int32_t>                               AwardList;                                                    // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SolarTables_WeaponSound
// Struct Size::0x0060
struct FSolarTables_WeaponSound : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponSound>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponSound
// Struct Size::0x04F8
struct FSolarTablesData_WeaponSound : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       Play_Fire_Auto_1P;                                            // 0x0018(0x0010)
    FString                                       Play_Fire_Auto_3P;                                            // 0x0028(0x0010)
    FString                                       Play_Fire_Auto_3P_Enemy;                                      // 0x0038(0x0010)
    FString                                       Stop_Fire_Auto_1P;                                            // 0x0048(0x0010)
    FString                                       Stop_Fire_Auto_3P;                                            // 0x0058(0x0010)
    FString                                       Stop_Fire_Auto_3P_Enemy;                                      // 0x0068(0x0010)
    FString                                       Play_Fire_Sigle_1P;                                           // 0x0078(0x0010)
    FString                                       Play_Fire_Sigle_3P;                                           // 0x0088(0x0010)
    FString                                       Play_Fire_Sigle_3P_Enemy;                                     // 0x0098(0x0010)
    FString                                       Play_Fire_Burst_1P;                                           // 0x00A8(0x0010)
    FString                                       Play_Fire_Burst_3P;                                           // 0x00B8(0x0010)
    FString                                       Play_Fire_Burst_3P_Enemy;                                     // 0x00C8(0x0010)
    FString                                       Stop_Fire_Burst_1P;                                           // 0x00D8(0x0010)
    FString                                       Stop_Fire_Burst_3P;                                           // 0x00E8(0x0010)
    FString                                       Stop_Fire_Burst_3P_Enemy;                                     // 0x00F8(0x0010)
    FString                                       Play_FIRE_LAST_1P;                                            // 0x0108(0x0010)
    FString                                       Play_FIRE_LAST_3P;                                            // 0x0118(0x0010)
    FString                                       Play_FIRE_LAST_3P_Enemy;                                      // 0x0128(0x0010)
    FString                                       Remain_Gun_RTPC_NAME;                                         // 0x0138(0x0010)
    FString                                       Play_Skill_Cast_1P;                                           // 0x0148(0x0010)
    FString                                       Play_Skill_Cast_3P;                                           // 0x0158(0x0010)
    FString                                       Play_Skill_Cast_3P_Enemy;                                     // 0x0168(0x0010)
    FString                                       Play_Fire_Lay_Tl_1P;                                          // 0x0178(0x0010)
    FString                                       Play_Fire_Lay_Tl_3P;                                          // 0x0188(0x0010)
    FString                                       Play_Fire_Lay_Tl_3P_Enemy;                                    // 0x0198(0x0010)
    FString                                       Play_Land_Fly_Once_3P;                                        // 0x01A8(0x0010)
    FString                                       Play_Land_Fly_Once_3P_Enemy;                                  // 0x01B8(0x0010)
    FString                                       Play_Land_Fly_Loop_1P;                                        // 0x01C8(0x0010)
    FString                                       Play_Land_Fly_Loop_3P;                                        // 0x01D8(0x0010)
    FString                                       Play_Land_Fly_Loop_3P_Enemy;                                  // 0x01E8(0x0010)
    FString                                       Stop_Land_Fly_Loop_1P;                                        // 0x01F8(0x0010)
    FString                                       Stop_Land_Fly_Loop_3P;                                        // 0x0208(0x0010)
    FString                                       Stop_Land_Fly_Loop_3P_Enemy;                                  // 0x0218(0x0010)
    FString                                       Play_Land_Common_Hit_1P;                                      // 0x0228(0x0010)
    FString                                       Play_Land_Common_Hit_3P;                                      // 0x0238(0x0010)
    FString                                       Play_Land_Common_Hit_3P_Enemy;                                // 0x0248(0x0010)
    FString                                       Play_Fire_Overload_1P;                                        // 0x0258(0x0010)
    FString                                       Play_Fire_Overload_3P;                                        // 0x0268(0x0010)
    FString                                       Play_Fire_Overload_3P_Enemy;                                  // 0x0278(0x0010)
    FString                                       Play_Reload_01_1P;                                            // 0x0288(0x0010)
    FString                                       Play_Reload_01_3P;                                            // 0x0298(0x0010)
    FString                                       Play_Reload_01_3P_Enemy;                                      // 0x02A8(0x0010)
    FString                                       Play_Reload_02_1P;                                            // 0x02B8(0x0010)
    FString                                       Play_Reload_02_3P;                                            // 0x02C8(0x0010)
    FString                                       Play_Reload_02_3P_Enemy;                                      // 0x02D8(0x0010)
    FString                                       Play_Reload_03_1P;                                            // 0x02E8(0x0010)
    FString                                       Play_Reload_03_3P;                                            // 0x02F8(0x0010)
    FString                                       Play_Reload_03_3P_Enemy;                                      // 0x0308(0x0010)
    FString                                       Play_Bolt_1P;                                                 // 0x0318(0x0010)
    FString                                       Play_Bolt_3P;                                                 // 0x0328(0x0010)
    FString                                       Play_Bolt_3P_Enemy;                                           // 0x0338(0x0010)
    FString                                       Play_Vehicle_Gun_On_3P;                                       // 0x0348(0x0010)
    FString                                       Play_Vehicle_Gun_On_3P_Enemy;                                 // 0x0358(0x0010)
    FString                                       Play_Vehicle_Gun_Loop_3P;                                     // 0x0368(0x0010)
    FString                                       Play_Vehicle_Gun_Loop_3P_Enemy;                               // 0x0378(0x0010)
    FString                                       Play_Vehicle_Gun_Off_3P;                                      // 0x0388(0x0010)
    FString                                       Play_Vehicle_Gun_Off_3P_Enemy;                                // 0x0398(0x0010)
    FString                                       Play_Fire_Auto_1P_Mute;                                       // 0x03A8(0x0010)
    FString                                       Play_Fire_Auto_3P_Mute;                                       // 0x03B8(0x0010)
    FString                                       Play_Fire_Auto_3P_Enemy_Mute;                                 // 0x03C8(0x0010)
    FString                                       Stop_Fire_Auto_1P_Mute;                                       // 0x03D8(0x0010)
    FString                                       Stop_Fire_Auto_3P_Mute;                                       // 0x03E8(0x0010)
    FString                                       Stop_Fire_Auto_3P_Enemy_Mute;                                 // 0x03F8(0x0010)
    FString                                       Play_Fire_Sigle_1P_Mute;                                      // 0x0408(0x0010)
    FString                                       Play_Fire_Sigle_3P_Mute;                                      // 0x0418(0x0010)
    FString                                       Play_Fire_Sigle_3P_Enemy_Mute;                                // 0x0428(0x0010)
    FString                                       Play_Fire_Burst_1P_Mute;                                      // 0x0438(0x0010)
    FString                                       Play_Fire_Burst_3P_Mute;                                      // 0x0448(0x0010)
    FString                                       Play_Fire_Burst_3P_Enemy_Mute;                                // 0x0458(0x0010)
    FString                                       Stop_Fire_Burst_1P_Mute;                                      // 0x0468(0x0010)
    FString                                       Stop_Fire_Burst_3P_Mute;                                      // 0x0478(0x0010)
    FString                                       Stop_Fire_Burst_3P_Enemy_Mute;                                // 0x0488(0x0010)
    FString                                       Play_Fire_Lay_Tl_1P_Mute;                                     // 0x0498(0x0010)
    FString                                       Play_Fire_Lay_Tl_3P_Mute;                                     // 0x04A8(0x0010)
    FString                                       Play_Fire_Lay_Tl_3P_Enemy_Mute;                               // 0x04B8(0x0010)
    FString                                       Play_Fire_Empty_1p;                                           // 0x04C8(0x0010)
    FString                                       Play_Fire_Empty_3p;                                           // 0x04D8(0x0010)
    FString                                       Play_Fire_Empty_3p_Enemy;                                     // 0x04E8(0x0010)
};


// ScriptStruct  Solarland.SolarTables_WeaponSkin
// Struct Size::0x0060
struct FSolarTables_WeaponSkin : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponSkin>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponSkin
// Struct Size::0x0080
struct FSolarTablesData_WeaponSkin : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       WeaponSkinType;                                               // 0x0014(0x0004)
    FString                                       WeaponSkillQuality;                                           // 0x0018(0x0010)
    int32_t                                       SortId;                                                       // 0x0028(0x0004)
    int32_t                                       weaponid;                                                     // 0x002C(0x0004)
    FString                                       WeaponSkinResource;                                           // 0x0030(0x0010)
    int32_t                                       WeaponSkinAquiredThru;                                        // 0x0040(0x0004)
    int32_t                                       JumpPage;                                                     // 0x0044(0x0004)
    FString                                       KillBroadcast;                                                // 0x0048(0x0010)
    int32_t                                       ShopPropertyid;                                               // 0x0058(0x0004)
    int32_t                                       ItemID;                                                       // 0x005C(0x0004)
    bool                                          DisplayInWeaponry;                                            // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
    FString                                       ChunkDir;                                                     // 0x0068(0x0010)
    int32_t                                       ChunkID;                                                      // 0x0078(0x0004)
    int32_t                                       AIRandomWeight;                                               // 0x007C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponQuality
// Struct Size::0x0060
struct FSolarTables_WeaponQuality : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponQuality>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponQuality
// Struct Size::0x0018
struct FSolarTablesData_WeaponQuality : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Quality;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponProficiency
// Struct Size::0x0060
struct FSolarTables_WeaponProficiency : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponProficiency>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponProficiency
// Struct Size::0x0018
struct FSolarTablesData_WeaponProficiency : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       WeaponProficiencyExp;                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponParts
// Struct Size::0x0060
struct FSolarTables_WeaponParts : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponParts>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponParts
// Struct Size::0x0098
struct FSolarTablesData_WeaponParts : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       WeaponLevel;                                                  // 0x0014(0x0004)
    enum class ESolarTablesEnum_PartsType         PartsType;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       PartsQuality;                                                 // 0x001C(0x0004)
    TArray<FString>                               WeaponAttributeEffectID;                                      // 0x0020(0x0010)
    TArray<int32_t>                               PartsWeaponID;                                                // 0x0030(0x0010)
    int32_t                                       PartsName;                                                    // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FString>                               PartsDesc;                                                    // 0x0048(0x0010)
    FString                                       PartsBPResource;                                              // 0x0058(0x0010)
    FString                                       PartsIcon;                                                    // 0x0068(0x0010)
    int32_t                                       WeaponPartDamage;                                             // 0x0078(0x0004)
    int32_t                                       WeaponPartRateOfFire;                                         // 0x007C(0x0004)
    int32_t                                       WeaponPartRecoil;                                             // 0x0080(0x0004)
    int32_t                                       WeaponPartSpread;                                             // 0x0084(0x0004)
    int32_t                                       WeaponPartRange;                                              // 0x0088(0x0004)
    int32_t                                       WeaponPartMobility;                                           // 0x008C(0x0004)
    int32_t                                       ItemID;                                                       // 0x0090(0x0004)
    char                                          pa_0094[0x0004]                                               // 0x0094(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponLevelReward
// Struct Size::0x0060
struct FSolarTables_WeaponLevelReward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponLevelReward>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponLevelReward
// Struct Size::0x0028
struct FSolarTablesData_WeaponLevelReward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       weaponid;                                                     // 0x0014(0x0004)
    int32_t                                       WeaponLevel;                                                  // 0x0018(0x0004)
    int32_t                                       LockItemType;                                                 // 0x001C(0x0004)
    int32_t                                       CorrespondingID;                                              // 0x0020(0x0004)
    int32_t                                       WeaponWorldView;                                              // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponKillTip
// Struct Size::0x0060
struct FSolarTables_WeaponKillTip : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponKillTip>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponKillTip
// Struct Size::0x0038
struct FSolarTablesData_WeaponKillTip : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       KillTipType;                                                  // 0x0014(0x0004)
    int32_t                                       KillTipValue;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       KillTipIcon;                                                  // 0x0020(0x0010)
    FSolarTablesLocalText                         KillTipname;                                                  // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponDefault
// Struct Size::0x0060
struct FSolarTables_WeaponDefault : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponDefault>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponDefault
// Struct Size::0x0090
struct FSolarTablesData_WeaponDefault : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_AccessoryType     AccessoryType1;                                               // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    TArray<int32_t>                               SlotSubtype1;                                                 // 0x0018(0x0010)
    int32_t                                       AccessoryID1;                                                 // 0x0028(0x0004)
    enum class ESolarTablesEnum_AccessoryType     AccessoryType2;                                               // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    TArray<int32_t>                               SlotSubtype2;                                                 // 0x0030(0x0010)
    int32_t                                       AccessoryID2;                                                 // 0x0040(0x0004)
    enum class ESolarTablesEnum_AccessoryType     AccessoryType3;                                               // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    TArray<int32_t>                               SlotSubtype3;                                                 // 0x0048(0x0010)
    int32_t                                       AccessoryID3;                                                 // 0x0058(0x0004)
    enum class ESolarTablesEnum_AccessoryType     AccessoryType4;                                               // 0x005C(0x0001)
    char                                          pa_005D[0x0003]                                               // 0x005D(0x0003)
    TArray<int32_t>                               SlotSubtype4;                                                 // 0x0060(0x0010)
    int32_t                                       AccessoryID4;                                                 // 0x0070(0x0004)
    enum class ESolarTablesEnum_AccessoryType     AccessoryType5;                                               // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    TArray<int32_t>                               SlotSubtype5;                                                 // 0x0078(0x0010)
    int32_t                                       AccessoryID5;                                                 // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponBattleUpgrade
// Struct Size::0x0060
struct FSolarTables_WeaponBattleUpgrade : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponBattleUpgrade>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponBattleUpgrade
// Struct Size::0x0020
struct FSolarTablesData_WeaponBattleUpgrade : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Exp;                                                          // 0x0014(0x0004)
    int32_t                                       Retrofit;                                                     // 0x0018(0x0004)
    int32_t                                       UpgradeCost;                                                  // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponAmmo
// Struct Size::0x0060
struct FSolarTables_WeaponAmmo : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponAmmo>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponAmmo
// Struct Size::0x00B0
struct FSolarTablesData_WeaponAmmo : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       AmmoType;                                                     // 0x0014(0x0004)
    int32_t                                       PropId;                                                       // 0x0018(0x0004)
    int32_t                                       SoundID;                                                      // 0x001C(0x0004)
    bool                                          IfTimedExplode;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       BounceTimes;                                                  // 0x0024(0x0004)
    float                                         LifeTime;                                                     // 0x0028(0x0004)
    float                                         BaseReloadTime;                                               // 0x002C(0x0004)
    float                                         ReloadBoltTime;                                               // 0x0030(0x0004)
    enum class ESolarTablesEnum_FireMethodType    FireMethodType;                                               // 0x0034(0x0001)
    enum class ESolarTablesEnum_TrajectoryType    TrajectoryType;                                               // 0x0035(0x0001)
    char                                          pa_0036[0x0002]                                               // 0x0036(0x0002)
    float                                         CustomValue;                                                  // 0x0038(0x0004)
    enum class ESolarTablesEnum_TriggerType       TriggerType;                                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
    float                                         MaxRange;                                                     // 0x0040(0x0004)
    float                                         EffRange;                                                     // 0x0044(0x0004)
    float                                         ProjectileMaxGravity;                                         // 0x0048(0x0004)
    float                                         DamageMaxRange;                                               // 0x004C(0x0004)
    float                                         DamageEffRange;                                               // 0x0050(0x0004)
    float                                         Radius;                                                       // 0x0054(0x0004)
    float                                         PostFireOverload;                                             // 0x0058(0x0004)
    float                                         InitSpeed;                                                    // 0x005C(0x0004)
    float                                         FireStreakBreakTime;                                          // 0x0060(0x0004)
    enum class ESolarTablesEnum_FireCostType      FireCostType;                                                 // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    int32_t                                       FireCostPerAttack;                                            // 0x0068(0x0004)
    int32_t                                       FireSpeedChangeTime;                                          // 0x006C(0x0004)
    float                                         FireSpeedChangeCOP;                                           // 0x0070(0x0004)
    float                                         FireIntervalRevertPreTime;                                    // 0x0074(0x0004)
    float                                         FireIntervalReavertSpeed;                                     // 0x0078(0x0004)
    float                                         FastestFireInterval;                                          // 0x007C(0x0004)
    float                                         SlowestFireInterval;                                          // 0x0080(0x0004)
    float                                         BaseFireInterval;                                             // 0x0084(0x0004)
    float                                         BoltActionTime;                                               // 0x0088(0x0004)
    float                                         BurstShootInterval;                                           // 0x008C(0x0004)
    float                                         BurstFireInterval;                                            // 0x0090(0x0004)
    float                                         StartBoltDuration;                                            // 0x0094(0x0004)
    bool                                          UseBag;                                                       // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    float                                         SpreadFirePreTime;                                            // 0x009C(0x0004)
    float                                         SpreadPostFireSpeed;                                          // 0x00A0(0x0004)
    float                                         SpreadRestorePreTime;                                         // 0x00A4(0x0004)
    float                                         SpreadRestoreSpeed;                                           // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Weapon
// Struct Size::0x0060
struct FSolarTables_Weapon : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Weapon>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Weapon
// Struct Size::0x01A0
struct FSolarTablesData_Weapon : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    enum class ESolarTablesEnum_WeaponType        WeaponType;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       WeaponBrand;                                                  // 0x001C(0x0004)
    bool                                          SupportSecondaryAmmo;                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<int32_t>                               AccessoryID;                                                  // 0x0028(0x0010)
    FString                                       WeaponIcon;                                                   // 0x0038(0x0010)
    bool                                          Single;                                                       // 0x0048(0x0001)
    bool                                          Burst;                                                        // 0x0049(0x0001)
    bool                                          Automatic;                                                    // 0x004A(0x0001)
    bool                                          OneKeyScope;                                                  // 0x004B(0x0001)
    float                                         HitHead;                                                      // 0x004C(0x0004)
    int32_t                                       SecModeLimitTypeID;                                           // 0x0050(0x0004)
    int32_t                                       BurstMaxCount;                                                // 0x0054(0x0004)
    FString                                       WeaponDamage;                                                 // 0x0058(0x0010)
    float                                         MaxSpread;                                                    // 0x0068(0x0004)
    float                                         MinSpread;                                                    // 0x006C(0x0004)
    float                                         HipFireBaseSpread;                                            // 0x0070(0x0004)
    float                                         VhADSBaseSpread;                                              // 0x0074(0x0004)
    float                                         ADSBaseSpread;                                                // 0x0078(0x0004)
    float                                         SpreadStatuSpeed;                                             // 0x007C(0x0004)
    float                                         SpreadStatuIncreaseID;                                        // 0x0080(0x0004)
    float                                         SpreadStatuReduceID;                                          // 0x0084(0x0004)
    int32_t                                       SpreadCOPID;                                                  // 0x0088(0x0004)
    int32_t                                       PrimaryAmmo;                                                  // 0x008C(0x0004)
    int32_t                                       PrimaryAmmoCap;                                               // 0x0090(0x0004)
    int32_t                                       SecondaryAmmo;                                                // 0x0094(0x0004)
    int32_t                                       SecondaryAmmoCap;                                             // 0x0098(0x0004)
    bool                                          CanOverload;                                                  // 0x009C(0x0001)
    char                                          pa_009D[0x0003]                                               // 0x009D(0x0003)
    float                                         OverloadMaxValue;                                             // 0x00A0(0x0004)
    float                                         NormalOverloadCoolingRate;                                    // 0x00A4(0x0004)
    float                                         OverloadCoolingPeriod;                                        // 0x00A8(0x0004)
    float                                         OverloadWarningRate;                                          // 0x00AC(0x0004)
    bool                                          CanAutoFire;                                                  // 0x00B0(0x0001)
    char                                          pa_00B1[0x0003]                                               // 0x00B1(0x0003)
    float                                         AutoFireDelayMs;                                              // 0x00B4(0x0004)
    float                                         AutoFireEndDelayMs;                                           // 0x00B8(0x0004)
    bool                                          CanAimAssist;                                                 // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         Weight;                                                       // 0x00C0(0x0004)
    float                                         HipFireSpeed;                                                 // 0x00C4(0x0004)
    float                                         ADSFireSpeed;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    TArray<int32_t>                               DefaultParts;                                                 // 0x00D0(0x0010)
    float                                         ScopeOpenTime;                                                // 0x00E0(0x0004)
    float                                         FovFactor;                                                    // 0x00E4(0x0004)
    float                                         WeaponSwitchTime;                                             // 0x00E8(0x0004)
    float                                         WeaponUnequipTime;                                            // 0x00EC(0x0004)
    TArray<int32_t>                               PartSlots;                                                    // 0x00F0(0x0010)
    TMap<FString,FString>                         EquipAttributeSub;                                            // 0x0100(0x0050)
    TMap<FString,FString>                         HoldAttributeSub;                                             // 0x0150(0x0050)
};


// ScriptStruct  Solarland.SolarTables_WeaponDamage
// Struct Size::0x0060
struct FSolarTables_WeaponDamage : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponDamage>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponDamage
// Struct Size::0x0020
struct FSolarTablesData_WeaponDamage : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         NpcDamageFactor;                                              // 0x0014(0x0004)
    float                                         BotDamageFactor;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WarmGameSkip
// Struct Size::0x0060
struct FSolarTables_WarmGameSkip : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WarmGameSkip>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WarmGameSkip
// Struct Size::0x0070
struct FSolarTablesData_WarmGameSkip : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       GameGroupID;                                                  // 0x0014(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0018(0x0004)
    int32_t                                       WarmType;                                                     // 0x001C(0x0004)
    FString                                       FromSubType;                                                  // 0x0020(0x0010)
    FString                                       ToSubType;                                                    // 0x0030(0x0010)
    FString                                       Abid;                                                         // 0x0040(0x0010)
    FString                                       Skip;                                                         // 0x0050(0x0010)
    FString                                       EloSet;                                                       // 0x0060(0x0010)
};


// ScriptStruct  Solarland.SolarTables_WarmGameMode
// Struct Size::0x0060
struct FSolarTables_WarmGameMode : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WarmGameMode>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WarmGameMode
// Struct Size::0x0078
struct FSolarTablesData_WarmGameMode : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       UniqueId;                                                     // 0x0014(0x0004)
    int32_t                                       CCUStart;                                                     // 0x0018(0x0004)
    int32_t                                       CCUEnd;                                                       // 0x001C(0x0004)
    int32_t                                       NumOfAI;                                                      // 0x0020(0x0004)
    int32_t                                       AiLevel;                                                      // 0x0024(0x0004)
    FString                                       AILevelConfig;                                                // 0x0028(0x0010)
    int32_t                                       AITeamPresetsID;                                              // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               AIDifficultLevelModifyRanges;                                 // 0x0040(0x0010)
    bool                                          EnableTeamManager;                                            // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    int32_t                                       MinPlayer;                                                    // 0x0054(0x0004)
    int32_t                                       MaxRealGroup;                                                 // 0x0058(0x0004)
    int32_t                                       LeastRealPlayer;                                              // 0x005C(0x0004)
    int32_t                                       MaxWait;                                                      // 0x0060(0x0004)
    bool                                          HasMonster;                                                   // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    int32_t                                       ReadyStateTime;                                               // 0x0068(0x0004)
    int32_t                                       StopMatchTime;                                                // 0x006C(0x0004)
    bool                                          HasAITeammate;                                                // 0x0070(0x0001)
    bool                                          AIAccompany;                                                  // 0x0071(0x0001)
    char                                          pa_0072[0x0002]                                               // 0x0072(0x0002)
    int32_t                                       AIAccompanyTimeline;                                          // 0x0074(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WarmGame
// Struct Size::0x0060
struct FSolarTables_WarmGame : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WarmGame>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WarmGame
// Struct Size::0x0080
struct FSolarTablesData_WarmGame : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       WarmType;                                                     // 0x0014(0x0004)
    int32_t                                       GameRuleGroupID;                                              // 0x0018(0x0004)
    int32_t                                       MatchType;                                                    // 0x001C(0x0004)
    int32_t                                       EloStart;                                                     // 0x0020(0x0004)
    int32_t                                       EloEnd;                                                       // 0x0024(0x0004)
    int32_t                                       NumStart;                                                     // 0x0028(0x0004)
    int32_t                                       NumEnd;                                                       // 0x002C(0x0004)
    int32_t                                       KillStart;                                                    // 0x0030(0x0004)
    int32_t                                       KillEnd;                                                      // 0x0034(0x0004)
    FString                                       WarmSubType;                                                  // 0x0038(0x0010)
    int32_t                                       UniqueId;                                                     // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       Abid;                                                         // 0x0050(0x0010)
    FString                                       WarmGameFillCheckBox;                                         // 0x0060(0x0010)
    FString                                       WarmGameFillTeammate;                                         // 0x0070(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Warehouse
// Struct Size::0x0060
struct FSolarTables_Warehouse : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Warehouse>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Warehouse
// Struct Size::0x0018
struct FSolarTablesData_Warehouse : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_VipSignAward
// Struct Size::0x0060
struct FSolarTables_VipSignAward : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VipSignAward>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VipSignAward
// Struct Size::0x0048
struct FSolarTablesData_VipSignAward : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       VipID;                                                        // 0x0014(0x0004)
    int32_t                                       Day;                                                          // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               AwardItem;                                                    // 0x0020(0x0010)
    TArray<int32_t>                               SignItem;                                                     // 0x0030(0x0010)
    int32_t                                       RefundDiaNum;                                                 // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Vipcard
// Struct Size::0x0060
struct FSolarTables_Vipcard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Vipcard>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Vipcard
// Struct Size::0x0060
struct FSolarTablesData_Vipcard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         VipName;                                                      // 0x0014(0x0004)
    int32_t                                       EffectiveDate;                                                // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int32_t>                               ChargeId;                                                     // 0x0020(0x0010)
    int32_t                                       DefaultDia;                                                   // 0x0030(0x0004)
    int32_t                                       SubExtraDia;                                                  // 0x0034(0x0004)
    int32_t                                       MoreReward;                                                   // 0x0038(0x0004)
    int32_t                                       ReturnNum;                                                    // 0x003C(0x0004)
    FString                                       TxtColor;                                                     // 0x0040(0x0010)
    TArray<int32_t>                               ShowItem;                                                     // 0x0050(0x0010)
};


// ScriptStruct  Solarland.SolarTables_VehicleSpawnGroup
// Struct Size::0x0060
struct FSolarTables_VehicleSpawnGroup : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VehicleSpawnGroup>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VehicleSpawnGroup
// Struct Size::0x0098
struct FSolarTablesData_VehicleSpawnGroup : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               VehicleIDs;                                                   // 0x0018(0x0010)
    TArray<int32_t>                               VehicleCounts;                                                // 0x0028(0x0010)
    TArray<int32_t>                               VehicleSum;                                                   // 0x0038(0x0010)
    FString                                       VehicleWeightSet;                                             // 0x0048(0x0010)
    TArray<int32_t>                               AlternateId;                                                  // 0x0058(0x0010)
    FString                                       AlternateType;                                                // 0x0068(0x0010)
    FString                                       AlternateTime;                                                // 0x0078(0x0010)
    FString                                       AlternateDate;                                                // 0x0088(0x0010)
};


// ScriptStruct  Solarland.SolarTables_VehicleSpawn
// Struct Size::0x0060
struct FSolarTables_VehicleSpawn : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VehicleSpawn>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VehicleSpawn
// Struct Size::0x0038
struct FSolarTablesData_VehicleSpawn : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               VehicleSet;                                                   // 0x0018(0x0010)
    TArray<int32_t>                               WeightSet;                                                    // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_VehicleType
// Struct Size::0x0060
struct FSolarTables_VehicleType : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VehicleType>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VehicleType
// Struct Size::0x0110
struct FSolarTablesData_VehicleType : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       DefaultId;                                                    // 0x0014(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       VehicleIcon;                                                  // 0x0020(0x0010)
    FString                                       AudioEventName;                                               // 0x0030(0x0010)
    int32_t                                       VehicleClass;                                                 // 0x0040(0x0004)
    float                                         LobbyDurability;                                              // 0x0044(0x0004)
    float                                         LobbySpeed;                                                   // 0x0048(0x0004)
    float                                         LobbyFirepower;                                               // 0x004C(0x0004)
    float                                         LobbyControl;                                                 // 0x0050(0x0004)
    int32_t                                       SeatNum;                                                      // 0x0054(0x0004)
    TArray<int32_t>                               Seat1WeaponID;                                                // 0x0058(0x0010)
    TArray<int32_t>                               Seat2WeaponID;                                                // 0x0068(0x0010)
    TArray<int32_t>                               Seat3WeaponID;                                                // 0x0078(0x0010)
    TArray<int32_t>                               Seat4WeaponID;                                                // 0x0088(0x0010)
    TArray<int32_t>                               Seat1SkillID;                                                 // 0x0098(0x0010)
    TArray<int32_t>                               Seat2SkillID;                                                 // 0x00A8(0x0010)
    TArray<int32_t>                               Seat3SkillID;                                                 // 0x00B8(0x0010)
    TArray<int32_t>                               Seat4SkillID;                                                 // 0x00C8(0x0010)
    FString                                       VehicleLink;                                                  // 0x00D8(0x0010)
    FString                                       SilhouetteIcon;                                               // 0x00E8(0x0010)
    FString                                       MarkTextureResName;                                           // 0x00F8(0x0010)
    int32_t                                       MarkTextureResIndex;                                          // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_VehicleSkin
// Struct Size::0x0060
struct FSolarTables_VehicleSkin : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VehicleSkin>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VehicleSkin
// Struct Size::0x0090
struct FSolarTablesData_VehicleSkin : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       VehicleTypeID;                                                // 0x0014(0x0004)
    int32_t                                       ItemID;                                                       // 0x0018(0x0004)
    FSolarTablesLocalText                         SkinName;                                                     // 0x001C(0x0004)
    bool                                          IfShow;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FString                                       BeginTime;                                                    // 0x0028(0x0010)
    TArray<int32_t>                               JumpLink;                                                     // 0x0038(0x0010)
    FString                                       VehicleSkinBPPath;                                            // 0x0048(0x0010)
    FString                                       VehiclePreviewBP;                                             // 0x0058(0x0010)
    FString                                       VehicleIcon;                                                  // 0x0068(0x0010)
    FString                                       VehicleSound;                                                 // 0x0078(0x0010)
    int32_t                                       AIRandomWeight;                                               // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_VehicleLobbySkill
// Struct Size::0x0060
struct FSolarTables_VehicleLobbySkill : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VehicleLobbySkill>Data;                                                       // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VehicleLobbySkill
// Struct Size::0x0030
struct FSolarTablesData_VehicleLobbySkill : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       SkillIcon;                                                    // 0x0018(0x0010)
    FSolarTablesLocalText                         SkillName;                                                    // 0x0028(0x0004)
    FSolarTablesLocalText                         SkillDes;                                                     // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Vehicle
// Struct Size::0x0060
struct FSolarTables_Vehicle : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Vehicle>        Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Vehicle
// Struct Size::0x0030
struct FSolarTablesData_Vehicle : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       VehicleBP;                                                    // 0x0018(0x0010)
    int32_t                                       groupid;                                                      // 0x0028(0x0004)
    int32_t                                       VehicleTypeID;                                                // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Variables
// Struct Size::0x0060
struct FSolarTables_Variables : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_Variables>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Variables
// Struct Size::0x0030
struct FSolarTablesData_Variables : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       Value;                                                        // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_UICustomRecord
// Struct Size::0x0060
struct FSolarTables_UICustomRecord : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_UICustomRecord> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_UICustomRecord
// Struct Size::0x0038
struct FSolarTablesData_UICustomRecord : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       EventName;                                                    // 0x0018(0x0010)
    FString                                       UILayout;                                                     // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_Triger
// Struct Size::0x0060
struct FSolarTables_Triger : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Triger>         Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Triger
// Struct Size::0x0040
struct FSolarTablesData_Triger : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    enum class ESolarTablesEnum_TrigerType        TrigerType;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FString                                       para1;                                                        // 0x0018(0x0010)
    FString                                       para2;                                                        // 0x0028(0x0010)
    int32_t                                       IfRepeat;                                                     // 0x0038(0x0004)
    int32_t                                       ColdDown;                                                     // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Translation
// Struct Size::0x0060
struct FSolarTables_Translation : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Translation>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Translation
// Struct Size::0x0018
struct FSolarTablesData_Translation : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Text;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TournamentMemberFactor
// Struct Size::0x0060
struct FSolarTables_TournamentMemberFactor : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TournamentMemberFactor>Data;                                                  // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TournamentMemberFactor
// Struct Size::0x0018
struct FSolarTablesData_TournamentMemberFactor : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         MemberFactor;                                                 // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TournamentActivityRankScore
// Struct Size::0x0060
struct FSolarTables_TournamentActivityRankScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TournamentActivityRankScore>Data;                                             // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TournamentActivityRankScore
// Struct Size::0x0020
struct FSolarTablesData_TournamentActivityRankScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       PersonalRankScore1;                                           // 0x0014(0x0004)
    int32_t                                       PersonalRankScore2;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TournamentActivityFormula
// Struct Size::0x0060
struct FSolarTables_TournamentActivityFormula : public FSolarTablesDataBase
{
    TMap<FString,FSolarTablesData_TournamentActivityFormula>Data;                                               // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TournamentActivityFormula
// Struct Size::0x0030
struct FSolarTablesData_TournamentActivityFormula : public FSolarTablesDataBase
{
    FString                                       ID;                                                           // 0x0010(0x0010)
    FString                                       Value;                                                        // 0x0020(0x0010)
};


// ScriptStruct  Solarland.SolarTables_TopUPCharge
// Struct Size::0x0060
struct FSolarTables_TopUPCharge : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TopUPCharge>    Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TopUPCharge
// Struct Size::0x0018
struct FSolarTablesData_TopUPCharge : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       UsNum;                                                        // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TopUP
// Struct Size::0x0060
struct FSolarTables_TopUP : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TopUP>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TopUP
// Struct Size::0x0060
struct FSolarTablesData_TopUP : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               Reward;                                                       // 0x0018(0x0010)
    FString                                       RewardPic;                                                    // 0x0028(0x0010)
    FString                                       RewardPicPath;                                                // 0x0038(0x0010)
    int32_t                                       RewardType;                                                   // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<int32_t>                               Link;                                                         // 0x0050(0x0010)
};


// ScriptStruct  Solarland.SolarTables_TaskSystem
// Struct Size::0x0060
struct FSolarTables_TaskSystem : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TaskSystem>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TaskSystem
// Struct Size::0x00C0
struct FSolarTablesData_TaskSystem : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       Task;                                                         // 0x0014(0x0004)
    int32_t                                       TaskType;                                                     // 0x0018(0x0004)
    int32_t                                       taskDesc;                                                     // 0x001C(0x0004)
    FString                                       cond1_sheet;                                                  // 0x0020(0x0010)
    int32_t                                       cond1;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    FString                                       cond2_sheet;                                                  // 0x0038(0x0010)
    int32_t                                       cond2;                                                        // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FString                                       cond3_sheet;                                                  // 0x0050(0x0010)
    int32_t                                       cond3;                                                        // 0x0060(0x0004)
    int32_t                                       Target;                                                       // 0x0064(0x0004)
    TArray<int32_t>                               Item;                                                         // 0x0068(0x0010)
    int32_t                                       MinLevel;                                                     // 0x0078(0x0004)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
    TArray<int32_t>                               Link;                                                         // 0x0080(0x0010)
    int32_t                                       Weight;                                                       // 0x0090(0x0004)
    int32_t                                       Sort;                                                         // 0x0094(0x0004)
    bool                                          Progress;                                                     // 0x0098(0x0001)
    bool                                          isCircle;                                                     // 0x0099(0x0001)
    char                                          pa_009A[0x0002]                                               // 0x009A(0x0002)
    int32_t                                       circleTimes;                                                  // 0x009C(0x0004)
    int32_t                                       resetType;                                                    // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    TArray<int32_t>                               taskTips;                                                     // 0x00A8(0x0010)
    bool                                          isMainTask;                                                   // 0x00B8(0x0001)
    char                                          pa_00B9[0x0003]                                               // 0x00B9(0x0003)
    int32_t                                       mainTaskId;                                                   // 0x00BC(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TaskProgress
// Struct Size::0x0060
struct FSolarTables_TaskProgress : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TaskProgress>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TaskProgress
// Struct Size::0x0018
struct FSolarTablesData_TaskProgress : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       isRefresh;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponType
// Struct Size::0x0060
struct FSolarTables_WeaponType : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponType>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponType
// Struct Size::0x0018
struct FSolarTablesData_WeaponType : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TargetCategory
// Struct Size::0x0060
struct FSolarTables_TargetCategory : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TargetCategory> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TargetCategory
// Struct Size::0x0020
struct FSolarTablesData_TargetCategory : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    int32_t                                       TabList;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponWall
// Struct Size::0x0060
struct FSolarTables_WeaponWall : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponWall>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponWall
// Struct Size::0x0018
struct FSolarTablesData_WeaponWall : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       OutcomeID;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTables_VictimCameras
// Struct Size::0x0060
struct FSolarTables_VictimCameras : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VictimCameras>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VictimCameras
// Struct Size::0x0038
struct FSolarTablesData_VictimCameras : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       FOV;                                                          // 0x0014(0x0004)
    int32_t                                       Distance;                                                     // 0x0018(0x0004)
    int32_t                                       Pitch;                                                        // 0x001C(0x0004)
    float                                         BlendAlpha;                                                   // 0x0020(0x0004)
    float                                         AngularSpeed;                                                 // 0x0024(0x0004)
    FString                                       TargetSocket;                                                 // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_VODownload
// Struct Size::0x0060
struct FSolarTables_VODownload : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VODownload>     Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VODownload
// Struct Size::0x0058
struct FSolarTablesData_VODownload : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       ChunkDir;                                                     // 0x0018(0x0010)
    int32_t                                       ChunkID;                                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FString                                       ButtonText;                                                   // 0x0030(0x0010)
    int32_t                                       LanguageIndex;                                                // 0x0040(0x0004)
    bool                                          IsDefaultChunk;                                               // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    FString                                       WwiseLanguageCode;                                            // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SolarTables_TeamScore
// Struct Size::0x0060
struct FSolarTables_TeamScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TeamScore>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TeamScore
// Struct Size::0x0028
struct FSolarTablesData_TeamScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       FitstPlayer;                                                  // 0x0014(0x0004)
    int32_t                                       SecondPlayer;                                                 // 0x0018(0x0004)
    int32_t                                       ThirdPlayer;                                                  // 0x001C(0x0004)
    int32_t                                       FourthPlayer;                                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WinningScore
// Struct Size::0x0060
struct FSolarTables_WinningScore : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WinningScore>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WinningScore
// Struct Size::0x0030
struct FSolarTablesData_WinningScore : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       MatchRuleID;                                                  // 0x0014(0x0004)
    int32_t                                       Frequency;                                                    // 0x0018(0x0004)
    int32_t                                       RankStart;                                                    // 0x001C(0x0004)
    int32_t                                       RankEnd;                                                      // 0x0020(0x0004)
    int32_t                                       CorrectionValue;                                              // 0x0024(0x0004)
    FSolarTablesLocalText                         Tipsforadd;                                                   // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponSkinProperty
// Struct Size::0x0060
struct FSolarTables_WeaponSkinProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponSkinProperty>Data;                                                      // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponSkinProperty
// Struct Size::0x0078
struct FSolarTablesData_WeaponSkinProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       WeaponSkinID;                                                 // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       WeaponIcon_M;                                                 // 0x0060(0x0010)
    int32_t                                       Skin2WeaponID;                                                // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponSkinCard
// Struct Size::0x0060
struct FSolarTables_WeaponSkinCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponSkinCard> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponSkinCard
// Struct Size::0x0060
struct FSolarTablesData_WeaponSkinCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       WeaponSkinID;                                                 // 0x0058(0x0004)
    int32_t                                       LimitTime;                                                    // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponExpDoubleCard
// Struct Size::0x0060
struct FSolarTables_WeaponExpDoubleCard : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponExpDoubleCard>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponExpDoubleCard
// Struct Size::0x0068
struct FSolarTablesData_WeaponExpDoubleCard : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       MulExp;                                                       // 0x0058(0x0004)
    int32_t                                       UseType;                                                      // 0x005C(0x0004)
    int32_t                                       LimitTime;                                                    // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponExp
// Struct Size::0x0060
struct FSolarTables_WeaponExp : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponExp>      Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponExp
// Struct Size::0x0060
struct FSolarTablesData_WeaponExp : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       WeaponExpValue;                                               // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_Voice
// Struct Size::0x0060
struct FSolarTables_Voice : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_Voice>          Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_Voice
// Struct Size::0x0068
struct FSolarTablesData_Voice : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       Type;                                                         // 0x0058(0x0004)
    int32_t                                       VoiceID;                                                      // 0x005C(0x0004)
    int32_t                                       CharacterId;                                                  // 0x0060(0x0004)
    bool                                          IfBotUse;                                                     // 0x0064(0x0001)
    bool                                          IfDefault;                                                    // 0x0065(0x0001)
    bool                                          IfDefaultEquip;                                               // 0x0066(0x0001)
    char                                          pa_0067[0x0001]                                               // 0x0067(0x0001)
};


// ScriptStruct  Solarland.SolarTables_VehicleSkinProperty
// Struct Size::0x0060
struct FSolarTables_VehicleSkinProperty : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_VehicleSkinProperty>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_VehicleSkinProperty
// Struct Size::0x0080
struct FSolarTablesData_VehicleSkinProperty : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FString                                       Icon;                                                         // 0x0018(0x0010)
    FSolarTablesLocalText                         Info;                                                         // 0x0028(0x0004)
    int32_t                                       Quality;                                                      // 0x002C(0x0004)
    int32_t                                       ItemClass;                                                    // 0x0030(0x0004)
    int32_t                                       ItemType;                                                     // 0x0034(0x0004)
    bool                                          ShowInStorage;                                                // 0x0038(0x0001)
    bool                                          IfUse;                                                        // 0x0039(0x0001)
    bool                                          IfRecycle;                                                    // 0x003A(0x0001)
    enum class ESolarTablesEnum_StackType         StackType;                                                    // 0x003B(0x0001)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    TArray<int32_t>                               JumpLink;                                                     // 0x0040(0x0010)
    FDateTime                                     AIUseTime;                                                    // 0x0050(0x0008)
    int32_t                                       VehicleSkinId;                                                // 0x0058(0x0004)
    int32_t                                       VehicleSkinAquiredThre;                                       // 0x005C(0x0004)
    int32_t                                       JumpPage;                                                     // 0x0060(0x0004)
    char                                          pa_0064[0x0004]                                               // 0x0064(0x0004)
    FString                                       KillBroadcast;                                                // 0x0068(0x0010)
    bool                                          DisplayInVehiclery;                                           // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    int32_t                                       Skin2VehicleID;                                               // 0x007C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_UnitCharacter
// Struct Size::0x0060
struct FSolarTables_UnitCharacter : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_UnitCharacter>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_UnitCharacter
// Struct Size::0x0198
struct FSolarTablesData_UnitCharacter : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    FSolarTablesLocalText                         Name;                                                         // 0x0014(0x0004)
    FSolarTablesLocalText                         name_extra;                                                   // 0x0018(0x0004)
    FSolarTablesLocalText                         Info;                                                         // 0x001C(0x0004)
    int32_t                                       Gender;                                                       // 0x0020(0x0004)
    int32_t                                       Body;                                                         // 0x0024(0x0004)
    enum class ESolarTablesEnum_CharacterType     CharacterType;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FString                                       ClassTypeIcon;                                                // 0x0030(0x0010)
    FSolarTablesLocalText                         ClassTypeInfo;                                                // 0x0040(0x0004)
    bool                                          defaultChara;                                                 // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    int32_t                                       defaultSkin;                                                  // 0x0048(0x0004)
    int32_t                                       defaultPose;                                                  // 0x004C(0x0004)
    int32_t                                       defaultBackground;                                            // 0x0050(0x0004)
    bool                                          usableChara;                                                  // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
    FString                                       CharacterProtrait;                                            // 0x0058(0x0010)
    FString                                       UrlName;                                                      // 0x0068(0x0010)
    TMap<FString,FString>                         CharacterAttributesID;                                        // 0x0078(0x0050)
    float                                         MaxNormalHP;                                                  // 0x00C8(0x0004)
    int32_t                                       defaultArmor;                                                 // 0x00CC(0x0004)
    int32_t                                       defaultShield;                                                // 0x00D0(0x0004)
    int32_t                                       defaultJetPackModule;                                         // 0x00D4(0x0004)
    FString                                       BasicItemMax;                                                 // 0x00D8(0x0010)
    float                                         InitialSolarCharge;                                           // 0x00E8(0x0004)
    float                                         RechargeFrequencyFromSky;                                     // 0x00EC(0x0004)
    float                                         RechargeFrequencyFromDeathBox;                                // 0x00F0(0x0004)
    float                                         RechargeFrequencyFromPile;                                    // 0x00F4(0x0004)
    float                                         RechargeQuantityFromSky;                                      // 0x00F8(0x0004)
    float                                         RechargeQuantityFromDeathBox;                                 // 0x00FC(0x0004)
    float                                         RechargeQuantityFromPile;                                     // 0x0100(0x0004)
    float                                         InitialEnergyLimit;                                           // 0x0104(0x0004)
    float                                         InitialExtraEnergyLimit;                                      // 0x0108(0x0004)
    float                                         InitialExtraEnergyCharge;                                     // 0x010C(0x0004)
    float                                         InitialChargeCD;                                              // 0x0110(0x0004)
    int32_t                                       ExpID;                                                        // 0x0114(0x0004)
    float                                         ExpBonus;                                                     // 0x0118(0x0004)
    int32_t                                       CharaGiftID;                                                  // 0x011C(0x0004)
    FString                                       CharacterIngameBP;                                            // 0x0120(0x0010)
    FString                                       AnimBPResPath;                                                // 0x0130(0x0010)
    int32_t                                       StandJogSpeed;                                                // 0x0140(0x0004)
    int32_t                                       StandRunSpeed;                                                // 0x0144(0x0004)
    int32_t                                       StandSprintSpeed;                                             // 0x0148(0x0004)
    int32_t                                       CrouchJogSpeed;                                               // 0x014C(0x0004)
    int32_t                                       CrouchRunSpeed;                                               // 0x0150(0x0004)
    int32_t                                       CrouchSprintSpeed;                                            // 0x0154(0x0004)
    int32_t                                       ItemID;                                                       // 0x0158(0x0004)
    float                                         BackpackScale;                                                // 0x015C(0x0004)
    int32_t                                       CharacterSize;                                                // 0x0160(0x0004)
    int32_t                                       BotConfigId;                                                  // 0x0164(0x0004)
    int32_t                                       CharacterSort;                                                // 0x0168(0x0004)
    int32_t                                       CharacterTag1;                                                // 0x016C(0x0004)
    int32_t                                       CharacterTag2;                                                // 0x0170(0x0004)
    int32_t                                       HeroPickSortOrder;                                            // 0x0174(0x0004)
    int32_t                                       HeroPickSortOrderB;                                           // 0x0178(0x0004)
    float                                         Damage;                                                       // 0x017C(0x0004)
    float                                         Mobility;                                                     // 0x0180(0x0004)
    float                                         Support;                                                      // 0x0184(0x0004)
    float                                         Investigate;                                                  // 0x0188(0x0004)
    float                                         Control;                                                      // 0x018C(0x0004)
    float                                         Survival;                                                     // 0x0190(0x0004)
    char                                          pa_0194[0x0004]                                               // 0x0194(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ZomMStrengthSetting
// Struct Size::0x0060
struct FSolarTables_ZomMStrengthSetting : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ZomMStrengthSetting>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ZomMStrengthSetting
// Struct Size::0x0040
struct FSolarTablesData_ZomMStrengthSetting : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         HPOverride;                                                   // 0x0014(0x0004)
    float                                         WeaponDamageAttenuation;                                      // 0x0018(0x0004)
    int32_t                                       OutcomeID;                                                    // 0x001C(0x0004)
    float                                         SightRadius;                                                  // 0x0020(0x0004)
    float                                         LoseSightRadius;                                              // 0x0024(0x0004)
    float                                         PeripheralVisionHalfAngleDegrees;                             // 0x0028(0x0004)
    float                                         MeleeAttackRange;                                             // 0x002C(0x0004)
    float                                         MeleeAttackIntervalTime;                                      // 0x0030(0x0004)
    float                                         RangedAttackRange;                                            // 0x0034(0x0004)
    float                                         RangedAttackIntervalTime;                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_ZomFStrengthSetting
// Struct Size::0x0060
struct FSolarTables_ZomFStrengthSetting : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_ZomFStrengthSetting>Data;                                                     // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_ZomFStrengthSetting
// Struct Size::0x0040
struct FSolarTablesData_ZomFStrengthSetting : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         HPOverride;                                                   // 0x0014(0x0004)
    float                                         WeaponDamageAttenuation;                                      // 0x0018(0x0004)
    int32_t                                       OutcomeID;                                                    // 0x001C(0x0004)
    float                                         SightRadius;                                                  // 0x0020(0x0004)
    float                                         LoseSightRadius;                                              // 0x0024(0x0004)
    float                                         PeripheralVisionHalfAngleDegrees;                             // 0x0028(0x0004)
    float                                         MeleeAttackRange;                                             // 0x002C(0x0004)
    float                                         MeleeAttackIntervalTime;                                      // 0x0030(0x0004)
    float                                         RangedAttackRange;                                            // 0x0034(0x0004)
    float                                         RangedAttackIntervalTime;                                     // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TinGuardStrengthSetting
// Struct Size::0x0060
struct FSolarTables_TinGuardStrengthSetting : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TinGuardStrengthSetting>Data;                                                 // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TinGuardStrengthSetting
// Struct Size::0x0050
struct FSolarTablesData_TinGuardStrengthSetting : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    float                                         HPOverride;                                                   // 0x0014(0x0004)
    float                                         WeaponDamageAttenuation;                                      // 0x0018(0x0004)
    int32_t                                       OutcomeID;                                                    // 0x001C(0x0004)
    int32_t                                       DefaultWeapon;                                                // 0x0020(0x0004)
    int32_t                                       ShootDisperse;                                                // 0x0024(0x0004)
    float                                         HitRate;                                                      // 0x0028(0x0004)
    float                                         AttackRange;                                                  // 0x002C(0x0004)
    int32_t                                       FireOnceTimesMin;                                             // 0x0030(0x0004)
    int32_t                                       FireOnceTimesMax;                                             // 0x0034(0x0004)
    float                                         FireOnceInputIntervalTime;                                    // 0x0038(0x0004)
    float                                         FireContinueTimeMin;                                          // 0x003C(0x0004)
    float                                         FireContinueTimeMax;                                          // 0x0040(0x0004)
    float                                         SightRadius;                                                  // 0x0044(0x0004)
    float                                         LoseSightRadius;                                              // 0x0048(0x0004)
    float                                         PeripheralVisionHalfAngleDegrees;                             // 0x004C(0x0004)
};


// ScriptStruct  Solarland.SolarTables_TeamBotPresets
// Struct Size::0x0060
struct FSolarTables_TeamBotPresets : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TeamBotPresets> Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TeamBotPresets
// Struct Size::0x0028
struct FSolarTablesData_TeamBotPresets : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<int32_t>                               BotMemberPresets;                                             // 0x0018(0x0010)
};


// ScriptStruct  Solarland.SolarTables_TeamPool
// Struct Size::0x0060
struct FSolarTables_TeamPool : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_TeamPool>       Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_TeamPool
// Struct Size::0x0038
struct FSolarTablesData_TeamPool : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FString>                               MatchTeam;                                                    // 0x0018(0x0010)
    FString                                       PreTeamPool;                                                  // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SolarTables_WeaponMuzzle
// Struct Size::0x0060
struct FSolarTables_WeaponMuzzle : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponMuzzle>   Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponMuzzle
// Struct Size::0x0108
struct FSolarTablesData_WeaponMuzzle : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       WeaponLevel;                                                  // 0x0014(0x0004)
    enum class ESolarTablesEnum_PartsType         PartsType;                                                    // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    TMap<FString,FString>                         AttributeSub;                                                 // 0x0020(0x0050)
    int32_t                                       PartsQuality;                                                 // 0x0070(0x0004)
    char                                          pa_0074[0x0004]                                               // 0x0074(0x0004)
    FString                                       PartsBPResource;                                              // 0x0078(0x0010)
    FString                                       PartsIcon;                                                    // 0x0088(0x0010)
    int32_t                                       EffectCondition;                                              // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
    TArray<int32_t>                               PartsEffect;                                                  // 0x00A0(0x0010)
    TArray<float>                                 PartsValue;                                                   // 0x00B0(0x0010)
    TArray<int32_t>                               PartsWeaponID;                                                // 0x00C0(0x0010)
    int32_t                                       PartsName;                                                    // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
    TArray<FString>                               PartsDesc;                                                    // 0x00D8(0x0010)
    int32_t                                       WeaponPartDamage;                                             // 0x00E8(0x0004)
    int32_t                                       WeaponPartRateOfFire;                                         // 0x00EC(0x0004)
    int32_t                                       WeaponPartRecoil;                                             // 0x00F0(0x0004)
    int32_t                                       WeaponPartSpread;                                             // 0x00F4(0x0004)
    int32_t                                       WeaponPartRange;                                              // 0x00F8(0x0004)
    int32_t                                       WeaponPartMobility;                                           // 0x00FC(0x0004)
    bool                                          IsSilencer;                                                   // 0x0100(0x0001)
    char                                          pa_0101[0x0003]                                               // 0x0101(0x0003)
    int32_t                                       SilencerParam;                                                // 0x0104(0x0004)
};


// ScriptStruct  Solarland.SolarTables_WeaponPartsOp
// Struct Size::0x0060
struct FSolarTables_WeaponPartsOp : public FSolarTablesDataBase
{
    TMap<int32_t,FSolarTablesData_WeaponPartsOp>  Data;                                                         // 0x0010(0x0050)
};


// ScriptStruct  Solarland.SolarTablesData_WeaponPartsOp
// Struct Size::0x0018
struct FSolarTablesData_WeaponPartsOp : public FSolarTablesDataBase
{
    int32_t                                       ID;                                                           // 0x0010(0x0004)
    int32_t                                       EffectOperator;                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SolarTablesDeviceRes
// Struct Size::0x0010
struct FSolarTablesDeviceRes
{
    FString                                       res;                                                          // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarTablesRangeFloat
// Struct Size::0x0008
struct FSolarTablesRangeFloat
{
    float                                         Left;                                                         // 0x0000(0x0004)
    float                                         Right;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarTablesRangeInt
// Struct Size::0x0008
struct FSolarTablesRangeInt
{
    int32_t                                       Left;                                                         // 0x0000(0x0004)
    int32_t                                       Right;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.TacticalBoxTransforms
// Struct Size::0x0010
struct FTacticalBoxTransforms
{
    TArray<FTransform>                            GroupTransforms;                                              // 0x0000(0x0010)
};


// ScriptStruct  Solarland.TaskHandleFuncConfig
// Struct Size::0x0040
struct FTaskHandleFuncConfig : public FTableRowBase
{
    int64_t                                       TaskType;                                                     // 0x0008(0x0008)
    FString                                       taskDesc;                                                     // 0x0010(0x0010)
    FString                                       TargetValueName;                                              // 0x0020(0x0010)
    FString                                       FuncName;                                                     // 0x0030(0x0010)
};


// ScriptStruct  Solarland.TaskHandleFuncInfo
// Struct Size::0x0018
struct FTaskHandleFuncInfo
{
    int64_t                                       TaskID;                                                       // 0x0000(0x0008)
    FString                                       FuncName;                                                     // 0x0008(0x0010)
};


// ScriptStruct  Solarland.BattlePassTimeInfo
// Struct Size::0x0018
struct FBattlePassTimeInfo
{
    int64_t                                       BattlePassID;                                                 // 0x0000(0x0008)
    int64_t                                       currWeek;                                                     // 0x0008(0x0008)
    int64_t                                       maxWeek;                                                      // 0x0010(0x0008)
};


// ScriptStruct  Solarland.SolarTeamAttributeSet
// Struct Size::0x0078
struct FSolarTeamAttributeSet
{
    FSolarTeamAttribute                           TeamTreatmentDurationReductionMultiple;                       // 0x0000(0x0018)
    FSolarTeamAttribute                           TeamShieldChargeDurationReductionMultiple;                    // 0x0018(0x0018)
    FSolarTeamAttribute                           TeamBigShieldChargeDurationReductionMultiple;                 // 0x0030(0x0018)
    FSolarTeamAttribute                           TeamItemDiscountMultiple;                                     // 0x0048(0x0018)
    FSolarTeamAttribute                           TeamItemAdditionMultiple;                                     // 0x0060(0x0018)
};


// ScriptStruct  Solarland.SolarTeamAttribute
// Struct Size::0x0018
struct FSolarTeamAttribute
{
    float                                         Value;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<ASCMPlayerState*>                      Contributors;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Solarland.TeamInfoRow
// Struct Size::0x0028
struct FTeamInfoRow : public FTableRowBase
{
    FText                                         TeamName;                                                     // 0x0008(0x0018)
    char                                          MemberLimit;                                                  // 0x0020(0x0001)
    char                                          MatchCount;                                                   // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
};


// ScriptStruct  Solarland.SlateFontSizeForLang
// Struct Size::0x0018
struct FSlateFontSizeForLang
{
    bool                                          bEnableFontForLang;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       DefaultFontSize;                                              // 0x0004(0x0004)
    TArray<FSlateFontSizeLangData>                FontForLangGroup;                                             // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SlateFontSizeLangData
// Struct Size::0x0008
struct FSlateFontSizeLangData
{
    enum class ESolarSupportLanguages             SpecialLang;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       SpecialFontSize;                                              // 0x0004(0x0004)
};


// ScriptStruct  Solarland.TitanWeaponSetting
// Struct Size::0x0018
struct FTitanWeaponSetting
{
    ASolarVehicleWeapon*                          TitanWeaponClass;                                             // 0x0000(0x0008)
    FName                                         TitanWeaponSocket;                                            // 0x0008(0x0008)
    ASolarVehicleWeapon*                          TitanVehicleWeapon;                                           // 0x0010(0x0008)
};


// ScriptStruct  Solarland.TransformerSetting
// Struct Size::0x00A0
struct FTransformerSetting
{
    enum class EVehicleControlUIType              ControlUIType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    USolarVehicleGameplayAbility*                 AbilityClass;                                                 // 0x0008(0x0008)
    ASolarVehicleWeapon*                          WeaponClass;                                                  // 0x0010(0x0008)
    FName                                         WeaponSocketName;                                             // 0x0018(0x0008)
    UVehicleCameraDataAsset*                      CameraDataAsset;                                              // 0x0020(0x0008)
    UVehicleCameraDataAsset*                      PassengerOutShootCamera;                                      // 0x0028(0x0008)
    UOutVehicleADSCameraDataAsset*                PassengerOutShootAimCamera;                                   // 0x0030(0x0008)
    ASolarVehicleWeapon*                          VehicleWeapon;                                                // 0x0038(0x0008)
    ASolarBullet*                                 OverrideBulletClass;                                          // 0x0040(0x0008)
    TMap<enum class EPhysicalSurface,TSoftObjectPtr<UParticleSystem>>RaiseDustEffects;                          // 0x0048(0x0050)
    USolarVehicleGA_Carpad*                       CarpadAbility;                                                // 0x0098(0x0008)
};


// ScriptStruct  Solarland.SpawonTreasureBoxIdAndWeight
// Struct Size::0x0008
struct FSpawonTreasureBoxIdAndWeight
{
    int32_t                                       TreasureId;                                                   // 0x0000(0x0004)
    int32_t                                       Weight;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.TutorialTableRowBase
// Struct Size::0x0010
struct FTutorialTableRowBase : public FTableRowBase
{
    int32_t                                       ID;                                                           // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.TutorialConditionTableRow
// Struct Size::0x0038
struct FTutorialConditionTableRow : public FTutorialTableRowBase
{
    char                                          TriggerType;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    TArray<FString>                               Parameters;                                                   // 0x0018(0x0010)
    FString                                       Description;                                                  // 0x0028(0x0010)
};


// ScriptStruct  Solarland.TutorialActionTableRow
// Struct Size::0x0250
struct FTutorialActionTableRow : public FTutorialTableRowBase
{
    FString                                       Desc;                                                         // 0x0010(0x0010)
    enum class ETutorialUIType                    UIType;                                                       // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    FTutorialTipAndEffectUI                       TutorialTipAndEffectUI;                                       // 0x0028(0x0078)
    FTutorialTipAndEffectUI                       CommonViceUI;                                                 // 0x00A0(0x0078)
    FTutorialSpecialUI                            TutorialSpecialUI;                                            // 0x0118(0x0018)
    int32_t                                       NoticeLocTextId;                                              // 0x0130(0x0004)
    char                                          pa_0134[0x0004]                                               // 0x0134(0x0004)
    FTutorialSubtitle                             TutorialSubtitle;                                             // 0x0138(0x0018)
    bool                                          bRepeatTip;                                                   // 0x0150(0x0001)
    char                                          pa_0151[0x0007]                                               // 0x0151(0x0007)
    FTutorialRepeatTip                            RepeatTip;                                                    // 0x0158(0x0018)
    FTutorialBackgroundMusicTableRow              TutorialBackgroundMusic;                                      // 0x0170(0x0020)
    FTutorialSoftCondition                        EndCondition;                                                 // 0x0190(0x0028)
    FTutorialSoftCondition                        InterruptCondition;                                           // 0x01B8(0x0028)
    float                                         WaitTime;                                                     // 0x01E0(0x0004)
    float                                         MinExecuteTime;                                               // 0x01E4(0x0004)
    TArray<int32_t>                               OpenBehaviors;                                                // 0x01E8(0x0010)
    TArray<int32_t>                               CloseBehaviors;                                               // 0x01F8(0x0010)
    int32_t                                       FixedTriggerAreaID;                                           // 0x0208(0x0004)
    char                                          pa_020C[0x0004]                                               // 0x020C(0x0004)
    TArray<int32_t>                               BotAISpawnIDs;                                                // 0x0210(0x0010)
    TArray<int32_t>                               BotAIDeathIDs;                                                // 0x0220(0x0010)
    TArray<int32_t>                               BotAIOnVehicleSpawnIDs;                                       // 0x0230(0x0010)
    TArray<int32_t>                               BotAIOnVehicleDeathIDs;                                       // 0x0240(0x0010)
};


// ScriptStruct  Solarland.TutorialSoftCondition
// Struct Size::0x0028
struct FTutorialSoftCondition
{
    FString                                       ConditionStr;                                                 // 0x0000(0x0010)
    FSoftObjectPath                               ConditionBP;                                                  // 0x0010(0x0018)
};


// ScriptStruct  Solarland.TutorialBackgroundMusicTableRow
// Struct Size::0x0020
struct FTutorialBackgroundMusicTableRow
{
    FString                                       TutorialPlayMusicName;                                        // 0x0000(0x0010)
    FString                                       TutorialStopMusicName;                                        // 0x0010(0x0010)
};


// ScriptStruct  Solarland.TutorialRepeatTip
// Struct Size::0x0018
struct FTutorialRepeatTip
{
    float                                         StartTime;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FTutorialSingleSubtitle>               Subtitles;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Solarland.TutorialSingleSubtitle
// Struct Size::0x0020
struct FTutorialSingleSubtitle
{
    FString                                       LocalTextId;                                                  // 0x0000(0x0010)
    FString                                       Voice;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Solarland.TutorialSubtitle
// Struct Size::0x0018
struct FTutorialSubtitle
{
    TArray<FTutorialSingleSubtitle>               Subtitles;                                                    // 0x0000(0x0010)
    float                                         DelayTime;                                                    // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.TutorialSpecialUI
// Struct Size::0x0018
struct FTutorialSpecialUI
{
    FSoftObjectPath                               TutorialSpecialUIBPPath;                                      // 0x0000(0x0018)
};


// ScriptStruct  Solarland.TutorialTipAndEffectUI
// Struct Size::0x0078
struct FTutorialTipAndEffectUI
{
    FString                                       LinkedComponent;                                              // 0x0000(0x0010)
    FString                                       LimitedListView;                                              // 0x0010(0x0010)
    FSoftObjectPath                               TutorialExpressionBPPath;                                     // 0x0020(0x0018)
    FSoftObjectPath                               TutorialEffectBPPath;                                         // 0x0038(0x0018)
    FVector2D                                     TutorialBPLocation;                                           // 0x0050(0x0008)
    bool                                          HorizontalDirection;                                          // 0x0058(0x0001)
    char                                          pa_0059[0x0003]                                               // 0x0059(0x0003)
    int32_t                                       LocTextID;                                                    // 0x005C(0x0004)
    float                                         DelayShowUITime;                                              // 0x0060(0x0004)
    float                                         WaitUIShowTime;                                               // 0x0064(0x0004)
    enum class ETutorialUIParent                  UIParent;                                                     // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    FTutorialMask                                 Mask;                                                         // 0x006C(0x0008)
    enum class ETutorialGestureType               GestureType;                                                  // 0x0074(0x0001)
    enum class ETutorialGestureHandType           GestureHandType;                                              // 0x0075(0x0001)
    char                                          pa_0076[0x0002]                                               // 0x0076(0x0002)
};


// ScriptStruct  Solarland.TutorialMask
// Struct Size::0x0008
struct FTutorialMask
{
    bool                                          bUseMask;                                                     // 0x0000(0x0001)
    enum class ETutorialMaskType                  MaskType;                                                     // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         EdgeOffset;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Solarland.TutorialTableRow
// Struct Size::0x0098
struct FTutorialTableRow : public FTutorialTableRowBase
{
    FString                                       Desc;                                                         // 0x0010(0x0010)
    enum class ETutorialType                      Type;                                                         // 0x0020(0x0001)
    enum class ETutorialStage                     TriggerStage;                                                 // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
    FTutorialSoftCondition                        TriggerCondition;                                             // 0x0028(0x0028)
    int32_t                                       EndNum;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FTutorialSoftCondition                        ForeverClosedCondition;                                       // 0x0058(0x0028)
    TArray<int32_t>                               ActionIDs;                                                    // 0x0080(0x0010)
    bool                                          bUpload;                                                      // 0x0090(0x0001)
    bool                                          bMandatory;                                                   // 0x0091(0x0001)
    bool                                          bStartUpload;                                                 // 0x0092(0x0001)
    bool                                          bWindows;                                                     // 0x0093(0x0001)
    bool                                          biOS;                                                         // 0x0094(0x0001)
    bool                                          bAndroid;                                                     // 0x0095(0x0001)
    char                                          pa_0096[0x0002]                                               // 0x0096(0x0002)
};


// ScriptStruct  Solarland.TutorialLevelConfig
// Struct Size::0x0038
struct FTutorialLevelConfig
{
    TArray<FTutorialLevelConfigData>              LevelConfigDatas;                                             // 0x0000(0x0010)
    FSoftObjectPath                               MainMapPath;                                                  // 0x0010(0x0018)
    int32_t                                       VeteranTutorialID;                                            // 0x0028(0x0004)
    float                                         RepeatOperationTime;                                          // 0x002C(0x0004)
    float                                         WaitToEndTime;                                                // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.TutorialLevelConfigData
// Struct Size::0x0020
struct FTutorialLevelConfigData
{
    FString                                       LevelName;                                                    // 0x0000(0x0010)
    TArray<int32_t>                               TutorialIds;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Solarland.TutorialLevelSaveData
// Struct Size::0x0028
struct FTutorialLevelSaveData
{
    FString                                       LevelName;                                                    // 0x0000(0x0010)
    FString                                       PlayerStartTag;                                               // 0x0010(0x0010)
    bool                                          bTutorialHasFinished;                                         // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       TutorialID;                                                   // 0x0024(0x0004)
};


// ScriptStruct  Solarland.ConditionReturnInfo_NoParams
// Struct Size::0x0001
struct FConditionReturnInfo_NoParams
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Solarland.ConditionReturnInfo
// Struct Size::0x0018
struct FConditionReturnInfo
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.CacheConditionInfo
// Struct Size::0x0020
struct FCacheConditionInfo
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Solarland.MatAppearingData
// Struct Size::0x0010
struct FMatAppearingData
{
    UCurveFloat*                                  MatCurve;                                                     // 0x0000(0x0008)
    FName                                         MatParam;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Solarland.VaultSystemDynamicSettings
// Struct Size::0x0024
struct FVaultSystemDynamicSettings
{
    float                                         JoystickForwardRange;                                         // 0x0000(0x0004)
    float                                         MaxFacingAngle2D;                                             // 0x0004(0x0004)
    float                                         AutoMaxFacingAngle2D;                                         // 0x0008(0x0004)
    float                                         WallRunFallingVeloAngleTolerance;                             // 0x000C(0x0004)
    float                                         WallRunCameraAngleTolerance;                                  // 0x0010(0x0004)
    FVector                                       WallRunForce;                                                 // 0x0014(0x000C)
    float                                         WallRunDuration;                                              // 0x0020(0x0004)
};


// ScriptStruct  Solarland.ObstacleInitialPosParams
// Struct Size::0x0008
struct FObstacleInitialPosParams
{
    float                                         Scale;                                                        // 0x0000(0x0004)
    float                                         Offset;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.DetectorShapeParams
// Struct Size::0x0018
struct FDetectorShapeParams
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    FVector                                       BoxExtent;                                                    // 0x000C(0x000C)
};


// ScriptStruct  Solarland.ClusterBombBullet
// Struct Size::0x0168
struct FClusterBombBullet
{
    FSolarVirtualBulletHitParameter               CacheHitParam;                                                // 0x0000(0x0078)
    char                                          pa_0078[0x0098]                                               // 0x0078(0x0098)
    UParticleSystemComponent*                     BulletEffectComponent;                                        // 0x0110(0x0008)
    USolarAirPlaneMissileConfig*                  MissileDataAsset;                                             // 0x0118(0x0008)
    USolarVirtualBulletAKComponent*               BulletAkComponent;                                            // 0x0120(0x0008)
    char                                          pa_0128[0x0040]                                               // 0x0128(0x0040)
};


// ScriptStruct  Solarland.SolarVirtualBulletHitParameter
// Struct Size::0x0078
struct FSolarVirtualBulletHitParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    float                                         HitTimeStamp;                                                 // 0x0008(0x0004)
    FVector_NetQuantize                           PlayerViewDir;                                                // 0x000C(0x000C)
    int8_t                                        FireChargePhase;                                              // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         FireChargeTime;                                               // 0x001C(0x0004)
    int32_t                                       HitStartIndex;                                                // 0x0020(0x0004)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0024(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x0030(0x000C)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    UAmmoConfig*                                  Ammo;                                                         // 0x0040(0x0008)
    TArray<FSolarWeaponHitAntiData>               HitAntiDatas;                                                 // 0x0048(0x0010)
    TArray<FHitResult>                            Hits;                                                         // 0x0058(0x0010)
    TArray<AActor*>                               IgnoreHitedActors;                                            // 0x0068(0x0010)
};


// ScriptStruct  Solarland.SpawnClusterBombParam
// Struct Size::0x0020
struct FSpawnClusterBombParam
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0008(0x000C)
    FVector_NetQuantizeNormal                     StartDir;                                                     // 0x0014(0x000C)
};


// ScriptStruct  Solarland.FlameHitData
// Struct Size::0x0048
struct FFlameHitData
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    TArray<FVector_NetQuantize>                   FireStartLocations;                                           // 0x0008(0x0010)
    TArray<FVector_NetQuantize>                   FireEndLocations;                                             // 0x0018(0x0010)
    TArray<FHitResult>                            HitResultDatas;                                               // 0x0028(0x0010)
    TArray<FSolarWeaponHitAntiData>               HitAntiDatas;                                                 // 0x0038(0x0010)
};


// ScriptStruct  Solarland.VehicleEquipWeaponOverlapCapsule
// Struct Size::0x0014
struct FVehicleEquipWeaponOverlapCapsule
{
    FVector                                       Postion;                                                      // 0x0000(0x000C)
    float                                         HalfHeight;                                                   // 0x000C(0x0004)
    float                                         Radius;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Solarland.VehicleEquipWeaponOverlapBox
// Struct Size::0x0018
struct FVehicleEquipWeaponOverlapBox
{
    FVector                                       Postion;                                                      // 0x0000(0x000C)
    FVector                                       TraceBox;                                                     // 0x000C(0x000C)
};


// ScriptStruct  Solarland.CacheDecalComponent
// Struct Size::0x0010
struct FCacheDecalComponent
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.CacheQueryActor
// Struct Size::0x0010
struct FCacheQueryActor
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Solarland.VehicleHealthResource
// Struct Size::0x0060
struct FVehicleHealthResource
{
    TSoftObjectPtr<UTexture2D>                    BodyTexture2D;                                                // 0x0000(0x0028)
    TSoftObjectPtr<UTexture2D>                    FillImageTexture2D;                                           // 0x0028(0x0028)
    TArray<FWeakPointImgInfo>                     WeakPointImgInfos;                                            // 0x0050(0x0010)
};


// ScriptStruct  Solarland.WeakPointImgInfo
// Struct Size::0x0060
struct FWeakPointImgInfo
{
    TSoftObjectPtr<UTexture2D>                    Texture2D;                                                    // 0x0000(0x0028)
    FAnchors                                      Anchors;                                                      // 0x0028(0x0010)
    FVector2D                                     Postion;                                                      // 0x0038(0x0008)
    FVector2D                                     Size;                                                         // 0x0040(0x0008)
    FVector2D                                     Alignment;                                                    // 0x0048(0x0008)
    bool                                          bAutoSize;                                                    // 0x0050(0x0001)
    char                                          pa_0051[0x0003]                                               // 0x0051(0x0003)
    float                                         Angle;                                                        // 0x0054(0x0004)
    FVector2D                                     Scale;                                                        // 0x0058(0x0008)
};


// ScriptStruct  Solarland.VehicleDamageLevelColor
// Struct Size::0x0034
struct FVehicleDamageLevelColor
{
    FLinearColor                                  BackgroundColor;                                              // 0x0000(0x0010)
    FLinearColor                                  BackgroundLeftPartColor;                                      // 0x0010(0x0010)
    FLinearColor                                  OutlineColor;                                                 // 0x0020(0x0010)
    int32_t                                       DamageBonus;                                                  // 0x0030(0x0004)
};


// ScriptStruct  Solarland.LocalVehicleState
// Struct Size::0x0030
struct FLocalVehicleState
{
    float                                         SpeedMultiplier;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FVector_NetQuantize>                   AdditionalImpulses;                                           // 0x0008(0x0010)
    TArray<FVector_NetQuantize>                   CachedLocations;                                              // 0x0018(0x0010)
    char                                          AdditionalFlag;                                               // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         AdditionalSpeedMultiplier;                                    // 0x002C(0x0004)
};


// ScriptStruct  Solarland.AlertAreaStateContainer
// Struct Size::0x0068
struct FAlertAreaStateContainer
{
    ASolarVehiclePawn*                            OwnerVehicle;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
    TMap<FFireUniqueID,FAlertAreaState>           AlertAreaMap;                                                 // 0x0018(0x0050)
};


// ScriptStruct  Solarland.AlertAreaState
// Struct Size::0x0018
struct FAlertAreaState
{
    UParticleSystemComponent*                     TargetParticleComponent;                                      // 0x0000(0x0008)
    UDecalComponent*                              TargetDecalComponent;                                         // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Solarland.AlertAreaData
// Struct Size::0x00C8
struct FAlertAreaData
{
    TSoftObjectPtr<UParticleSystem>               BulletTargetAreaInSameTeam;                                   // 0x0000(0x0028)
    TSoftObjectPtr<UMaterialInterface>            BulletDecalMaterialInSameTeam;                                // 0x0028(0x0028)
    TSoftObjectPtr<UParticleSystem>               BulletTargetAreaInEnemy;                                      // 0x0050(0x0028)
    TSoftObjectPtr<UMaterialInterface>            BulletDecalMaterialInEnemy;                                   // 0x0078(0x0028)
    float                                         AreaParticleScale;                                            // 0x00A0(0x0004)
    FVector                                       AreaDecalSize;                                                // 0x00A4(0x000C)
    float                                         AreaFadeOutTime;                                              // 0x00B0(0x0004)
    FName                                         AreaFadeOutName;                                              // 0x00B4(0x0008)
    float                                         ForceAreaDisplayRange;                                        // 0x00BC(0x0004)
    float                                         AreaDisplayMaxRange;                                          // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
};


// ScriptStruct  Solarland.VehicleLocomotionData
// Struct Size::0x001C
struct FVehicleLocomotionData
{
    float                                         Speed;                                                        // 0x0000(0x0004)
    float                                         Acceleration;                                                 // 0x0004(0x0004)
    float                                         Deceleration;                                                 // 0x0008(0x0004)
    float                                         Friction;                                                     // 0x000C(0x0004)
    float                                         RotateFriction;                                               // 0x0010(0x0004)
    float                                         RotationSpeed;                                                // 0x0014(0x0004)
    float                                         MovementDegree;                                               // 0x0018(0x0004)
};


// ScriptStruct  Solarland.PreloadVehicleUIRow
// Struct Size::0x0018
struct FPreloadVehicleUIRow : public FTableRowBase
{
    TArray<FVehicleUIData>                        VehicleUIDataArray;                                           // 0x0008(0x0010)
};


// ScriptStruct  Solarland.VehicleUIData
// Struct Size::0x0038
struct FVehicleUIData
{
    TSoftClassPtr<UObject>                        LoadWidget;                                                   // 0x0000(0x0028)
    FName                                         WidgetParentName;                                             // 0x0028(0x0008)
    enum class EPreloadVehicleUIType              WidgetType;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  Solarland.SolarVehicleMaterialData
// Struct Size::0x0028
struct FSolarVehicleMaterialData
{
    int8_t                                        MaterialIndex;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ParamName;                                                    // 0x0004(0x0008)
    float                                         OnValue;                                                      // 0x000C(0x0004)
    float                                         OffValue;                                                     // 0x0010(0x0004)
    float                                         ActiveSpeed;                                                  // 0x0014(0x0004)
    UMaterialInstanceDynamic*                     MatInstanceDynamic;                                           // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  Solarland.VehicleCollisionInfo
// Struct Size::0x0058
struct FVehicleCollisionInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           CollidedSimulatedPrimitive;                                   // 0x0008(0x0008)
    FVector_NetQuantize                           SelfPreVelocity;                                              // 0x0010(0x000C)
    FVector_NetQuantize                           SelfCurrentVelocity;                                          // 0x001C(0x000C)
    FVector_NetQuantize                           OtherVehicleLinearVelocity;                                   // 0x0028(0x000C)
    FVector_NetQuantize                           OtherVehicleAngularVelocity;                                  // 0x0034(0x000C)
    FVector_NetQuantize                           OtherVehicleLocation;                                         // 0x0040(0x000C)
    FVector_NetQuantizeNormal                     OtherVehicleRotation;                                         // 0x004C(0x000C)
};


// ScriptStruct  Solarland.BasedMovement
// Struct Size::0x0028
struct FBasedMovement
{
    UPrimitiveComponent*                          MovementBase;                                                 // 0x0000(0x0008)
    FVector_NetQuantize100                        Location;                                                     // 0x0008(0x000C)
    FRotator                                      Rotation;                                                     // 0x0014(0x000C)
    bool                                          bRelativeRotation;                                            // 0x0020(0x0001)
    bool                                          bServerHasVelocity;                                           // 0x0021(0x0001)
    char                                          pa_0022[0x0006]                                               // 0x0022(0x0006)
};


// ScriptStruct  Solarland.VehicleSeatSlot
// Struct Size::0x0110
struct FVehicleSeatSlot
{
    FName                                         SeatSocketName;                                               // 0x0000(0x0008)
    FName                                         SeatWeaponSocket;                                             // 0x0008(0x0008)
    bool                                          bDisplayBackpack;                                             // 0x0010(0x0001)
    bool                                          SeatStickOutEnable;                                           // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
    UVehicleCameraDataAsset*                      OutShootCameraData;                                           // 0x0018(0x0008)
    UOutVehicleADSCameraDataAsset*                OutShootAimCameraData;                                        // 0x0020(0x0008)
    UCurveFloat*                                  OutShootPitchLimitCurve;                                      // 0x0028(0x0008)
    TArray<FVehicleSeatAbility>                   VechicleAbilities;                                            // 0x0030(0x0010)
    ASolarVehicleWeapon*                          VehicleWeaponClass;                                           // 0x0040(0x0008)
    bool                                          bAutoEquipWeapon;                                             // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    TSoftObjectPtr<UTexture2D>                    SeatDisplayIcon;                                              // 0x0050(0x0028)
    float                                         DamageRatio;                                                  // 0x0078(0x0004)
    float                                         PenetrationDamageRatio;                                       // 0x007C(0x0004)
    FBoxSphereBounds                              PenetrationSphere;                                            // 0x0080(0x001C)
    FRotator                                      EjectRotation;                                                // 0x009C(0x000C)
    bool                                          bOverrideDefaultEjectParams;                                  // 0x00A8(0x0001)
    char                                          pa_00A9[0x0003]                                               // 0x00A9(0x0003)
    FVehicleEjectParams                           EjectParams;                                                  // 0x00AC(0x0010)
    TWeakObjectPtr<ASolarCharacter>               SeatPassenger;                                                // 0x00BC(0x0008)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
    ASolarVehicleWeapon*                          SeatWeapon;                                                   // 0x00C8(0x0008)
    FVehicleSkinWeapon                            SeatWeaponSkinData;                                           // 0x00D0(0x0040)
};


// ScriptStruct  Solarland.VehicleSkinWeapon
// Struct Size::0x0040
struct FVehicleSkinWeapon
{
    USkeletalMesh*                                WeaponSkinMesh;                                               // 0x0000(0x0008)
    UVehicleWeaponAnimInstance*                   WeaponAnimClass;                                              // 0x0008(0x0008)
    TArray<UMaterialInterface*>                   WeaponOverrideMaterials;                                      // 0x0010(0x0010)
    ASolarBullet*                                 OverrideBulletClass;                                          // 0x0020(0x0008)
    UBulletEffectConfig*                          OverrideBulletEffect;                                         // 0x0028(0x0008)
    ASolarBullet*                                 OverrideTraceBulletClass;                                     // 0x0030(0x0008)
    UBulletEffectConfig*                          OverrideTraceBulletEffect;                                    // 0x0038(0x0008)
};


// ScriptStruct  Solarland.VehicleSeatAbility
// Struct Size::0x0010
struct FVehicleSeatAbility
{
    USolarVehicleGameplayAbility*                 AbilityClass;                                                 // 0x0000(0x0008)
    FGameplayAbilitySpecHandle                    ServerOrDriverAbilityHandle;                                  // 0x0008(0x0004)
    FGameplayAbilitySpecHandle                    SkinPreAbilityHandle;                                         // 0x000C(0x0004)
};


// ScriptStruct  Solarland.VehicleVFXMesh
// Struct Size::0x0080
struct FVehicleVFXMesh
{
    TSoftObjectPtr<UStaticMesh>                   Mesh;                                                         // 0x0000(0x0028)
    TArray<UMaterialInterface*>                   OverrideMaterials;                                            // 0x0028(0x0010)
    FName                                         AttachedSocket;                                               // 0x0038(0x0008)
    FTransform                                    OffsetTransform;                                              // 0x0040(0x0030)
    char                                          pa_0070[0x0010]                                               // 0x0070(0x0010)
};


// ScriptStruct  Solarland.DamageStatusVehicleVFXs
// Struct Size::0x0020
struct FDamageStatusVehicleVFXs
{
    TArray<FVehicleVFX>                           SingleVehicleVFXs;                                            // 0x0000(0x0010)
    TArray<FVehicleVFX>                           VehicleVFXs;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Solarland.VehicleVFX
// Struct Size::0x0090
struct FVehicleVFX
{
    TSoftObjectPtr<UParticleSystem>               Particle;                                                     // 0x0000(0x0028)
    FName                                         AttachedSocket;                                               // 0x0028(0x0008)
    FTransform                                    OffsetTransform;                                              // 0x0030(0x0030)
    UCurveFloat*                                  ActivateCurve;                                                // 0x0060(0x0008)
    FName                                         ParameterName;                                                // 0x0068(0x0008)
    char                                          pa_0070[0x0020]                                               // 0x0070(0x0020)
};


// ScriptStruct  Solarland.SiegeVehicleOpenTraceData
// Struct Size::0x0018
struct FSiegeVehicleOpenTraceData
{
    FVector                                       BoxPostion;                                                   // 0x0000(0x000C)
    FVector                                       TraceBox;                                                     // 0x000C(0x000C)
};


// ScriptStruct  Solarland.VehicleWaterInfo
// Struct Size::0x000C
struct FVehicleWaterInfo
{
    float                                         WaterLineHeight;                                              // 0x0000(0x0004)
    TWeakObjectPtr<ASolarWaterActorNew>           WaterActor;                                                   // 0x0004(0x0008)
};


// ScriptStruct  Solarland.PIDController
// Struct Size::0x001C
struct FPIDController
{
    float                                         PCoeff;                                                       // 0x0000(0x0004)
    float                                         ICoeff;                                                       // 0x0004(0x0004)
    float                                         DCoeff;                                                       // 0x0008(0x0004)
    float                                         Minimum;                                                      // 0x000C(0x0004)
    float                                         Maximum;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0008]                                               // 0x0014(0x0008)
};


// ScriptStruct  Solarland.SolarLavaZone
// Struct Size::0x0070
struct FSolarLavaZone
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
    FZoneServerValidate                           ServerValidate;                                               // 0x0020(0x0040)
    UParticleSystemComponent*                     LavaZoneParticleComponent;                                    // 0x0060(0x0008)
    USolarVirtualBulletAKComponent*               LavaZoneAkComponent;                                          // 0x0068(0x0008)
};


// ScriptStruct  Solarland.ZoneServerValidate
// Struct Size::0x0040
struct FZoneServerValidate
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    FVector_NetQuantize                           ServerSpawnLocation;                                          // 0x0004(0x000C)
    FVector_NetQuantizeNormal                     ServerSpawnDirection;                                         // 0x0010(0x000C)
    float                                         ServerTimeStamp;                                              // 0x001C(0x0004)
    ASolarCharacter*                              LavaZoneOwner;                                                // 0x0020(0x0008)
    float                                         OverlapInterval;                                              // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TArray<AActor*>                               OverlappedActors;                                             // 0x0030(0x0010)
};


// ScriptStruct  Solarland.SolarLavaBullet
// Struct Size::0x00E8
struct FSolarLavaBullet
{
    ASolarCharacter*                              CacheCharacter;                                               // 0x0000(0x0008)
    FSolarVirtualBulletHitParameter               CacheHitParam;                                                // 0x0008(0x0078)
    char                                          pa_0080[0x0050]                                               // 0x0080(0x0050)
    UParticleSystemComponent*                     BulletEffectComponent;                                        // 0x00D0(0x0008)
    UParticleSystemComponent*                     TrajectoryEffectComponent;                                    // 0x00D8(0x0008)
    USolarVirtualBulletAKComponent*               BulletAkComponent;                                            // 0x00E0(0x0008)
};


// ScriptStruct  Solarland.BoneIKPreset
// Struct Size::0x0020
struct FBoneIKPreset
{
    FVector                                       LeftIKTarget;                                                 // 0x0000(0x000C)
    FVector                                       RightIKTarget;                                                // 0x000C(0x000C)
    FVector2D                                     ChangeIKThreshold;                                            // 0x0018(0x0008)
};


// ScriptStruct  Solarland.PrepareBombingAreaData
// Struct Size::0x0020
struct FPrepareBombingAreaData
{
    UStaticMeshComponent*                         BombingAreaMeshComponent;                                     // 0x0000(0x0008)
    UDecalComponent*                              BombingAreaDecalComponent;                                    // 0x0008(0x0008)
    float                                         PrepareTime;                                                  // 0x0010(0x0004)
    FVector                                       PrepareLocation;                                              // 0x0014(0x000C)
};


// ScriptStruct  Solarland.SpawnedRocketData
// Struct Size::0x0028
struct FSpawnedRocketData
{
    FVector                                       RocketSpawnLocation;                                          // 0x0000(0x000C)
    float                                         RocketSpawnDelayTime;                                         // 0x000C(0x0004)
    float                                         AlertLineRemainTime;                                          // 0x0010(0x0004)
    float                                         SpawnedTime;                                                  // 0x0014(0x0004)
    bool                                          bRocketSpawned;                                               // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    UStaticMeshComponent*                         AlertLineBombingMesh;                                         // 0x0020(0x0008)
};


// ScriptStruct  Solarland.BombingAreaAsset
// Struct Size::0x0060
struct FBombingAreaAsset
{
    TSoftObjectPtr<UStaticMesh>                   BombingAreaMeshClass;                                         // 0x0000(0x0028)
    TSoftObjectPtr<UMaterialInterface>            BombingDecalMaterialClass;                                    // 0x0028(0x0028)
    UStaticMeshComponent*                         BombingAreaMeshComponent;                                     // 0x0050(0x0008)
    UDecalComponent*                              BombingAreaDecalComponent;                                    // 0x0058(0x0008)
};


// ScriptStruct  Solarland.BombingAreaData
// Struct Size::0x0024
struct FBombingAreaData
{
    int32_t                                       AreaIndex;                                                    // 0x0000(0x0004)
    FVector_NetQuantize                           CenterLocation;                                               // 0x0004(0x000C)
    enum class ERocketFireMode                    SpawnedFireMode;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         ServerStartedTime;                                            // 0x0014(0x0004)
    char                                          MaxRocketCounter;                                             // 0x0018(0x0001)
    char                                          SpawnedRocketCounter;                                         // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    FVector2D                                     LastLandLocation2D;                                           // 0x001C(0x0008)
};


// ScriptStruct  Solarland.FireModeSetting
// Struct Size::0x0038
struct FFireModeSetting
{
    float                                         AreaMeshScale;                                                // 0x0000(0x0004)
    FVector                                       BombingAreaDecalSize;                                         // 0x0004(0x000C)
    float                                         FirstRocketSpawnTimer;                                        // 0x0010(0x0004)
    float                                         RocketSpawnDelay;                                             // 0x0014(0x0004)
    float                                         AlertLineRemainTime;                                          // 0x0018(0x0004)
    float                                         RocketSpawnInterval;                                          // 0x001C(0x0004)
    float                                         BombingAreaDisplayDelay;                                      // 0x0020(0x0004)
    int32_t                                       LaunchRocketNum;                                              // 0x0024(0x0004)
    float                                         BombingAreaRadius;                                            // 0x0028(0x0004)
    float                                         MiniSpawnDistance;                                            // 0x002C(0x0004)
    FVector2D                                     AimDistanceRange;                                             // 0x0030(0x0008)
};


// ScriptStruct  Solarland.VehicleSpawnRefreshInfo
// Struct Size::0x000C
struct FVehicleSpawnRefreshInfo
{
    bool                                          bVehicleRefresh;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       VehicleRefreshSecond;                                         // 0x0004(0x0004)
    bool                                          bVehicleRefreshRand;                                          // 0x0008(0x0001)
    bool                                          bVehicleRefreshWaitPreBroken;                                 // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Solarland.VehicleMapMarkDataContainer
// Struct Size::0x0120
struct FVehicleMapMarkDataContainer : public FFastArraySerializer
{
    TArray<FVehicleMapMarkData>                   VehicleMapMarkDatas;                                          // 0x0108(0x0010)
    ASolarVehicleSpawnerSets*                     SolarVehicleSpawnerSets;                                      // 0x0118(0x0008)
};


// ScriptStruct  Solarland.VehicleMapMarkData
// Struct Size::0x0014
struct FVehicleMapMarkData : public FFastArraySerializerItem
{
    int32_t                                       VehicleSpawnId;                                               // 0x000C(0x0004)
    int32_t                                       SpawnerIndex;                                                 // 0x0010(0x0004)
};


// ScriptStruct  Solarland.VehicleSpawnerEffectDataContainer
// Struct Size::0x0120
struct FVehicleSpawnerEffectDataContainer : public FFastArraySerializer
{
    TArray<FVehicleSpawnerEffectData>             VehicleSpawnerEffectDatas;                                    // 0x0108(0x0010)
    ASolarVehicleSpawnerSets*                     SolarVehicleSpawnerSets;                                      // 0x0118(0x0008)
};


// ScriptStruct  Solarland.VehicleSpawnerEffectData
// Struct Size::0x001C
struct FVehicleSpawnerEffectData : public FFastArraySerializerItem
{
    int32_t                                       SpawnerIndex;                                                 // 0x000C(0x0004)
    int32_t                                       VehicleID;                                                    // 0x0010(0x0004)
    float                                         EffectTime;                                                   // 0x0014(0x0004)
    enum class EVehicleSpawnEffectType            VehicleSpawnEffectType;                                       // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Solarland.BossSpawnZone
// Struct Size::0x0020
struct FBossSpawnZone
{
    float                                         ZoneRadius;                                                   // 0x0000(0x0004)
    FVector                                       ZoneLocation;                                                 // 0x0004(0x000C)
    TArray<FBossSpawner>                          BossSpawnerSets;                                              // 0x0010(0x0010)
};


// ScriptStruct  Solarland.VehicleSpawner
// Struct Size::0x00A0
struct FVehicleSpawner
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    ASolarVehicleSpawnerSets*                     SolarVehicleSpawnerSets;                                      // 0x0010(0x0008)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FTransform                                    VehicleSpawnerTransform;                                      // 0x0020(0x0030)
    int32_t                                       SpawnerID;                                                    // 0x0050(0x0004)
    FVehicleSpawnRefreshInfo                      VehicleSpawnRefreshInfo;                                      // 0x0054(0x000C)
    FVector                                       VehicleCheckBoxSize;                                          // 0x0060(0x000C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    ASolarVehicleSpawnEffect*                     VehicleSpawnEffect;                                           // 0x0070(0x0008)
    int32_t                                       ExpSpringIndex;                                               // 0x0078(0x0004)
    char                                          pa_007C[0x0024]                                               // 0x007C(0x0024)
};


// ScriptStruct  Solarland.BossSpawner
// Struct Size::0x00A0
struct FBossSpawner : public FVehicleSpawner
{
};


// ScriptStruct  Solarland.VehicleStateTransition
// Struct Size::0x0018
struct FVehicleStateTransition
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    ASolarVehiclePawn*                            Owner;                                                        // 0x0008(0x0008)
    USolarLeggedVehicleMovement*                  MovementComponent;                                            // 0x0010(0x0008)
};


// ScriptStruct  Solarland.VehicleState
// Struct Size::0x0078
struct FVehicleState
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    USolarVehicleStateMachine*                    StateMachine;                                                 // 0x0008(0x0008)
    ASolarVehiclePawn*                            Owner;                                                        // 0x0010(0x0008)
    USolarLeggedVehicleMovement*                  MovementComponent;                                            // 0x0018(0x0008)
    char                                          pa_0020[0x0058]                                               // 0x0020(0x0058)
};


// ScriptStruct  Solarland.VehicleWeakPointSpec
// Struct Size::0x0200
struct FVehicleWeakPointSpec
{
    float                                         CurrentHealth;                                                // 0x0000(0x0004)
    bool                                          bInRepairing;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TWeakObjectPtr<ASolarCharacter>               LocalRepairingCharacter;                                      // 0x0008(0x0008)
    bool                                          bLocalCharacterRepairing;                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    USolarVehicleWeakPointComponent*              WeakPointMeshComponent;                                       // 0x0018(0x0008)
    ASolarVehiclePawn*                            VehiclePawn;                                                  // 0x0020(0x0008)
    char                                          WeakPointID;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TArray<FName>                                 WeakPointSockets;                                             // 0x0030(0x0010)
    FVector                                       WeakPointOffset;                                              // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TSoftObjectPtr<UStaticMesh>                   WeakPointStaticMesh;                                          // 0x0050(0x0028)
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
    FTransform                                    WeakPointRelativeTransform;                                   // 0x0080(0x0030)
    float                                         MaxWeakPointHealth;                                           // 0x00B0(0x0004)
    float                                         RepairDuration;                                               // 0x00B4(0x0004)
    bool                                          bRecoverBoneScaleAfterVFXFinished;                            // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
    FVehicleVFX                                   BrokenWeakPointVFX;                                           // 0x00C0(0x0090)
    FVehicleVFX                                   RepairingWeakPointVFX;                                        // 0x0150(0x0090)
    float                                         FacingAngle;                                                  // 0x01E0(0x0004)
    float                                         DistFromCharacterToWeakPoint;                                 // 0x01E4(0x0004)
    char                                          pa_01E8[0x0018]                                               // 0x01E8(0x0018)
};


// ScriptStruct  Solarland.CameraShakeData
// Struct Size::0x0020
struct FCameraShakeData
{
    UCameraShake*                                 CameraShakeClass;                                             // 0x0000(0x0008)
    UCurveFloat*                                  CameraShakeScaleCurve;                                        // 0x0008(0x0008)
    float                                         ScaleMultiplier;                                              // 0x0010(0x0004)
    float                                         ScopeScaleMultiplier;                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
};


// ScriptStruct  Solarland.BackupAmmoCostInfo
// Struct Size::0x0008
struct FBackupAmmoCostInfo
{
    float                                         CostTime;                                                     // 0x0000(0x0004)
    int32_t                                       CostCount;                                                    // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarVirtualBullet
// Struct Size::0x01B0
struct FSolarVirtualBullet
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    USolarVirtualBulletCollector*                 Collector;                                                    // 0x0008(0x0008)
    UParticleSystemComponent*                     BulletEffect;                                                 // 0x0010(0x0008)
    UParticleSystemComponent*                     TrajectoryEffect;                                             // 0x0018(0x0008)
    UParticleSystemComponent*                     TrajectoryBeamEffect;                                         // 0x0020(0x0008)
    USolarVirtualBulletAKComponent*               AkComponent;                                                  // 0x0028(0x0008)
    char                                          pa_0030[0x0170]                                               // 0x0030(0x0170)
    UAmmoConfig*                                  CacheAmmo;                                                    // 0x01A0(0x0008)
    char                                          pa_01A8[0x0008]                                               // 0x01A8(0x0008)
};


// ScriptStruct  Solarland.SolarVirtualBulletSpawnParameter
// Struct Size::0x00A8
struct FSolarVirtualBulletSpawnParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    float                                         InitalElapsedTime;                                            // 0x0008(0x0004)
    FVector                                       PlayerViewDir;                                                // 0x000C(0x000C)
    FVector_NetQuantize                           PlayerViewLoc;                                                // 0x0018(0x000C)
    char                                          IsScopeOpen;                                                  // 0x0024(0x0001)
    int8_t                                        FireChargePhase;                                              // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    float                                         FireChargeTime;                                               // 0x0028(0x0004)
    FVector_NetQuantize                           StartLoc;                                                     // 0x002C(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x0038(0x000C)
    FVector_NetQuantizeNormal                     Dir;                                                          // 0x0044(0x000C)
    FVector_NetQuantize                           MuzzleFxLoc;                                                  // 0x0050(0x000C)
    float                                         CurveOffsetAngle;                                             // 0x005C(0x0004)
    FSolarVirtualBulletHomingTarget               HomingTarget;                                                 // 0x0060(0x0018)
    UAmmoConfig*                                  Ammo;                                                         // 0x0078(0x0008)
    FString                                       AntiData;                                                     // 0x0080(0x0010)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0090(0x0008)
    FVector_NetQuantize                           HitTargetRelativeLocation;                                    // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  Solarland.SolarVirtualBulletHomingTarget
// Struct Size::0x0018
struct FSolarVirtualBulletHomingTarget
{
    bool                                          bSet;                                                         // 0x0000(0x0001)
    bool                                          bLocalCharacterLock;                                          // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    TWeakObjectPtr<AActor>                        HomingTargetActor;                                            // 0x0004(0x0008)
    FVector                                       CurrentLoc;                                                   // 0x000C(0x000C)
};


// ScriptStruct  Solarland.VehicleWaterEffectConfig
// Struct Size::0x00A0
struct FVehicleWaterEffectConfig
{
    TSoftObjectPtr<UParticleSystem>               HorizontalLightEffect;                                        // 0x0000(0x0028)
    TSoftObjectPtr<UParticleSystem>               HorizontalHeavyEffect;                                        // 0x0028(0x0028)
    TSoftObjectPtr<UParticleSystem>               VerticalLightEffect;                                          // 0x0050(0x0028)
    TSoftObjectPtr<UParticleSystem>               VerticalHeavyEffect;                                          // 0x0078(0x0028)
};


// ScriptStruct  Solarland.CharacterWaterEffectConfig
// Struct Size::0x00A0
struct FCharacterWaterEffectConfig
{
    TSoftObjectPtr<UParticleSystem>               WalkingEffect;                                                // 0x0000(0x0028)
    TSoftObjectPtr<UParticleSystem>               SwimmingEffect;                                               // 0x0028(0x0028)
    TSoftObjectPtr<UParticleSystem>               HeavyJumpEffect;                                              // 0x0050(0x0028)
    TSoftObjectPtr<UParticleSystem>               SoftJumpEffect;                                               // 0x0078(0x0028)
};


// ScriptStruct  Solarland.WaterWallComponent
// Struct Size::0x0030
struct FWaterWallComponent
{
    uint32_t                                      Index;                                                        // 0x0000(0x0004)
    TWeakObjectPtr<USceneComponent>               WaterWallRoot;                                                // 0x0004(0x0008)
    TWeakObjectPtr<UStaticMeshComponent>          WaterWallMesh;                                                // 0x000C(0x0008)
    TWeakObjectPtr<UAkComponent>                  AkAudioComponent;                                             // 0x0014(0x0008)
    TWeakObjectPtr<USolarAkGameObject>            SolarAkGameObject;                                            // 0x001C(0x0008)
    TWeakObjectPtr<UMaterialInstanceDynamic>      WaterWallMaterialInstance;                                    // 0x0024(0x0008)
    bool                                          SpawnStarted;                                                 // 0x002C(0x0001)
    bool                                          SpawnedFinished;                                              // 0x002D(0x0001)
    bool                                          WaitingForDestroy;                                            // 0x002E(0x0001)
    char                                          pa_002F[0x0001]                                               // 0x002F(0x0001)
};


// ScriptStruct  Solarland.WaterWallContainer
// Struct Size::0x0120
struct FWaterWallContainer : public FFastArraySerializer
{
    TWeakObjectPtr<ASolarWaterWallActorV2>        Owner;                                                        // 0x0108(0x0008)
    TArray<FWaterSpawnState>                      WaterSpawnStates;                                             // 0x0110(0x0010)
};


// ScriptStruct  Solarland.WaterSpawnState
// Struct Size::0x004C
struct FWaterSpawnState : public FFastArraySerializerItem
{
    int32_t                                       Index;                                                        // 0x000C(0x0004)
    enum class EWaterWallSpawnState               State;                                                        // 0x0010(0x0004)
    float                                         CurrentSpawningTime;                                          // 0x0014(0x0004)
    float                                         MoveDistance;                                                 // 0x0018(0x0004)
    bool                                          bIsInAir;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    FVector_NetQuantize                           ClientTargetLocation;                                         // 0x0020(0x000C)
    FVector_NetQuantize                           ScanLocation;                                                 // 0x002C(0x000C)
    FVector_NetQuantize                           PreviousScanLocation;                                         // 0x0038(0x000C)
    bool                                          bAdjustGround;                                                // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    float                                         GroundOffsetSmoothValue;                                      // 0x0048(0x0004)
};


// ScriptStruct  Solarland.WaterWallGroundFitParams
// Struct Size::0x009C
struct FWaterWallGroundFitParams
{
    FVector                                       ScanPoint;                                                    // 0x0000(0x000C)
    FHitResult                                    GroundHitResult;                                              // 0x000C(0x0088)
    float                                         CurveX;                                                       // 0x0094(0x0004)
    bool                                          bGroundIsValid;                                               // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
};


// ScriptStruct  Solarland.PlaySoundParams
// Struct Size::0x000C
struct FPlaySoundParams
{
    bool                                          HasSilencer;                                                  // 0x0000(0x0001)
    bool                                          InSameTeam;                                                   // 0x0001(0x0001)
    bool                                          IsInRoom;                                                     // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       SoundFireAutoCount;                                           // 0x0004(0x0004)
    bool                                          bTriggerSoundFireBurst;                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Solarland.MultiHitResult
// Struct Size::0x00A4
struct FMultiHitResult : public FHitResult
{
    char                                          Num;                                                          // 0x0088(0x0001)
    char                                          Seed;                                                         // 0x0089(0x0001)
    char                                          Mode;                                                         // 0x008A(0x0001)
    char                                          pa_008B[0x0001]                                               // 0x008B(0x0001)
    FVector_NetQuantize                           Start;                                                        // 0x008C(0x000C)
    FVector_NetQuantize                           End;                                                          // 0x0098(0x000C)
};


// ScriptStruct  Solarland.FireMode
// Struct Size::0x0020
struct FFireMode
{
    char                                          Index;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FireRateAccumulation;                                         // 0x0004(0x0004)
    float                                         FireRateAccumulationBurstInterval;                            // 0x0008(0x0004)
    char                                          pa_000C[0x000C]                                               // 0x000C(0x000C)
    UParticleSystemComponent*                     ChargingEffect;                                               // 0x0018(0x0008)
};


// ScriptStruct  Solarland.SolarBlackHoleTestActorInfo
// Struct Size::0x0020
struct FSolarBlackHoleTestActorInfo
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Solarland.SolarBlackHoleParticleData
// Struct Size::0x0018
struct FSolarBlackHoleParticleData
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Solarland.SolarBlackHoleParticleInfo
// Struct Size::0x0080
struct FSolarBlackHoleParticleInfo
{
    FSoftObjectPath                               ParticlePathForTeammate;                                      // 0x0000(0x0018)
    FSoftObjectPath                               ParticlePathForEnemy;                                         // 0x0018(0x0018)
    FTransform                                    RelativeTransform;                                            // 0x0030(0x0030)
    bool                                          bAttachMode;                                                  // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FName                                         AttachSocketName;                                             // 0x0064(0x0008)
    enum class EAttachLocation                    AttachLocationType;                                           // 0x006C(0x0001)
    bool                                          bAutoDestroy;                                                 // 0x006D(0x0001)
    char                                          pa_006E[0x0002]                                               // 0x006E(0x0002)
    float                                         Duration;                                                     // 0x0070(0x0004)
    enum class EPSCPoolMethod                     PoolMode;                                                     // 0x0074(0x0001)
    char                                          pa_0075[0x000B]                                               // 0x0075(0x000B)
};


// ScriptStruct  Solarland.WeaponFireLaserElement
// Struct Size::0x0048
struct FWeaponFireLaserElement
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
    UParticleSystemComponent*                     BeamEffect;                                                   // 0x0038(0x0008)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  Solarland.BulletContainerColor
// Struct Size::0x0008
struct FBulletContainerColor
{
    FColor                                        Normal;                                                       // 0x0000(0x0004)
    FColor                                        Energy;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarBulletContainerLayout
// Struct Size::0x001C
struct FSolarBulletContainerLayout
{
    FVector2D                                     Offset;                                                       // 0x0000(0x0008)
    float                                         SpinAngle;                                                    // 0x0008(0x0004)
    FVector2D                                     Scale;                                                        // 0x000C(0x0008)
    FVector2D                                     OneBulletSize;                                                // 0x0014(0x0008)
};


// ScriptStruct  Solarland.SolarBulletWidgetState
// Struct Size::0x0010
struct FSolarBulletWidgetState
{
    UWidget*                                      BulletWidget;                                                 // 0x0000(0x0008)
    bool                                          bReloadState;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Solarland.SlowdownAmmoConfig
// Struct Size::0x0028
struct FSlowdownAmmoConfig
{
    TArray<enum class EWeaponType>                EnableWeaponTypeArray;                                        // 0x0000(0x0010)
    UGameplayEffect*                              EffectClass;                                                  // 0x0010(0x0008)
    TArray<FAmmoGameplayEffectCallerData>         CallerDataArray;                                              // 0x0018(0x0010)
};


// ScriptStruct  Solarland.AmmoGameplayEffectCallerData
// Struct Size::0x0020
struct FAmmoGameplayEffectCallerData
{
    FGameplayTag                                  DataTag;                                                      // 0x0000(0x0008)
    float                                         DefaultDataValue;                                             // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 DataValueArray;                                               // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SolarWeaponAmmoPreloadData
// Struct Size::0x0020
struct FSolarWeaponAmmoPreloadData
{
    TArray<enum class EWeaponType>                WeaponTypeArray;                                              // 0x0000(0x0010)
    TArray<int32_t>                               WeaponIDArray;                                                // 0x0010(0x0010)
};


// ScriptStruct  Solarland.WeaponShotHitResult
// Struct Size::0x0038
struct FWeaponShotHitResult
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    FVector_NetQuantize                           Location;                                                     // 0x0008(0x000C)
    FName                                         BoneName;                                                     // 0x0014(0x0008)
    FVector_NetQuantizeNormal                     ImpactNormal;                                                 // 0x001C(0x000C)
    char                                          bBlockingHit;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x002C(0x0008)
    int32_t                                       FaceIndex;                                                    // 0x0034(0x0004)
};


// ScriptStruct  Solarland.SpawnProjParam
// Struct Size::0x0050
struct FSpawnProjParam
{
    FVector_NetQuantize                           Start;                                                        // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    char                                          Mode;                                                         // 0x0018(0x0001)
    char                                          CurRocketNum;                                                 // 0x0019(0x0001)
    char                                          bTriggerAnim;                                                 // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
    float                                         Scale;                                                        // 0x001C(0x0004)
    float                                         SpeedScale;                                                   // 0x0020(0x0004)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0024(0x0008)
    uint32_t                                      SpawnID;                                                      // 0x002C(0x0004)
    float                                         Timestamp;                                                    // 0x0030(0x0004)
    TWeakObjectPtr<ASolarPlayerController>        InstigatorController;                                         // 0x0034(0x0008)
    FVector_NetQuantize                           RelativeLocation;                                             // 0x003C(0x000C)
    char                                          pa_0048[0x0008]                                               // 0x0048(0x0008)
};


// ScriptStruct  Solarland.OverrideBulletStruct
// Struct Size::0x0020
struct FOverrideBulletStruct
{
    ASolarBullet*                                 PrimaryOverrideBulletClass;                                   // 0x0000(0x0008)
    UBulletEffectConfig*                          PrimaryOverrideBulletEffect;                                  // 0x0008(0x0008)
    ASolarBullet*                                 PrimaryOverrideTraceBulletClass;                              // 0x0010(0x0008)
    UBulletEffectConfig*                          PrimaryOverrideTraceBulletEffect;                             // 0x0018(0x0008)
};


// ScriptStruct  Solarland.WeaponDebugFlag
// Struct Size::0x0005
struct FWeaponDebugFlag
{
    bool                                          bIgnoreActivated;                                             // 0x0000(0x0001)
    bool                                          bExtraInfo;                                                   // 0x0001(0x0001)
    bool                                          bMechanicalState;                                             // 0x0002(0x0001)
    bool                                          bShowAimDir;                                                  // 0x0003(0x0001)
    bool                                          bShowShootDir;                                                // 0x0004(0x0001)
};


// ScriptStruct  Solarland.LocationEffectParam
// Struct Size::0x0028
struct FLocationEffectParam
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FVector                                       Scale;                                                        // 0x0018(0x000C)
    bool                                          bAutoDestroy;                                                 // 0x0024(0x0001)
    enum class EPSCPoolMethod                     PoolingMethod;                                                // 0x0025(0x0001)
    bool                                          bAutoActivate;                                                // 0x0026(0x0001)
    char                                          pa_0027[0x0001]                                               // 0x0027(0x0001)
};


// ScriptStruct  Solarland.AttachedEffectParam
// Struct Size::0x0038
struct FAttachedEffectParam
{
    USceneComponent*                              AttachToComponent;                                            // 0x0000(0x0008)
    FName                                         AttachPointName;                                              // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FRotator                                      Rotation;                                                     // 0x001C(0x000C)
    FVector                                       Scale;                                                        // 0x0028(0x000C)
    enum class EAttachLocation                    LocationType;                                                 // 0x0034(0x0001)
    bool                                          bAutoDestroy;                                                 // 0x0035(0x0001)
    enum class EPSCPoolMethod                     PoolingMethod;                                                // 0x0036(0x0001)
    bool                                          bAutoActivate;                                                // 0x0037(0x0001)
};


// ScriptStruct  Solarland.MutiBulletHitData
// Struct Size::0x0068
struct FMutiBulletHitData
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    int8_t                                        FireMode;                                                     // 0x0004(0x0001)
    int8_t                                        IsScopeOpen;                                                  // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    float                                         HorizontalVar;                                                // 0x0008(0x0004)
    float                                         VerticalVar;                                                  // 0x000C(0x0004)
    bool                                          bValidHit;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector_NetQuantize100                        StartLocation;                                                // 0x0014(0x000C)
    FVector_NetQuantize                           WeaponLocation;                                               // 0x0020(0x000C)
    FVector_NetQuantize                           characterlocation;                                            // 0x002C(0x000C)
    float                                         DamageScale;                                                  // 0x0038(0x0004)
    int32_t                                       LastClipAmmo;                                                 // 0x003C(0x0004)
    int32_t                                       LastFireTimeWithThousandthSecond;                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<FSolarWeaponHitAntiData>               HitAntiDatas;                                                 // 0x0048(0x0010)
    TArray<FBulletHitDetailData>                  HitDetailDataArray;                                           // 0x0058(0x0010)
};


// ScriptStruct  Solarland.BulletHitDetailData
// Struct Size::0x004C
struct FBulletHitDetailData
{
    TWeakObjectPtr<APawn>                         SourcePawn;                                                   // 0x0000(0x0008)
    TWeakObjectPtr<AActor>                        HitActor;                                                     // 0x0008(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           HitComponent;                                                 // 0x0010(0x0008)
    FVector_NetQuantize                           HitActorLocation;                                             // 0x0018(0x000C)
    FVector_NetQuantize100                        HitLocation;                                                  // 0x0024(0x000C)
    FVector_NetQuantize100                        HitNormal;                                                    // 0x0030(0x000C)
    FName                                         HitBone;                                                      // 0x003C(0x0008)
    int32_t                                       BulletIndex;                                                  // 0x0044(0x0004)
    int32_t                                       FaceIndex;                                                    // 0x0048(0x0004)
};


// ScriptStruct  Solarland.WeaponHitResponse
// Struct Size::0x0001
struct FWeaponHitResponse
{
    char                                          bForceBlock;                                                  // 0x0000(0x0001)
    char                                          bForcePenetrate;                                              // 0x0000(0x0001)
    char                                          bForceAimIgnore;                                              // 0x0000(0x0001)
    char                                          bAffectHalo;                                                  // 0x0000(0x0001)
    char                                          bTakeDamage;                                                  // 0x0000(0x0001)
    char                                          bShowExplode;                                                 // 0x0000(0x0001)
    char                                          bShowDecal;                                                   // 0x0000(0x0001)
    char                                          bPlaySound;                                                   // 0x0000(0x0001)
};


// ScriptStruct  Solarland.WeaponAnimationInfo
// Struct Size::0x0030
struct FWeaponAnimationInfo
{
    FSoftObjectPath                               AssetPath;                                                    // 0x0000(0x0018)
    float                                         PlayRate;                                                     // 0x0018(0x0004)
    bool                                          bUseAdaptivePlayRate;                                         // 0x001C(0x0001)
    bool                                          bKeepEndingPose;                                              // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    UAnimMontage*                                 Animation;                                                    // 0x0020(0x0008)
    UAnimMontage*                                 AnimOverride;                                                 // 0x0028(0x0008)
};


// ScriptStruct  Solarland.WeaponMergeMeshStruct
// Struct Size::0x0030
struct FWeaponMergeMeshStruct
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    int32_t                                       weaponid;                                                     // 0x0010(0x0004)
    int32_t                                       SkinId;                                                       // 0x0014(0x0004)
    TArray<int32_t>                               Parts;                                                        // 0x0018(0x0010)
    USkeletalMesh*                                MergeMesh;                                                    // 0x0028(0x0008)
};


// ScriptStruct  Solarland.WeaponKillDeathStatisticData
// Struct Size::0x0008
struct FWeaponKillDeathStatisticData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Solarland.SolarPlayerWeaponTagData
// Struct Size::0x0010
struct FSolarPlayerWeaponTagData
{
    TArray<FSolarPlayerWeaponTag>                 WeaponTags;                                                   // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SolarPlayerWeaponTag
// Struct Size::0x0008
struct FSolarPlayerWeaponTag
{
    int32_t                                       TextLocalizationID;                                           // 0x0000(0x0004)
    bool                                          bShowInPickupList;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.SolarWeaponFPPConfig
// Struct Size::0x0070
struct FSolarWeaponFPPConfig
{
    FRangeFloat                                   AspectRatioRange;                                             // 0x0000(0x0008)
    FSolarWeaponFPPData                           FPPData;                                                      // 0x0008(0x0068)
};


// ScriptStruct  Solarland.SolarWeaponFPPData
// Struct Size::0x0068
struct FSolarWeaponFPPData
{
    TMap<enum class EWeaponScopeType,FSolarWeaponScopeFPPConfig>ScopeFPPConfigByScopeTypeMap;                   // 0x0000(0x0050)
    FSolarWeaponScopeFPPData                      DefaultFPPDataForScopeType;                                   // 0x0050(0x0018)
};


// ScriptStruct  Solarland.SolarWeaponScopeFPPData
// Struct Size::0x0018
struct FSolarWeaponScopeFPPData
{
    FVector                                       RelativeLocation;                                             // 0x0000(0x000C)
    FRotator                                      RelativeRotation;                                             // 0x000C(0x000C)
};


// ScriptStruct  Solarland.SolarWeaponScopeFPPConfig
// Struct Size::0x0068
struct FSolarWeaponScopeFPPConfig
{
    TMap<int32_t,FSolarWeaponScopeFPPData>        ScopeFPPDataByWeaponSkinIDMap;                                // 0x0000(0x0050)
    FSolarWeaponScopeFPPData                      DefaultFPPDataForWeaponSkinID;                                // 0x0050(0x0018)
};


// ScriptStruct  Solarland.WeaponSpreadValue
// Struct Size::0x0008
struct FWeaponSpreadValue
{
    float                                         HoriSpread;                                                   // 0x0000(0x0004)
    float                                         VertSpread;                                                   // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarWeaponPartDescRow
// Struct Size::0x0018
struct FSolarWeaponPartDescRow : public FTableRowBase
{
    TArray<FSolarWeaponPartEffectDesc>            DescriptionArray;                                             // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SolarWeaponPartEffectDesc
// Struct Size::0x0014
struct FSolarWeaponPartEffectDesc
{
    int32_t                                       EffectValueLocalTextID;                                       // 0x0000(0x0004)
    int32_t                                       DescriptionLocalTextID;                                       // 0x0004(0x0004)
    int32_t                                       Priority;                                                     // 0x0008(0x0004)
    int32_t                                       PartID;                                                       // 0x000C(0x0004)
    int32_t                                       weaponid;                                                     // 0x0010(0x0004)
};


// ScriptStruct  Solarland.WheelData
// Struct Size::0x0270
struct FWheelData
{
    bool                                          bIsPowered;                                                   // 0x0000(0x0001)
    bool                                          bIsPoweredInDrift;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    FName                                         BoneName;                                                     // 0x0004(0x0008)
    FVector                                       Offset;                                                       // 0x000C(0x000C)
    FVector                                       WheelForceOffset;                                             // 0x0018(0x000C)
    float                                         Radius;                                                       // 0x0024(0x0004)
    float                                         RadiusAfterBroken;                                            // 0x0028(0x0004)
    float                                         Width;                                                        // 0x002C(0x0004)
    float                                         MaxRaise;                                                     // 0x0030(0x0004)
    float                                         MaxDrop;                                                      // 0x0034(0x0004)
    float                                         SpringStiffness;                                              // 0x0038(0x0004)
    float                                         DamperStiffness;                                              // 0x003C(0x0004)
    float                                         LaterialFriction;                                             // 0x0040(0x0004)
    float                                         LaterialFrictionAfterBroken;                                  // 0x0044(0x0004)
    float                                         LaterialFrictionInDrift;                                      // 0x0048(0x0004)
    float                                         DriftingLaterialFrictionLerpSpeed;                            // 0x004C(0x0004)
    FRuntimeFloatCurve                            EndDriftFrictionCurve;                                        // 0x0050(0x0088)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FVehicleVFX                                   DriftDecal;                                                   // 0x00E0(0x0090)
    float                                         RollingFriction;                                              // 0x0170(0x0004)
    float                                         BrakeDeceleration;                                            // 0x0174(0x0004)
    float                                         DustEffectScale;                                              // 0x0178(0x0004)
    float                                         DustEffectScaleAfterBroken;                                   // 0x017C(0x0004)
    float                                         DriftEffectScale;                                             // 0x0180(0x0004)
    char                                          pa_0184[0x00DC]                                               // 0x0184(0x00DC)
    UParticleSystemComponent*                     RaiseDustParticleComponent;                                   // 0x0260(0x0008)
    UParticleSystemComponent*                     DriftParticleComponent;                                       // 0x0268(0x0008)
};


// ScriptStruct  Solarland.GearSetting
// Struct Size::0x0018
struct FGearSetting
{
    float                                         MinSpeed;                                                     // 0x0000(0x0004)
    float                                         MaxSpeed;                                                     // 0x0004(0x0004)
    float                                         StartRpm;                                                     // 0x0008(0x0004)
    float                                         MaxRpm;                                                       // 0x000C(0x0004)
    float                                         RpmDescendSpeed;                                              // 0x0010(0x0004)
    float                                         MinDescendRPM;                                                // 0x0014(0x0004)
};


// ScriptStruct  Solarland.GearData
// Struct Size::0x001C
struct FGearData
{
    char                                          pa_0000[0x001C]                                               // 0x0000(0x001C)
};


// ScriptStruct  Solarland.SolarVirtualInput
// Struct Size::0x0020
struct FSolarVirtualInput
{
    enum class EInputEventHandleType              InputBindType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FKey                                          VirtualKey;                                                   // 0x0008(0x0018)
};


// ScriptStruct  Solarland.WaitingCheckedCharacter
// Struct Size::0x0010
struct FWaitingCheckedCharacter
{
    ASolarCharacter*                              Character;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Solarland.ZiplineObjData
// Struct Size::0x0088
struct FZiplineObjData
{
    FSidesOfZiplineData                           ASideData;                                                    // 0x0000(0x0038)
    FSidesOfZiplineData                           BSideData;                                                    // 0x0038(0x0038)
    enum class EZiplineType                       ZiplineType;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    float                                         PitchToSlideUp;                                               // 0x0074(0x0004)
    bool                                          bLookAtTarget;                                                // 0x0078(0x0001)
    char                                          pa_0079[0x0003]                                               // 0x0079(0x0003)
    float                                         SlidingVelocity;                                              // 0x007C(0x0004)
    float                                         ZiplineAcc;                                                   // 0x0080(0x0004)
    float                                         CancelledVelocity;                                            // 0x0084(0x0004)
};


// ScriptStruct  Solarland.SidesOfZiplineData
// Struct Size::0x0038
struct FSidesOfZiplineData
{
    FVector                                       BeginningLocation;                                            // 0x0000(0x000C)
    FVector                                       ArrivingLocation;                                             // 0x000C(0x000C)
    FVector                                       LaunchingTargetLocation;                                      // 0x0018(0x000C)
    bool                                          bIfLaunchingAfterArrived;                                     // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         LaunchingAngleInDegree;                                       // 0x0028(0x0004)
    FVector                                       LaunchingVelocity;                                            // 0x002C(0x000C)
};


// ScriptStruct  Solarland.SoundPoolContainer
// Struct Size::0x0010
struct FSoundPoolContainer
{
    TArray<USoundPoolDataAsset*>                  SoundPoolDataAssets;                                          // 0x0000(0x0010)
};


// ScriptStruct  Solarland.SoundGroupContainer
// Struct Size::0x0020
struct FSoundGroupContainer
{
    TArray<USoundGroupDataAsset*>                 SoundGroupDataAssets;                                         // 0x0000(0x0010)
    TArray<UDataTable*>                           SoundGroupDataTables;                                         // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SoundGroupMultipleTableDataBase
// Struct Size::0x0008
struct FSoundGroupMultipleTableDataBase : public FSoundGroupTableDataBase
{
};


// ScriptStruct  Solarland.SoundGroupMultipleShareParamsSimpleTableData
// Struct Size::0x0018
struct FSoundGroupMultipleShareParamsSimpleTableData : public FSoundGroupMultipleTableDataBase
{
    TArray<FString>                               SoundEvents;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SoundGroupMultipleShareParamsTableData
// Struct Size::0x0010
struct FSoundGroupMultipleShareParamsTableData : public FSoundGroupMultipleTableDataBase
{
    USoundGroupWwiseParamsObject*                 WwiseParams;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Solarland.SoundGroupMultipleSimpleTableDataBase
// Struct Size::0x0018
struct FSoundGroupMultipleSimpleTableDataBase : public FSoundGroupMultipleTableDataBase
{
    TArray<FString>                               SoundEvents;                                                  // 0x0008(0x0010)
};


// ScriptStruct  Solarland.SoundGroupByBattleAdvancedTableData
// Struct Size::0x0098
struct FSoundGroupByBattleAdvancedTableData : public FSoundGroupTableDataBase
{
    FSoundGroupSoundEvent                         IAttackOtherEvent;                                            // 0x0008(0x0030)
    FSoundGroupSoundEvent                         OtherAttackMeEvent;                                           // 0x0038(0x0030)
    FSoundGroupSoundEvent                         OtherEvent;                                                   // 0x0068(0x0030)
};


// ScriptStruct  Solarland.SoundGroupSoundEvent
// Struct Size::0x0030
struct FSoundGroupSoundEvent
{
    FString                                       SoundEvent;                                                   // 0x0000(0x0010)
    FSoundGroupWwiseParams                        WwiseParams;                                                  // 0x0010(0x0020)
};


// ScriptStruct  Solarland.SoundGroupWwiseParams
// Struct Size::0x0020
struct FSoundGroupWwiseParams
{
    TArray<FWwiseSwitchParam>                     SwitchParams;                                                 // 0x0000(0x0010)
    TArray<FWwiseRTPCParam>                       RTPCParams;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Solarland.WwiseRTPCParam
// Struct Size::0x0018
struct FWwiseRTPCParam
{
    FString                                       RTPC;                                                         // 0x0000(0x0010)
    float                                         Value;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Solarland.WwiseSwitchParam
// Struct Size::0x0020
struct FWwiseSwitchParam
{
    FString                                       SwitchGroup;                                                  // 0x0000(0x0010)
    FString                                       SwitchState;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Solarland.SoundGroupByTeammateAdvancedTableData
// Struct Size::0x0098
struct FSoundGroupByTeammateAdvancedTableData : public FSoundGroupTableDataBase
{
    FSoundGroupSoundEvent                         SelfEvent;                                                    // 0x0008(0x0030)
    FSoundGroupSoundEvent                         TeammateEvent;                                                // 0x0038(0x0030)
    FSoundGroupSoundEvent                         OtherEvent;                                                   // 0x0068(0x0030)
};


// ScriptStruct  Solarland.SoundGroupSimpleAdvancedTableData
// Struct Size::0x0038
struct FSoundGroupSimpleAdvancedTableData : public FSoundGroupTableDataBase
{
    FSoundGroupSoundEvent                         SoundEvent;                                                   // 0x0008(0x0030)
};


// ScriptStruct  Solarland.SoundGroupShareParamsTableDataBase
// Struct Size::0x0028
struct FSoundGroupShareParamsTableDataBase : public FSoundGroupTableDataBase
{
    FSoundGroupWwiseParams                        WwiseParams;                                                  // 0x0008(0x0020)
};


// ScriptStruct  Solarland.SoundGroupByBattleTableData
// Struct Size::0x0058
struct FSoundGroupByBattleTableData : public FSoundGroupShareParamsTableDataBase
{
    FString                                       IAttackOtherEvent;                                            // 0x0028(0x0010)
    FString                                       OtherAttackMeEvent;                                           // 0x0038(0x0010)
    FString                                       OtherEvent;                                                   // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SoundGroupByTeammateTableData
// Struct Size::0x0058
struct FSoundGroupByTeammateTableData : public FSoundGroupShareParamsTableDataBase
{
    FString                                       SelfEvent;                                                    // 0x0028(0x0010)
    FString                                       TeammateEvent;                                                // 0x0038(0x0010)
    FString                                       OtherEvent;                                                   // 0x0048(0x0010)
};


// ScriptStruct  Solarland.SoundGroupSimpleTableData
// Struct Size::0x0038
struct FSoundGroupSimpleTableData : public FSoundGroupShareParamsTableDataBase
{
    FString                                       SoundEvent;                                                   // 0x0028(0x0010)
};


// ScriptStruct  Solarland.SpatializeItem
// Struct Size::0x0018
struct FSpatializeItem : public FFastArraySerializerItem
{
    FVector                                       Location;                                                     // 0x000C(0x000C)
};


// ScriptStruct  Solarland.TrackArray
// Struct Size::0x0130
struct FTrackArray : public FFastArraySerializer
{
    TArray<FTrackItem>                            Tracks;                                                       // 0x0108(0x0010)
    char                                          pa_0118[0x0018]                                               // 0x0118(0x0018)
};


// ScriptStruct  Solarland.TrackItem
// Struct Size::0x0040
struct FTrackItem : public FSpatializeItem
{
    float                                         Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       PID;                                                          // 0x0020(0x0010)
    bool                                          bValid;                                                       // 0x0030(0x0001)
    bool                                          bProjected;                                                   // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    FVector                                       FloorLocation;                                                // 0x0034(0x000C)
};


// ScriptStruct  Solarland.SolarImageProgressInfo
// Struct Size::0x0020
struct FSolarImageProgressInfo
{
    enum class ESolarImageProgressType            ProgressType;                                                 // 0x0000(0x0001)
    enum class ESolarImageProgressLineDirType     LineProgressDir;                                              // 0x0001(0x0001)
    enum class ESolarImageProgressQuaterCirclePrivotTypeQuaterProgressPrivot;                                   // 0x0002(0x0001)
    enum class ESolarImageProgressHalfCirclePrivotTypeHalfProgressPrivot;                                       // 0x0003(0x0001)
    float                                         CircleProgressInitDegree;                                     // 0x0004(0x0004)
    bool                                          bInvertProgressDir;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Progress;                                                     // 0x000C(0x0004)
    UMaterial*                                    Material;                                                     // 0x0010(0x0008)
    UMaterialInstanceDynamic*                     MaterialInstance;                                             // 0x0018(0x0008)
};


// ScriptStruct  Solarland.PlayerBattleRequestInfo
// Struct Size::0x0030
struct FPlayerBattleRequestInfo
{
    FString                                       NickName;                                                     // 0x0000(0x0010)
    int32_t                                       AccountLevel;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FPlatformParams                               PlatformParams;                                               // 0x0018(0x0018)
};


// ScriptStruct  Solarland.PlatformParams
// Struct Size::0x0018
struct FPlatformParams
{
    int64_t                                       UserId;                                                       // 0x0000(0x0008)
    FString                                       OpenID;                                                       // 0x0008(0x0010)
};


// ScriptStruct  Solarland.StartBattleRequestInfo
// Struct Size::0x0008
struct FStartBattleRequestInfo
{
    int32_t                                       aiNum;                                                        // 0x0000(0x0004)
    int32_t                                       AiLevel;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarSummonMarkData
// Struct Size::0x0008
struct FSolarSummonMarkData
{
    enum class EMarkerType                        MarkType;                                                     // 0x0000(0x0001)
    bool                                          NeedShowOnBigMap;                                             // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         CircleRadius;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Solarland.MapEventInfoRow
// Struct Size::0x0030
struct FMapEventInfoRow : public FTableRowBase
{
    FMapEventInfo                                 MapEventInfo;                                                 // 0x0008(0x0028)
};


// ScriptStruct  Solarland.MapEventInfo
// Struct Size::0x0028
struct FMapEventInfo
{
    int32_t                                       NameLocID;                                                    // 0x0000(0x0004)
    int32_t                                       DescLocId;                                                    // 0x0004(0x0004)
    int32_t                                       RemarkLocId;                                                  // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FSoftObjectPath                               IconPath;                                                     // 0x0010(0x0018)
};


// ScriptStruct  Solarland.ThunderFlashTargetData
// Struct Size::0x0030
struct FThunderFlashTargetData : public FGameplayAbilityTargetData
{
    FVector                                       StartLocation;                                                // 0x0008(0x000C)
    FVector                                       EndLocation;                                                  // 0x0014(0x000C)
    FVector                                       RelativeStartLocation;                                        // 0x0020(0x000C)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Solarland.ThunderFlashPenetrateData
// Struct Size::0x0008
struct FThunderFlashPenetrateData
{
    float                                         MaxDistance;                                                  // 0x0000(0x0004)
    bool                                          bDirectionOfMovement;                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Solarland.ThunderFlashMovingData
// Struct Size::0x0020
struct FThunderFlashMovingData
{
    TArray<enum class ESolarIgnoreCollisionType>  IgnoreCollisionTypeArray;                                     // 0x0000(0x0010)
    float                                         Speed;                                                        // 0x0010(0x0004)
    float                                         MaxDistance;                                                  // 0x0014(0x0004)
    float                                         BounceGravityScale;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.ThunderFlashDamageData
// Struct Size::0x00B0
struct FThunderFlashDamageData
{
    float                                         IntervalTime;                                                 // 0x0000(0x0004)
    float                                         DefaultDamage;                                                // 0x0004(0x0004)
    bool                                          bCanDamageTeammate;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FTransform                                    RelativeTransform;                                            // 0x0010(0x0030)
    FVector                                       Extent;                                                       // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    TArray<enum class EObjectTypeQuery>           DamageObjectTypeArray;                                        // 0x0050(0x0010)
    TMap<AActor*,float>                           DamageValueMap;                                               // 0x0060(0x0050)
};


// ScriptStruct  Solarland.ThunderFlashPhaseData
// Struct Size::0x00A0
struct FThunderFlashPhaseData
{
    float                                         Duration;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSoftObjectPath                               EffectPathForAlly;                                            // 0x0008(0x0018)
    FSoftObjectPath                               EffectPathForOpponent;                                        // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FTransform                                    RelativeTransform;                                            // 0x0040(0x0030)
    FSoftObjectPath                               AnimationPath;                                                // 0x0070(0x0018)
    TArray<FString>                               SoundNameArray;                                               // 0x0088(0x0010)
    char                                          pa_0098[0x0008]                                               // 0x0098(0x0008)
};


// ScriptStruct  Solarland.ThunderFlashPreviewMaterialColorData
// Struct Size::0x002C
struct FThunderFlashPreviewMaterialColorData
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
    FName                                         ParameterName;                                                // 0x0004(0x0008)
    FLinearColor                                  ValidColor;                                                   // 0x000C(0x0010)
    FLinearColor                                  InvalidColor;                                                 // 0x001C(0x0010)
};


// ScriptStruct  Solarland.SplineMeshDetails
// Struct Size::0x0050
struct FSplineMeshDetails
{
    UStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    enum class ESplineMeshAxis                    ForwardAxis;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UMaterialInterface*                           FirstMaterial;                                                // 0x0010(0x0008)
    UMaterialInterface*                           SecondMaterial;                                               // 0x0018(0x0008)
    FVector2D                                     StartScale;                                                   // 0x0020(0x0008)
    float                                         StartRoll;                                                    // 0x0028(0x0004)
    FVector2D                                     StartOffset;                                                  // 0x002C(0x0008)
    FVector2D                                     EndScale;                                                     // 0x0034(0x0008)
    float                                         EndRoll;                                                      // 0x003C(0x0004)
    FVector2D                                     EndOffset;                                                    // 0x0040(0x0008)
    int32_t                                       TranslucencySortPriority;                                     // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Solarland.UITweenBaseStruct
// Struct Size::0x0020
struct FUITweenBaseStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    bool                                          IsValid;                                                      // 0x0008(0x0001)
    enum class ETweenInterpolationType            InterpolationType;                                            // 0x0009(0x0001)
    enum class EEasingFunc                        EaseType;                                                     // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
    UCurveFloat*                                  InterpolationCurve;                                           // 0x0010(0x0008)
    UWidget*                                      Widget;                                                       // 0x0018(0x0008)
};


// ScriptStruct  Solarland.TextColorTween
// Struct Size::0x0048
struct FTextColorTween : public FUITweenBaseStruct
{
    FLinearColor                                  Original;                                                     // 0x0020(0x0010)
    FLinearColor                                  TargetColor;                                                  // 0x0030(0x0010)
    UTextBlock*                                   TargetText;                                                   // 0x0040(0x0008)
};


// ScriptStruct  Solarland.ImageColorTween
// Struct Size::0x0048
struct FImageColorTween : public FUITweenBaseStruct
{
    FLinearColor                                  Original;                                                     // 0x0020(0x0010)
    FLinearColor                                  TargetColor;                                                  // 0x0030(0x0010)
    UImage*                                       Image;                                                        // 0x0040(0x0008)
};


// ScriptStruct  Solarland.UIRenderOpacityTween
// Struct Size::0x0028
struct FUIRenderOpacityTween : public FUITweenBaseStruct
{
    float                                         OriginalOpacity;                                              // 0x0020(0x0004)
    float                                         TargetOpacity;                                                // 0x0024(0x0004)
};


// ScriptStruct  Solarland.UIPositionTween
// Struct Size::0x0040
struct FUIPositionTween : public FUITweenBaseStruct
{
    FVector2D                                     OriginalPosition;                                             // 0x0020(0x0008)
    FVector2D                                     TargetPosition;                                               // 0x0028(0x0008)
    bool                                          bHandleAsRelativeChange;                                      // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  Solarland.UIScaleTween
// Struct Size::0x0040
struct FUIScaleTween : public FUITweenBaseStruct
{
    FVector2D                                     OriginalScale;                                                // 0x0020(0x0008)
    FVector2D                                     TargetScale;                                                  // 0x0028(0x0008)
    bool                                          bHandleAsMultiplier;                                          // 0x0030(0x0001)
    char                                          pa_0031[0x000F]                                               // 0x0031(0x000F)
};


// ScriptStruct  Solarland.OBTeamColor
// Struct Size::0x0030
struct FOBTeamColor
{
    FString                                       Desc;                                                         // 0x0000(0x0010)
    FLinearColor                                  Main;                                                         // 0x0010(0x0010)
    FLinearColor                                  Vice;                                                         // 0x0020(0x0010)
};


// ScriptStruct  Solarland.ItemQualityData
// Struct Size::0x0088
struct FItemQualityData
{
    FLinearColor                                  BaseColor;                                                    // 0x0000(0x0010)
    FLinearColor                                  HUDColor;                                                     // 0x0010(0x0010)
    FLinearColor                                  HighQualityColor;                                             // 0x0020(0x0010)
    FLinearColor                                  LowQualityColor;                                              // 0x0030(0x0010)
    FLinearColor                                  HUDBGColor;                                                   // 0x0040(0x0010)
    FLinearColor                                  HUDDecorateColor;                                             // 0x0050(0x0010)
    FSoftObjectPath                               QualityIcon;                                                  // 0x0060(0x0018)
    FString                                       QualityChar;                                                  // 0x0078(0x0010)
};


// ScriptStruct  Solarland.TeamMemberColor
// Struct Size::0x0020
struct FTeamMemberColor
{
    FLinearColor                                  Main;                                                         // 0x0000(0x0010)
    FLinearColor                                  Vice;                                                         // 0x0010(0x0010)
};


// ScriptStruct  Solarland.WorldMarkInteractableTypeSetting
// Struct Size::0x000C
struct FWorldMarkInteractableTypeSetting
{
    int32_t                                       IconIndex;                                                    // 0x0000(0x0004)
    int32_t                                       LocID;                                                        // 0x0004(0x0004)
    int32_t                                       VoiceID;                                                      // 0x0008(0x0004)
};


// ScriptStruct  Solarland.DestroyObjectStruct
// Struct Size::0x0028
struct FDestroyObjectStruct
{
    UUserWidget*                                  RootWidget;                                                   // 0x0000(0x0008)
    FString                                       FullPath;                                                     // 0x0008(0x0010)
    TArray<FDestroyObjectEntry>                   Objects;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Solarland.DestroyObjectEntry
// Struct Size::0x0018
struct FDestroyObjectEntry
{
    UObject*                                      Object;                                                       // 0x0000(0x0008)
    FString                                       FullPath;                                                     // 0x0008(0x0010)
};


// ScriptStruct  Solarland.CustomWidget_TableRow
// Struct Size::0x0078
struct FCustomWidget_TableRow : public FTableRowBase
{
    FSoftObjectPath                               TeammateState;                                                // 0x0008(0x0018)
    FSoftObjectPath                               BattleScore;                                                  // 0x0020(0x0018)
    FSoftObjectPath                               SpectatorListPath;                                            // 0x0038(0x0018)
    FSoftObjectPath                               SafeAreaProgress;                                             // 0x0050(0x0018)
    TArray<FName>                                 OptionalLoadAdapterWidgets;                                   // 0x0068(0x0010)
};


// ScriptStruct  Solarland.GainEXPDisplayConfig
// Struct Size::0x0020
struct FGainEXPDisplayConfig : public FTableRowBase
{
    FString                                       Note;                                                         // 0x0008(0x0010)
    int32_t                                       LocalTextId;                                                  // 0x0018(0x0004)
    bool                                          bIsShow;                                                      // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Solarland.KillTotalNoticeWidget
// Struct Size::0x0018
struct FKillTotalNoticeWidget
{
    TArray<UImage*>                               Img_KillTotals;                                               // 0x0000(0x0010)
    USolarTextBlock*                              Txt_KillTotal;                                                // 0x0010(0x0008)
};


// ScriptStruct  Solarland.UIWidgetProxyConfigEntry
// Struct Size::0x0018
struct FUIWidgetProxyConfigEntry
{
    enum class EUIPanelName                       RootPanelName;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       WidgetFullPath;                                               // 0x0008(0x0010)
};


// ScriptStruct  Solarland.UIPanelConfigEntry
// Struct Size::0x0038
struct FUIPanelConfigEntry
{
    FSoftClassPath                                MobileUIPath;                                                 // 0x0000(0x0018)
    FSoftClassPath                                DesktopUIPath;                                                // 0x0018(0x0018)
    enum class EUIRoot                            UILayerRoot;                                                  // 0x0030(0x0001)
    bool                                          bPrecache;                                                    // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  Solarland.InteractionButtonSpec
// Struct Size::0x0004
struct FInteractionButtonSpec
{
    int32_t                                       Priority;                                                     // 0x0000(0x0004)
};


// ScriptStruct  Solarland.GainEXPAudioConfig
// Struct Size::0x0018
struct FGainEXPAudioConfig : public FTableRowBase
{
    FString                                       AudioName;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Solarland.StarterUIInfo
// Struct Size::0x0088
struct FStarterUIInfo
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UUserWidget*                                  UIClass;                                                      // 0x0010(0x0008)
    TSoftClassPtr<UObject>                        MobileUIClass;                                                // 0x0018(0x0028)
    TSoftClassPtr<UObject>                        DesktopUIClass;                                               // 0x0040(0x0028)
    bool                                          bCreateForEachDisplay;                                        // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    int32_t                                       OrderFromTopOverride;                                         // 0x006C(0x0004)
    bool                                          bFullScreen;                                                  // 0x0070(0x0001)
    char                                          pa_0071[0x0017]                                               // 0x0071(0x0017)
};


// ScriptStruct  Solarland.LruWidgetPool
// Struct Size::0x0080
struct FLruWidgetPool
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TArray<UUserWidget*>                          ActiveWidgetStack;                                            // 0x0008(0x0010)
    char                                          pa_0018[0x0068]                                               // 0x0018(0x0068)
};


// ScriptStruct  Solarland.VehicleSkinWeakPoint
// Struct Size::0x0060
struct FVehicleSkinWeakPoint
{
    TSoftObjectPtr<UStaticMesh>                   WeakPointStaticMesh;                                          // 0x0000(0x0028)
    bool                                          bWeakPointTransform;                                          // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    FTransform                                    WeakPointRelativeTransform;                                   // 0x0030(0x0030)
};


// ScriptStruct  Solarland.SolarVehicleSkinPreviewPageInfo
// Struct Size::0x0002
struct FSolarVehicleSkinPreviewPageInfo
{
    bool                                          bMirror;                                                      // 0x0000(0x0001)
    bool                                          bChangeAnim;                                                  // 0x0001(0x0001)
};


// ScriptStruct  Solarland.SolarVehicleSkinPreviewMeshInfo
// Struct Size::0x00C0
struct FSolarVehicleSkinPreviewMeshInfo
{
    USkeletalMesh*                                Mesh;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    UAnimationAsset*                              AnimToPlay;                                                   // 0x0040(0x0008)
    UAnimationAsset*                              PageAnimToPlay;                                               // 0x0048(0x0008)
    char                                          pa_0050[0x0048]                                               // 0x0050(0x0048)
    TArray<UMaterialInterface*>                   OverrideMaterials;                                            // 0x0098(0x0010)
    FName                                         SocketName;                                                   // 0x00A8(0x0008)
    TArray<float>                                 CustomData;                                                   // 0x00B0(0x0010)
};


// ScriptStruct  Solarland.BossSpawnCheckInfo
// Struct Size::0x0028
struct FBossSpawnCheckInfo : public FTableRowBase
{
    float                                         SpawnCollisionRadius;                                         // 0x0008(0x0004)
    float                                         SpawnCollisionHeight;                                         // 0x000C(0x0004)
    TArray<enum class EObjectTypeQuery>           SpawnCollisionCheckObjectTypes;                               // 0x0010(0x0010)
    float                                         SpawnBossHeight;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.VehicleSpawnGroupRow
// Struct Size::0x0048
struct FVehicleSpawnGroupRow : public FTableRowBase
{
    FVehicleSpawnGroupData                        VehicleSpawnGroupData;                                        // 0x0008(0x0028)
    enum class EVehicleSpawnAlternateType         AlternateType;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       AlternateTime;                                                // 0x0034(0x0004)
    FVehicleSapwnDate                             AlternateDate;                                                // 0x0038(0x0010)
};


// ScriptStruct  Solarland.VehicleSapwnDate
// Struct Size::0x0010
struct FVehicleSapwnDate
{
    int32_t                                       Year;                                                         // 0x0000(0x0004)
    int32_t                                       Month;                                                        // 0x0004(0x0004)
    int32_t                                       Day;                                                          // 0x0008(0x0004)
    int32_t                                       Hour;                                                         // 0x000C(0x0004)
};


// ScriptStruct  Solarland.VehicleSpawnGroupData
// Struct Size::0x0028
struct FVehicleSpawnGroupData
{
    enum class EVehicleSpawnType                  SpawnType;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TArray<int32_t>                               Ids;                                                          // 0x0008(0x0010)
    TArray<FVehicleSpawnWeights>                  Weights;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Solarland.VehicleSpawnWeights
// Struct Size::0x0018
struct FVehicleSpawnWeights
{
    int32_t                                       Sum;                                                          // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<float>                                 W;                                                            // 0x0008(0x0010)
};


// ScriptStruct  Solarland.VehicleStateAir
// Struct Size::0x0080
struct FVehicleStateAir : public FVehicleState
{
    char                                          pa_0078[0x0008]                                               // 0x0078(0x0008)
};


// ScriptStruct  Solarland.VehicleAirToGround
// Struct Size::0x0018
struct FVehicleAirToGround : public FVehicleStateTransition
{
};


// ScriptStruct  Solarland.VehicleStateGround
// Struct Size::0x0090
struct FVehicleStateGround : public FVehicleState
{
    char                                          pa_0078[0x0018]                                               // 0x0078(0x0018)
};


// ScriptStruct  Solarland.VehicleGroundToSliding
// Struct Size::0x0018
struct FVehicleGroundToSliding : public FVehicleStateTransition
{
};


// ScriptStruct  Solarland.VehicleStateSliding
// Struct Size::0x0078
struct FVehicleStateSliding : public FVehicleState
{
};


// ScriptStruct  Solarland.VehicleSlidingToGround
// Struct Size::0x0018
struct FVehicleSlidingToGround : public FVehicleStateTransition
{
};


// ScriptStruct  Solarland.StealthMaterialParams
// Struct Size::0x00A0
struct FStealthMaterialParams
{
    TMap<FName,float>                             ScalarParams;                                                 // 0x0000(0x0050)
    TMap<FName,FLinearColor>                      VectorParams;                                                 // 0x0050(0x0050)
};


// ScriptStruct  Solarland.VehicleWeaponCrossHairInfo
// Struct Size::0x0024
struct FVehicleWeaponCrossHairInfo
{
    bool                                          bShowCrossHair;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector2D                                     CrossHairPosition;                                            // 0x0004(0x0008)
    float                                         CrossHairOpacity;                                             // 0x000C(0x0004)
    bool                                          bShowReticleDirection;                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector2D                                     ReticleDirectionPosition;                                     // 0x0014(0x0008)
    float                                         ReticleDirectionAngle;                                        // 0x001C(0x0004)
    bool                                          bCrossHairForbid;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  Solarland.VertexAnimInfo
// Struct Size::0x0010
struct FVertexAnimInfo
{
    int32_t                                       StartFrame;                                                   // 0x0000(0x0004)
    int32_t                                       EndFrame;                                                     // 0x0004(0x0004)
    float                                         Length;                                                       // 0x0008(0x0004)
    bool                                          Loop;                                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Solarland.VibrateWeaponFactorDeviceMap
// Struct Size::0x0050
struct FVibrateWeaponFactorDeviceMap
{
    TMap<enum class EVibrateDeviceType,float>     DeviceMap;                                                    // 0x0000(0x0050)
};


// ScriptStruct  Solarland.VibrateDataDTRow
// Struct Size::0x0020
struct FVibrateDataDTRow : public FTableRowBase
{
    FSoftObjectPath                               ClipPath;                                                     // 0x0008(0x0018)
};


// ScriptStruct  Solarland.VisualSoundData
// Struct Size::0x0058
struct FVisualSoundData
{
    FVisualSoundTagData                           TagsCondition;                                                // 0x0000(0x0040)
    enum class EVisualSoundDetectionRule          DetectionRule;                                                // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         DetectionDis;                                                 // 0x0044(0x0004)
    float                                         DetectionZ;                                                   // 0x0048(0x0004)
    float                                         AliveTime;                                                    // 0x004C(0x0004)
    float                                         CanBreakTime;                                                 // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Solarland.VisualSoundTagData
// Struct Size::0x0040
struct FVisualSoundTagData
{
    FGameplayTagContainer                         RequiredTagsAny;                                              // 0x0000(0x0020)
    FGameplayTagContainer                         BlockedTagsAny;                                               // 0x0020(0x0020)
};


// ScriptStruct  Solarland.AnimMsgData
// Struct Size::0x0008
struct FAnimMsgData
{
    enum class EWeaponAnimState                   State;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Speed;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Solarland.AntiCheatBulletHitParameter
// Struct Size::0x0060
struct FAntiCheatBulletHitParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    float                                         HitTimeStamp;                                                 // 0x0008(0x0004)
    FVector_NetQuantize                           PlayerViewDir;                                                // 0x000C(0x000C)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0018(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x0024(0x000C)
    TArray<FSolarWeaponHitAntiData>               HitAntiDatas;                                                 // 0x0030(0x0010)
    TArray<FHitResult>                            Hits;                                                         // 0x0040(0x0010)
    TArray<AActor*>                               IgnoreHitedActors;                                            // 0x0050(0x0010)
};


// ScriptStruct  Solarland.AntiCheatBulletSpawnParameter
// Struct Size::0x0080
struct FAntiCheatBulletSpawnParameter
{
    FFireUniqueID                                 FireUniqueID;                                                 // 0x0000(0x0004)
    float                                         FireTimeStamp;                                                // 0x0004(0x0004)
    float                                         InitalElapsedTime;                                            // 0x0008(0x0004)
    FVector                                       PlayerViewDir;                                                // 0x000C(0x000C)
    FVector_NetQuantize                           PlayerViewLoc;                                                // 0x0018(0x000C)
    char                                          IsScopeOpen;                                                  // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector_NetQuantize                           StartLoc;                                                     // 0x0028(0x000C)
    FVector_NetQuantize                           TargetLoc;                                                    // 0x0034(0x000C)
    FVector_NetQuantizeNormal                     Dir;                                                          // 0x0040(0x000C)
    FVector_NetQuantize                           MuzzleFxLoc;                                                  // 0x004C(0x000C)
    FString                                       AntiData;                                                     // 0x0058(0x0010)
    TWeakObjectPtr<AActor>                        Target;                                                       // 0x0068(0x0008)
    FVector_NetQuantize                           HitTargetRelativeLocation;                                    // 0x0070(0x000C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  Solarland.WeaponAssistAimByCharacterTag
// Struct Size::0x0058
struct FWeaponAssistAimByCharacterTag
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0000(0x0050)
    UWeaponAssistAimWeaponConfig*                 AssistAimConfig;                                              // 0x0050(0x0008)
};


// ScriptStruct  Solarland.WeaponAssistAimWeaponConfigAll
// Struct Size::0x0060
struct FWeaponAssistAimWeaponConfigAll
{
    UWeaponAssistAimWeaponConfig*                 DefaultConfig;                                                // 0x0000(0x0008)
    UWeaponAssistAimWeaponConfig*                 DefaultScopeConfig;                                           // 0x0008(0x0008)
    TMap<enum class EWeaponScopeType,UWeaponAssistAimWeaponConfig*>ScopeConfigMap;                              // 0x0010(0x0050)
};


// ScriptStruct  Solarland.BaseFollowSpeedByTag
// Struct Size::0x00E8
struct FBaseFollowSpeedByTag
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0000(0x0050)
    float                                         SameTargetTriggerCooldown;                                    // 0x0050(0x0004)
    float                                         HorizontalSpeed;                                              // 0x0054(0x0004)
    float                                         VerticalSpeed;                                                // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FRuntimeFloatCurve                            SpeedScaleByDistanceCurve;                                    // 0x0060(0x0088)
};


// ScriptStruct  Solarland.HandHeldWeaponCrosshairData
// Struct Size::0x0038
struct FHandHeldWeaponCrosshairData : public FTableRowBase
{
    UCrossHairWidget*                             CrosshairWidgetClass;                                         // 0x0008(0x0008)
    USolarWeaponBulletContainerWidget*            BulletWidgetClass;                                            // 0x0010(0x0008)
    FWeaponSpreadValue                            BaseSpread;                                                   // 0x0018(0x0008)
    bool                                          bCrosshairFollowSpreadChange;                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    float                                         DeltaSpreadScale;                                             // 0x0024(0x0004)
    float                                         ShootFirstDeltaSpreadScale;                                   // 0x0028(0x0004)
    float                                         ShootContinuousDeltaSpreadScale;                              // 0x002C(0x0004)
    float                                         ShootMaxDeltaSpreadScale;                                     // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.WeaponAttributeEffectData
// Struct Size::0x0020
struct FWeaponAttributeEffectData : public FTableRowBase
{
    FName                                         EffectID;                                                     // 0x0008(0x0008)
    enum class EWeaponAttributeType               AttributeType;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FWeaponAttributeParam                         AttributeParam;                                               // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Solarland.WeaponAttributeData
// Struct Size::0x0148
struct FWeaponAttributeData : public FTableRowBase
{
    TArray<int32_t>                               BaseDamages;                                                  // 0x0008(0x0010)
    TArray<int32_t>                               BaseDamagesForVehicle;                                        // 0x0018(0x0010)
    float                                         HeadShotMultiplier;                                           // 0x0028(0x0004)
    float                                         DamageEffectRange;                                            // 0x002C(0x0004)
    TArray<FWeaponDamageDistanceDecayData>        DamageDistanceDecay;                                          // 0x0030(0x0010)
    enum class EWeaponTrajectoryType              TrajectoryType;                                               // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    float                                         MaxRange;                                                     // 0x0044(0x0004)
    float                                         Speed;                                                        // 0x0048(0x0004)
    float                                         NoGravityRange;                                               // 0x004C(0x0004)
    float                                         Gravity;                                                      // 0x0050(0x0004)
    float                                         Radius;                                                       // 0x0054(0x0004)
    int32_t                                       CanisterShrapnelSum;                                          // 0x0058(0x0004)
    int32_t                                       MaxCanisterShrapnelEffectSum;                                 // 0x005C(0x0004)
    float                                         ReloadBoltTime;                                               // 0x0060(0x0004)
    float                                         ReloadOnlyTime;                                               // 0x0064(0x0004)
    enum class EWeaponShootPattern                ShootPattern;                                                 // 0x0068(0x0001)
    char                                          pa_0069[0x0003]                                               // 0x0069(0x0003)
    float                                         ShootInterval;                                                // 0x006C(0x0004)
    int32_t                                       BurstNum;                                                     // 0x0070(0x0004)
    float                                         BurstInterval;                                                // 0x0074(0x0004)
    float                                         BoltActionTime;                                               // 0x0078(0x0004)
    bool                                          bEnableOpenRecoil;                                            // 0x007C(0x0001)
    bool                                          bEnableRecoilRecovery;                                        // 0x007D(0x0001)
    char                                          pa_007E[0x0002]                                               // 0x007E(0x0002)
    FWeaponRecoilRecoveryPattern                  RecoveryPattern;                                              // 0x0080(0x00A0)
    int32_t                                       MoveSpeedConfigId;                                            // 0x0120(0x0004)
    int32_t                                       HandHeldWeaponCrosshairID;                                    // 0x0124(0x0004)
    FName                                         SpreadID;                                                     // 0x0128(0x0008)
    FName                                         SpreadID_ADS;                                                 // 0x0130(0x0008)
    FName                                         RecoilID;                                                     // 0x0138(0x0008)
    FName                                         RecoilID_ADS;                                                 // 0x0140(0x0008)
};


// ScriptStruct  Solarland.WeaponRecoilRecoveryPattern
// Struct Size::0x00A0
struct FWeaponRecoilRecoveryPattern : public FSolarStructPattern
{
    float                                         StartDelay;                                                   // 0x0008(0x0004)
    float                                         Duration;                                                     // 0x000C(0x0004)
    FSolarSmooth                                  Smooth;                                                       // 0x0010(0x0090)
};


// ScriptStruct  Solarland.WeaponDamageDistanceDecayData
// Struct Size::0x000C
struct FWeaponDamageDistanceDecayData
{
    float                                         Distance;                                                     // 0x0000(0x0004)
    enum class EWeaponDamageDecayMode             Mode;                                                         // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         Scale;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Solarland.SolarWeaponSoundGroupConfig
// Struct Size::0x0048
struct FSolarWeaponSoundGroupConfig
{
    FName                                         Equip;                                                        // 0x0000(0x0008)
    FName                                         UnEquip;                                                      // 0x0008(0x0008)
    FName                                         OpenScope;                                                    // 0x0010(0x0008)
    FName                                         CloseScope;                                                   // 0x0018(0x0008)
    FName                                         Fire;                                                         // 0x0020(0x0008)
    FName                                         FireLoopStart;                                                // 0x0028(0x0008)
    FName                                         FireLoopStop;                                                 // 0x0030(0x0008)
    FName                                         FireLast;                                                     // 0x0038(0x0008)
    FName                                         FireEnd;                                                      // 0x0040(0x0008)
};


// ScriptStruct  Solarland.SolarWeaponSoundGroupFireMappingData
// Struct Size::0x0038
struct FSolarWeaponSoundGroupFireMappingData : public FTableRowBase
{
    UDataTable*                                   SubMappingTable;                                              // 0x0008(0x0008)
    FName                                         Fire;                                                         // 0x0010(0x0008)
    FName                                         FireLoopStart;                                                // 0x0018(0x0008)
    FName                                         FireLoopStop;                                                 // 0x0020(0x0008)
    FName                                         FireLast;                                                     // 0x0028(0x0008)
    FName                                         FireEnd;                                                      // 0x0030(0x0008)
};


// ScriptStruct  Solarland.SolarWeaponSoundGroupMappingData
// Struct Size::0x0100
struct FSolarWeaponSoundGroupMappingData : public FTableRowBase
{
    FName                                         Default;                                                      // 0x0008(0x0008)
    TMap<enum class EWeaponType,FName>            TypeMapping;                                                  // 0x0010(0x0050)
    TMap<int32_t,FName>                           IDMapping;                                                    // 0x0060(0x0050)
    TMap<int32_t,FName>                           SkinMapping;                                                  // 0x00B0(0x0050)
};


// ScriptStruct  Solarland.SoundGroupMultipleWeaponFireTableDataBase
// Struct Size::0x0070
struct FSoundGroupMultipleWeaponFireTableDataBase : public FSoundGroupTableDataBase
{
    bool                                          bEnableMarker;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FString>                               CommonEvents;                                                 // 0x0010(0x0010)
    TArray<FString>                               InRoomEvents;                                                 // 0x0020(0x0010)
    TArray<FString>                               OutRoomEvents;                                                // 0x0030(0x0010)
    TArray<FString>                               CommonEventsWithSilencer;                                     // 0x0040(0x0010)
    TArray<FString>                               InRoomEventsWithSilencer;                                     // 0x0050(0x0010)
    TArray<FString>                               OutRoomEventsWithSilencer;                                    // 0x0060(0x0010)
};


// ScriptStruct  Solarland.SoundGroupPlayWeaponSoundContext
// Struct Size::0x0010
struct FSoundGroupPlayWeaponSoundContext : public FSoundGroupPlayContext
{
};


// ScriptStruct  Solarland.SolarWeaponAttachDataTableRow
// Struct Size::0x0190
struct FSolarWeaponAttachDataTableRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FWeaponAttachData                             DefaultAttachData;                                            // 0x0010(0x0130)
    TMap<int32_t,FWeaponAttachData>               WeaponSkinSpecificData;                                       // 0x0140(0x0050)
};


// ScriptStruct  Solarland.WeaponAttachData
// Struct Size::0x0130
struct FWeaponAttachData
{
    FWeaponAttachTransformData                    DefaultRelativeTransform;                                     // 0x0000(0x0090)
    TMap<enum class ECharacterBodyScaleType,FWeaponAttachTransformData>TransformByBodyScale;                    // 0x0090(0x0050)
    TMap<int32_t,FWeaponAttachDataByCharacter>    CharacterSpecificData;                                        // 0x00E0(0x0050)
};


// ScriptStruct  Solarland.WeaponAttachDataByCharacter
// Struct Size::0x00E0
struct FWeaponAttachDataByCharacter
{
    FWeaponAttachTransformData                    DefaultRelativeTransform;                                     // 0x0000(0x0090)
    TMap<int32_t,FWeaponAttachTransformData>      SkinSpecificData;                                             // 0x0090(0x0050)
};


// ScriptStruct  Solarland.WeaponAttachTransformData
// Struct Size::0x0090
struct FWeaponAttachTransformData
{
    FTransform                                    RelativeTransformIdle;                                        // 0x0000(0x0030)
    FTransform                                    RelativeTransformCrouch;                                      // 0x0030(0x0030)
    FTransform                                    RelativeTransformIdleSprint;                                  // 0x0060(0x0030)
};


// ScriptStruct  Solarland.SolarWeaponLODTableRow
// Struct Size::0x0148
struct FSolarWeaponLODTableRow : public FTableRowBase
{
    TMap<enum class ESolarWeaponLODState,FSolarWeaponLODData>WeaponDefaultLODMap;                               // 0x0008(0x0050)
    TMap<enum class ESolarWeaponLODState,FSolarWeaponLODData>WeaponFocusedLODMap;                               // 0x0058(0x0050)
    TMap<enum class ESolarWeaponLODState,FSolarWeaponLODData>WeaponPartDefaultLODMap;                           // 0x00A8(0x0050)
    TMap<enum class ESolarWeaponLODState,FSolarWeaponLODData>WeaponPartFocusedLODMap;                           // 0x00F8(0x0050)
};


// ScriptStruct  Solarland.SolarWeaponLODData
// Struct Size::0x0008
struct FSolarWeaponLODData
{
    int32_t                                       ForcedLOD;                                                    // 0x0000(0x0004)
    int32_t                                       MinLOD;                                                       // 0x0004(0x0004)
};


// ScriptStruct  Solarland.SolarWeaponSkinTableRow
// Struct Size::0x0020
struct FSolarWeaponSkinTableRow : public FTableRowBase
{
    FSoftObjectPath                               WeaponSkinDataPath;                                           // 0x0008(0x0018)
};


// ScriptStruct  Solarland.WeaponScopeSensitivityRow
// Struct Size::0x0028
struct FWeaponScopeSensitivityRow : public FTableRowBase
{
    FName                                         TypeName;                                                     // 0x0008(0x0008)
    float                                         FovValue;                                                     // 0x0010(0x0004)
    float                                         HipToAdsTime;                                                 // 0x0014(0x0004)
    UCurveFloat*                                  FovChangeCurve;                                               // 0x0018(0x0008)
    float                                         HitEffectScale;                                               // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Solarland.WeaponAppearanceDTRow
// Struct Size::0x0270
struct FWeaponAppearanceDTRow : public FTableRowBase
{
    FSoftObjectPath                               MeshPath;                                                     // 0x0008(0x0018)
    FSoftObjectPath                               MaterialPath;                                                 // 0x0020(0x0018)
    enum class EWeaponType                        WPType;                                                       // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       FireModeNameLocalizationID;                                   // 0x003C(0x0004)
    FSlateBrush                                   TriggerIcon;                                                  // 0x0040(0x00F0)
    int32_t                                       UpgradeFireModeNameLocalizationID;                            // 0x0130(0x0004)
    char                                          pa_0134[0x000C]                                               // 0x0134(0x000C)
    FSlateBrush                                   UpgradeTriggerIcon;                                           // 0x0140(0x00F0)
    float                                         Radius;                                                       // 0x0230(0x0004)
    char                                          pa_0234[0x000C]                                               // 0x0234(0x000C)
    FTransform                                    SphereTransform;                                              // 0x0240(0x0030)
};


// ScriptStruct  Solarland.WeaponDTRow
// Struct Size::0x0050
struct FWeaponDTRow : public FTableRowBase
{
    FString                                       WeaponDesc;                                                   // 0x0008(0x0010)
    FSoftClassPath                                FightWeaponBPPath;                                            // 0x0018(0x0018)
    FSoftClassPath                                PreviewWeaponBPPath;                                          // 0x0030(0x0018)
    USingleWeaponConfig*                          WeaponConfig;                                                 // 0x0048(0x0008)
};


// ScriptStruct  Solarland.MoveSpeedReduceCurveConfig
// Struct Size::0x00D8
struct FMoveSpeedReduceCurveConfig
{
    FGameplayTagRequirements                      TagRequirements;                                              // 0x0000(0x0050)
    FRuntimeFloatCurve                            MoveSpeedReduceCurveOnHoldingWeapon;                          // 0x0050(0x0088)
};


// ScriptStruct  Solarland.WeaponMeshEffectData
// Struct Size::0x0060
struct FWeaponMeshEffectData
{
    FSoftObjectPath                               EffectPath;                                                   // 0x0000(0x0018)
    FName                                         SocketName;                                                   // 0x0018(0x0008)
    FTransform                                    RelativeTransform;                                            // 0x0020(0x0030)
    UCurveVector*                                 ScaleCurveForFOV;                                             // 0x0050(0x0008)
    UCurveVector*                                 LocationCurveForFOV;                                          // 0x0058(0x0008)
};


// ScriptStruct  Solarland.WeaponBodyData
// Struct Size::0x00B0
struct FWeaponBodyData
{
    int32_t                                       weaponid;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FSoftObjectPath                               WeaponMesh;                                                   // 0x0008(0x0018)
    UWeaponAnimInstance*                          WeaponAnimBP;                                                 // 0x0020(0x0008)
    TMap<enum class ECharacterMontage,FSoftObjectPath>OverrideWeaponAnimSequenceMap;                            // 0x0028(0x0050)
    FSoftObjectPath                               LodpMesh;                                                     // 0x0078(0x0018)
    TArray<FSoftObjectPath>                       WeaponMaterials;                                              // 0x0090(0x0010)
    TArray<FWeaponSkinExtraPS>                    SkinPSArray;                                                  // 0x00A0(0x0010)
};


// ScriptStruct  Solarland.WeaponSkinExtraPS
// Struct Size::0x0030
struct FWeaponSkinExtraPS
{
    bool                                          bStimulatedShow;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Socket;                                                       // 0x0004(0x0008)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UParticleSystem*                              ps;                                                           // 0x0010(0x0008)
    FSoftObjectPath                               PSPath;                                                       // 0x0018(0x0018)
};


// ScriptStruct  Solarland.WeaponSkinPartData
// Struct Size::0x0040
struct FWeaponSkinPartData
{
    int32_t                                       WeaponPartId;                                                 // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       WeaponPartDesc;                                               // 0x0008(0x0010)
    FSoftObjectPath                               PartDataAsset;                                                // 0x0018(0x0018)
    TArray<FSoftObjectPath>                       WeaponMaterials;                                              // 0x0030(0x0010)
};


// ScriptStruct  Solarland.WeaponMechanicalState
// Struct Size::0x0058
struct FWeaponMechanicalState
{
    enum class EWeaponMechanicalUniqueState       UniqueState;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    enum class EWeaponMechanicalSideFlag          SideFlags;                                                    // 0x0004(0x0004)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    ASolarWeapon*                                 Weapon;                                                       // 0x0010(0x0008)
    USingleWeaponConfig*                          Config;                                                       // 0x0018(0x0008)
    char                                          pa_0020[0x0038]                                               // 0x0020(0x0038)
};


// ScriptStruct  Solarland.WeaponPartGripDataForCharacter
// Struct Size::0x0138
struct FWeaponPartGripDataForCharacter
{
    FVector                                       LeftHandIkEffectLocation;                                     // 0x0000(0x000C)
    FVector                                       LeftHandIkJointLocation;                                      // 0x000C(0x000C)
    FVector                                       LeftHandIkJointLocationForGunIdle;                            // 0x0018(0x000C)
    FVector                                       LeftHandIkJointLocationForGunIdleWhenCrouch;                  // 0x0024(0x000C)
    FLeftHandGripConfig                           LeftHandGripRotationConfig;                                   // 0x0030(0x0084)
    FLeftHandGripConfig                           LeftHandGripRotationConfigForGunIdle;                         // 0x00B4(0x0084)
};


// ScriptStruct  Solarland.SolarAmmoMeshData
// Struct Size::0x0048
struct FSolarAmmoMeshData
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
    FLinearColor                                  DefaultColor;                                                 // 0x0004(0x0010)
    FLinearColor                                  WarningColor;                                                 // 0x0014(0x0010)
    FLinearColor                                  SeriousWarningColor;                                          // 0x0024(0x0010)
    float                                         WarningLine;                                                  // 0x0034(0x0004)
    float                                         SeriousWarningLine;                                           // 0x0038(0x0004)
    float                                         SeriousWarningBlinkLine;                                      // 0x003C(0x0004)
    float                                         SeriousWarningBlinkStrength;                                  // 0x0040(0x0004)
    float                                         SeriousWarningBlinkFrequence;                                 // 0x0044(0x0004)
};


// ScriptStruct  Solarland.PartScopeCorrect
// Struct Size::0x0018
struct FPartScopeCorrect
{
    FVector                                       FPPLocation;                                                  // 0x0000(0x000C)
    FRotator                                      FPPRotation;                                                  // 0x000C(0x000C)
};


// ScriptStruct  Solarland.WeaponGunKickSpringDamperSmoothData
// Struct Size::0x0008
struct FWeaponGunKickSpringDamperSmoothData
{
    float                                         SmoothingTime;                                                // 0x0000(0x0004)
    float                                         DampingRatio;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Solarland.WeaponGunKickContinuousRotatorGenerator
// Struct Size::0x01A0
struct FWeaponGunKickContinuousRotatorGenerator
{
    int32_t                                       SprayingCount;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FWeaponRecoilContinuousRotatorGenerator       Generator;                                                    // 0x0008(0x0198)
};


// ScriptStruct  Solarland.WeaponRecoilContinuousRotatorGenerator
// Struct Size::0x0198
struct FWeaponRecoilContinuousRotatorGenerator
{
    FRuntimeFloatCurve                            PitchValueCurve;                                              // 0x0000(0x0088)
    FRuntimeFloatCurve                            YawValueCurve;                                                // 0x0088(0x0088)
    FRuntimeFloatCurve                            RollValueCurve;                                               // 0x0110(0x0088)
};


// ScriptStruct  Solarland.WeaponGunKickContinuousVectorGenerator
// Struct Size::0x01A0
struct FWeaponGunKickContinuousVectorGenerator
{
    int32_t                                       SprayingCount;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FWeaponRecoilContinuousVectorGenerator        Generator;                                                    // 0x0008(0x0198)
};


// ScriptStruct  Solarland.WeaponRecoilContinuousVectorGenerator
// Struct Size::0x0198
struct FWeaponRecoilContinuousVectorGenerator
{
    FRuntimeFloatCurve                            XValueCurve;                                                  // 0x0000(0x0088)
    FRuntimeFloatCurve                            YValueCurve;                                                  // 0x0088(0x0088)
    FRuntimeFloatCurve                            ZValueCurve;                                                  // 0x0110(0x0088)
};


// ScriptStruct  Solarland.ValueCurveBySprayingTime
// Struct Size::0x0018
struct FValueCurveBySprayingTime
{
    UCurveVector*                                 ValueCurve;                                                   // 0x0000(0x0008)
    float                                         TimeScale;                                                    // 0x0008(0x0004)
    FVector                                       ValueScale;                                                   // 0x000C(0x000C)
};


// ScriptStruct  Solarland.WeaponRecoilPatternBase
// Struct Size::0x00A8
struct FWeaponRecoilPatternBase : public FSolarStructPattern
{
    float                                         VertRecoilScale;                                              // 0x0008(0x0004)
    float                                         HoriRecoilScale;                                              // 0x000C(0x0004)
    float                                         IncreaseTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FSolarSmooth                                  IncreaseSmooth;                                               // 0x0018(0x0090)
};


// ScriptStruct  Solarland.WeaponRecoilBurstPattern
// Struct Size::0x00E8
struct FWeaponRecoilBurstPattern : public FWeaponRecoilPatternBase
{
    FBurstRecoilConfigGroup                       VertRecoil;                                                   // 0x00A8(0x0020)
    FBurstRecoilConfigGroup                       HoriRecoil;                                                   // 0x00C8(0x0020)
};


// ScriptStruct  Solarland.BurstRecoilConfigGroup
// Struct Size::0x0020
struct FBurstRecoilConfigGroup
{
    TArray<float>                                 BaseRecoils;                                                  // 0x0000(0x0010)
    TArray<float>                                 IncrementValues;                                              // 0x0010(0x0010)
};


// ScriptStruct  Solarland.WeaponRecoilAutoPattern
// Struct Size::0x0168
struct FWeaponRecoilAutoPattern : public FWeaponRecoilPatternBase
{
    FAutoRecoilConfigGroup                        FixedVertRecoil;                                              // 0x00A8(0x0030)
    FAutoRecoilConfigGroup                        FixedHoriRecoil;                                              // 0x00D8(0x0030)
    FAutoRecoilConfigGroup                        LoopVertRecoil;                                               // 0x0108(0x0030)
    FAutoRecoilConfigGroup                        LoopHoriRecoil;                                               // 0x0138(0x0030)
};


// ScriptStruct  Solarland.AutoRecoilConfigGroup
// Struct Size::0x0030
struct FAutoRecoilConfigGroup
{
    TArray<float>                                 BaseRecoils;                                                  // 0x0000(0x0010)
    TArray<float>                                 IncrementProbabilities;                                       // 0x0010(0x0010)
    TArray<float>                                 IncrementValues;                                              // 0x0020(0x0010)
};


// ScriptStruct  Solarland.FixedSectionInfo
// Struct Size::0x0010
struct FFixedSectionInfo
{
    int32_t                                       SprayingCount;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UWeaponRecoilValueGenerator*                  ValueGenerator;                                               // 0x0008(0x0008)
};


// ScriptStruct  Solarland.WeaponRecoilRotatorGenerator
// Struct Size::0x0018
struct FWeaponRecoilRotatorGenerator
{
    UWeaponRecoilValueGenerator*                  PitchGenerator;                                               // 0x0000(0x0008)
    UWeaponRecoilValueGenerator*                  YawGenerator;                                                 // 0x0008(0x0008)
    UWeaponRecoilValueGenerator*                  RollGenerator;                                                // 0x0010(0x0008)
};


// ScriptStruct  Solarland.WeaponRecoilVectorGenerator
// Struct Size::0x0018
struct FWeaponRecoilVectorGenerator
{
    UWeaponRecoilValueGenerator*                  XGenerator;                                                   // 0x0000(0x0008)
    UWeaponRecoilValueGenerator*                  YGenerator;                                                   // 0x0008(0x0008)
    UWeaponRecoilValueGenerator*                  ZGenerator;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Solarland.ScopeSliderData
// Struct Size::0x0028
struct FScopeSliderData
{
    FVector2D                                     SliderPercentRange;                                           // 0x0000(0x0008)
    float                                         SliderAnimeTimer;                                             // 0x0008(0x0004)
    enum class EWeaponScopeType                   ScopeMagnifier;                                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FText                                         DisplayText;                                                  // 0x0010(0x0018)
};


// ScriptStruct  Solarland.WeaponAdsWalkShiftParams
// Struct Size::0x0050
struct FWeaponAdsWalkShiftParams
{
    FWeaponCurveVectorData                        LocCurve;                                                     // 0x0000(0x0010)
    float                                         LocFrequency;                                                 // 0x0010(0x0004)
    FWeaponSpringDamperSmoothData                 LocSmooth;                                                    // 0x0014(0x0008)
    FWeaponPivotData                              RotPivot;                                                     // 0x001C(0x0014)
    FWeaponCurveVectorData                        RotCurve;                                                     // 0x0030(0x0010)
    float                                         RotFrequency;                                                 // 0x0040(0x0004)
    FWeaponSpringDamperSmoothData                 RotSmooth;                                                    // 0x0044(0x0008)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  Solarland.WeaponSpringDamperSmoothData
// Struct Size::0x0008
struct FWeaponSpringDamperSmoothData
{
    float                                         SmoothingTime;                                                // 0x0000(0x0004)
    float                                         DampingRatio;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Solarland.WeaponCurveVectorData
// Struct Size::0x0010
struct FWeaponCurveVectorData
{
    UCurveVector*                                 Curve;                                                        // 0x0000(0x0008)
    float                                         ValueScale;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Solarland.WeaponPivotData
// Struct Size::0x0014
struct FWeaponPivotData
{
    FName                                         Socket;                                                       // 0x0000(0x0008)
    FVector                                       Offset;                                                       // 0x0008(0x000C)
};


// ScriptStruct  Solarland.WeaponAdsBobParams
// Struct Size::0x0038
struct FWeaponAdsBobParams
{
    FWeaponPivotData                              RotPivot;                                                     // 0x0000(0x0014)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FWeaponCurveVectorData                        RotCurve;                                                     // 0x0018(0x0010)
    float                                         RotFrequency;                                                 // 0x0028(0x0004)
    FWeaponSpringDamperSmoothData                 RotSmooth;                                                    // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.WeaponAdsSwayParams
// Struct Size::0x0038
struct FWeaponAdsSwayParams
{
    FWeaponPivotData                              RotPivot;                                                     // 0x0000(0x0014)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FWeaponCurveVectorData                        RotCurve;                                                     // 0x0018(0x0010)
    FWeaponSpringDamperSmoothData                 RotSmooth;                                                    // 0x0028(0x0008)
    float                                         WeightOnMoving;                                               // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.WeaponAdsIdleBreathParams
// Struct Size::0x0038
struct FWeaponAdsIdleBreathParams
{
    FWeaponPivotData                              RotPivot;                                                     // 0x0000(0x0014)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FWeaponCurveVectorData                        RotCurve;                                                     // 0x0018(0x0010)
    float                                         RotFrequency;                                                 // 0x0028(0x0004)
    FWeaponSpringDamperSmoothData                 RotSmooth;                                                    // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Solarland.WeaponRecoilConfig
// Struct Size::0x0268
struct FWeaponRecoilConfig : public FTableRowBase
{
    enum class EWeaponRecoilPatternType           PatternType;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FWeaponRecoilAutoPattern                      AutoPattern;                                                  // 0x0010(0x0168)
    FWeaponRecoilBurstPattern                     BurstPattern;                                                 // 0x0178(0x00E8)
    UDataTable*                                   RecoilModifiersTable;                                         // 0x0260(0x0008)
};


// ScriptStruct  Solarland.WeaponSpreadConfig
// Struct Size::0x0210
struct FWeaponSpreadConfig : public FTableRowBase
{
    enum class EWeaponSpreadShape                 SpreadShape;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FWeaponSpreadValue                            BaseSpread;                                                   // 0x000C(0x0008)
    float                                         SpreadIncreaseSpeed;                                          // 0x0014(0x0004)
    float                                         SpreadDecreaseSpeed;                                          // 0x0018(0x0004)
    enum class EWeaponSpreadDistributionRule      DistributionRule;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    float                                         CentralLimitTheoremSampleSize;                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRuntimeFloatCurve                            DistributionCurve;                                            // 0x0028(0x0088)
    float                                         CanisterPillSpreadRadius;                                     // 0x00B0(0x0004)
    float                                         CanisterPillCenterOffsetAlpha;                                // 0x00B4(0x0004)
    float                                         CanisterPillRollRandomSize;                                   // 0x00B8(0x0004)
    char                                          pa_00BC[0x0004]                                               // 0x00BC(0x0004)
    FWeaponSpreadPattern                          SpreadPattern;                                                // 0x00C0(0x0148)
    UDataTable*                                   SpreadModifiersTable;                                         // 0x0208(0x0008)
};


// ScriptStruct  Solarland.WeaponSpreadPattern
// Struct Size::0x0148
struct FWeaponSpreadPattern
{
    FWeaponSpreadValue                            FirstFireIncrement;                                           // 0x0000(0x0008)
    FWeaponSpreadValue                            ContFireIncrement;                                            // 0x0008(0x0008)
    FWeaponSpreadValue                            MaxTotalIncrement;                                            // 0x0010(0x0008)
    float                                         IncreaseTime;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FSolarSmooth                                  IncreaseSmooth;                                               // 0x0020(0x0090)
    float                                         KeepTime;                                                     // 0x00B0(0x0004)
    float                                         DecreaseTime;                                                 // 0x00B4(0x0004)
    FSolarSmooth                                  DecreaseSmooth;                                               // 0x00B8(0x0090)
};


// ScriptStruct  Solarland.CrossHairShootConfig
// Struct Size::0x0010
struct FCrossHairShootConfig
{
    float                                         GunKickOffsetInheritRatio;                                    // 0x0000(0x0004)
    float                                         SkewOffsetInheritRatio;                                       // 0x0004(0x0004)
    URecoverableRecoilPattern*                    CrossHairKickPattern;                                         // 0x0008(0x0008)
};


// ScriptStruct  Solarland.WeaponSkewAdjustment
// Struct Size::0x0090
struct FWeaponSkewAdjustment
{
    enum class EWeaponSkewInputType               InputType;                                                    // 0x0000(0x0001)
    enum class EWeaponSkewAdjustmentType          AdjustmentType;                                               // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    FRuntimeFloatCurve                            AdjustmentCurve;                                              // 0x0008(0x0088)
};


// ScriptStruct  Solarland.GunKickScale
// Struct Size::0x0018
struct FGunKickScale
{
    float                                         XOffsetScale;                                                 // 0x0000(0x0004)
    float                                         YOffsetScale;                                                 // 0x0004(0x0004)
    float                                         ZOffsetScale;                                                 // 0x0008(0x0004)
    float                                         PitchScale;                                                   // 0x000C(0x0004)
    float                                         YawScale;                                                     // 0x0010(0x0004)
    float                                         RollScale;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Solarland.SpreadScaleIncrease
// Struct Size::0x0014
struct FSpreadScaleIncrease
{
    int32_t                                       SprayingCount;                                                // 0x0000(0x0004)
    float                                         MinSpreadScale;                                               // 0x0004(0x0004)
    float                                         MaxSpreadScale;                                               // 0x0008(0x0004)
    FRangeFloat                                   ScaleIncreaseRange;                                           // 0x000C(0x0008)
};


// ScriptStruct  Solarland.WeaponAction
// Struct Size::0x0008
struct FWeaponAction
{
    int32_t                                       ActionCount;                                                  // 0x0000(0x0004)
    int32_t                                       ActionParameter;                                              // 0x0004(0x0004)
};


// ScriptStruct  Solarland.WeaponSysBolt
// Struct Size::0x0014
struct FWeaponSysBolt
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  Solarland.WindowsFrameRateItem
// Struct Size::0x0008
struct FWindowsFrameRateItem
{
    enum class ESolarFrameRateLevel               FrameRateLevel;                                               // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FrameRate;                                                    // 0x0004(0x0004)
};


// ScriptStruct  Solarland.WorldMarkDataDetails
// Struct Size::0x0128
struct FWorldMarkDataDetails : public FFastArraySerializer
{
    char                                          PlayerPosMax;                                                 // 0x0108(0x0001)
    char                                          pa_0109[0x0007]                                               // 0x0109(0x0007)
    TArray<FWorldMarkData>                        AllMarkDatas;                                                 // 0x0110(0x0010)
    USolarTeamInfoComponent*                      Owner;                                                        // 0x0120(0x0008)
};


// ScriptStruct  Solarland.WorldMarkDataWidgetConfigRow
// Struct Size::0x0058
struct FWorldMarkDataWidgetConfigRow : public FTableRowBase
{
    FString                                       Description;                                                  // 0x0008(0x0010)
    enum class EWorldMarkType                     WorldMarkType;                                                // 0x0018(0x0001)
    bool                                          bHasObjectID;                                                 // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    int32_t                                       ObjectId;                                                     // 0x001C(0x0004)
    enum class EInteractableType                  InteractableType;                                             // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TSoftObjectPtr<UTexture2D>                    IconTextureRes;                                               // 0x0028(0x0028)
    int32_t                                       IconTextureResIndex;                                          // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  SolarlandDeviceId.DummyObject
// Struct Size::0x0001
struct FDummyObject
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SolarFramework.SolarConfigEntry
// Struct Size::0x0030
struct FSolarConfigEntry
{
    TSoftClassPtr<UObject>                        ContainerPath;                                                // 0x0000(0x0028)
    enum class EScope                             Scope;                                                        // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  SlateCore.CompositeFont
// Struct Size::0x0038
struct FCompositeFont
{
    FTypeface                                     DefaultTypeface;                                              // 0x0000(0x0010)
    FCompositeFallbackFont                        FallbackTypeface;                                             // 0x0010(0x0018)
    TArray<FCompositeSubFont>                     SubTypefaces;                                                 // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CompositeFallbackFont
// Struct Size::0x0018
struct FCompositeFallbackFont
{
    FTypeface                                     Typeface;                                                     // 0x0000(0x0010)
    float                                         ScalingFactor;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  SlateCore.Typeface
// Struct Size::0x0010
struct FTypeface
{
    TArray<FTypefaceEntry>                        Fonts;                                                        // 0x0000(0x0010)
};


// ScriptStruct  SlateCore.TypefaceEntry
// Struct Size::0x0028
struct FTypefaceEntry
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FFontData                                     Font;                                                         // 0x0008(0x0020)
};


// ScriptStruct  SlateCore.FontData
// Struct Size::0x0020
struct FFontData
{
    FString                                       FontFilename;                                                 // 0x0000(0x0010)
    enum class EFontHinting                       Hinting;                                                      // 0x0010(0x0001)
    enum class EFontLoadingPolicy                 LoadingPolicy;                                                // 0x0011(0x0001)
    char                                          pa_0012[0x0002]                                               // 0x0012(0x0002)
    int32_t                                       SubFaceIndex;                                                 // 0x0014(0x0004)
    UObject*                                      FontFaceAsset;                                                // 0x0018(0x0008)
};


// ScriptStruct  SlateCore.CompositeSubFont
// Struct Size::0x0038
struct FCompositeSubFont : public FCompositeFallbackFont
{
    TArray<FInt32Range>                           CharacterRanges;                                              // 0x0018(0x0010)
    FString                                       Cultures;                                                     // 0x0028(0x0010)
};


// ScriptStruct  SlateCore.CaptureLostEvent
// Struct Size::0x0008
struct FCaptureLostEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  SlateCore.WindowStyle
// Struct Size::0x1C20
struct FWindowStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  MinimizeButtonStyle;                                          // 0x0010(0x0420)
    FButtonStyle                                  MaximizeButtonStyle;                                          // 0x0430(0x0420)
    FButtonStyle                                  RestoreButtonStyle;                                           // 0x0850(0x0420)
    FButtonStyle                                  CloseButtonStyle;                                             // 0x0C70(0x0420)
    FTextBlockStyle                               TitleTextStyle;                                               // 0x1090(0x04A0)
    FSlateBrush                                   ActiveTitleBrush;                                             // 0x1530(0x00F0)
    FSlateBrush                                   InactiveTitleBrush;                                           // 0x1620(0x00F0)
    FSlateBrush                                   FlashTitleBrush;                                              // 0x1710(0x00F0)
    FSlateColor                                   BackgroundColor;                                              // 0x1800(0x0028)
    char                                          pa_1828[0x0008]                                               // 0x1828(0x0008)
    FSlateBrush                                   OutlineBrush;                                                 // 0x1830(0x00F0)
    FSlateColor                                   OutlineColor;                                                 // 0x1920(0x0028)
    char                                          pa_1948[0x0008]                                               // 0x1948(0x0008)
    FSlateBrush                                   BorderBrush;                                                  // 0x1950(0x00F0)
    FSlateBrush                                   BackgroundBrush;                                              // 0x1A40(0x00F0)
    FSlateBrush                                   ChildBackgroundBrush;                                         // 0x1B30(0x00F0)
};


// ScriptStruct  SlateCore.ScrollBorderStyle
// Struct Size::0x01F0
struct FScrollBorderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   TopShadowBrush;                                               // 0x0010(0x00F0)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x0100(0x00F0)
};


// ScriptStruct  SlateCore.ScrollBoxStyle
// Struct Size::0x03D0
struct FScrollBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   TopShadowBrush;                                               // 0x0010(0x00F0)
    FSlateBrush                                   BottomShadowBrush;                                            // 0x0100(0x00F0)
    FSlateBrush                                   LeftShadowBrush;                                              // 0x01F0(0x00F0)
    FSlateBrush                                   RightShadowBrush;                                             // 0x02E0(0x00F0)
};


// ScriptStruct  SlateCore.DockTabStyle
// Struct Size::0x0BF0
struct FDockTabStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  CloseButtonStyle;                                             // 0x0010(0x0420)
    FSlateBrush                                   NormalBrush;                                                  // 0x0430(0x00F0)
    FSlateBrush                                   ActiveBrush;                                                  // 0x0520(0x00F0)
    FSlateBrush                                   ColorOverlayTabBrush;                                         // 0x0610(0x00F0)
    FSlateBrush                                   ColorOverlayIconBrush;                                        // 0x0700(0x00F0)
    FSlateBrush                                   ForegroundBrush;                                              // 0x07F0(0x00F0)
    FSlateBrush                                   HoveredBrush;                                                 // 0x08E0(0x00F0)
    FSlateBrush                                   ContentAreaBrush;                                             // 0x09D0(0x00F0)
    FSlateBrush                                   TabWellBrush;                                                 // 0x0AC0(0x00F0)
    FMargin                                       TabPadding;                                                   // 0x0BB0(0x0010)
    float                                         OverlapWidth;                                                 // 0x0BC0(0x0004)
    char                                          pa_0BC4[0x0004]                                               // 0x0BC4(0x0004)
    FSlateColor                                   FlashColor;                                                   // 0x0BC8(0x0028)
};


// ScriptStruct  SlateCore.HeaderRowStyle
// Struct Size::0x1420
struct FHeaderRowStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTableColumnHeaderStyle                       ColumnStyle;                                                  // 0x0010(0x0880)
    FTableColumnHeaderStyle                       LastColumnStyle;                                              // 0x0890(0x0880)
    FSplitterStyle                                ColumnSplitterStyle;                                          // 0x1110(0x01F0)
    FSlateBrush                                   BackgroundBrush;                                              // 0x1300(0x00F0)
    FSlateColor                                   ForegroundColor;                                              // 0x13F0(0x0028)
    char                                          pa_1418[0x0008]                                               // 0x1418(0x0008)
};


// ScriptStruct  SlateCore.SplitterStyle
// Struct Size::0x01F0
struct FSplitterStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   HandleNormalBrush;                                            // 0x0010(0x00F0)
    FSlateBrush                                   HandleHighlightBrush;                                         // 0x0100(0x00F0)
};


// ScriptStruct  SlateCore.TableColumnHeaderStyle
// Struct Size::0x0880
struct FTableColumnHeaderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   SortPrimaryAscendingImage;                                    // 0x0010(0x00F0)
    FSlateBrush                                   SortPrimaryDescendingImage;                                   // 0x0100(0x00F0)
    FSlateBrush                                   SortSecondaryAscendingImage;                                  // 0x01F0(0x00F0)
    FSlateBrush                                   SortSecondaryDescendingImage;                                 // 0x02E0(0x00F0)
    FSlateBrush                                   NormalBrush;                                                  // 0x03D0(0x00F0)
    FSlateBrush                                   HoveredBrush;                                                 // 0x04C0(0x00F0)
    FSlateBrush                                   MenuDropdownImage;                                            // 0x05B0(0x00F0)
    FSlateBrush                                   MenuDropdownNormalBorderBrush;                                // 0x06A0(0x00F0)
    FSlateBrush                                   MenuDropdownHoveredBorderBrush;                               // 0x0790(0x00F0)
};


// ScriptStruct  SlateCore.InlineTextImageStyle
// Struct Size::0x0110
struct FInlineTextImageStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   Image;                                                        // 0x0010(0x00F0)
    int16_t                                       Baseline;                                                     // 0x0100(0x0002)
    char                                          pa_0102[0x000E]                                               // 0x0102(0x000E)
};


// ScriptStruct  SlateCore.VolumeControlStyle
// Struct Size::0x0A80
struct FVolumeControlStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSliderStyle                                  SliderStyle;                                                  // 0x0010(0x05C0)
    FSlateBrush                                   HighVolumeImage;                                              // 0x05D0(0x00F0)
    FSlateBrush                                   MidVolumeImage;                                               // 0x06C0(0x00F0)
    FSlateBrush                                   LowVolumeImage;                                               // 0x07B0(0x00F0)
    FSlateBrush                                   NoVolumeImage;                                                // 0x08A0(0x00F0)
    FSlateBrush                                   MutedImage;                                                   // 0x0990(0x00F0)
};


// ScriptStruct  SlateCore.SliderStyle
// Struct Size::0x05C0
struct FSliderStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   NormalBarImage;                                               // 0x0010(0x00F0)
    FSlateBrush                                   HoveredBarImage;                                              // 0x0100(0x00F0)
    FSlateBrush                                   DisabledBarImage;                                             // 0x01F0(0x00F0)
    FSlateBrush                                   NormalThumbImage;                                             // 0x02E0(0x00F0)
    FSlateBrush                                   HoveredThumbImage;                                            // 0x03D0(0x00F0)
    FSlateBrush                                   DisabledThumbImage;                                           // 0x04C0(0x00F0)
    float                                         BarThickness;                                                 // 0x05B0(0x0004)
    char                                          pa_05B4[0x000C]                                               // 0x05B4(0x000C)
};


// ScriptStruct  SlateCore.SearchBoxStyle
// Struct Size::0x11B0
struct FSearchBoxStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FEditableTextBoxStyle                         TextBoxStyle;                                                 // 0x0010(0x0D60)
    FSlateFontInfo                                ActiveFontInfo;                                               // 0x0D70(0x0060)
    FSlateBrush                                   UpArrowImage;                                                 // 0x0DD0(0x00F0)
    FSlateBrush                                   DownArrowImage;                                               // 0x0EC0(0x00F0)
    FSlateBrush                                   GlassImage;                                                   // 0x0FB0(0x00F0)
    FSlateBrush                                   ClearImage;                                                   // 0x10A0(0x00F0)
    FMargin                                       ImagePadding;                                                 // 0x1190(0x0010)
    bool                                          bLeftAlignButtons;                                            // 0x11A0(0x0001)
    char                                          pa_11A1[0x000F]                                               // 0x11A1(0x000F)
};


// ScriptStruct  SlateCore.ExpandableAreaStyle
// Struct Size::0x0200
struct FExpandableAreaStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   CollapsedImage;                                               // 0x0010(0x00F0)
    FSlateBrush                                   ExpandedImage;                                                // 0x0100(0x00F0)
    float                                         RolloutAnimationSeconds;                                      // 0x01F0(0x0004)
    char                                          pa_01F4[0x000C]                                               // 0x01F4(0x000C)
};


// ScriptStruct  SlateCore.ProgressBarStyle
// Struct Size::0x02E0
struct FProgressBarStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   BackgroundImage;                                              // 0x0010(0x00F0)
    FSlateBrush                                   FillImage;                                                    // 0x0100(0x00F0)
    FSlateBrush                                   MarqueeImage;                                                 // 0x01F0(0x00F0)
};


// ScriptStruct  SlateCore.InlineEditableTextBlockStyle
// Struct Size::0x1210
struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FEditableTextBoxStyle                         EditableTextBoxStyle;                                         // 0x0010(0x0D60)
    FTextBlockStyle                               TextStyle;                                                    // 0x0D70(0x04A0)
};


// ScriptStruct  SlateCore.CheckBoxStyle
// Struct Size::0x0930
struct FCheckBoxStyle : public FSlateWidgetStyle
{
    enum class ESlateCheckBoxType                 CheckBoxType;                                                 // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FSlateBrush                                   UncheckedImage;                                               // 0x0010(0x00F0)
    FSlateBrush                                   UncheckedHoveredImage;                                        // 0x0100(0x00F0)
    FSlateBrush                                   UncheckedPressedImage;                                        // 0x01F0(0x00F0)
    FSlateBrush                                   CheckedImage;                                                 // 0x02E0(0x00F0)
    FSlateBrush                                   CheckedHoveredImage;                                          // 0x03D0(0x00F0)
    FSlateBrush                                   CheckedPressedImage;                                          // 0x04C0(0x00F0)
    FSlateBrush                                   UndeterminedImage;                                            // 0x05B0(0x00F0)
    FSlateBrush                                   UndeterminedHoveredImage;                                     // 0x06A0(0x00F0)
    FSlateBrush                                   UndeterminedPressedImage;                                     // 0x0790(0x00F0)
    FMargin                                       Padding;                                                      // 0x0880(0x0010)
    FSlateColor                                   ForegroundColor;                                              // 0x0890(0x0028)
    FSlateColor                                   BorderBackgroundColor;                                        // 0x08B8(0x0028)
    FSlateSound                                   CheckedSlateSound;                                            // 0x08E0(0x0018)
    FSlateSound                                   UncheckedSlateSound;                                          // 0x08F8(0x0018)
    FSlateSound                                   HoveredSlateSound;                                            // 0x0910(0x0018)
    char                                          pa_0928[0x0008]                                               // 0x0928(0x0008)
};


// ScriptStruct  Slate.CustomizedToolMenu
// Struct Size::0x01E8
struct FCustomizedToolMenu
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TMap<FName,FCustomizedToolMenuEntry>          Entries;                                                      // 0x0008(0x0050)
    TMap<FName,FCustomizedToolMenuSection>        Sections;                                                     // 0x0058(0x0050)
    TMap<FName,FCustomizedToolMenuNameArray>      EntryOrder;                                                   // 0x00A8(0x0050)
    TArray<FName>                                 SectionOrder;                                                 // 0x00F8(0x0010)
    char                                          pa_0108[0x00E0]                                               // 0x0108(0x00E0)
};


// ScriptStruct  Slate.CustomizedToolMenuNameArray
// Struct Size::0x0010
struct FCustomizedToolMenuNameArray
{
    TArray<FName>                                 Names;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Slate.CustomizedToolMenuSection
// Struct Size::0x0004
struct FCustomizedToolMenuSection
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  Slate.CustomizedToolMenuEntry
// Struct Size::0x0004
struct FCustomizedToolMenuEntry
{
    enum class ECustomizedToolMenuVisibility      Visibility;                                                   // 0x0000(0x0004)
};


// ScriptStruct  ImageWriteQueue.ImageWriteOptions
// Struct Size::0x0060
struct FImageWriteOptions
{
    enum class EDesiredImageFormat                Format;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FDelegate                                     OnComplete;                                                   // 0x0004(0x0010)
    int32_t                                       CompressionQuality;                                           // 0x0014(0x0004)
    bool                                          bOverwriteFile;                                               // 0x0018(0x0001)
    bool                                          bAsync;                                                       // 0x0019(0x0001)
    char                                          pa_001A[0x0046]                                               // 0x001A(0x0046)
};


// ScriptStruct  MaterialShaderQualitySettings.MaterialQualityOverrides
// Struct Size::0x0009
struct FMaterialQualityOverrides
{
    bool                                          bDiscardQualityDuringCook;                                    // 0x0000(0x0001)
    bool                                          bEnableOverride;                                              // 0x0001(0x0001)
    bool                                          bForceFullyRough;                                             // 0x0002(0x0001)
    bool                                          bForceNonMetal;                                               // 0x0003(0x0001)
    bool                                          bForceDisableLMDirectionality;                                // 0x0004(0x0001)
    bool                                          bForceLQReflections;                                          // 0x0005(0x0001)
    bool                                          bForceDisablePreintegratedGF;                                 // 0x0006(0x0001)
    bool                                          bDisableMaterialNormalCalculation;                            // 0x0007(0x0001)
    enum class EMobileCSMQuality                  MobileCSMQuality;                                             // 0x0008(0x0001)
};


// ScriptStruct  EyeTracker.EyeTrackerStereoGazeData
// Struct Size::0x0040
struct FEyeTrackerStereoGazeData
{
    FVector                                       LeftEyeOrigin;                                                // 0x0000(0x000C)
    FVector                                       LeftEyeDirection;                                             // 0x000C(0x000C)
    FVector                                       RightEyeOrigin;                                               // 0x0018(0x000C)
    FVector                                       RightEyeDirection;                                            // 0x0024(0x000C)
    FVector                                       FixationPoint;                                                // 0x0030(0x000C)
    float                                         ConfidenceValue;                                              // 0x003C(0x0004)
};


// ScriptStruct  EyeTracker.EyeTrackerGazeData
// Struct Size::0x0028
struct FEyeTrackerGazeData
{
    FVector                                       GazeOrigin;                                                   // 0x0000(0x000C)
    FVector                                       GazeDirection;                                                // 0x000C(0x000C)
    FVector                                       FixationPoint;                                                // 0x0018(0x000C)
    float                                         ConfidenceValue;                                              // 0x0024(0x0004)
};


// ScriptStruct  Renderer.LightPropagationVolumeSettings
// Struct Size::0x0040
struct FLightPropagationVolumeSettings
{
    char                                          bOverride_LPVIntensity;                                       // 0x0000(0x0001)
    char                                          bOverride_LPVDirectionalOcclusionIntensity;                   // 0x0000(0x0001)
    char                                          bOverride_LPVDirectionalOcclusionRadius;                      // 0x0000(0x0001)
    char                                          bOverride_LPVDiffuseOcclusionExponent;                        // 0x0000(0x0001)
    char                                          bOverride_LPVSpecularOcclusionExponent;                       // 0x0000(0x0001)
    char                                          bOverride_LPVDiffuseOcclusionIntensity;                       // 0x0000(0x0001)
    char                                          bOverride_LPVSpecularOcclusionIntensity;                      // 0x0000(0x0001)
    char                                          bOverride_LPVSize;                                            // 0x0000(0x0001)
    char                                          bOverride_LPVSecondaryOcclusionIntensity;                     // 0x0001(0x0001)
    char                                          bOverride_LPVSecondaryBounceIntensity;                        // 0x0001(0x0001)
    char                                          bOverride_LPVGeometryVolumeBias;                              // 0x0001(0x0001)
    char                                          bOverride_LPVVplInjectionBias;                                // 0x0001(0x0001)
    char                                          bOverride_LPVEmissiveInjectionIntensity;                      // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LPVIntensity;                                                 // 0x0004(0x0004)
    float                                         LPVVplInjectionBias;                                          // 0x0008(0x0004)
    float                                         LPVSize;                                                      // 0x000C(0x0004)
    float                                         LPVSecondaryOcclusionIntensity;                               // 0x0010(0x0004)
    float                                         LPVSecondaryBounceIntensity;                                  // 0x0014(0x0004)
    float                                         LPVGeometryVolumeBias;                                        // 0x0018(0x0004)
    float                                         LPVEmissiveInjectionIntensity;                                // 0x001C(0x0004)
    float                                         LPVDirectionalOcclusionIntensity;                             // 0x0020(0x0004)
    float                                         LPVDirectionalOcclusionRadius;                                // 0x0024(0x0004)
    float                                         LPVDiffuseOcclusionExponent;                                  // 0x0028(0x0004)
    float                                         LPVSpecularOcclusionExponent;                                 // 0x002C(0x0004)
    float                                         LPVDiffuseOcclusionIntensity;                                 // 0x0030(0x0004)
    float                                         LPVSpecularOcclusionIntensity;                                // 0x0034(0x0004)
    float                                         LPVFadeRange;                                                 // 0x0038(0x0004)
    float                                         LPVDirectionalOcclusionFadeRange;                             // 0x003C(0x0004)
};


// ScriptStruct  EngineSettings.AutoCompleteCommand
// Struct Size::0x0028
struct FAutoCompleteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       Desc;                                                         // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  EngineSettings.GameModeName
// Struct Size::0x0028
struct FGameModeName
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FSoftClassPath                                GameMode;                                                     // 0x0010(0x0018)
};


// ScriptStruct  MRMesh.MRMeshConfiguration
// Struct Size::0x0001
struct FMRMeshConfiguration
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  AugmentedReality.ARSharedWorldReplicationState
// Struct Size::0x0008
struct FARSharedWorldReplicationState
{
    int32_t                                       PreviewImageOffset;                                           // 0x0000(0x0004)
    int32_t                                       ARWorldOffset;                                                // 0x0004(0x0004)
};


// ScriptStruct  AugmentedReality.ARTraceResult
// Struct Size::0x0060
struct FARTraceResult
{
    float                                         DistanceFromCamera;                                           // 0x0000(0x0004)
    enum class EARLineTraceChannels               TraceChannel;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x000B]                                               // 0x0005(0x000B)
    FTransform                                    LocalToTrackingTransform;                                     // 0x0010(0x0030)
    UARTrackedGeometry*                           TrackedGeometry;                                              // 0x0040(0x0008)
    char                                          pa_0048[0x0018]                                               // 0x0048(0x0018)
};


// ScriptStruct  AugmentedReality.ARPose3D
// Struct Size::0x0050
struct FARPose3D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FTransform>                            JointTransforms;                                              // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
    enum class EARJointTransformSpace             JointTransformSpace;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  AugmentedReality.ARSkeletonDefinition
// Struct Size::0x0028
struct FARSkeletonDefinition
{
    int32_t                                       NumJoints;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FName>                                 JointNames;                                                   // 0x0008(0x0010)
    TArray<int32_t>                               ParentIndices;                                                // 0x0018(0x0010)
};


// ScriptStruct  AugmentedReality.ARPose2D
// Struct Size::0x0048
struct FARPose2D
{
    FARSkeletonDefinition                         SkeletonDefinition;                                           // 0x0000(0x0028)
    TArray<FVector2D>                             JointLocations;                                               // 0x0028(0x0010)
    TArray<bool>                                  IsJointTracked;                                               // 0x0038(0x0010)
};


// ScriptStruct  AugmentedReality.ARVideoFormat
// Struct Size::0x000C
struct FARVideoFormat
{
    int32_t                                       FPS;                                                          // 0x0000(0x0004)
    int32_t                                       Width;                                                        // 0x0004(0x0004)
    int32_t                                       Height;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AugmentedReality.ARSessionStatus
// Struct Size::0x0018
struct FARSessionStatus
{
    FString                                       AdditionalInfo;                                               // 0x0000(0x0010)
    enum class EARSessionStatus                   status;                                                       // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  HeadMountedDisplay.XRDeviceId
// Struct Size::0x000C
struct FXRDeviceId
{
    FName                                         SystemName;                                                   // 0x0000(0x0008)
    int32_t                                       DeviceID;                                                     // 0x0008(0x0004)
};


// ScriptStruct  BuildPatchServices.FileManifestData
// Struct Size::0x0068
struct FFileManifestData
{
    FString                                       Filename;                                                     // 0x0000(0x0010)
    FSHAHashData                                  FileHash;                                                     // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    TArray<FChunkPartData>                        FileChunkParts;                                               // 0x0028(0x0010)
    TArray<FString>                               InstallTags;                                                  // 0x0038(0x0010)
    bool                                          bIsUnixExecutable;                                            // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
    FString                                       SymlinkTarget;                                                // 0x0050(0x0010)
    bool                                          bIsReadOnly;                                                  // 0x0060(0x0001)
    bool                                          bIsCompressed;                                                // 0x0061(0x0001)
    char                                          pa_0062[0x0006]                                               // 0x0062(0x0006)
};


// ScriptStruct  BuildPatchServices.ChunkPartData
// Struct Size::0x0018
struct FChunkPartData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint32_t                                      Offset;                                                       // 0x0010(0x0004)
    uint32_t                                      Size;                                                         // 0x0014(0x0004)
};


// ScriptStruct  BuildPatchServices.SHAHashData
// Struct Size::0x0014
struct FSHAHashData
{
    char                                          Hash;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0013]                                               // 0x0001(0x0013)
};


// ScriptStruct  BuildPatchServices.ChunkInfoData
// Struct Size::0x0040
struct FChunkInfoData
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    uint64_t                                      Hash;                                                         // 0x0010(0x0008)
    FSHAHashData                                  ShaHash;                                                      // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    int64_t                                       FileSize;                                                     // 0x0030(0x0008)
    char                                          GroupNumber;                                                  // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  BuildPatchServices.CustomFieldData
// Struct Size::0x0020
struct FCustomFieldData
{
    FString                                       Key;                                                          // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Foliage.FoliageVertexColorChannelMask
// Struct Size::0x000C
struct FFoliageVertexColorChannelMask
{
    char                                          UseMask;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MaskThreshold;                                                // 0x0004(0x0004)
    char                                          InvertMask;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Foliage.SelectInstanceInfo
// Struct Size::0x0050
struct FSelectInstanceInfo
{
    int32_t                                       instanceID;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    TArray<float>                                 CustomData;                                                   // 0x0040(0x0010)
};


// ScriptStruct  Foliage.FoliageTypeObject
// Struct Size::0x0020
struct FFoliageTypeObject
{
    UObject*                                      FoliageTypeObject;                                            // 0x0000(0x0008)
    UFoliageType*                                 TypeInstance;                                                 // 0x0008(0x0008)
    bool                                          bIsAsset;                                                     // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    UFoliageType_InstancedStaticMesh*             Type;                                                         // 0x0018(0x0008)
};


// ScriptStruct  Foliage.ProceduralFoliageInstance
// Struct Size::0x0060
struct FProceduralFoliageInstance
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
    FVector                                       Normal;                                                       // 0x0020(0x000C)
    float                                         Age;                                                          // 0x002C(0x0004)
    float                                         Scale;                                                        // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UFoliageType*                                 Type;                                                         // 0x0038(0x0008)
    char                                          pa_0040[0x0020]                                               // 0x0040(0x0020)
};


// ScriptStruct  Landscape.LandscapeLayer
// Struct Size::0x0088
struct FLandscapeLayer
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    bool                                          bVisible;                                                     // 0x0018(0x0001)
    bool                                          bLocked;                                                      // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         HeightmapAlpha;                                               // 0x001C(0x0004)
    float                                         WeightmapAlpha;                                               // 0x0020(0x0004)
    enum class ELandscapeBlendMode                BlendMode;                                                    // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    TArray<FLandscapeLayerBrush>                  Brushes;                                                      // 0x0028(0x0010)
    TMap<ULandscapeLayerInfoObject*,bool>         WeightmapLayerAllocationBlend;                                // 0x0038(0x0050)
};


// ScriptStruct  Landscape.LandscapeLayerBrush
// Struct Size::0x0001
struct FLandscapeLayerBrush
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayerComponentData
// Struct Size::0x0038
struct FLandscapeLayerComponentData
{
    FHeightmapData                                HeightmapData;                                                // 0x0000(0x0008)
    FWeightmapData                                WeightmapData;                                                // 0x0008(0x0030)
};


// ScriptStruct  Landscape.WeightmapData
// Struct Size::0x0030
struct FWeightmapData
{
    TArray<UTexture2D*>                           Textures;                                                     // 0x0000(0x0010)
    TArray<FWeightmapLayerAllocationInfo>         LayerAllocations;                                             // 0x0010(0x0010)
    TArray<ULandscapeWeightmapUsage*>             TextureUsages;                                                // 0x0020(0x0010)
};


// ScriptStruct  Landscape.WeightmapLayerAllocationInfo
// Struct Size::0x0010
struct FWeightmapLayerAllocationInfo
{
    ULandscapeLayerInfoObject*                    LayerInfo;                                                    // 0x0000(0x0008)
    char                                          WeightmapTextureIndex;                                        // 0x0008(0x0001)
    char                                          WeightmapTextureChannel;                                      // 0x0009(0x0001)
    char                                          pa_000A[0x0006]                                               // 0x000A(0x0006)
};


// ScriptStruct  Landscape.HeightmapData
// Struct Size::0x0008
struct FHeightmapData
{
    UTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeComponentMaterialOverride
// Struct Size::0x0010
struct FLandscapeComponentMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeEditToolRenderData
// Struct Size::0x0038
struct FLandscapeEditToolRenderData
{
    UMaterialInterface*                           ToolMaterial;                                                 // 0x0000(0x0008)
    UMaterialInterface*                           GizmoMaterial;                                                // 0x0008(0x0008)
    int32_t                                       SelectedType;                                                 // 0x0010(0x0004)
    int32_t                                       DebugChannelR;                                                // 0x0014(0x0004)
    int32_t                                       DebugChannelG;                                                // 0x0018(0x0004)
    int32_t                                       DebugChannelB;                                                // 0x001C(0x0004)
    UTexture2D*                                   DataTexture;                                                  // 0x0020(0x0008)
    UTexture2D*                                   LayerContributionTexture;                                     // 0x0028(0x0008)
    UTexture2D*                                   DirtyTexture;                                                 // 0x0030(0x0008)
};


// ScriptStruct  Landscape.GizmoSelectData
// Struct Size::0x0050
struct FGizmoSelectData
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Landscape.GrassVariety
// Struct Size::0x0048
struct FGrassVariety
{
    UStaticMesh*                                  GrassMesh;                                                    // 0x0000(0x0008)
    FPerPlatformFloat                             GrassDensity;                                                 // 0x0008(0x0004)
    bool                                          bUseGrid;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    float                                         PlacementJitter;                                              // 0x0010(0x0004)
    FPerPlatformInt                               StartCullDistance;                                            // 0x0014(0x0004)
    FPerPlatformInt                               EndCullDistance;                                              // 0x0018(0x0004)
    int32_t                                       MinLOD;                                                       // 0x001C(0x0004)
    enum class EGrassScaling                      Scaling;                                                      // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    FFloatInterval                                ScaleX;                                                       // 0x0024(0x0008)
    FFloatInterval                                ScaleY;                                                       // 0x002C(0x0008)
    FFloatInterval                                ScaleZ;                                                       // 0x0034(0x0008)
    bool                                          RandomRotation;                                               // 0x003C(0x0001)
    bool                                          AlignToSurface;                                               // 0x003D(0x0001)
    bool                                          bUseLandscapeLightmap;                                        // 0x003E(0x0001)
    FLightingChannels                             LightingChannels;                                             // 0x003F(0x0001)
    bool                                          bReceivesDecals;                                              // 0x0040(0x0001)
    bool                                          bCastDynamicShadow;                                           // 0x0041(0x0001)
    bool                                          bKeepInstanceBufferCPUCopy;                                   // 0x0042(0x0001)
    char                                          pa_0043[0x0001]                                               // 0x0043(0x0001)
    int32_t                                       OverrideCVarMinVertsToSplitNode;                              // 0x0044(0x0004)
};


// ScriptStruct  Landscape.LandscapeInfoLayerSettings
// Struct Size::0x0010
struct FLandscapeInfoLayerSettings
{
    ULandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
    FName                                         LayerName;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeMaterialTextureStreamingInfo
// Struct Size::0x000C
struct FLandscapeMaterialTextureStreamingInfo
{
    FName                                         TextureName;                                                  // 0x0000(0x0008)
    float                                         TexelFactor;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Landscape.LandscapeProxyMaterialOverride
// Struct Size::0x0010
struct FLandscapeProxyMaterialOverride
{
    FPerPlatformInt                               LODIndex;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Landscape.LandscapeImportLayerInfo
// Struct Size::0x0001
struct FLandscapeImportLayerInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeLayerStruct
// Struct Size::0x0008
struct FLandscapeLayerStruct
{
    ULandscapeLayerInfoObject*                    LayerInfoObj;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Landscape.LandscapeEditorLayerSettings
// Struct Size::0x0001
struct FLandscapeEditorLayerSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineSegmentSurfaceName
// Struct Size::0x000C
struct FLandscapeSplineSegmentSurfaceName
{
    enum class ELandscapeSplineSegmentSurface     Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Landscape.LandscapeSplineConnection
// Struct Size::0x0010
struct FLandscapeSplineConnection
{
    ULandscapeSplineSegment*                      Segment;                                                      // 0x0000(0x0008)
    char                                          End;                                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Landscape.ForeignWorldSplineData
// Struct Size::0x0001
struct FForeignWorldSplineData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignSplineSegmentData
// Struct Size::0x0001
struct FForeignSplineSegmentData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.ForeignControlPointData
// Struct Size::0x0001
struct FForeignControlPointData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineMeshEntry
// Struct Size::0x0038
struct FLandscapeSplineMeshEntry
{
    UStaticMesh*                                  Mesh;                                                         // 0x0000(0x0008)
    TArray<UMaterialInterface*>                   MaterialOverrides;                                            // 0x0008(0x0010)
    char                                          bCenterH;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FVector2D                                     CenterAdjust;                                                 // 0x001C(0x0008)
    char                                          bScaleToWidth;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    FVector                                       Scale;                                                        // 0x0028(0x000C)
    enum class LandscapeSplineMeshOrientation     Orientation;                                                  // 0x0034(0x0001)
    enum class ESplineMeshAxis                    ForwardAxis;                                                  // 0x0035(0x0001)
    enum class ESplineMeshAxis                    UpAxis;                                                       // 0x0036(0x0001)
    char                                          pa_0037[0x0001]                                               // 0x0037(0x0001)
};


// ScriptStruct  Landscape.LandscapeSplineSegmentConnection
// Struct Size::0x0018
struct FLandscapeSplineSegmentConnection
{
    ULandscapeSplineControlPoint*                 ControlPoint;                                                 // 0x0000(0x0008)
    float                                         TangentLen;                                                   // 0x0008(0x0004)
    FName                                         SocketName;                                                   // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Landscape.LandscapeSplineInterpPoint
// Struct Size::0x0070
struct FLandscapeSplineInterpPoint
{
    FVector                                       Center;                                                       // 0x0000(0x000C)
    FVector                                       Left;                                                         // 0x000C(0x000C)
    FVector                                       Right;                                                        // 0x0018(0x000C)
    FVector                                       FalloffLeft;                                                  // 0x0024(0x000C)
    FVector                                       FalloffRight;                                                 // 0x0030(0x000C)
    FVector                                       LayerLeft;                                                    // 0x003C(0x000C)
    FVector                                       LayerRight;                                                   // 0x0048(0x000C)
    FVector                                       LayerFalloffLeft;                                             // 0x0054(0x000C)
    FVector                                       LayerFalloffRight;                                            // 0x0060(0x000C)
    float                                         StartEndFalloff;                                              // 0x006C(0x0004)
};


// ScriptStruct  Landscape.GrassInput
// Struct Size::0x0028
struct FGrassInput
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    ULandscapeGrassType*                          GrassType;                                                    // 0x0008(0x0008)
    FExpressionInput                              Input;                                                        // 0x0010(0x000C)
    char                                          pa_001C[0x000C]                                               // 0x001C(0x000C)
};


// ScriptStruct  Landscape.LayerBlendInput
// Struct Size::0x0048
struct FLayerBlendInput
{
    FName                                         LayerName;                                                    // 0x0000(0x0008)
    enum class ELandscapeLayerBlendType           BlendType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FExpressionInput                              LayerInput;                                                   // 0x000C(0x000C)
    char                                          pa_0018[0x0008]                                               // 0x0018(0x0008)
    FExpressionInput                              HeightInput;                                                  // 0x0020(0x000C)
    char                                          pa_002C[0x0008]                                               // 0x002C(0x0008)
    float                                         PreviewWeight;                                                // 0x0034(0x0004)
    FVector                                       ConstLayerInput;                                              // 0x0038(0x000C)
    float                                         ConstHeightInput;                                             // 0x0044(0x0004)
};


// ScriptStruct  TimeManagement.TimedDataInputEvaluationData
// Struct Size::0x0008
struct FTimedDataInputEvaluationData
{
    float                                         DistanceToNewestSampleSeconds;                                // 0x0000(0x0004)
    float                                         DistanceToOldestSampleSeconds;                                // 0x0004(0x0004)
};


// ScriptStruct  TimeManagement.TimedDataChannelSampleTime
// Struct Size::0x0018
struct FTimedDataChannelSampleTime
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneSectionGroup
// Struct Size::0x0010
struct FMovieSceneSectionGroup
{
    TArray<TWeakObjectPtr<UMovieSceneSection>>    Sections;                                                     // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingIDs
// Struct Size::0x0010
struct FMovieSceneObjectBindingIDs
{
    TArray<FMovieSceneObjectBindingID>            Ids;                                                          // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneObjectBindingID
// Struct Size::0x0018
struct FMovieSceneObjectBindingID
{
    int32_t                                       SequenceID;                                                   // 0x0000(0x0004)
    enum class EMovieSceneObjectBindingSpace      Space;                                                        // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FGuid                                         Guid;                                                         // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTrackLabels
// Struct Size::0x0010
struct FMovieSceneTrackLabels
{
    TArray<FString>                               Strings;                                                      // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEditorData
// Struct Size::0x00F0
struct FMovieSceneEditorData
{
    TMap<FString,FMovieSceneExpansionState>       ExpansionStates;                                              // 0x0000(0x0050)
    TArray<FString>                               PinnedNodes;                                                  // 0x0050(0x0010)
    double                                        ViewStart;                                                    // 0x0060(0x0008)
    double                                        ViewEnd;                                                      // 0x0068(0x0008)
    double                                        WorkStart;                                                    // 0x0070(0x0008)
    double                                        WorkEnd;                                                      // 0x0078(0x0008)
    TSet<FFrameNumber>                            MarkedFrames;                                                 // 0x0080(0x0050)
    FFloatRange                                   WorkingRange;                                                 // 0x00D0(0x0010)
    FFloatRange                                   ViewRange;                                                    // 0x00E0(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneExpansionState
// Struct Size::0x0001
struct FMovieSceneExpansionState
{
    bool                                          bExpanded;                                                    // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneMarkedFrame
// Struct Size::0x0018
struct FMovieSceneMarkedFrame
{
    FFrameNumber                                  FrameNumber;                                                  // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Label;                                                        // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneTimecodeSource
// Struct Size::0x0018
struct FMovieSceneTimecodeSource
{
    FTimecode                                     Timecode;                                                     // 0x0000(0x0014)
    FFrameNumber                                  DeltaFrame;                                                   // 0x0014(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneBinding
// Struct Size::0x0030
struct FMovieSceneBinding
{
    FGuid                                         ObjectGuid;                                                   // 0x0000(0x0010)
    FString                                       BindingName;                                                  // 0x0010(0x0010)
    TArray<UMovieSceneTrack*>                     Tracks;                                                       // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneBindingOverrideData
// Struct Size::0x0024
struct FMovieSceneBindingOverrideData
{
    FMovieSceneObjectBindingID                    ObjectBindingID;                                              // 0x0000(0x0018)
    TWeakObjectPtr<UObject>                       Object;                                                       // 0x0018(0x0008)
    bool                                          bOverridesDefault;                                            // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  MovieScene.OptionalMovieSceneBlendType
// Struct Size::0x0002
struct FOptionalMovieSceneBlendType
{
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x0000(0x0001)
    bool                                          bIsValid;                                                     // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneByteChannel
// Struct Size::0x0098
struct FMovieSceneByteChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    char                                          DefaultValue;                                                 // 0x0018(0x0001)
    bool                                          bHasDefaultValue;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0006]                                               // 0x001A(0x0006)
    TArray<char>                                  Values;                                                       // 0x0020(0x0010)
    UEnum*                                        Enum;                                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0060]                                               // 0x0038(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneEvalTemplatePtr
// Struct Size::0x0088
struct FMovieSceneEvalTemplatePtr
{
    char                                          pa_0000[0x0088]                                               // 0x0000(0x0088)
};


// ScriptStruct  MovieScene.MovieSceneEmptyStruct
// Struct Size::0x0001
struct FMovieSceneEmptyStruct
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationField
// Struct Size::0x0030
struct FMovieSceneEvaluationField
{
    TArray<FMovieSceneFrameRange>                 Ranges;                                                       // 0x0000(0x0010)
    TArray<FMovieSceneEvaluationGroup>            Groups;                                                       // 0x0010(0x0010)
    TArray<FMovieSceneEvaluationMetaData>         MetaData;                                                     // 0x0020(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationMetaData
// Struct Size::0x0070
struct FMovieSceneEvaluationMetaData
{
    TArray<FMovieSceneSequenceID>                 ActiveSequences;                                              // 0x0000(0x0010)
    TArray<FMovieSceneOrderedEvaluationKey>       ActiveEntities;                                               // 0x0010(0x0010)
    TMap<FMovieSceneSequenceID,uint32_t>          SubTemplateSerialNumbers;                                     // 0x0020(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneOrderedEvaluationKey
// Struct Size::0x0010
struct FMovieSceneOrderedEvaluationKey
{
    FMovieSceneEvaluationKey                      Key;                                                          // 0x0000(0x000C)
    uint16_t                                      SetupIndex;                                                   // 0x000C(0x0002)
    uint16_t                                      TearDownIndex;                                                // 0x000E(0x0002)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationKey
// Struct Size::0x000C
struct FMovieSceneEvaluationKey
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
    uint32_t                                      SectionIndex;                                                 // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTrackIdentifier
// Struct Size::0x0004
struct FMovieSceneTrackIdentifier
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroup
// Struct Size::0x0020
struct FMovieSceneEvaluationGroup
{
    TArray<FMovieSceneEvaluationGroupLUTIndex>    LUTIndices;                                                   // 0x0000(0x0010)
    TArray<FMovieSceneEvaluationFieldSegmentPtr>  SegmentPtrLUT;                                                // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldTrackPtr
// Struct Size::0x0008
struct FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSequenceID                         SequenceID;                                                   // 0x0000(0x0004)
    FMovieSceneTrackIdentifier                    TrackIdentifier;                                              // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationFieldSegmentPtr
// Struct Size::0x000C
struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
{
    FMovieSceneSegmentIdentifier                  SegmentID;                                                    // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSegmentIdentifier
// Struct Size::0x0004
struct FMovieSceneSegmentIdentifier
{
    int32_t                                       IdentifierIndex;                                              // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationGroupLUTIndex
// Struct Size::0x000C
struct FMovieSceneEvaluationGroupLUTIndex
{
    int32_t                                       LUTOffset;                                                    // 0x0000(0x0004)
    int32_t                                       NumInitPtrs;                                                  // 0x0004(0x0004)
    int32_t                                       NumEvalPtrs;                                                  // 0x0008(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneFrameRange
// Struct Size::0x0010
struct FMovieSceneFrameRange
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplate
// Struct Size::0x02F0
struct FMovieSceneEvaluationTemplate
{
    TMap<FMovieSceneTrackIdentifier,FMovieSceneEvaluationTrack>Tracks;                                          // 0x0000(0x0050)
    char                                          pa_0050[0x0050]                                               // 0x0050(0x0050)
    FMovieSceneEvaluationField                    EvaluationField;                                              // 0x00A0(0x0030)
    FMovieSceneSequenceHierarchy                  Hierarchy;                                                    // 0x00D0(0x00A0)
    FGuid                                         SequenceSignature;                                            // 0x0170(0x0010)
    FMovieSceneEvaluationTemplateSerialNumber     TemplateSerialNumber;                                         // 0x0180(0x0004)
    char                                          pa_0184[0x0004]                                               // 0x0184(0x0004)
    FMovieSceneTemplateGenerationLedger           TemplateLedger;                                               // 0x0188(0x00A8)
    FMovieSceneTrackFieldData                     TrackFieldData;                                               // 0x0230(0x0060)
    FMovieSceneSubSectionFieldData                SubSectionFieldData;                                          // 0x0290(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneSubSectionFieldData
// Struct Size::0x0060
struct FMovieSceneSubSectionFieldData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneTrackFieldData
// Struct Size::0x0060
struct FMovieSceneTrackFieldData
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneTemplateGenerationLedger
// Struct Size::0x00A8
struct FMovieSceneTemplateGenerationLedger
{
    FMovieSceneTrackIdentifier                    LastTrackIdentifier;                                          // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TMap<FGuid,FMovieSceneTrackIdentifier>        TrackSignatureToTrackIdentifier;                              // 0x0008(0x0050)
    TMap<FGuid,FMovieSceneFrameRange>             SubSectionRanges;                                             // 0x0058(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTemplateSerialNumber
// Struct Size::0x0004
struct FMovieSceneEvaluationTemplateSerialNumber
{
    uint32_t                                      Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchy
// Struct Size::0x00A0
struct FMovieSceneSequenceHierarchy
{
    TMap<FMovieSceneSequenceID,FMovieSceneSubSequenceData>SubSequences;                                         // 0x0000(0x0050)
    TMap<FMovieSceneSequenceID,FMovieSceneSequenceHierarchyNode>Hierarchy;                                      // 0x0050(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneSequenceHierarchyNode
// Struct Size::0x0018
struct FMovieSceneSequenceHierarchyNode
{
    FMovieSceneSequenceID                         ParentID;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<FMovieSceneSequenceID>                 Children;                                                     // 0x0008(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSubSequenceData
// Struct Size::0x00E8
struct FMovieSceneSubSequenceData
{
    FSoftObjectPath                               Sequence;                                                     // 0x0000(0x0018)
    FMovieSceneSequenceTransform                  RootToSequenceTransform;                                      // 0x0018(0x0020)
    FFrameRate                                    TickResolution;                                               // 0x0038(0x0008)
    FMovieSceneSequenceID                         DeterministicSequenceID;                                      // 0x0040(0x0004)
    FMovieSceneFrameRange                         PlayRange;                                                    // 0x0044(0x0010)
    FMovieSceneFrameRange                         FullPlayRange;                                                // 0x0054(0x0010)
    FMovieSceneFrameRange                         UnwarpedPlayRange;                                            // 0x0064(0x0010)
    FMovieSceneFrameRange                         PreRollRange;                                                 // 0x0074(0x0010)
    FMovieSceneFrameRange                         PostRollRange;                                                // 0x0084(0x0010)
    int32_t                                       HierarchicalBias;                                             // 0x0094(0x0004)
    FMovieSceneSequenceInstanceDataPtr            InstanceData;                                                 // 0x0098(0x0018)
    char                                          pa_00B0[0x0008]                                               // 0x00B0(0x0008)
    FGuid                                         SubSectionSignature;                                          // 0x00B8(0x0010)
    FMovieSceneSequenceTransform                  OuterToInnerTransform;                                        // 0x00C8(0x0020)
};


// ScriptStruct  MovieScene.MovieSceneSequenceTransform
// Struct Size::0x0020
struct FMovieSceneSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FMovieSceneNestedSequenceTransform>    NestedTransforms;                                             // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneNestedSequenceTransform
// Struct Size::0x0014
struct FMovieSceneNestedSequenceTransform
{
    FMovieSceneTimeTransform                      LinearTransform;                                              // 0x0000(0x000C)
    FMovieSceneTimeWarping                        Warping;                                                      // 0x000C(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneTimeWarping
// Struct Size::0x0008
struct FMovieSceneTimeWarping
{
    FFrameNumber                                  Start;                                                        // 0x0000(0x0004)
    FFrameNumber                                  End;                                                          // 0x0004(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneTimeTransform
// Struct Size::0x000C
struct FMovieSceneTimeTransform
{
    float                                         TimeScale;                                                    // 0x0000(0x0004)
    FFrameTime                                    Offset;                                                       // 0x0004(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneSequenceInstanceDataPtr
// Struct Size::0x0018
struct FMovieSceneSequenceInstanceDataPtr
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTrack
// Struct Size::0x00F8
struct FMovieSceneEvaluationTrack
{
    FGuid                                         ObjectBindingID;                                              // 0x0000(0x0010)
    uint16_t                                      EvaluationPriority;                                           // 0x0010(0x0002)
    enum class EEvaluationMethod                  EvaluationMethod;                                             // 0x0012(0x0001)
    char                                          pa_0013[0x0005]                                               // 0x0013(0x0005)
    FMovieSceneEvaluationTrackSegments            Segments;                                                     // 0x0018(0x0020)
    UMovieSceneTrack*                             SourceTrack;                                                  // 0x0038(0x0008)
    FSectionEvaluationDataTree                    EvaluationTree;                                               // 0x0040(0x0060)
    TArray<FMovieSceneEvalTemplatePtr>            ChildTemplates;                                               // 0x00A0(0x0010)
    FMovieSceneTrackImplementationPtr             TrackTemplate;                                                // 0x00B0(0x0038)
    FName                                         EvaluationGroup;                                              // 0x00E8(0x0008)
    char                                          bEvaluateInPreroll;                                           // 0x00F0(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x00F0(0x0001)
    char                                          bTearDownPriority;                                            // 0x00F0(0x0001)
    char                                          pa_00F1[0x0007]                                               // 0x00F1(0x0007)
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementationPtr
// Struct Size::0x0038
struct FMovieSceneTrackImplementationPtr
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  MovieScene.SectionEvaluationDataTree
// Struct Size::0x0060
struct FSectionEvaluationDataTree
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneEvaluationTrackSegments
// Struct Size::0x0020
struct FMovieSceneEvaluationTrackSegments
{
    TArray<int32_t>                               SegmentIdentifierToIndex;                                     // 0x0000(0x0010)
    TArray<FMovieSceneSegment>                    SortedSegments;                                               // 0x0010(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSegment
// Struct Size::0x0058
struct FMovieSceneSegment
{
    char                                          pa_0000[0x0058]                                               // 0x0000(0x0058)
};


// ScriptStruct  MovieScene.MovieSceneSubSectionData
// Struct Size::0x001C
struct FMovieSceneSubSectionData
{
    TWeakObjectPtr<UMovieSceneSubSection>         Section;                                                      // 0x0000(0x0008)
    FGuid                                         ObjectBindingID;                                              // 0x0008(0x0010)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneRootEvaluationTemplateInstance
// Struct Size::0x0320
struct FMovieSceneRootEvaluationTemplateInstance
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    TMap<FMovieSceneSequenceID,UObject*>          DirectorInstances;                                            // 0x0018(0x0050)
    char                                          pa_0068[0x02B8]                                               // 0x0068(0x02B8)
};


// ScriptStruct  MovieScene.MovieSceneIntegerChannel
// Struct Size::0x0090
struct FMovieSceneIntegerChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0018(0x0004)
    bool                                          bHasDefaultValue;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
    TArray<int32_t>                               Values;                                                       // 0x0020(0x0010)
    char                                          pa_0030[0x0060]                                               // 0x0030(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneKeyStruct
// Struct Size::0x0008
struct FMovieSceneKeyStruct
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  MovieScene.MovieSceneKeyTimeStruct
// Struct Size::0x0028
struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieScene.GeneratedMovieSceneKeyStruct
// Struct Size::0x0050
struct FGeneratedMovieSceneKeyStruct
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannel
// Struct Size::0x00C0
struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
{
    UObject*                                      PropertyClass;                                                // 0x0008(0x0008)
    TArray<FFrameNumber>                          Times;                                                        // 0x0010(0x0010)
    TArray<FMovieSceneObjectPathChannelKeyValue>  Values;                                                       // 0x0020(0x0010)
    FMovieSceneObjectPathChannelKeyValue          DefaultValue;                                                 // 0x0030(0x0030)
    char                                          pa_0060[0x0060]                                               // 0x0060(0x0060)
};


// ScriptStruct  MovieScene.MovieSceneObjectPathChannelKeyValue
// Struct Size::0x0030
struct FMovieSceneObjectPathChannelKeyValue
{
    TSoftObjectPtr<UObject>                       SoftPtr;                                                      // 0x0000(0x0028)
    UObject*                                      HardPtr;                                                      // 0x0028(0x0008)
};


// ScriptStruct  MovieScene.MovieScenePossessable
// Struct Size::0x0048
struct FMovieScenePossessable
{
    TArray<FName>                                 Tags;                                                         // 0x0000(0x0010)
    FGuid                                         Guid;                                                         // 0x0010(0x0010)
    FString                                       Name;                                                         // 0x0020(0x0010)
    UObject*                                      PossessedObjectClass;                                         // 0x0030(0x0008)
    FGuid                                         ParentGuid;                                                   // 0x0038(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneEasingSettings
// Struct Size::0x0038
struct FMovieSceneEasingSettings
{
    int32_t                                       AutoEaseInDuration;                                           // 0x0000(0x0004)
    int32_t                                       AutoEaseOutDuration;                                          // 0x0004(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseIn;                                                       // 0x0008(0x0010)
    bool                                          bManualEaseIn;                                                // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    int32_t                                       ManualEaseInDuration;                                         // 0x001C(0x0004)
    TScriptInterface<IMovieSceneEasingFunction>   EaseOut;                                                      // 0x0020(0x0010)
    bool                                          bManualEaseOut;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       ManualEaseOutDuration;                                        // 0x0034(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSectionEvalOptions
// Struct Size::0x0002
struct FMovieSceneSectionEvalOptions
{
    bool                                          bCanEditCompletionMode;                                       // 0x0000(0x0001)
    enum class EMovieSceneCompletionMode          CompletionMode;                                               // 0x0001(0x0001)
};


// ScriptStruct  MovieScene.MovieSceneSectionParameters
// Struct Size::0x0024
struct FMovieSceneSectionParameters
{
    FFrameNumber                                  StartFrameOffset;                                             // 0x0000(0x0004)
    bool                                          bCanLoop;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0008(0x0004)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x000C(0x0004)
    float                                         TimeScale;                                                    // 0x0010(0x0004)
    int32_t                                       HierarchicalBias;                                             // 0x0014(0x0004)
    float                                         StartOffset;                                                  // 0x0018(0x0004)
    float                                         PrerollTime;                                                  // 0x001C(0x0004)
    float                                         PostrollTime;                                                 // 0x0020(0x0004)
};


// ScriptStruct  MovieScene.SectionEvaluationData
// Struct Size::0x000C
struct FSectionEvaluationData
{
    int32_t                                       ImplIndex;                                                    // 0x0000(0x0004)
    FFrameNumber                                  ForcedTime;                                                   // 0x0004(0x0004)
    enum class ESectionEvaluationFlags            Flags;                                                        // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequencePlaybackSettings
// Struct Size::0x0014
struct FMovieSceneSequencePlaybackSettings
{
    char                                          bAutoPlay;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FMovieSceneSequenceLoopCount                  LoopCount;                                                    // 0x0004(0x0004)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         StartTime;                                                    // 0x000C(0x0004)
    char                                          bRandomStartTime;                                             // 0x0010(0x0001)
    char                                          bRestoreState;                                                // 0x0010(0x0001)
    char                                          bDisableMovementInput;                                        // 0x0010(0x0001)
    char                                          bDisableLookAtInput;                                          // 0x0010(0x0001)
    char                                          bHidePlayer;                                                  // 0x0010(0x0001)
    char                                          bHideHud;                                                     // 0x0010(0x0001)
    char                                          bDisableCameraCuts;                                           // 0x0010(0x0001)
    char                                          bPauseAtEnd;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneSequenceLoopCount
// Struct Size::0x0004
struct FMovieSceneSequenceLoopCount
{
    int32_t                                       Value;                                                        // 0x0000(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneSequenceReplProperties
// Struct Size::0x0010
struct FMovieSceneSequenceReplProperties
{
    FFrameTime                                    LastKnownPosition;                                            // 0x0000(0x0008)
    enum class EMovieScenePlayerStatus            LastKnownStatus;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       LastKnownNumLoops;                                            // 0x000C(0x0004)
};


// ScriptStruct  MovieScene.MovieSceneWarpCounter
// Struct Size::0x0010
struct FMovieSceneWarpCounter
{
    TArray<uint32_t>                              WarpCounts;                                                   // 0x0000(0x0010)
};


// ScriptStruct  MovieScene.MovieSceneSpawnable
// Struct Size::0x0090
struct FMovieSceneSpawnable
{
    FTransform                                    SpawnTransform;                                               // 0x0000(0x0030)
    TArray<FName>                                 Tags;                                                         // 0x0030(0x0010)
    bool                                          bContinuouslyRespawn;                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FGuid                                         Guid;                                                         // 0x0044(0x0010)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FString                                       Name;                                                         // 0x0058(0x0010)
    UObject*                                      ObjectTemplate;                                               // 0x0068(0x0008)
    TArray<FGuid>                                 ChildPossessables;                                            // 0x0070(0x0010)
    enum class ESpawnOwnership                    Ownership;                                                    // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    FName                                         LevelName;                                                    // 0x0084(0x0008)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
};


// ScriptStruct  MovieScene.TestMovieSceneEvalTemplate
// Struct Size::0x0020
struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  MovieScene.MovieSceneTrackDisplayOptions
// Struct Size::0x0004
struct FMovieSceneTrackDisplayOptions
{
    char                                          bShowVerticalFrames;                                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackEvalOptions
// Struct Size::0x0004
struct FMovieSceneTrackEvalOptions
{
    char                                          bCanEvaluateNearestSection;                                   // 0x0000(0x0001)
    char                                          bEvalNearestSection;                                          // 0x0000(0x0001)
    char                                          bEvaluateInPreroll;                                           // 0x0000(0x0001)
    char                                          bEvaluateInPostroll;                                          // 0x0000(0x0001)
    char                                          bEvaluateNearestSection;                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  MovieScene.MovieSceneTrackImplementation
// Struct Size::0x0010
struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
{
};


// ScriptStruct  AnimationCore.Axis
// Struct Size::0x0010
struct FAxis
{
    FVector                                       Axis;                                                         // 0x0000(0x000C)
    bool                                          bInLocalSpace;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AnimationCore.ConstraintDescriptionEx
// Struct Size::0x0010
struct FConstraintDescriptionEx
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FFilterOptionPerAxis                          AxesFilterOption;                                             // 0x0008(0x0003)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
};


// ScriptStruct  AnimationCore.AimConstraintDescription
// Struct Size::0x0040
struct FAimConstraintDescription : public FConstraintDescriptionEx
{
    FAxis                                         LookAt_Axis;                                                  // 0x0010(0x0010)
    FAxis                                         LookUp_Axis;                                                  // 0x0020(0x0010)
    bool                                          bUseLookUp;                                                   // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    FVector                                       LookUpTarget;                                                 // 0x0034(0x000C)
};


// ScriptStruct  AnimationCore.TransformConstraintDescription
// Struct Size::0x0018
struct FTransformConstraintDescription : public FConstraintDescriptionEx
{
    enum class ETransformConstraintType           TransformType;                                                // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AnimationCore.NodeChain
// Struct Size::0x0010
struct FNodeChain
{
    TArray<FName>                                 Nodes;                                                        // 0x0000(0x0010)
};


// ScriptStruct  AnimationCore.TransformNoScale
// Struct Size::0x0020
struct FTransformNoScale
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Rotation;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode_AssetPlayerBase
// Struct Size::0x0040
struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
{
    int32_t                                       GroupIndex;                                                   // 0x0010(0x0004)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0014(0x0001)
    bool                                          bIgnoreForRelevancyTest;                                      // 0x0015(0x0001)
    char                                          pa_0016[0x0002]                                               // 0x0016(0x0002)
    FName                                         AnimNodeTag;                                                  // 0x0018(0x0008)
    char                                          pa_0020[0x0004]                                               // 0x0020(0x0004)
    float                                         BlendWeight;                                                  // 0x0024(0x0004)
    float                                         InternalTimeAccumulator;                                      // 0x0028(0x0004)
    char                                          pa_002C[0x0014]                                               // 0x002C(0x0014)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BlendSpacePlayer
// Struct Size::0x00F0
struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
{
    float                                         X;                                                            // 0x0040(0x0004)
    float                                         Y;                                                            // 0x0044(0x0004)
    float                                         Z;                                                            // 0x0048(0x0004)
    float                                         PlayRate;                                                     // 0x004C(0x0004)
    bool                                          bLoop;                                                        // 0x0050(0x0001)
    bool                                          bResetPlayTimeWhenBlendSpaceChanges;                          // 0x0051(0x0001)
    char                                          pa_0052[0x0002]                                               // 0x0052(0x0002)
    float                                         StartPosition;                                                // 0x0054(0x0004)
    UBlendSpaceBase*                              BlendSpace;                                                   // 0x0058(0x0008)
    char                                          pa_0060[0x0088]                                               // 0x0060(0x0088)
    UBlendSpaceBase*                              PreviousBlendSpace;                                           // 0x00E8(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_AimOffsetLookAt
// Struct Size::0x01C0
struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
{
    char                                          pa_00F0[0x0060]                                               // 0x00F0(0x0060)
    FPoseLink                                     BasePose;                                                     // 0x0150(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0160(0x0004)
    FName                                         SourceSocketName;                                             // 0x0164(0x0008)
    FName                                         PivotSocketName;                                              // 0x016C(0x0008)
    FVector                                       LookAtLocation;                                               // 0x0174(0x000C)
    FVector                                       SocketAxis;                                                   // 0x0180(0x000C)
    float                                         Alpha;                                                        // 0x018C(0x0004)
    char                                          pa_0190[0x0030]                                               // 0x0190(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_AnimDynamics
// Struct Size::0x0450
struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
{
    float                                         LinearDampingOverride;                                        // 0x00C8(0x0004)
    float                                         AngularDampingOverride;                                       // 0x00CC(0x0004)
    char                                          pa_00D0[0x0060]                                               // 0x00D0(0x0060)
    FBoneReference                                RelativeSpaceBone;                                            // 0x0130(0x0010)
    FBoneReference                                BoundBone;                                                    // 0x0140(0x0010)
    FBoneReference                                ChainEnd;                                                     // 0x0150(0x0010)
    FVector                                       BoxExtents;                                                   // 0x0160(0x000C)
    FVector                                       LocalJointOffset;                                             // 0x016C(0x000C)
    float                                         GravityScale;                                                 // 0x0178(0x0004)
    FVector                                       GravityOverride;                                              // 0x017C(0x000C)
    float                                         LinearSpringConstant;                                         // 0x0188(0x0004)
    float                                         AngularSpringConstant;                                        // 0x018C(0x0004)
    float                                         WindScale;                                                    // 0x0190(0x0004)
    FVector                                       ComponentLinearAccScale;                                      // 0x0194(0x000C)
    FVector                                       ComponentLinearVelScale;                                      // 0x01A0(0x000C)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x01AC(0x000C)
    float                                         AngularBiasOverride;                                          // 0x01B8(0x0004)
    int32_t                                       NumSolverIterationsPreUpdate;                                 // 0x01BC(0x0004)
    int32_t                                       NumSolverIterationsPostUpdate;                                // 0x01C0(0x0004)
    FAnimPhysConstraintSetup                      ConstraintSetup;                                              // 0x01C4(0x0048)
    char                                          pa_020C[0x0004]                                               // 0x020C(0x0004)
    TArray<FAnimPhysSphericalLimit>               SphericalLimits;                                              // 0x0210(0x0010)
    float                                         SphereCollisionRadius;                                        // 0x0220(0x0004)
    FVector                                       ExternalForce;                                                // 0x0224(0x000C)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x0230(0x0010)
    enum class AnimPhysCollisionType              CollisionType;                                                // 0x0240(0x0001)
    enum class AnimPhysSimSpaceType               SimulationSpace;                                              // 0x0241(0x0001)
    char                                          pa_0242[0x0002]                                               // 0x0242(0x0002)
    bool                                          bForceResetTeleportType;                                      // 0x0244(0x0001)
    char                                          bUseSphericalLimits;                                          // 0x0245(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x0245(0x0001)
    char                                          bDoUpdate;                                                    // 0x0245(0x0001)
    char                                          bDoEval;                                                      // 0x0245(0x0001)
    char                                          bOverrideLinearDamping;                                       // 0x0245(0x0001)
    char                                          bOverrideAngularBias;                                         // 0x0245(0x0001)
    char                                          bOverrideAngularDamping;                                      // 0x0245(0x0001)
    char                                          bEnableWind;                                                  // 0x0245(0x0001)
    char                                          bUseGravityOverride;                                          // 0x0246(0x0001)
    char                                          bLinearSpring;                                                // 0x0246(0x0001)
    char                                          bAngularSpring;                                               // 0x0246(0x0001)
    char                                          bChain;                                                       // 0x0246(0x0001)
    char                                          pa_0247[0x0009]                                               // 0x0247(0x0009)
    FRotationRetargetingInfo                      RetargetingSettings;                                          // 0x0250(0x0130)
    char                                          pa_0380[0x00D0]                                               // 0x0380(0x00D0)
};


// ScriptStruct  AnimGraphRuntime.RotationRetargetingInfo
// Struct Size::0x0130
struct FRotationRetargetingInfo
{
    bool                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x000F]                                               // 0x0001(0x000F)
    FTransform                                    Source;                                                       // 0x0010(0x0030)
    FTransform                                    Target;                                                       // 0x0040(0x0030)
    enum class ERotationComponent                 RotationComponent;                                            // 0x0070(0x0001)
    char                                          pa_0071[0x0003]                                               // 0x0071(0x0003)
    FVector                                       TwistAxis;                                                    // 0x0074(0x000C)
    bool                                          bUseAbsoluteAngle;                                            // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    float                                         SourceMinimum;                                                // 0x0084(0x0004)
    float                                         SourceMaximum;                                                // 0x0088(0x0004)
    float                                         TargetMinimum;                                                // 0x008C(0x0004)
    float                                         TargetMaximum;                                                // 0x0090(0x0004)
    enum class EEasingFuncType                    EasingType;                                                   // 0x0094(0x0001)
    char                                          pa_0095[0x0003]                                               // 0x0095(0x0003)
    FRuntimeFloatCurve                            CustomCurve;                                                  // 0x0098(0x0088)
    bool                                          bFlipEasing;                                                  // 0x0120(0x0001)
    char                                          pa_0121[0x0003]                                               // 0x0121(0x0003)
    float                                         EasingWeight;                                                 // 0x0124(0x0004)
    bool                                          bClamp;                                                       // 0x0128(0x0001)
    char                                          pa_0129[0x0007]                                               // 0x0129(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysPlanarLimit
// Struct Size::0x0040
struct FAnimPhysPlanarLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FTransform                                    PlaneTransform;                                               // 0x0010(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysSphericalLimit
// Struct Size::0x0024
struct FAnimPhysSphericalLimit
{
    FBoneReference                                DrivingBone;                                                  // 0x0000(0x0010)
    FVector                                       SphereLocalOffset;                                            // 0x0010(0x000C)
    float                                         LimitRadius;                                                  // 0x001C(0x0004)
    enum class ESphericalLimitType                LimitType;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimPhysConstraintSetup
// Struct Size::0x0048
struct FAnimPhysConstraintSetup
{
    enum class AnimPhysLinearConstraintType       LinearXLimitType;                                             // 0x0000(0x0001)
    enum class AnimPhysLinearConstraintType       LinearYLimitType;                                             // 0x0001(0x0001)
    enum class AnimPhysLinearConstraintType       LinearZLimitType;                                             // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FVector                                       LinearAxesMin;                                                // 0x0004(0x000C)
    FVector                                       LinearAxesMax;                                                // 0x0010(0x000C)
    enum class AnimPhysAngularConstraintType      AngularConstraintType;                                        // 0x001C(0x0001)
    enum class AnimPhysTwistAxis                  TwistAxis;                                                    // 0x001D(0x0001)
    enum class AnimPhysTwistAxis                  AngularTargetAxis;                                            // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    float                                         ConeAngle;                                                    // 0x0020(0x0004)
    FVector                                       AngularLimitsMin;                                             // 0x0024(0x000C)
    FVector                                       AngularLimitsMax;                                             // 0x0030(0x000C)
    FVector                                       AngularTarget;                                                // 0x003C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_ApplyAdditive
// Struct Size::0x00C8
struct FAnimNode_ApplyAdditive : public FAnimNode_Base
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    float                                         Alpha;                                                        // 0x0030(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0034(0x0008)
    int32_t                                       LODThreshold;                                                 // 0x003C(0x0004)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0090(0x0030)
    char                                          pa_00C0[0x0004]                                               // 0x00C0(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x00C4(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x00C5(0x0001)
    char                                          pa_00C6[0x0002]                                               // 0x00C6(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_ApplyLimits
// Struct Size::0x00E8
struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
{
    TArray<FAngularRangeLimit>                    AngularRangeLimits;                                           // 0x00C8(0x0010)
    TArray<FVector>                               AngularOffsets;                                               // 0x00D8(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AngularRangeLimit
// Struct Size::0x0028
struct FAngularRangeLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x000C)
    FVector                                       LimitMax;                                                     // 0x000C(0x000C)
    FBoneReference                                Bone;                                                         // 0x0018(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BlendBoneByChannel
// Struct Size::0x0068
struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    TArray<FBlendBoneByChannelEntry>              BoneDefinitions;                                              // 0x0030(0x0010)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0058(0x0008)
    enum class EBoneControlSpace                  TransformsSpace;                                              // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  AnimGraphRuntime.BlendBoneByChannelEntry
// Struct Size::0x0024
struct FBlendBoneByChannelEntry
{
    FBoneReference                                SourceBone;                                                   // 0x0000(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x0010(0x0010)
    bool                                          bBlendTranslation;                                            // 0x0020(0x0001)
    bool                                          bBlendRotation;                                               // 0x0021(0x0001)
    bool                                          bBlendScale;                                                  // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BlendListBase
// Struct Size::0x00A0
struct FAnimNode_BlendListBase : public FAnimNode_Base
{
    TArray<FPoseLink>                             BlendPose;                                                    // 0x0010(0x0010)
    TArray<float>                                 BlendTime;                                                    // 0x0020(0x0010)
    enum class EBlendListTransitionType           TransitionType;                                               // 0x0030(0x0001)
    enum class EAlphaBlendOption                  BlendType;                                                    // 0x0031(0x0001)
    bool                                          bResetChildOnActivation;                                      // 0x0032(0x0001)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
    UCurveFloat*                                  CustomBlendCurve;                                             // 0x0038(0x0008)
    UBlendProfile*                                BlendProfile;                                                 // 0x0040(0x0008)
    int32_t                                       LODThreshold;                                                 // 0x0048(0x0004)
    char                                          pa_004C[0x0054]                                               // 0x004C(0x0054)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BlendListByBool
// Struct Size::0x00A8
struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
{
    bool                                          bActiveValue;                                                 // 0x00A0(0x0001)
    char                                          pa_00A1[0x0007]                                               // 0x00A1(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BlendListByEnum
// Struct Size::0x00B8
struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
{
    TArray<int32_t>                               EnumToPoseIndex;                                              // 0x00A0(0x0010)
    char                                          ActiveEnumValue;                                              // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BlendListByInt
// Struct Size::0x00A8
struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
{
    int32_t                                       ActiveChildIndex;                                             // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BlendSpaceEvaluator
// Struct Size::0x00F8
struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
{
    float                                         NormalizedTime;                                               // 0x00F0(0x0004)
    char                                          pa_00F4[0x0004]                                               // 0x00F4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_BoneDrivenController
// Struct Size::0x0118
struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                SourceBone;                                                   // 0x00C8(0x0010)
    UCurveFloat*                                  DrivingCurve;                                                 // 0x00D8(0x0008)
    float                                         Multiplier;                                                   // 0x00E0(0x0004)
    float                                         RangeMin;                                                     // 0x00E4(0x0004)
    float                                         RangeMax;                                                     // 0x00E8(0x0004)
    float                                         RemappedMin;                                                  // 0x00EC(0x0004)
    float                                         RemappedMax;                                                  // 0x00F0(0x0004)
    FName                                         ParameterName;                                                // 0x00F4(0x0008)
    FBoneReference                                TargetBone;                                                   // 0x00FC(0x0010)
    enum class EDrivenDestinationMode             DestinationMode;                                              // 0x010C(0x0001)
    enum class EDrivenBoneModificationMode        ModificationMode;                                             // 0x010D(0x0001)
    enum class EComponentType                     SourceComponent;                                              // 0x010E(0x0001)
    char                                          bUseRange;                                                    // 0x010F(0x0001)
    char                                          bAffectTargetTranslationX;                                    // 0x010F(0x0001)
    char                                          bAffectTargetTranslationY;                                    // 0x010F(0x0001)
    char                                          bAffectTargetTranslationZ;                                    // 0x010F(0x0001)
    char                                          bAffectTargetRotationX;                                       // 0x010F(0x0001)
    char                                          bAffectTargetRotationY;                                       // 0x010F(0x0001)
    char                                          bAffectTargetRotationZ;                                       // 0x010F(0x0001)
    char                                          bAffectTargetScaleX;                                          // 0x010F(0x0001)
    char                                          bAffectTargetScaleY;                                          // 0x0110(0x0001)
    char                                          bAffectTargetScaleZ;                                          // 0x0110(0x0001)
    char                                          pa_0111[0x0007]                                               // 0x0111(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_CCDIK
// Struct Size::0x0180
struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
{
    FVector                                       EffectorLocation;                                             // 0x00C8(0x000C)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x00D4(0x0001)
    char                                          pa_00D5[0x000B]                                               // 0x00D5(0x000B)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x00E0(0x0060)
    FBoneReference                                TipBone;                                                      // 0x0140(0x0010)
    FBoneReference                                RootBone;                                                     // 0x0150(0x0010)
    float                                         Precision;                                                    // 0x0160(0x0004)
    int32_t                                       MaxIterations;                                                // 0x0164(0x0004)
    bool                                          bStartFromTail;                                               // 0x0168(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x0169(0x0001)
    char                                          pa_016A[0x0006]                                               // 0x016A(0x0006)
    TArray<float>                                 RotationLimitPerJoints;                                       // 0x0170(0x0010)
};


// ScriptStruct  AnimGraphRuntime.BoneSocketTarget
// Struct Size::0x0060
struct FBoneSocketTarget
{
    bool                                          bUseSocket;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FBoneReference                                BoneReference;                                                // 0x0004(0x0010)
    char                                          pa_0014[0x000C]                                               // 0x0014(0x000C)
    FSocketReference                              SocketReference;                                              // 0x0020(0x0040)
};


// ScriptStruct  AnimGraphRuntime.SocketReference
// Struct Size::0x0040
struct FSocketReference
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    FName                                         SocketName;                                                   // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_Constraint
// Struct Size::0x0108
struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                BoneToModify;                                                 // 0x00C8(0x0010)
    TArray<FConstraint>                           ConstraintSetup;                                              // 0x00D8(0x0010)
    TArray<float>                                 ConstraintWeights;                                            // 0x00E8(0x0010)
    char                                          pa_00F8[0x0010]                                               // 0x00F8(0x0010)
};


// ScriptStruct  AnimGraphRuntime.Constraint
// Struct Size::0x001C
struct FConstraint
{
    FBoneReference                                TargetBone;                                                   // 0x0000(0x0010)
    enum class EConstraintOffsetOption            OffsetOption;                                                 // 0x0010(0x0001)
    enum class ETransformConstraintType           TransformType;                                                // 0x0011(0x0001)
    FFilterOptionPerAxis                          PerAxis;                                                      // 0x0012(0x0003)
    char                                          pa_0015[0x0007]                                               // 0x0015(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_CopyBone
// Struct Size::0x00F0
struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                SourceBone;                                                   // 0x00C8(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x00D8(0x0010)
    bool                                          bCopyTranslation;                                             // 0x00E8(0x0001)
    bool                                          bCopyRotation;                                                // 0x00E9(0x0001)
    bool                                          bCopyScale;                                                   // 0x00EA(0x0001)
    enum class EBoneControlSpace                  ControlSpace;                                                 // 0x00EB(0x0001)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_CopyBoneDelta
// Struct Size::0x00F8
struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                SourceBone;                                                   // 0x00C8(0x0010)
    FBoneReference                                TargetBone;                                                   // 0x00D8(0x0010)
    bool                                          bCopyTranslation;                                             // 0x00E8(0x0001)
    bool                                          bCopyRotation;                                                // 0x00E9(0x0001)
    bool                                          bCopyScale;                                                   // 0x00EA(0x0001)
    enum class CopyBoneDeltaMode                  CopyMode;                                                     // 0x00EB(0x0001)
    float                                         TranslationMultiplier;                                        // 0x00EC(0x0004)
    float                                         RotationMultiplier;                                           // 0x00F0(0x0004)
    float                                         ScaleMultiplier;                                              // 0x00F4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_CopyPoseFromMesh
// Struct Size::0x0140
struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
{
    TWeakObjectPtr<USkeletalMeshComponent>        SourceMeshComponent;                                          // 0x0010(0x0008)
    bool                                          bUseAttachedParent;                                           // 0x0018(0x0001)
    bool                                          bCopyCurves;                                                  // 0x0019(0x0001)
    char                                          pa_001A[0x0126]                                               // 0x001A(0x0126)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_CurveSource
// Struct Size::0x0040
struct FAnimNode_CurveSource : public FAnimNode_Base
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    FName                                         SourceBinding;                                                // 0x0020(0x0008)
    float                                         Alpha;                                                        // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    TScriptInterface<ICurveSourceInterface>       CurveSource;                                                  // 0x0030(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_Fabrik
// Struct Size::0x0190
struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
{
    char                                          pa_00C8[0x0008]                                               // 0x00C8(0x0008)
    FTransform                                    EffectorTransform;                                            // 0x00D0(0x0030)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x0100(0x0060)
    FBoneReference                                TipBone;                                                      // 0x0160(0x0010)
    FBoneReference                                RootBone;                                                     // 0x0170(0x0010)
    float                                         Precision;                                                    // 0x0180(0x0004)
    int32_t                                       MaxIterations;                                                // 0x0184(0x0004)
    enum class EBoneControlSpace                  EffectorTransformSpace;                                       // 0x0188(0x0001)
    enum class EBoneRotationSource                EffectorRotationSource;                                       // 0x0189(0x0001)
    char                                          pa_018A[0x0006]                                               // 0x018A(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_HandIKRetargeting
// Struct Size::0x0120
struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                RightHandFK;                                                  // 0x00C8(0x0010)
    FBoneReference                                LeftHandFK;                                                   // 0x00D8(0x0010)
    FBoneReference                                RightHandIK;                                                  // 0x00E8(0x0010)
    FBoneReference                                LeftHandIK;                                                   // 0x00F8(0x0010)
    TArray<FBoneReference>                        IKBonesToMove;                                                // 0x0108(0x0010)
    float                                         HandFKWeight;                                                 // 0x0118(0x0004)
    char                                          pa_011C[0x0004]                                               // 0x011C(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_LayeredBoneBlend
// Struct Size::0x00C0
struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    TArray<FPoseLink>                             BlendPoses;                                                   // 0x0020(0x0010)
    TArray<FInputBlendPose>                       LayerSetup;                                                   // 0x0030(0x0010)
    TArray<float>                                 BlendWeights;                                                 // 0x0040(0x0010)
    bool                                          bMeshSpaceRotationBlend;                                      // 0x0050(0x0001)
    bool                                          bMeshSpaceScaleBlend;                                         // 0x0051(0x0001)
    enum class ECurveBlendOption                  CurveBlendOption;                                             // 0x0052(0x0001)
    bool                                          bBlendRootMotionBasedOnRootBone;                              // 0x0053(0x0001)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    int32_t                                       LODThreshold;                                                 // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    TArray<FPerBoneBlendWeight>                   PerBoneBlendWeights;                                          // 0x0060(0x0010)
    FGuid                                         SkeletonGuid;                                                 // 0x0070(0x0010)
    FGuid                                         VirtualBoneGuid;                                              // 0x0080(0x0010)
    char                                          pa_0090[0x0030]                                               // 0x0090(0x0030)
};


// ScriptStruct  Engine.PerBoneBlendWeight
// Struct Size::0x0008
struct FPerBoneBlendWeight
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    float                                         BlendWeight;                                                  // 0x0004(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_LegIK
// Struct Size::0x00F8
struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
{
    float                                         ReachPrecision;                                               // 0x00C8(0x0004)
    int32_t                                       MaxIterations;                                                // 0x00CC(0x0004)
    TArray<FAnimLegIKDefinition>                  LegsDefinition;                                               // 0x00D0(0x0010)
    char                                          pa_00E0[0x0018]                                               // 0x00E0(0x0018)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKDefinition
// Struct Size::0x002C
struct FAnimLegIKDefinition
{
    FBoneReference                                IKFootBone;                                                   // 0x0000(0x0010)
    FBoneReference                                FKFootBone;                                                   // 0x0010(0x0010)
    int32_t                                       NumBonesInLimb;                                               // 0x0020(0x0004)
    float                                         MinRotationAngle;                                             // 0x0024(0x0004)
    enum class EAxis                              FootBoneForwardAxis;                                          // 0x0028(0x0001)
    enum class EAxis                              HingeRotationAxis;                                            // 0x0029(0x0001)
    bool                                          bEnableRotationLimit;                                         // 0x002A(0x0001)
    bool                                          bEnableKneeTwistCorrection;                                   // 0x002B(0x0001)
};


// ScriptStruct  AnimGraphRuntime.AnimLegIKData
// Struct Size::0x00A0
struct FAnimLegIKData
{
    char                                          pa_0000[0x00A0]                                               // 0x0000(0x00A0)
};


// ScriptStruct  AnimGraphRuntime.IKChain
// Struct Size::0x0038
struct FIKChain
{
    char                                          pa_0000[0x0038]                                               // 0x0000(0x0038)
};


// ScriptStruct  AnimGraphRuntime.IKChainLink
// Struct Size::0x003C
struct FIKChainLink
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_LookAt
// Struct Size::0x01B0
struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                BoneToModify;                                                 // 0x00C8(0x0010)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FBoneSocketTarget                             LookAtTarget;                                                 // 0x00E0(0x0060)
    FVector                                       LookAtLocation;                                               // 0x0140(0x000C)
    FAxis                                         LookAt_Axis;                                                  // 0x014C(0x0010)
    bool                                          bUseLookUpAxis;                                               // 0x015C(0x0001)
    enum class EInterpolationBlend                InterpolationType;                                            // 0x015D(0x0001)
    char                                          pa_015E[0x0002]                                               // 0x015E(0x0002)
    FAxis                                         LookUp_Axis;                                                  // 0x0160(0x0010)
    float                                         LookAtClamp;                                                  // 0x0170(0x0004)
    float                                         InterpolationTime;                                            // 0x0174(0x0004)
    float                                         InterpolationTriggerThreashold;                               // 0x0178(0x0004)
    char                                          pa_017C[0x0034]                                               // 0x017C(0x0034)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_MakeDynamicAdditive
// Struct Size::0x0038
struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    bool                                          bMeshSpaceAdditive;                                           // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_ModifyBone
// Struct Size::0x0108
struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                BoneToModify;                                                 // 0x00C8(0x0010)
    FVector                                       Translation;                                                  // 0x00D8(0x000C)
    FRotator                                      Rotation;                                                     // 0x00E4(0x000C)
    FVector                                       Scale;                                                        // 0x00F0(0x000C)
    enum class EBoneModificationMode              TranslationMode;                                              // 0x00FC(0x0001)
    enum class EBoneModificationMode              RotationMode;                                                 // 0x00FD(0x0001)
    enum class EBoneModificationMode              ScaleMode;                                                    // 0x00FE(0x0001)
    enum class EBoneControlSpace                  TranslationSpace;                                             // 0x00FF(0x0001)
    enum class EBoneControlSpace                  RotationSpace;                                                // 0x0100(0x0001)
    enum class EBoneControlSpace                  ScaleSpace;                                                   // 0x0101(0x0001)
    char                                          pa_0102[0x0006]                                               // 0x0102(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_ModifyCurve
// Struct Size::0x0058
struct FAnimNode_ModifyCurve : public FAnimNode_Base
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    TArray<float>                                 CurveValues;                                                  // 0x0020(0x0010)
    TArray<FName>                                 CurveNames;                                                   // 0x0030(0x0010)
    char                                          pa_0040[0x0010]                                               // 0x0040(0x0010)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    enum class EModifyCurveApplyMode              ApplyMode;                                                    // 0x0054(0x0001)
    char                                          pa_0055[0x0003]                                               // 0x0055(0x0003)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_MultiWayBlend
// Struct Size::0x0050
struct FAnimNode_MultiWayBlend : public FAnimNode_Base
{
    TArray<FPoseLink>                             Poses;                                                        // 0x0010(0x0010)
    TArray<float>                                 DesiredAlphas;                                                // 0x0020(0x0010)
    char                                          pa_0030[0x0010]                                               // 0x0030(0x0010)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0040(0x0008)
    bool                                          bAdditiveNode;                                                // 0x0048(0x0001)
    bool                                          bNormalizeAlpha;                                              // 0x0049(0x0001)
    char                                          pa_004A[0x0006]                                               // 0x004A(0x0006)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_ObserveBone
// Struct Size::0x0100
struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                BoneToObserve;                                                // 0x00C8(0x0010)
    enum class EBoneControlSpace                  DisplaySpace;                                                 // 0x00D8(0x0001)
    bool                                          bRelativeToRefPose;                                           // 0x00D9(0x0001)
    char                                          pa_00DA[0x0002]                                               // 0x00DA(0x0002)
    FVector                                       Translation;                                                  // 0x00DC(0x000C)
    FRotator                                      Rotation;                                                     // 0x00E8(0x000C)
    FVector                                       Scale;                                                        // 0x00F4(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_PoseHandler
// Struct Size::0x0088
struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
{
    UPoseAsset*                                   PoseAsset;                                                    // 0x0040(0x0008)
    char                                          pa_0048[0x0040]                                               // 0x0048(0x0040)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_PoseBlendNode
// Struct Size::0x00A8
struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
{
    FPoseLink                                     SourcePose;                                                   // 0x0088(0x0010)
    enum class EAlphaBlendOption                  BlendOption;                                                  // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
    UCurveFloat*                                  CustomCurve;                                                  // 0x00A0(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_PoseByName
// Struct Size::0x00A0
struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
{
    FName                                         PoseName;                                                     // 0x0088(0x0008)
    float                                         PoseWeight;                                                   // 0x0090(0x0004)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_PoseDriver
// Struct Size::0x0138
struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
{
    FPoseLink                                     SourcePose;                                                   // 0x0088(0x0010)
    TArray<FBoneReference>                        SourceBones;                                                  // 0x0098(0x0010)
    TArray<FBoneReference>                        OnlyDriveBones;                                               // 0x00A8(0x0010)
    TArray<FPoseDriverTarget>                     PoseTargets;                                                  // 0x00B8(0x0010)
    char                                          pa_00C8[0x0030]                                               // 0x00C8(0x0030)
    FBoneReference                                EvalSpaceBone;                                                // 0x00F8(0x0010)
    FRBFParams                                    RBFParams;                                                    // 0x0108(0x002C)
    enum class EPoseDriverSource                  DriveSource;                                                  // 0x0134(0x0001)
    enum class EPoseDriverOutput                  DriveOutput;                                                  // 0x0135(0x0001)
    char                                          bOnlyDriveSelectedBones;                                      // 0x0136(0x0001)
    char                                          pa_0137[0x0001]                                               // 0x0137(0x0001)
};


// ScriptStruct  AnimGraphRuntime.RBFParams
// Struct Size::0x002C
struct FRBFParams
{
    int32_t                                       TargetDimensions;                                             // 0x0000(0x0004)
    enum class ERBFSolverType                     SolverType;                                                   // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    float                                         Radius;                                                       // 0x0008(0x0004)
    enum class ERBFFunctionType                   Function;                                                     // 0x000C(0x0001)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x000D(0x0001)
    enum class EBoneAxis                          TwistAxis;                                                    // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    float                                         WeightThreshold;                                              // 0x0010(0x0004)
    enum class ERBFNormalizeMethod                NormalizeMethod;                                              // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FVector                                       MedianReference;                                              // 0x0018(0x000C)
    float                                         MedianMin;                                                    // 0x0024(0x0004)
    float                                         MedianMax;                                                    // 0x0028(0x0004)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTarget
// Struct Size::0x00C0
struct FPoseDriverTarget
{
    TArray<FPoseDriverTransform>                  BoneTransforms;                                               // 0x0000(0x0010)
    FRotator                                      TargetRotation;                                               // 0x0010(0x000C)
    float                                         TargetScale;                                                  // 0x001C(0x0004)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x0020(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x0021(0x0001)
    bool                                          bApplyCustomCurve;                                            // 0x0022(0x0001)
    char                                          pa_0023[0x0005]                                               // 0x0023(0x0005)
    FRichCurve                                    CustomCurve;                                                  // 0x0028(0x0080)
    FName                                         DrivenName;                                                   // 0x00A8(0x0008)
    char                                          pa_00B0[0x0008]                                               // 0x00B0(0x0008)
    bool                                          bIsHidden;                                                    // 0x00B8(0x0001)
    char                                          pa_00B9[0x0007]                                               // 0x00B9(0x0007)
};


// ScriptStruct  AnimGraphRuntime.PoseDriverTransform
// Struct Size::0x0018
struct FPoseDriverTransform
{
    FVector                                       TargetTranslation;                                            // 0x0000(0x000C)
    FRotator                                      TargetRotation;                                               // 0x000C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_PoseSnapshot
// Struct Size::0x0090
struct FAnimNode_PoseSnapshot : public FAnimNode_Base
{
    FName                                         SnapshotName;                                                 // 0x0010(0x0008)
    FPoseSnapshot                                 Snapshot;                                                     // 0x0018(0x0038)
    enum class ESnapshotSourceMode                Mode;                                                         // 0x0050(0x0001)
    char                                          pa_0051[0x003F]                                               // 0x0051(0x003F)
};


// ScriptStruct  Engine.PoseSnapshot
// Struct Size::0x0038
struct FPoseSnapshot
{
    TArray<FTransform>                            LocalTransforms;                                              // 0x0000(0x0010)
    TArray<FName>                                 BoneNames;                                                    // 0x0010(0x0010)
    FName                                         SkeletalMeshName;                                             // 0x0020(0x0008)
    FName                                         SnapshotName;                                                 // 0x0028(0x0008)
    bool                                          bIsValid;                                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_RandomPlayer
// Struct Size::0x0078
struct FAnimNode_RandomPlayer : public FAnimNode_Base
{
    TArray<FRandomPlayerSequenceEntry>            Entries;                                                      // 0x0010(0x0010)
    char                                          pa_0020[0x0050]                                               // 0x0020(0x0050)
    bool                                          bShuffleMode;                                                 // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
};


// ScriptStruct  AnimGraphRuntime.RandomPlayerSequenceEntry
// Struct Size::0x0050
struct FRandomPlayerSequenceEntry
{
    UAnimSequence*                                Sequence;                                                     // 0x0000(0x0008)
    float                                         ChanceToPlay;                                                 // 0x0008(0x0004)
    int32_t                                       MinLoopCount;                                                 // 0x000C(0x0004)
    int32_t                                       MaxLoopCount;                                                 // 0x0010(0x0004)
    float                                         MinPlayRate;                                                  // 0x0014(0x0004)
    float                                         MaxPlayRate;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FAlphaBlend                                   BlendIn;                                                      // 0x0020(0x0030)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_MeshSpaceRefPose
// Struct Size::0x0010
struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode_RefPose
// Struct Size::0x0018
struct FAnimNode_RefPose : public FAnimNode_Base
{
    enum class ERefPoseType                       RefPoseType;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_ResetRoot
// Struct Size::0x00D8
struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
{
    char                                          pa_00C8[0x0010]                                               // 0x00C8(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_RigidBody
// Struct Size::0x0590
struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
{
    UPhysicsAsset*                                OverridePhysicsAsset;                                         // 0x00C8(0x0008)
    char                                          pa_00D0[0x0098]                                               // 0x00D0(0x0098)
    FVector                                       OverrideWorldGravity;                                         // 0x0168(0x000C)
    FVector                                       ExternalForce;                                                // 0x0174(0x000C)
    FVector                                       ComponentLinearAccScale;                                      // 0x0180(0x000C)
    FVector                                       ComponentLinearVelScale;                                      // 0x018C(0x000C)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x0198(0x000C)
    float                                         CachedBoundsScale;                                            // 0x01A4(0x0004)
    FBoneReference                                BaseBoneRef;                                                  // 0x01A8(0x0010)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x01B8(0x0001)
    enum class ESimulationSpace                   SimulationSpace;                                              // 0x01B9(0x0001)
    bool                                          bForceDisableCollisionBetweenConstraintBodies;                // 0x01BA(0x0001)
    char                                          pa_01BB[0x0001]                                               // 0x01BB(0x0001)
    char                                          bEnableWorldGeometry;                                         // 0x01BC(0x0001)
    char                                          bOverrideWorldGravity;                                        // 0x01BC(0x0001)
    char                                          bTransferBoneVelocities;                                      // 0x01BC(0x0001)
    char                                          bFreezeIncomingPoseOnStart;                                   // 0x01BC(0x0001)
    char                                          bClampLinearTranslationLimitToRefPose;                        // 0x01BC(0x0001)
    char                                          pa_01BD[0x0003]                                               // 0x01BD(0x0003)
    FSolverIterations                             OverrideSolverIterations;                                     // 0x01C0(0x0018)
    char                                          pa_01D8[0x03B8]                                               // 0x01D8(0x03B8)
};


// ScriptStruct  Engine.SolverIterations
// Struct Size::0x0018
struct FSolverIterations
{
    int32_t                                       SolverIterations;                                             // 0x0000(0x0004)
    int32_t                                       JointIterations;                                              // 0x0004(0x0004)
    int32_t                                       CollisionIterations;                                          // 0x0008(0x0004)
    int32_t                                       SolverPushOutIterations;                                      // 0x000C(0x0004)
    int32_t                                       JointPushOutIterations;                                       // 0x0010(0x0004)
    int32_t                                       CollisionPushOutIterations;                                   // 0x0014(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_RigidBody_Chaos
// Struct Size::0x0580
struct FAnimNode_RigidBody_Chaos : public FAnimNode_SkeletalControlBase
{
    UPhysicsAsset*                                OverridePhysicsAsset;                                         // 0x00C8(0x0008)
    FVector                                       OverrideWorldGravity;                                         // 0x00D0(0x000C)
    FVector                                       ExternalForce;                                                // 0x00DC(0x000C)
    FVector                                       ComponentLinearAccScale;                                      // 0x00E8(0x000C)
    FVector                                       ComponentLinearVelScale;                                      // 0x00F4(0x000C)
    FVector                                       ComponentAppliedLinearAccClamp;                               // 0x0100(0x000C)
    float                                         CachedBoundsScale;                                            // 0x010C(0x0004)
    FBoneReference                                BaseBoneRef;                                                  // 0x0110(0x0010)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x0120(0x0001)
    enum class ESimulationSpace                   SimulationSpace;                                              // 0x0121(0x0001)
    bool                                          bForceDisableCollisionBetweenConstraintBodies;                // 0x0122(0x0001)
    char                                          bEnableWorldGeometry;                                         // 0x0123(0x0001)
    char                                          bOverrideWorldGravity;                                        // 0x0123(0x0001)
    char                                          bTransferBoneVelocities;                                      // 0x0123(0x0001)
    char                                          bFreezeIncomingPoseOnStart;                                   // 0x0123(0x0001)
    char                                          bClampLinearTranslationLimitToRefPose;                        // 0x0123(0x0001)
    FSolverIterations                             OverrideSolverIterations;                                     // 0x0124(0x0018)
    char                                          pa_013C[0x0444]                                               // 0x013C(0x0444)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_RotateRootBone
// Struct Size::0x00A0
struct FAnimNode_RotateRootBone : public FAnimNode_Base
{
    FPoseLink                                     BasePose;                                                     // 0x0010(0x0010)
    float                                         Pitch;                                                        // 0x0020(0x0004)
    float                                         Yaw;                                                          // 0x0024(0x0004)
    FInputScaleBiasClamp                          PitchScaleBiasClamp;                                          // 0x0028(0x0030)
    FInputScaleBiasClamp                          YawScaleBiasClamp;                                            // 0x0058(0x0030)
    FRotator                                      MeshToComponent;                                              // 0x0088(0x000C)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_RotationMultiplier
// Struct Size::0x00F0
struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                TargetBone;                                                   // 0x00C8(0x0010)
    FBoneReference                                SourceBone;                                                   // 0x00D8(0x0010)
    float                                         Multiplier;                                                   // 0x00E8(0x0004)
    enum class EBoneAxis                          RotationAxisToRefer;                                          // 0x00EC(0x0001)
    bool                                          bIsAdditive;                                                  // 0x00ED(0x0001)
    char                                          pa_00EE[0x0002]                                               // 0x00EE(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_RotationOffsetBlendSpace
// Struct Size::0x0198
struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
{
    FPoseLink                                     BasePose;                                                     // 0x00F0(0x0010)
    int32_t                                       LODThreshold;                                                 // 0x0100(0x0004)
    float                                         Alpha;                                                        // 0x0104(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0108(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0110(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0158(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0160(0x0030)
    char                                          pa_0190[0x0004]                                               // 0x0190(0x0004)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0194(0x0001)
    bool                                          bAlphaBoolEnabled;                                            // 0x0195(0x0001)
    char                                          pa_0196[0x0002]                                               // 0x0196(0x0002)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_ScaleChainLength
// Struct Size::0x0078
struct FAnimNode_ScaleChainLength : public FAnimNode_Base
{
    FPoseLink                                     InputPose;                                                    // 0x0010(0x0010)
    float                                         DefaultChainLength;                                           // 0x0020(0x0004)
    FBoneReference                                ChainStartBone;                                               // 0x0024(0x0010)
    FBoneReference                                ChainEndBone;                                                 // 0x0034(0x0010)
    FVector                                       TargetLocation;                                               // 0x0044(0x000C)
    float                                         Alpha;                                                        // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0058(0x0008)
    enum class EScaleChainInitialLength           ChainInitialLength;                                           // 0x0060(0x0001)
    char                                          pa_0061[0x0017]                                               // 0x0061(0x0017)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_SequenceEvaluator
// Struct Size::0x0058
struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
{
    UAnimSequenceBase*                            Sequence;                                                     // 0x0040(0x0008)
    float                                         ExplicitTime;                                                 // 0x0048(0x0004)
    bool                                          bShouldLoop;                                                  // 0x004C(0x0001)
    bool                                          bTeleportToExplicitTime;                                      // 0x004D(0x0001)
    enum class ESequenceEvalReinit                ReinitializationBehavior;                                     // 0x004E(0x0001)
    char                                          pa_004F[0x0001]                                               // 0x004F(0x0001)
    float                                         StartPosition;                                                // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_Slot
// Struct Size::0x0048
struct FAnimNode_Slot : public FAnimNode_Base
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    FName                                         SlotName;                                                     // 0x0020(0x0008)
    bool                                          bAlwaysUpdateSourcePose;                                      // 0x0028(0x0001)
    char                                          pa_0029[0x001F]                                               // 0x0029(0x001F)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_SplineIK
// Struct Size::0x0260
struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                StartBone;                                                    // 0x00C8(0x0010)
    FBoneReference                                EndBone;                                                      // 0x00D8(0x0010)
    enum class ESplineBoneAxis                    BoneAxis;                                                     // 0x00E8(0x0001)
    bool                                          bAutoCalculateSpline;                                         // 0x00E9(0x0001)
    char                                          pa_00EA[0x0002]                                               // 0x00EA(0x0002)
    int32_t                                       PointCount;                                                   // 0x00EC(0x0004)
    TArray<FTransform>                            ControlPoints;                                                // 0x00F0(0x0010)
    float                                         Roll;                                                         // 0x0100(0x0004)
    float                                         TwistStart;                                                   // 0x0104(0x0004)
    float                                         TwistEnd;                                                     // 0x0108(0x0004)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
    FAlphaBlend                                   TwistBlend;                                                   // 0x0110(0x0030)
    float                                         Stretch;                                                      // 0x0140(0x0004)
    float                                         Offset;                                                       // 0x0144(0x0004)
    char                                          pa_0148[0x0118]                                               // 0x0148(0x0118)
};


// ScriptStruct  AnimGraphRuntime.SplineIKCachedBoneData
// Struct Size::0x0014
struct FSplineIKCachedBoneData
{
    FBoneReference                                Bone;                                                         // 0x0000(0x0010)
    int32_t                                       RefSkeletonIndex;                                             // 0x0010(0x0004)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_SpringBone
// Struct Size::0x0128
struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                SpringBone;                                                   // 0x00C8(0x0010)
    float                                         MaxDisplacement;                                              // 0x00D8(0x0004)
    float                                         SpringStiffness;                                              // 0x00DC(0x0004)
    float                                         SpringDamping;                                                // 0x00E0(0x0004)
    float                                         ErrorResetThresh;                                             // 0x00E4(0x0004)
    char                                          pa_00E8[0x003C]                                               // 0x00E8(0x003C)
    char                                          bLimitDisplacement;                                           // 0x0124(0x0001)
    char                                          bTranslateX;                                                  // 0x0124(0x0001)
    char                                          bTranslateY;                                                  // 0x0124(0x0001)
    char                                          bTranslateZ;                                                  // 0x0124(0x0001)
    char                                          bRotateX;                                                     // 0x0124(0x0001)
    char                                          bRotateY;                                                     // 0x0124(0x0001)
    char                                          bRotateZ;                                                     // 0x0124(0x0001)
    char                                          pa_0125[0x0003]                                               // 0x0125(0x0003)
};


// ScriptStruct  Engine.AnimNode_Root
// Struct Size::0x0030
struct FAnimNode_Root : public FAnimNode_Base
{
    FPoseLink                                     Result;                                                       // 0x0010(0x0010)
    FName                                         Name;                                                         // 0x0020(0x0008)
    FName                                         Group;                                                        // 0x0028(0x0008)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_StateResult
// Struct Size::0x0030
struct FAnimNode_StateResult : public FAnimNode_Root
{
};


// ScriptStruct  AnimGraphRuntime.AnimNode_Trail
// Struct Size::0x0260
struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
{
    char                                          pa_00C8[0x0038]                                               // 0x00C8(0x0038)
    FBoneReference                                TrailBone;                                                    // 0x0100(0x0010)
    int32_t                                       ChainLength;                                                  // 0x0110(0x0004)
    enum class EAxis                              ChainBoneAxis;                                                // 0x0114(0x0001)
    char                                          bInvertChainBoneAxis;                                         // 0x0115(0x0001)
    char                                          bLimitStretch;                                                // 0x0115(0x0001)
    char                                          bLimitRotation;                                               // 0x0115(0x0001)
    char                                          bUsePlanarLimit;                                              // 0x0115(0x0001)
    char                                          bActorSpaceFakeVel;                                           // 0x0115(0x0001)
    char                                          bReorientParentToChild;                                       // 0x0115(0x0001)
    char                                          pa_0116[0x0002]                                               // 0x0116(0x0002)
    float                                         MaxDeltaTime;                                                 // 0x0118(0x0004)
    float                                         RelaxationSpeedScale;                                         // 0x011C(0x0004)
    FRuntimeFloatCurve                            TrailRelaxationSpeed;                                         // 0x0120(0x0088)
    FInputScaleBiasClamp                          RelaxationSpeedScaleInputProcessor;                           // 0x01A8(0x0030)
    TArray<FRotationLimit>                        RotationLimits;                                               // 0x01D8(0x0010)
    TArray<FVector>                               RotationOffsets;                                              // 0x01E8(0x0010)
    TArray<FAnimPhysPlanarLimit>                  PlanarLimits;                                                 // 0x01F8(0x0010)
    float                                         StretchLimit;                                                 // 0x0208(0x0004)
    FVector                                       FakeVelocity;                                                 // 0x020C(0x000C)
    FBoneReference                                BaseJoint;                                                    // 0x0218(0x0010)
    float                                         LastBoneRotationAnimAlphaBlend;                               // 0x0228(0x0004)
    char                                          pa_022C[0x0034]                                               // 0x022C(0x0034)
};


// ScriptStruct  AnimGraphRuntime.RotationLimit
// Struct Size::0x0018
struct FRotationLimit
{
    FVector                                       LimitMin;                                                     // 0x0000(0x000C)
    FVector                                       LimitMax;                                                     // 0x000C(0x000C)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_TwistCorrectiveNode
// Struct Size::0x0138
struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
{
    FReferenceBoneFrame                           BaseFrame;                                                    // 0x00C8(0x0020)
    FReferenceBoneFrame                           TwistFrame;                                                   // 0x00E8(0x0020)
    FAxis                                         TwistPlaneNormalAxis;                                         // 0x0108(0x0010)
    float                                         RangeMax;                                                     // 0x0118(0x0004)
    float                                         RemappedMin;                                                  // 0x011C(0x0004)
    float                                         RemappedMax;                                                  // 0x0120(0x0004)
    FAnimCurveParam                               Curve;                                                        // 0x0124(0x000C)
    char                                          pa_0130[0x0008]                                               // 0x0130(0x0008)
};


// ScriptStruct  Engine.AnimCurveParam
// Struct Size::0x000C
struct FAnimCurveParam
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  AnimGraphRuntime.ReferenceBoneFrame
// Struct Size::0x0020
struct FReferenceBoneFrame
{
    FBoneReference                                Bone;                                                         // 0x0000(0x0010)
    FAxis                                         Axis;                                                         // 0x0010(0x0010)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_TwoBoneIK
// Struct Size::0x01E0
struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
{
    FBoneReference                                IKBone;                                                       // 0x00C8(0x0010)
    float                                         StartStretchRatio;                                            // 0x00D8(0x0004)
    float                                         MaxStretchScale;                                              // 0x00DC(0x0004)
    FVector                                       EffectorLocation;                                             // 0x00E0(0x000C)
    char                                          pa_00EC[0x0004]                                               // 0x00EC(0x0004)
    FBoneSocketTarget                             EffectorTarget;                                               // 0x00F0(0x0060)
    FVector                                       JointTargetLocation;                                          // 0x0150(0x000C)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
    FBoneSocketTarget                             JointTarget;                                                  // 0x0160(0x0060)
    FAxis                                         TwistAxis;                                                    // 0x01C0(0x0010)
    enum class EBoneControlSpace                  EffectorLocationSpace;                                        // 0x01D0(0x0001)
    enum class EBoneControlSpace                  JointTargetLocationSpace;                                     // 0x01D1(0x0001)
    char                                          bAllowStretching;                                             // 0x01D2(0x0001)
    char                                          bTakeRotationFromEffectorSpace;                               // 0x01D2(0x0001)
    char                                          bMaintainEffectorRelRot;                                      // 0x01D2(0x0001)
    char                                          bAllowTwist;                                                  // 0x01D2(0x0001)
    char                                          pa_01D3[0x000D]                                               // 0x01D3(0x000D)
};


// ScriptStruct  AnimGraphRuntime.AnimNode_TwoWayBlend
// Struct Size::0x00C8
struct FAnimNode_TwoWayBlend : public FAnimNode_Base
{
    FPoseLink                                     A;                                                            // 0x0010(0x0010)
    FPoseLink                                     B;                                                            // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          bAlphaBoolEnabled;                                            // 0x0031(0x0001)
    char                                          bResetChildOnActivation;                                      // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0038(0x0008)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0090(0x0030)
    int32_t                                       LODThreshold;                                                 // 0x00C0(0x0004)
    char                                          pa_00C4[0x0004]                                               // 0x00C4(0x0004)
};


// ScriptStruct  AnimGraphRuntime.PositionHistory
// Struct Size::0x0030
struct FPositionHistory
{
    TArray<FVector>                               Positions;                                                    // 0x0000(0x0010)
    float                                         Range;                                                        // 0x0010(0x0004)
    char                                          pa_0014[0x001C]                                               // 0x0014(0x001C)
};


// ScriptStruct  AnimGraphRuntime.RBFEntry
// Struct Size::0x0010
struct FRBFEntry
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  AnimGraphRuntime.RBFTarget
// Struct Size::0x00A0
struct FRBFTarget : public FRBFEntry
{
    float                                         ScaleFactor;                                                  // 0x0010(0x0004)
    bool                                          bApplyCustomCurve;                                            // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FRichCurve                                    CustomCurve;                                                  // 0x0018(0x0080)
    enum class ERBFDistanceMethod                 DistanceMethod;                                               // 0x0098(0x0001)
    enum class ERBFFunctionType                   FunctionType;                                                 // 0x0099(0x0001)
    char                                          pa_009A[0x0006]                                               // 0x009A(0x0006)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DAttachSectionTemplate
// Struct Size::0x0050
struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneObjectBindingID                    AttachBindingID;                                              // 0x0020(0x0018)
    FName                                         AttachSocketName;                                             // 0x0038(0x0008)
    FName                                         AttachComponentName;                                          // 0x0040(0x0008)
    enum class EAttachmentRule                    AttachmentLocationRule;                                       // 0x0048(0x0001)
    enum class EAttachmentRule                    AttachmentRotationRule;                                       // 0x0049(0x0001)
    enum class EAttachmentRule                    AttachmentScaleRule;                                          // 0x004A(0x0001)
    enum class EDetachmentRule                    DetachmentLocationRule;                                       // 0x004B(0x0001)
    enum class EDetachmentRule                    DetachmentRotationRule;                                       // 0x004C(0x0001)
    enum class EDetachmentRule                    DetachmentScaleRule;                                          // 0x004D(0x0001)
    char                                          pa_004E[0x0002]                                               // 0x004E(0x0002)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DPathSectionTemplate
// Struct Size::0x00E0
struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneObjectBindingID                    PathBindingID;                                                // 0x0020(0x0018)
    FMovieSceneFloatChannel                       TimingCurve;                                                  // 0x0038(0x00A0)
    enum class MovieScene3DPathSection_Axis       FrontAxisEnum;                                                // 0x00D8(0x0001)
    enum class MovieScene3DPathSection_Axis       UpAxisEnum;                                                   // 0x00D9(0x0001)
    char                                          pa_00DA[0x0002]                                               // 0x00DA(0x0002)
    char                                          bFollow;                                                      // 0x00DC(0x0001)
    char                                          bReverse;                                                     // 0x00DC(0x0001)
    char                                          bForceUpright;                                                // 0x00DC(0x0001)
    char                                          pa_00DD[0x0003]                                               // 0x00DD(0x0003)
};


// ScriptStruct  MovieSceneTracks.MovieSceneTransformMask
// Struct Size::0x0004
struct FMovieSceneTransformMask
{
    uint32_t                                      Mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DTransformKeyStruct
// Struct Size::0x0048
struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FRotator                                      Rotation;                                                     // 0x0014(0x000C)
    FVector                                       Scale;                                                        // 0x0020(0x000C)
    FFrameNumber                                  Time;                                                         // 0x002C(0x0004)
    char                                          pa_0030[0x0018]                                               // 0x0030(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DScaleKeyStruct
// Struct Size::0x0030
struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Scale;                                                        // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DRotationKeyStruct
// Struct Size::0x0030
struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
{
    FRotator                                      Rotation;                                                     // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DLocationKeyStruct
// Struct Size::0x0030
struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
{
    FVector                                       Location;                                                     // 0x0008(0x000C)
    FFrameNumber                                  Time;                                                         // 0x0014(0x0004)
    char                                          pa_0018[0x0018]                                               // 0x0018(0x0018)
};


// ScriptStruct  MovieSceneTracks.MovieSceneComponentTransformSectionTemplate
// Struct Size::0x0670
struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScene3DTransformTemplateData            TemplateData;                                                 // 0x0020(0x0650)
};


// ScriptStruct  MovieSceneTracks.MovieScene3DTransformTemplateData
// Struct Size::0x0650
struct FMovieScene3DTransformTemplateData
{
    FMovieSceneFloatChannel                       TranslationCurve;                                             // 0x0000(0x00A0)
    char                                          pa_00A0[0x0140]                                               // 0x00A0(0x0140)
    FMovieSceneFloatChannel                       RotationCurve;                                                // 0x01E0(0x00A0)
    char                                          pa_0280[0x0140]                                               // 0x0280(0x0140)
    FMovieSceneFloatChannel                       ScaleCurve;                                                   // 0x03C0(0x00A0)
    char                                          pa_0460[0x0140]                                               // 0x0460(0x0140)
    FMovieSceneFloatChannel                       ManualWeight;                                                 // 0x05A0(0x00A0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x0640(0x0001)
    char                                          pa_0641[0x0003]                                               // 0x0641(0x0003)
    FMovieSceneTransformMask                      Mask;                                                         // 0x0644(0x0004)
    bool                                          bUseQuaternionInterpolation;                                  // 0x0648(0x0001)
    char                                          pa_0649[0x0007]                                               // 0x0649(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceData
// Struct Size::0x00B0
struct FMovieSceneActorReferenceData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    char                                          pa_0018[0x0028]                                               // 0x0018(0x0028)
    TArray<FMovieSceneActorReferenceKey>          KeyValues;                                                    // 0x0040(0x0010)
    char                                          pa_0050[0x0060]                                               // 0x0050(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceKey
// Struct Size::0x0028
struct FMovieSceneActorReferenceKey
{
    FMovieSceneObjectBindingID                    Object;                                                       // 0x0000(0x0018)
    FName                                         ComponentName;                                                // 0x0018(0x0008)
    FName                                         SocketName;                                                   // 0x0020(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
// Struct Size::0x00F8
struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieScenePropertySectionData                PropertyData;                                                 // 0x0020(0x0028)
    FMovieSceneActorReferenceData                 ActorReferenceData;                                           // 0x0048(0x00B0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneAudioSectionTemplate
// Struct Size::0x0028
struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
{
    UMovieSceneAudioSection*                      AudioSection;                                                 // 0x0020(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraAnimSectionData
// Struct Size::0x0020
struct FMovieSceneCameraAnimSectionData
{
    UCameraAnim*                                  CameraAnim;                                                   // 0x0000(0x0008)
    float                                         PlayRate;                                                     // 0x0008(0x0004)
    float                                         PlayScale;                                                    // 0x000C(0x0004)
    float                                         BlendInTime;                                                  // 0x0010(0x0004)
    float                                         BlendOutTime;                                                 // 0x0014(0x0004)
    bool                                          bLooping;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
// Struct Size::0x0020
struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
{
    FMovieSceneCameraShakeSectionData             SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraShakeSectionData
// Struct Size::0x0020
struct FMovieSceneCameraShakeSectionData
{
    UCameraShake*                                 ShakeClass;                                                   // 0x0000(0x0008)
    float                                         PlayScale;                                                    // 0x0008(0x0004)
    enum class ECameraAnimPlaySpace               PlaySpace;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FRotator                                      UserDefinedPlaySpace;                                         // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
// Struct Size::0x0048
struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
{
    FMovieSceneCameraAnimSectionData              SourceData;                                                   // 0x0020(0x0020)
    FFrameNumber                                  SectionStartTime;                                             // 0x0040(0x0004)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneCameraCutSectionTemplate
// Struct Size::0x0080
struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneObjectBindingID                    CameraBindingID;                                              // 0x0020(0x0018)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
    FTransform                                    CutTransform;                                                 // 0x0040(0x0030)
    bool                                          bHasCutTransform;                                             // 0x0070(0x0001)
    bool                                          bIsFinalSection;                                              // 0x0071(0x0001)
    char                                          pa_0072[0x000E]                                               // 0x0072(0x000E)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorKeyStruct
// Struct Size::0x0038
struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
{
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
    FFrameNumber                                  Time;                                                         // 0x0018(0x0004)
    char                                          pa_001C[0x001C]                                               // 0x001C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneColorSectionTemplate
// Struct Size::0x02D0
struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       Curves;                                                       // 0x0048(0x00A0)
    char                                          pa_00E8[0x01E0]                                               // 0x00E8(0x01E0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x02C8(0x0001)
    char                                          pa_02C9[0x0007]                                               // 0x02C9(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEvent
// Struct Size::0x0028
struct FMovieSceneEvent
{
    FMovieSceneEventPtrs                          Ptrs;                                                         // 0x0000(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPtrs
// Struct Size::0x0028
struct FMovieSceneEventPtrs
{
    UFunction*                                    Function;                                                     // 0x0000(0x0008)
    *                                             BoundObjectProperty;                                          // 0x0008(0x0020)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventPayloadVariable
// Struct Size::0x0010
struct FMovieSceneEventPayloadVariable
{
    FString                                       Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventChannel
// Struct Size::0x0088
struct FMovieSceneEventChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          KeyTimes;                                                     // 0x0008(0x0010)
    TArray<FMovieSceneEvent>                      KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionData
// Struct Size::0x0088
struct FMovieSceneEventSectionData : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    TArray<FEventPayload>                         KeyValues;                                                    // 0x0018(0x0010)
    char                                          pa_0028[0x0060]                                               // 0x0028(0x0060)
};


// ScriptStruct  MovieSceneTracks.EventPayload
// Struct Size::0x0030
struct FEventPayload
{
    FName                                         EventName;                                                    // 0x0000(0x0008)
    FMovieSceneEventParameters                    Parameters;                                                   // 0x0008(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventParameters
// Struct Size::0x0028
struct FMovieSceneEventParameters
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventTemplateBase
// Struct Size::0x0038
struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
{
    TArray<FMovieSceneObjectBindingID>            EventReceivers;                                               // 0x0020(0x0010)
    char                                          bFireEventsWhenForwards;                                      // 0x0030(0x0001)
    char                                          bFireEventsWhenBackwards;                                     // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventRepeaterTemplate
// Struct Size::0x0060
struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
{
    FMovieSceneEventPtrs                          EventToTrigger;                                               // 0x0038(0x0028)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventTriggerTemplate
// Struct Size::0x0058
struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
{
    TArray<FFrameNumber>                          EventTimes;                                                   // 0x0038(0x0010)
    TArray<FMovieSceneEventPtrs>                  Events;                                                       // 0x0048(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEventSectionTemplate
// Struct Size::0x00C0
struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
{
    FMovieSceneEventSectionData                   EventData;                                                    // 0x0038(0x0088)
};


// ScriptStruct  MovieSceneTracks.MovieSceneFadeSectionTemplate
// Struct Size::0x00D8
struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       FadeCurve;                                                    // 0x0020(0x00A0)
    FLinearColor                                  FadeColor;                                                    // 0x00C0(0x0010)
    char                                          bFadeAudio;                                                   // 0x00D0(0x0001)
    char                                          pa_00D1[0x0007]                                               // 0x00D1(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneLevelVisibilitySectionTemplate
// Struct Size::0x0038
struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
{
    enum class ELevelVisibility                   Visibility;                                                   // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FName>                                 LevelNames;                                                   // 0x0028(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
// Struct Size::0x0088
struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
{
    UMaterialParameterCollection*                 MPC;                                                          // 0x0080(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneObjectPropertyTemplate
// Struct Size::0x0108
struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneObjectPathChannel                  ObjectChannel;                                                // 0x0048(0x00C0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
// Struct Size::0x0088
struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0080(0x0004)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
// Struct Size::0x0080
struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleChannel
// Struct Size::0x0098
struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
{
};


// ScriptStruct  MovieSceneTracks.MovieSceneParticleSectionTemplate
// Struct Size::0x00B8
struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneParticleChannel                    ParticleKeys;                                                 // 0x0020(0x0098)
};


// ScriptStruct  MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
// Struct Size::0x00E8
struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
{
    int32_t                                       MaterialIndex;                                                // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMovieSceneObjectPathChannel                  MaterialChannel;                                              // 0x0028(0x00C0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEulerTransformPropertySectionTemplate
// Struct Size::0x0698
struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieScene3DTransformTemplateData            TemplateData;                                                 // 0x0048(0x0650)
};


// ScriptStruct  MovieSceneTracks.MovieSceneTransformPropertySectionTemplate
// Struct Size::0x0698
struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieScene3DTransformTemplateData            TemplateData;                                                 // 0x0048(0x0650)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
// Struct Size::0x02D0
struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       ComponentCurves;                                              // 0x0048(0x00A0)
    char                                          pa_00E8[0x01E0]                                               // 0x00E8(0x01E0)
    int32_t                                       NumChannelsUsed;                                              // 0x02C8(0x0004)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x02CC(0x0001)
    char                                          pa_02CD[0x0003]                                               // 0x02CD(0x0003)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringPropertySectionTemplate
// Struct Size::0x00E8
struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneStringChannel                      StringCurve;                                                  // 0x0048(0x00A0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneStringChannel
// Struct Size::0x00A0
struct FMovieSceneStringChannel : public FMovieSceneChannel
{
    TArray<FFrameNumber>                          Times;                                                        // 0x0008(0x0010)
    TArray<FString>                               Values;                                                       // 0x0018(0x0010)
    FString                                       DefaultValue;                                                 // 0x0028(0x0010)
    bool                                          bHasDefaultValue;                                             // 0x0038(0x0001)
    char                                          pa_0039[0x0067]                                               // 0x0039(0x0067)
};


// ScriptStruct  MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
// Struct Size::0x00E0
struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneIntegerChannel                     IntegerCurve;                                                 // 0x0048(0x0090)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x00D8(0x0001)
    char                                          pa_00D9[0x0007]                                               // 0x00D9(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
// Struct Size::0x00E0
struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneByteChannel                        EnumCurve;                                                    // 0x0048(0x0098)
};


// ScriptStruct  MovieSceneTracks.MovieSceneBytePropertySectionTemplate
// Struct Size::0x00E0
struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneByteChannel                        ByteCurve;                                                    // 0x0048(0x0098)
};


// ScriptStruct  MovieSceneTracks.MovieSceneFloatPropertySectionTemplate
// Struct Size::0x00F0
struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       FloatFunction;                                                // 0x0048(0x00A0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x00E8(0x0001)
    char                                          pa_00E9[0x0007]                                               // 0x00E9(0x0007)
};


// ScriptStruct  MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
// Struct Size::0x00D8
struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneBoolChannel                        BoolCurve;                                                    // 0x0048(0x0090)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationParams
// Struct Size::0x00D8
struct FMovieSceneSkeletalAnimationParams
{
    UAnimSequenceBase*                            Animation;                                                    // 0x0000(0x0008)
    FFrameNumber                                  FirstLoopStartFrameOffset;                                    // 0x0008(0x0004)
    FFrameNumber                                  StartFrameOffset;                                             // 0x000C(0x0004)
    FFrameNumber                                  EndFrameOffset;                                               // 0x0010(0x0004)
    float                                         PlayRate;                                                     // 0x0014(0x0004)
    char                                          bReverse;                                                     // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FName                                         SlotName;                                                     // 0x001C(0x0008)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMovieSceneFloatChannel                       Weight;                                                       // 0x0028(0x00A0)
    bool                                          bSkipAnimNotifiers;                                           // 0x00C8(0x0001)
    bool                                          bForceCustomMode;                                             // 0x00C9(0x0001)
    char                                          pa_00CA[0x0002]                                               // 0x00CA(0x0002)
    float                                         StartOffset;                                                  // 0x00CC(0x0004)
    float                                         EndOffset;                                                    // 0x00D0(0x0004)
    char                                          pa_00D4[0x0004]                                               // 0x00D4(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
// Struct Size::0x0100
struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneSkeletalAnimationSectionTemplateParametersParams;                                                // 0x0020(0x00E0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
// Struct Size::0x00E0
struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
{
    FFrameNumber                                  SectionStartTime;                                             // 0x00D8(0x0004)
    FFrameNumber                                  SectionEndTime;                                               // 0x00DC(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneSlomoSectionTemplate
// Struct Size::0x00C0
struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
{
    FMovieSceneFloatChannel                       SlomoCurve;                                                   // 0x0020(0x00A0)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorKeyStructBase
// Struct Size::0x0028
struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
{
    FFrameNumber                                  Time;                                                         // 0x0008(0x0004)
    char                                          pa_000C[0x001C]                                               // 0x000C(0x001C)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector4KeyStruct
// Struct Size::0x0040
struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FVector4                                      Vector;                                                       // 0x0030(0x0010)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVectorKeyStruct
// Struct Size::0x0038
struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
{
    FVector                                       Vector;                                                       // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVector2DKeyStruct
// Struct Size::0x0030
struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
{
    FVector2D                                     Vector;                                                       // 0x0028(0x0008)
};


// ScriptStruct  MovieSceneTracks.MovieSceneVisibilitySectionTemplate
// Struct Size::0x00D8
struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
{
};


// ScriptStruct  PropertyPath.CachedPropertyPath
// Struct Size::0x0028
struct FCachedPropertyPath
{
    TArray<FPropertyPathSegment>                  Segments;                                                     // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    UFunction*                                    CachedFunction;                                               // 0x0018(0x0008)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  PropertyPath.PropertyPathSegment
// Struct Size::0x0028
struct FPropertyPathSegment
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UStruct*                                      Struct;                                                       // 0x0010(0x0008)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  UMG.DynamicPropertyPath
// Struct Size::0x0028
struct FDynamicPropertyPath : public FCachedPropertyPath
{
};


// ScriptStruct  UMG.MovieScene2DTransformMask
// Struct Size::0x0004
struct FMovieScene2DTransformMask
{
    uint32_t                                      Mask;                                                         // 0x0000(0x0004)
};


// ScriptStruct  UMG.MovieScene2DTransformSectionTemplate
// Struct Size::0x04B0
struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       Translation;                                                  // 0x0048(0x00A0)
    char                                          pa_00E8[0x00A0]                                               // 0x00E8(0x00A0)
    FMovieSceneFloatChannel                       Rotation;                                                     // 0x0188(0x00A0)
    FMovieSceneFloatChannel                       Scale;                                                        // 0x0228(0x00A0)
    char                                          pa_02C8[0x00A0]                                               // 0x02C8(0x00A0)
    FMovieSceneFloatChannel                       Shear;                                                        // 0x0368(0x00A0)
    char                                          pa_0408[0x00A0]                                               // 0x0408(0x00A0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x04A8(0x0001)
    char                                          pa_04A9[0x0003]                                               // 0x04A9(0x0003)
    FMovieScene2DTransformMask                    Mask;                                                         // 0x04AC(0x0004)
};


// ScriptStruct  UMG.MovieSceneMarginSectionTemplate
// Struct Size::0x02D0
struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
{
    FMovieSceneFloatChannel                       TopCurve;                                                     // 0x0048(0x00A0)
    FMovieSceneFloatChannel                       LeftCurve;                                                    // 0x00E8(0x00A0)
    FMovieSceneFloatChannel                       RightCurve;                                                   // 0x0188(0x00A0)
    FMovieSceneFloatChannel                       BottomCurve;                                                  // 0x0228(0x00A0)
    enum class EMovieSceneBlendType               BlendType;                                                    // 0x02C8(0x0001)
    char                                          pa_02C9[0x0007]                                               // 0x02C9(0x0007)
};


// ScriptStruct  UMG.MovieSceneWidgetMaterialSectionTemplate
// Struct Size::0x0090
struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{
    TArray<FName>                                 BrushPropertyNamePath;                                        // 0x0080(0x0010)
};


// ScriptStruct  UMG.RichTextStyleRow
// Struct Size::0x04B0
struct FRichTextStyleRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTextBlockStyle                               TextStyle;                                                    // 0x0010(0x04A0)
};


// ScriptStruct  UMG.RichInlineTextRow
// Struct Size::0x04E0
struct FRichInlineTextRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTextBlockStyle                               TextBlockStyle;                                               // 0x0010(0x04A0)
    FMargin                                       Margin;                                                       // 0x04B0(0x0010)
    float                                         LineHeightPercentage;                                         // 0x04C0(0x0004)
    FWidgetTransform                              Transform;                                                    // 0x04C4(0x001C)
};


// ScriptStruct  UMG.RichImageAttributes
// Struct Size::0x0020
struct FRichImageAttributes
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  UMG.RichImageRow
// Struct Size::0x0110
struct FRichImageRow : public FTableRowBase
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   Brush;                                                        // 0x0010(0x00F0)
    enum class EHorizontalAlignment               HAlign;                                                       // 0x0100(0x0001)
    char                                          pa_0101[0x0003]                                               // 0x0101(0x0003)
    FVector2D                                     Offset;                                                       // 0x0104(0x0008)
    char                                          pa_010C[0x0004]                                               // 0x010C(0x0004)
};


// ScriptStruct  UMG.SlateMeshVertex
// Struct Size::0x003C
struct FSlateMeshVertex
{
    FVector2D                                     Position;                                                     // 0x0000(0x0008)
    FColor                                        Color;                                                        // 0x0008(0x0004)
    FVector2D                                     UV0;                                                          // 0x000C(0x0008)
    FVector2D                                     UV1;                                                          // 0x0014(0x0008)
    FVector2D                                     UV2;                                                          // 0x001C(0x0008)
    FVector2D                                     UV3;                                                          // 0x0024(0x0008)
    FVector2D                                     UV4;                                                          // 0x002C(0x0008)
    FVector2D                                     UV5;                                                          // 0x0034(0x0008)
};


// ScriptStruct  UMG.SlateChildSize
// Struct Size::0x0008
struct FSlateChildSize
{
    float                                         Value;                                                        // 0x0000(0x0004)
    enum class ESlateSizeRule                     SizeRule;                                                     // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  UMG.UserWidgetPool
// Struct Size::0x0080
struct FUserWidgetPool
{
    TArray<UUserWidget*>                          ActiveWidgets;                                                // 0x0000(0x0010)
    TArray<UUserWidget*>                          InactiveWidgets;                                              // 0x0010(0x0010)
    char                                          pa_0020[0x0060]                                               // 0x0020(0x0060)
};


// ScriptStruct  UMG.WidgetAnimationBinding
// Struct Size::0x0024
struct FWidgetAnimationBinding
{
    FName                                         WidgetName;                                                   // 0x0000(0x0008)
    FName                                         SlotWidgetName;                                               // 0x0008(0x0008)
    FGuid                                         AnimationGuid;                                                // 0x0010(0x0010)
    bool                                          bIsRootWidget;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  UMG.BlueprintWidgetAnimationDelegateBinding
// Struct Size::0x001C
struct FBlueprintWidgetAnimationDelegateBinding
{
    enum class EWidgetAnimationEvent              Action;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         AnimationToBind;                                              // 0x0004(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
    FName                                         UserTag;                                                      // 0x0014(0x0008)
};


// ScriptStruct  UMG.DelegateRuntimeBinding
// Struct Size::0x0050
struct FDelegateRuntimeBinding
{
    FString                                       ObjectName;                                                   // 0x0000(0x0010)
    FName                                         PropertyName;                                                 // 0x0010(0x0008)
    FName                                         FunctionName;                                                 // 0x0018(0x0008)
    FDynamicPropertyPath                          SourcePath;                                                   // 0x0020(0x0028)
    enum class EBindingKind                       Kind;                                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.SceneComponentInstanceData
// Struct Size::0x00A8
struct FSceneComponentInstanceData : public FActorComponentInstanceData
{
    TMap<USceneComponent*,FTransform>             AttachedInstanceComponents;                                   // 0x0058(0x0050)
};


// ScriptStruct  UMG.WidgetComponentInstanceData
// Struct Size::0x00B8
struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00A8[0x0010]                                               // 0x00A8(0x0010)
};


// ScriptStruct  UMG.WidgetNavigationData
// Struct Size::0x0024
struct FWidgetNavigationData
{
    enum class EUINavigationRule                  Rule;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         WidgetToFocus;                                                // 0x0004(0x0008)
    TWeakObjectPtr<UWidget>                       Widget;                                                       // 0x000C(0x0008)
    FDelegate                                     CustomDelegate;                                               // 0x0014(0x0010)
};


// ScriptStruct  CinematicCamera.CameraLookatTrackingSettings
// Struct Size::0x0050
struct FCameraLookatTrackingSettings
{
    char                                          bEnableLookAtTracking;                                        // 0x0000(0x0001)
    char                                          bDrawDebugLookAtTrackingPosition;                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LookAtTrackingInterpSpeed;                                    // 0x0004(0x0004)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0018(0x0028)
    FVector                                       RelativeOffset;                                               // 0x0040(0x000C)
    char                                          bAllowRoll;                                                   // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
};


// ScriptStruct  CinematicCamera.CameraFocusSettings
// Struct Size::0x0058
struct FCameraFocusSettings
{
    enum class ECameraFocusMethod                 FocusMethod;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ManualFocusDistance;                                          // 0x0004(0x0004)
    FCameraTrackingFocusSettings                  TrackingFocusSettings;                                        // 0x0008(0x0038)
    char                                          bDrawDebugFocusPlane;                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FColor                                        DebugFocusPlaneColor;                                         // 0x0044(0x0004)
    char                                          bSmoothFocusChanges;                                          // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
    float                                         FocusSmoothingInterpSpeed;                                    // 0x004C(0x0004)
    float                                         FocusOffset;                                                  // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  CinematicCamera.CameraTrackingFocusSettings
// Struct Size::0x0038
struct FCameraTrackingFocusSettings
{
    TSoftObjectPtr<AActor>                        ActorToTrack;                                                 // 0x0000(0x0028)
    FVector                                       RelativeOffset;                                               // 0x0028(0x000C)
    char                                          bDrawDebugTrackingFocusPoint;                                 // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
};


// ScriptStruct  CinematicCamera.NamedLensPreset
// Struct Size::0x0028
struct FNamedLensPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraLensSettings                           LensSettings;                                                 // 0x0010(0x0018)
};


// ScriptStruct  CinematicCamera.CameraLensSettings
// Struct Size::0x0018
struct FCameraLensSettings
{
    float                                         MinFocalLength;                                               // 0x0000(0x0004)
    float                                         MaxFocalLength;                                               // 0x0004(0x0004)
    float                                         MinFStop;                                                     // 0x0008(0x0004)
    float                                         MaxFStop;                                                     // 0x000C(0x0004)
    float                                         MinimumFocusDistance;                                         // 0x0010(0x0004)
    int32_t                                       DiaphragmBladeCount;                                          // 0x0014(0x0004)
};


// ScriptStruct  CinematicCamera.NamedFilmbackPreset
// Struct Size::0x0020
struct FNamedFilmbackPreset
{
    FString                                       Name;                                                         // 0x0000(0x0010)
    FCameraFilmbackSettings                       FilmbackSettings;                                             // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  CinematicCamera.CameraFilmbackSettings
// Struct Size::0x000C
struct FCameraFilmbackSettings
{
    float                                         SensorWidth;                                                  // 0x0000(0x0004)
    float                                         SensorHeight;                                                 // 0x0004(0x0004)
    float                                         SensorAspectRatio;                                            // 0x0008(0x0004)
};


// ScriptStruct  AudioPlatformConfiguration.PlatformRuntimeAudioCompressionOverrides
// Struct Size::0x0010
struct FPlatformRuntimeAudioCompressionOverrides
{
    bool                                          bOverrideCompressionTimes;                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DurationThreshold;                                            // 0x0004(0x0004)
    int32_t                                       MaxNumRandomBranches;                                         // 0x0008(0x0004)
    int32_t                                       SoundCueQualityIndex;                                         // 0x000C(0x0004)
};


// ScriptStruct  AudioExtensions.SoundModulationParameter
// Struct Size::0x0014
struct FSoundModulationParameter
{
    FName                                         Control;                                                      // 0x0000(0x0008)
    float                                         Value;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0008]                                               // 0x000C(0x0008)
};


// ScriptStruct  AudioExtensions.SoundModulation
// Struct Size::0x0010
struct FSoundModulation
{
    TArray<USoundModulationPluginSourceSettingsBase*>Settings;                                                  // 0x0000(0x0010)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicsProcessorSettings
// Struct Size::0x0050
struct FSubmixEffectDynamicsProcessorSettings
{
    enum class ESubmixEffectDynamicsProcessorType DynamicsProcessorType;                                        // 0x0000(0x0001)
    enum class ESubmixEffectDynamicsPeakMode      PeakMode;                                                     // 0x0001(0x0001)
    enum class ESubmixEffectDynamicsChannelLinkModeLinkMode;                                                    // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         InputGainDb;                                                  // 0x0004(0x0004)
    float                                         ThresholdDb;                                                  // 0x0008(0x0004)
    float                                         Ratio;                                                        // 0x000C(0x0004)
    float                                         KneeBandwidthDb;                                              // 0x0010(0x0004)
    float                                         LookAheadMsec;                                                // 0x0014(0x0004)
    float                                         AttackTimeMsec;                                               // 0x0018(0x0004)
    float                                         ReleaseTimeMsec;                                              // 0x001C(0x0004)
    USoundSubmix*                                 ExternalSubmix;                                               // 0x0020(0x0008)
    char                                          bChannelLinked;                                               // 0x0028(0x0001)
    char                                          bAnalogMode;                                                  // 0x0028(0x0001)
    char                                          bKeyAudition;                                                 // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         KeyGainDb;                                                    // 0x002C(0x0004)
    float                                         OutputGainDb;                                                 // 0x0030(0x0004)
    FSubmixEffectDynamicProcessorFilterSettings   KeyHighshelf;                                                 // 0x0034(0x000C)
    FSubmixEffectDynamicProcessorFilterSettings   KeyLowshelf;                                                  // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectDynamicProcessorFilterSettings
// Struct Size::0x000C
struct FSubmixEffectDynamicProcessorFilterSettings
{
    char                                          bEnabled;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Cutoff;                                                       // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectSubmixEQSettings
// Struct Size::0x0010
struct FSubmixEffectSubmixEQSettings
{
    TArray<FSubmixEffectEQBand>                   EQBands;                                                      // 0x0000(0x0010)
};


// ScriptStruct  AudioMixer.SubmixEffectEQBand
// Struct Size::0x0010
struct FSubmixEffectEQBand
{
    float                                         Frequency;                                                    // 0x0000(0x0004)
    float                                         Bandwidth;                                                    // 0x0004(0x0004)
    float                                         GainDb;                                                       // 0x0008(0x0004)
    char                                          bEnabled;                                                     // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  AudioMixer.SubmixEffectReverbSettings
// Struct Size::0x0034
struct FSubmixEffectReverbSettings
{
    float                                         Density;                                                      // 0x0000(0x0004)
    float                                         Diffusion;                                                    // 0x0004(0x0004)
    float                                         Gain;                                                         // 0x0008(0x0004)
    float                                         GainHF;                                                       // 0x000C(0x0004)
    float                                         DecayTime;                                                    // 0x0010(0x0004)
    float                                         DecayHFRatio;                                                 // 0x0014(0x0004)
    float                                         ReflectionsGain;                                              // 0x0018(0x0004)
    float                                         ReflectionsDelay;                                             // 0x001C(0x0004)
    float                                         LateGain;                                                     // 0x0020(0x0004)
    float                                         LateDelay;                                                    // 0x0024(0x0004)
    float                                         AirAbsorptionGainHF;                                          // 0x0028(0x0004)
    float                                         WetLevel;                                                     // 0x002C(0x0004)
    float                                         DryLevel;                                                     // 0x0030(0x0004)
};


// ScriptStruct  AudioMixer.SubmixEffectReverbFastSettings
// Struct Size::0x0038
struct FSubmixEffectReverbFastSettings
{
    bool                                          bBypass;                                                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Density;                                                      // 0x0004(0x0004)
    float                                         Diffusion;                                                    // 0x0008(0x0004)
    float                                         Gain;                                                         // 0x000C(0x0004)
    float                                         GainHF;                                                       // 0x0010(0x0004)
    float                                         DecayTime;                                                    // 0x0014(0x0004)
    float                                         DecayHFRatio;                                                 // 0x0018(0x0004)
    float                                         ReflectionsGain;                                              // 0x001C(0x0004)
    float                                         ReflectionsDelay;                                             // 0x0020(0x0004)
    float                                         LateGain;                                                     // 0x0024(0x0004)
    float                                         LateDelay;                                                    // 0x0028(0x0004)
    float                                         AirAbsorptionGainHF;                                          // 0x002C(0x0004)
    float                                         WetLevel;                                                     // 0x0030(0x0004)
    float                                         DryLevel;                                                     // 0x0034(0x0004)
};


// ScriptStruct  NetCore.NetAnalyticsDataConfig
// Struct Size::0x000C
struct FNetAnalyticsDataConfig
{
    FName                                         DataName;                                                     // 0x0000(0x0008)
    bool                                          bEnabled;                                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  AssetRegistry.AssetBundleData
// Struct Size::0x0010
struct FAssetBundleData
{
    TArray<FAssetBundleEntry>                     Bundles;                                                      // 0x0000(0x0010)
};


// ScriptStruct  AssetRegistry.AssetBundleEntry
// Struct Size::0x0028
struct FAssetBundleEntry
{
    FPrimaryAssetId                               BundleScope;                                                  // 0x0000(0x0010)
    FName                                         BundleName;                                                   // 0x0010(0x0008)
    TArray<FSoftObjectPath>                       BundleAssets;                                                 // 0x0018(0x0010)
};


// ScriptStruct  AssetRegistry.TagAndValue
// Struct Size::0x0018
struct FTagAndValue
{
    FName                                         Tag;                                                          // 0x0000(0x0008)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  AssetRegistry.AssetRegistryDependencyOptions
// Struct Size::0x0005
struct FAssetRegistryDependencyOptions
{
    bool                                          bIncludeSoftPackageReferences;                                // 0x0000(0x0001)
    bool                                          bIncludeHardPackageReferences;                                // 0x0001(0x0001)
    bool                                          bIncludeSearchableNames;                                      // 0x0002(0x0001)
    bool                                          bIncludeSoftManagementReferences;                             // 0x0003(0x0001)
    bool                                          bIncludeHardManagementReferences;                             // 0x0004(0x0001)
};


// ScriptStruct  EngineMessages.EngineServiceNotification
// Struct Size::0x0018
struct FEngineServiceNotification
{
    FString                                       Text;                                                         // 0x0000(0x0010)
    double                                        TimeSeconds;                                                  // 0x0010(0x0008)
};


// ScriptStruct  EngineMessages.EngineServiceTerminate
// Struct Size::0x0010
struct FEngineServiceTerminate
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceExecuteCommand
// Struct Size::0x0020
struct FEngineServiceExecuteCommand
{
    FString                                       Command;                                                      // 0x0000(0x0010)
    FString                                       UserName;                                                     // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceAuthGrant
// Struct Size::0x0020
struct FEngineServiceAuthGrant
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
    FString                                       UserToGrant;                                                  // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServiceAuthDeny
// Struct Size::0x0020
struct FEngineServiceAuthDeny
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
    FString                                       UserToDeny;                                                   // 0x0010(0x0010)
};


// ScriptStruct  EngineMessages.EngineServicePong
// Struct Size::0x0050
struct FEngineServicePong
{
    FString                                       CurrentLevel;                                                 // 0x0000(0x0010)
    int32_t                                       EngineVersion;                                                // 0x0010(0x0004)
    bool                                          HasBegunPlay;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FGuid                                         instanceID;                                                   // 0x0018(0x0010)
    FString                                       InstanceType;                                                 // 0x0028(0x0010)
    FGuid                                         SessionId;                                                    // 0x0038(0x0010)
    float                                         WorldTimeSeconds;                                             // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
};


// ScriptStruct  EngineMessages.EngineServicePing
// Struct Size::0x0001
struct FEngineServicePing
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayTags.GameplayTagCreationWidgetHelper
// Struct Size::0x0001
struct FGameplayTagCreationWidgetHelper
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GameplayTags.GameplayTagReferenceHelper
// Struct Size::0x0010
struct FGameplayTagReferenceHelper
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagNode
// Struct Size::0x0050
struct FGameplayTagNode
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  GameplayTags.GameplayTagSource
// Struct Size::0x0020
struct FGameplayTagSource
{
    FName                                         SourceName;                                                   // 0x0000(0x0008)
    enum class EGameplayTagSourceType             SourceType;                                                   // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    UGameplayTagsList*                            SourceTagList;                                                // 0x0010(0x0008)
    URestrictedGameplayTagsList*                  SourceRestrictedTagList;                                      // 0x0018(0x0008)
};


// ScriptStruct  GameplayTags.GameplayTagTableRow
// Struct Size::0x0020
struct FGameplayTagTableRow : public FTableRowBase
{
    FName                                         Tag;                                                          // 0x0008(0x0008)
    FString                                       DevComment;                                                   // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.RestrictedGameplayTagTableRow
// Struct Size::0x0028
struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
{
    bool                                          bAllowNonRestrictedChildren;                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  GameplayTags.RestrictedConfigInfo
// Struct Size::0x0020
struct FRestrictedConfigInfo
{
    FString                                       RestrictedConfigName;                                         // 0x0000(0x0010)
    TArray<FString>                               Owners;                                                       // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagCategoryRemap
// Struct Size::0x0020
struct FGameplayTagCategoryRemap
{
    FString                                       BaseCategory;                                                 // 0x0000(0x0010)
    TArray<FString>                               RemapCategories;                                              // 0x0010(0x0010)
};


// ScriptStruct  GameplayTags.GameplayTagRedirect
// Struct Size::0x0010
struct FGameplayTagRedirect
{
    FName                                         OldTagName;                                                   // 0x0000(0x0008)
    FName                                         NewTagName;                                                   // 0x0008(0x0008)
};


// ScriptStruct  StaticMeshDescription.UVMapSettings
// Struct Size::0x0038
struct FUVMapSettings
{
    FVector                                       Size;                                                         // 0x0000(0x000C)
    FVector2D                                     UVTile;                                                       // 0x000C(0x0008)
    FVector                                       Position;                                                     // 0x0014(0x000C)
    FRotator                                      Rotation;                                                     // 0x0020(0x000C)
    FVector                                       Scale;                                                        // 0x002C(0x000C)
};


// ScriptStruct  GeometryCollectionCore.RecordedTransformTrack
// Struct Size::0x0010
struct FRecordedTransformTrack
{
    TArray<FRecordedFrame>                        Records;                                                      // 0x0000(0x0010)
};


// ScriptStruct  GeometryCollectionCore.RecordedFrame
// Struct Size::0x00B8
struct FRecordedFrame
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<int32_t>                               TransformIndices;                                             // 0x0010(0x0010)
    TArray<int32_t>                               PreviousTransformIndices;                                     // 0x0020(0x0010)
    TArray<bool>                                  DisabledFlags;                                                // 0x0030(0x0010)
    TArray<FSolverCollisionData>                  Collisions;                                                   // 0x0040(0x0010)
    TArray<FSolverBreakingData>                   Breakings;                                                    // 0x0050(0x0010)
    TSet<FSolverTrailingData>                     Trailings;                                                    // 0x0060(0x0050)
    float                                         Timestamp;                                                    // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  GeometryCollectionCore.SolverTrailingData
// Struct Size::0x0030
struct FSolverTrailingData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x002C(0x0004)
};


// ScriptStruct  GeometryCollectionCore.SolverBreakingData
// Struct Size::0x0030
struct FSolverBreakingData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    FVector                                       AngularVelocity;                                              // 0x0018(0x000C)
    float                                         Mass;                                                         // 0x0024(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x0028(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x002C(0x0004)
};


// ScriptStruct  GeometryCollectionCore.SolverCollisionData
// Struct Size::0x006C
struct FSolverCollisionData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       AccumulatedImpulse;                                           // 0x000C(0x000C)
    FVector                                       Normal;                                                       // 0x0018(0x000C)
    FVector                                       Velocity1;                                                    // 0x0024(0x000C)
    FVector                                       Velocity2;                                                    // 0x0030(0x000C)
    FVector                                       AngularVelocity1;                                             // 0x003C(0x000C)
    FVector                                       AngularVelocity2;                                             // 0x0048(0x000C)
    float                                         Mass1;                                                        // 0x0054(0x0004)
    float                                         Mass2;                                                        // 0x0058(0x0004)
    int32_t                                       ParticleIndex;                                                // 0x005C(0x0004)
    int32_t                                       LevelsetIndex;                                                // 0x0060(0x0004)
    int32_t                                       ParticleIndexMesh;                                            // 0x0064(0x0004)
    int32_t                                       LevelsetIndexMesh;                                            // 0x0068(0x0004)
};


// ScriptStruct  ChaosSolvers.SolverBreakingFilterSettings
// Struct Size::0x0010
struct FSolverBreakingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  ChaosSolvers.SolverCollisionFilterSettings
// Struct Size::0x0010
struct FSolverCollisionFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
};


// ScriptStruct  ChaosSolvers.SolverTrailingFilterSettings
// Struct Size::0x0010
struct FSolverTrailingFilterSettings
{
    bool                                          FilterEnabled;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinVolume;                                                    // 0x000C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionData
// Struct Size::0x0040
struct FClothCollisionData
{
    TArray<FClothCollisionPrim_Sphere>            Spheres;                                                      // 0x0000(0x0010)
    TArray<FClothCollisionPrim_SphereConnection>  SphereConnections;                                            // 0x0010(0x0010)
    TArray<FClothCollisionPrim_Convex>            Convexes;                                                     // 0x0020(0x0010)
    TArray<FClothCollisionPrim_Box>               Boxes;                                                        // 0x0030(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim_Box
// Struct Size::0x0030
struct FClothCollisionPrim_Box
{
    FVector                                       LocalPosition;                                                // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         LocalRotation;                                                // 0x0010(0x0010)
    FVector                                       HalfExtents;                                                  // 0x0020(0x000C)
    int32_t                                       BoneIndex;                                                    // 0x002C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim_Convex
// Struct Size::0x0028
struct FClothCollisionPrim_Convex
{
    TArray<FPlane>                                Planes;                                                       // 0x0000(0x0010)
    TArray<FVector>                               SurfacePoints;                                                // 0x0010(0x0010)
    int32_t                                       BoneIndex;                                                    // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim_SphereConnection
// Struct Size::0x0008
struct FClothCollisionPrim_SphereConnection
{
    int32_t                                       SphereIndices;                                                // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothCollisionPrim_Sphere
// Struct Size::0x0014
struct FClothCollisionPrim_Sphere
{
    int32_t                                       BoneIndex;                                                    // 0x0000(0x0004)
    float                                         Radius;                                                       // 0x0004(0x0004)
    FVector                                       LocalPosition;                                                // 0x0008(0x000C)
};


// ScriptStruct  ClothingSystemRuntimeInterface.ClothVertBoneData
// Struct Size::0x004C
struct FClothVertBoneData
{
    int32_t                                       NumInfluences;                                                // 0x0000(0x0004)
    uint16_t                                      BoneIndices;                                                  // 0x0004(0x0002)
    char                                          pa_0006[0x0016]                                               // 0x0006(0x0016)
    float                                         BoneWeights;                                                  // 0x001C(0x0004)
    char                                          pa_0020[0x002C]                                               // 0x0020(0x002C)
};


// ScriptStruct  JsonUtilities.JsonObjectWrapper
// Struct Size::0x0020
struct FJsonObjectWrapper
{
    FString                                       JsonString;                                                   // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  MediaUtils.MediaPlayerOptions
// Struct Size::0x0030
struct FMediaPlayerOptions
{
    FMediaPlayerTrackOptions                      Tracks;                                                       // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FTimespan                                     SeekTime;                                                     // 0x0020(0x0008)
    enum class EMediaPlayerOptionBooleanOverride  PlayOnOpen;                                                   // 0x0028(0x0001)
    enum class EMediaPlayerOptionBooleanOverride  Loop;                                                         // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  MediaUtils.MediaPlayerTrackOptions
// Struct Size::0x001C
struct FMediaPlayerTrackOptions
{
    int32_t                                       Audio;                                                        // 0x0000(0x0004)
    int32_t                                       Caption;                                                      // 0x0004(0x0004)
    int32_t                                       MetaData;                                                     // 0x0008(0x0004)
    int32_t                                       Script;                                                       // 0x000C(0x0004)
    int32_t                                       Subtitle;                                                     // 0x0010(0x0004)
    int32_t                                       Text;                                                         // 0x0014(0x0004)
    int32_t                                       Video;                                                        // 0x0018(0x0004)
};


// ScriptStruct  MediaAssets.MediaCaptureDevice
// Struct Size::0x0028
struct FMediaCaptureDevice
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    FString                                       URL;                                                          // 0x0018(0x0010)
};


// ScriptStruct  MediaAssets.MediaSoundComponentSpectralData
// Struct Size::0x0008
struct FMediaSoundComponentSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
};


// ScriptStruct  LevelSequence.LevelSequenceCameraSettings
// Struct Size::0x0002
struct FLevelSequenceCameraSettings
{
    bool                                          bOverrideAspectRatioAxisConstraint;                           // 0x0000(0x0001)
    enum class EAspectRatioAxisConstraint         AspectRatioAxisConstraint;                                    // 0x0001(0x0001)
};


// ScriptStruct  LevelSequence.BoundActorProxy
// Struct Size::0x0001
struct FBoundActorProxy
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferences
// Struct Size::0x00A0
struct FLevelSequenceBindingReferences
{
    TMap<FGuid,FLevelSequenceBindingReferenceArray>BindingIdToReferences;                                       // 0x0000(0x0050)
    TSet<FGuid>                                   AnimSequenceInstances;                                        // 0x0050(0x0050)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReferenceArray
// Struct Size::0x0010
struct FLevelSequenceBindingReferenceArray
{
    TArray<FLevelSequenceBindingReference>        References;                                                   // 0x0000(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceBindingReference
// Struct Size::0x0038
struct FLevelSequenceBindingReference
{
    FString                                       PackageName;                                                  // 0x0000(0x0010)
    FSoftObjectPath                               ExternalObjectPath;                                           // 0x0010(0x0018)
    FString                                       ObjectPath;                                                   // 0x0028(0x0010)
};


// ScriptStruct  LevelSequence.LevelSequenceObjectReferenceMap
// Struct Size::0x0050
struct FLevelSequenceObjectReferenceMap
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  LevelSequence.LevelSequenceLegacyObjectReference
// Struct Size::0x0020
struct FLevelSequenceLegacyObjectReference
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  LevelSequence.LevelSequenceObject
// Struct Size::0x0038
struct FLevelSequenceObject
{
    UObject*                                      ObjectOrOwner;                                                // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    FString                                       ComponentName;                                                // 0x0020(0x0010)
    TWeakObjectPtr<UObject>                       CachedComponent;                                              // 0x0030(0x0008)
};


// ScriptStruct  LevelSequence.LevelSequencePlayerSnapshot
// Struct Size::0x00B8
struct FLevelSequencePlayerSnapshot
{
    FString                                       MasterName;                                                   // 0x0000(0x0010)
    FQualifiedFrameTime                           MasterTime;                                                   // 0x0010(0x0010)
    FQualifiedFrameTime                           SourceTime;                                                   // 0x0020(0x0010)
    FString                                       CurrentShotName;                                              // 0x0030(0x0010)
    FQualifiedFrameTime                           CurrentShotLocalTime;                                         // 0x0040(0x0010)
    FQualifiedFrameTime                           CurrentShotSourceTime;                                        // 0x0050(0x0010)
    FString                                       SourceTimecode;                                               // 0x0060(0x0010)
    TSoftObjectPtr<UCameraComponent>              CameraComponent;                                              // 0x0070(0x0028)
    FLevelSequenceSnapshotSettings                Settings;                                                     // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    ULevelSequence*                               ActiveShot;                                                   // 0x00A8(0x0008)
    FMovieSceneSequenceID                         ShotID;                                                       // 0x00B0(0x0004)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  LevelSequence.LevelSequenceSnapshotSettings
// Struct Size::0x000C
struct FLevelSequenceSnapshotSettings
{
    char                                          ZeroPadAmount;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FFrameRate                                    FrameRate;                                                    // 0x0004(0x0008)
};


// ScriptStruct  MovieSceneCapture.CompositionGraphCapturePasses
// Struct Size::0x0010
struct FCompositionGraphCapturePasses
{
    TArray<FString>                               Value;                                                        // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.FrameMetrics
// Struct Size::0x0010
struct FFrameMetrics
{
    float                                         TotalElapsedTime;                                             // 0x0000(0x0004)
    float                                         FrameDelta;                                                   // 0x0004(0x0004)
    int32_t                                       FrameNumber;                                                  // 0x0008(0x0004)
    int32_t                                       NumDroppedFrames;                                             // 0x000C(0x0004)
};


// ScriptStruct  MovieSceneCapture.MovieSceneCaptureSettings
// Struct Size::0x0070
struct FMovieSceneCaptureSettings
{
    FDirectoryPath                                OutputDirectory;                                              // 0x0000(0x0010)
    AGameModeBase*                                GameModeOverride;                                             // 0x0010(0x0008)
    FString                                       OutputFormat;                                                 // 0x0018(0x0010)
    bool                                          bOverwriteExisting;                                           // 0x0028(0x0001)
    bool                                          bUseRelativeFrameNumbers;                                     // 0x0029(0x0001)
    char                                          pa_002A[0x0002]                                               // 0x002A(0x0002)
    int32_t                                       HandleFrames;                                                 // 0x002C(0x0004)
    FString                                       MovieExtension;                                               // 0x0030(0x0010)
    char                                          ZeroPadFrameNumbers;                                          // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    FFrameRate                                    FrameRate;                                                    // 0x0044(0x0008)
    bool                                          bUseCustomFrameRate;                                          // 0x004C(0x0001)
    char                                          pa_004D[0x0003]                                               // 0x004D(0x0003)
    FFrameRate                                    CustomFrameRate;                                              // 0x0050(0x0008)
    FCaptureResolution                            Resolution;                                                   // 0x0058(0x0008)
    bool                                          bEnableTextureStreaming;                                      // 0x0060(0x0001)
    bool                                          bCinematicEngineScalability;                                  // 0x0061(0x0001)
    bool                                          bCinematicMode;                                               // 0x0062(0x0001)
    bool                                          bAllowMovement;                                               // 0x0063(0x0001)
    bool                                          bAllowTurning;                                                // 0x0064(0x0001)
    bool                                          bShowPlayer;                                                  // 0x0065(0x0001)
    bool                                          bShowHUD;                                                     // 0x0066(0x0001)
    bool                                          bUsePathTracer;                                               // 0x0067(0x0001)
    int32_t                                       PathTracerSamplePerPixel;                                     // 0x0068(0x0004)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  MovieSceneCapture.CaptureResolution
// Struct Size::0x0008
struct FCaptureResolution
{
    int32_t                                       ResX;                                                         // 0x0000(0x0004)
    int32_t                                       ResY;                                                         // 0x0004(0x0004)
};


// ScriptStruct  MovieSceneCapture.CapturedPixels
// Struct Size::0x0010
struct FCapturedPixels
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  MovieSceneCapture.CapturedPixelsID
// Struct Size::0x0050
struct FCapturedPixelsID
{
    TMap<FName,FName>                             Identifiers;                                                  // 0x0000(0x0050)
};


// ScriptStruct  Engine.PoolActorReferencer
// Struct Size::0x0010
struct FPoolActorReferencer
{
    UObject*                                      Referencer;                                                   // 0x0000(0x0008)
    FName                                         PropertyName;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Engine.KAggregateGeom
// Struct Size::0x0058
struct FKAggregateGeom
{
    TArray<FKSphereElem>                          SphereElems;                                                  // 0x0000(0x0010)
    TArray<FKBoxElem>                             BoxElems;                                                     // 0x0010(0x0010)
    TArray<FKSphylElem>                           SphylElems;                                                   // 0x0020(0x0010)
    TArray<FKConvexElem>                          ConvexElems;                                                  // 0x0030(0x0010)
    TArray<FKTaperedCapsuleElem>                  TaperedCapsuleElems;                                          // 0x0040(0x0010)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Engine.KShapeElem
// Struct Size::0x0030
struct FKShapeElem
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    float                                         RestOffset;                                                   // 0x0008(0x0004)
    FName                                         Name;                                                         // 0x000C(0x0008)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    char                                          bContributeToMass;                                            // 0x0018(0x0001)
    char                                          pa_0019[0x0017]                                               // 0x0019(0x0017)
};


// ScriptStruct  Engine.KTaperedCapsuleElem
// Struct Size::0x0058
struct FKTaperedCapsuleElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         Radius0;                                                      // 0x0048(0x0004)
    float                                         Radius1;                                                      // 0x004C(0x0004)
    float                                         Length;                                                       // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.KConvexElem
// Struct Size::0x00B0
struct FKConvexElem : public FKShapeElem
{
    TArray<FVector>                               VertexData;                                                   // 0x0030(0x0010)
    TArray<int32_t>                               IndexData;                                                    // 0x0040(0x0010)
    FBox                                          ElemBox;                                                      // 0x0050(0x001C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FTransform                                    Transform;                                                    // 0x0070(0x0030)
    char                                          pa_00A0[0x0010]                                               // 0x00A0(0x0010)
};


// ScriptStruct  Engine.KSphylElem
// Struct Size::0x0050
struct FKSphylElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         Radius;                                                       // 0x0048(0x0004)
    float                                         Length;                                                       // 0x004C(0x0004)
};


// ScriptStruct  Engine.KBoxElem
// Struct Size::0x0058
struct FKBoxElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    FRotator                                      Rotation;                                                     // 0x003C(0x000C)
    float                                         X;                                                            // 0x0048(0x0004)
    float                                         Y;                                                            // 0x004C(0x0004)
    float                                         Z;                                                            // 0x0050(0x0004)
    char                                          pa_0054[0x0004]                                               // 0x0054(0x0004)
};


// ScriptStruct  Engine.KSphereElem
// Struct Size::0x0040
struct FKSphereElem : public FKShapeElem
{
    FVector                                       Center;                                                       // 0x0030(0x000C)
    float                                         Radius;                                                       // 0x003C(0x0004)
};


// ScriptStruct  Engine.AnimationGroupReference
// Struct Size::0x000C
struct FAnimationGroupReference
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    enum class EAnimGroupRole                     GroupRole;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.AnimGroupInstance
// Struct Size::0x0070
struct FAnimGroupInstance
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  Engine.AnimTickRecord
// Struct Size::0x0048
struct FAnimTickRecord
{
    UAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Engine.MarkerSyncAnimPosition
// Struct Size::0x0014
struct FMarkerSyncAnimPosition
{
    FName                                         PreviousMarkerName;                                           // 0x0000(0x0008)
    FName                                         NextMarkerName;                                               // 0x0008(0x0008)
    float                                         PositionBetweenMarkers;                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.BlendFilter
// Struct Size::0x0078
struct FBlendFilter
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.BlendSampleData
// Struct Size::0x0040
struct FBlendSampleData
{
    int32_t                                       SampleDataIndex;                                              // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAnimSequence*                                Animation;                                                    // 0x0008(0x0008)
    float                                         TotalWeight;                                                  // 0x0010(0x0004)
    float                                         Time;                                                         // 0x0014(0x0004)
    float                                         PreviousTime;                                                 // 0x0018(0x0004)
    float                                         SamplePlayRate;                                               // 0x001C(0x0004)
    char                                          pa_0020[0x0020]                                               // 0x0020(0x0020)
};


// ScriptStruct  Engine.AnimationRecordingSettings
// Struct Size::0x0010
struct FAnimationRecordingSettings
{
    bool                                          bRecordInWorldSpace;                                          // 0x0000(0x0001)
    bool                                          bRemoveRootAnimation;                                         // 0x0001(0x0001)
    bool                                          bAutoSaveAsset;                                               // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    float                                         SampleRate;                                                   // 0x0004(0x0004)
    float                                         Length;                                                       // 0x0008(0x0004)
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x000C(0x0001)
    enum class ERichCurveTangentMode              TangentMode;                                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
};


// ScriptStruct  Engine.ComponentSpacePose
// Struct Size::0x0020
struct FComponentSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.LocalSpacePose
// Struct Size::0x0020
struct FLocalSpacePose
{
    TArray<FTransform>                            Transforms;                                                   // 0x0000(0x0010)
    TArray<FName>                                 Names;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.NamedTransform
// Struct Size::0x0040
struct FNamedTransform
{
    FTransform                                    Value;                                                        // 0x0000(0x0030)
    FName                                         Name;                                                         // 0x0030(0x0008)
    char                                          pa_0038[0x0008]                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.NamedColor
// Struct Size::0x000C
struct FNamedColor
{
    FColor                                        Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.NamedVector
// Struct Size::0x0014
struct FNamedVector
{
    FVector                                       Value;                                                        // 0x0000(0x000C)
    FName                                         Name;                                                         // 0x000C(0x0008)
};


// ScriptStruct  Engine.NamedFloat
// Struct Size::0x000C
struct FNamedFloat
{
    float                                         Value;                                                        // 0x0000(0x0004)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.AnimParentNodeAssetOverride
// Struct Size::0x0018
struct FAnimParentNodeAssetOverride
{
    UAnimationAsset*                              NewAsset;                                                     // 0x0000(0x0008)
    FGuid                                         ParentNodeGuid;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimGroupInfo
// Struct Size::0x0018
struct FAnimGroupInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FLinearColor                                  Color;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintDebugData
// Struct Size::0x0001
struct FAnimBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.AnimationFrameSnapshot
// Struct Size::0x0001
struct FAnimationFrameSnapshot
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.StateMachineDebugData
// Struct Size::0x00B0
struct FStateMachineDebugData
{
    char                                          pa_0000[0x00B0]                                               // 0x0000(0x00B0)
};


// ScriptStruct  Engine.StateMachineStateDebugData
// Struct Size::0x0010
struct FStateMachineStateDebugData
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintFunctionData
// Struct Size::0x0040
struct FAnimBlueprintFunctionData
{
    *                                             OutputPoseNodeProperty;                                       // 0x0000(0x0020)
    TArray<*>                                     InputPoseNodeProperties;                                      // 0x0020(0x0010)
    TArray<*>                                     InputProperties;                                              // 0x0030(0x0010)
};


// ScriptStruct  Engine.AnimGraphBlendOptions
// Struct Size::0x0008
struct FAnimGraphBlendOptions
{
    float                                         BlendInTime;                                                  // 0x0000(0x0004)
    float                                         BlendOutTime;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.GraphAssetPlayerInformation
// Struct Size::0x0010
struct FGraphAssetPlayerInformation
{
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.CachedPoseIndices
// Struct Size::0x0010
struct FCachedPoseIndices
{
    TArray<int32_t>                               OrderedSavedPoseNodeIndices;                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimBlueprintFunction
// Struct Size::0x0068
struct FAnimBlueprintFunction
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         Group;                                                        // 0x0008(0x0008)
    int32_t                                       OutputPoseNodeIndex;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<FName>                                 InputPoseNames;                                               // 0x0018(0x0010)
    TArray<int32_t>                               InputPoseNodeIndices;                                         // 0x0028(0x0010)
    char                                          pa_0038[0x0028]                                               // 0x0038(0x0028)
    bool                                          bImplemented;                                                 // 0x0060(0x0001)
    char                                          pa_0061[0x0007]                                               // 0x0061(0x0007)
};


// ScriptStruct  Engine.AnimTrack
// Struct Size::0x0010
struct FAnimTrack
{
    TArray<FAnimSegment>                          AnimSegments;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimSegment
// Struct Size::0x0020
struct FAnimSegment
{
    UAnimSequenceBase*                            AnimReference;                                                // 0x0000(0x0008)
    float                                         StartPos;                                                     // 0x0008(0x0004)
    float                                         AnimStartTime;                                                // 0x000C(0x0004)
    float                                         AnimEndTime;                                                  // 0x0010(0x0004)
    float                                         AnimPlayRate;                                                 // 0x0014(0x0004)
    int32_t                                       LoopingCount;                                                 // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.RootMotionExtractionStep
// Struct Size::0x0010
struct FRootMotionExtractionStep
{
    UAnimSequence*                                AnimSequence;                                                 // 0x0000(0x0008)
    float                                         StartPosition;                                                // 0x0008(0x0004)
    float                                         EndPosition;                                                  // 0x000C(0x0004)
};


// ScriptStruct  Engine.AnimationErrorStats
// Struct Size::0x0010
struct FAnimationErrorStats
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.RawCurveTracks
// Struct Size::0x0010
struct FRawCurveTracks
{
    TArray<FFloatCurve>                           FloatCurves;                                                  // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimCurveBase
// Struct Size::0x0018
struct FAnimCurveBase
{
    FName                                         LastObservedName;                                             // 0x0000(0x0008)
    FSmartName                                    Name;                                                         // 0x0008(0x000C)
    int32_t                                       CurveTypeFlags;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SmartName
// Struct Size::0x000C
struct FSmartName
{
    FName                                         DisplayName;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.FloatCurve
// Struct Size::0x0098
struct FFloatCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurve;                                                   // 0x0018(0x0080)
};


// ScriptStruct  Engine.TransformCurve
// Struct Size::0x04E0
struct FTransformCurve : public FAnimCurveBase
{
    FVectorCurve                                  TranslationCurve;                                             // 0x0018(0x0198)
    FVectorCurve                                  RotationCurve;                                                // 0x01B0(0x0198)
    FVectorCurve                                  ScaleCurve;                                                   // 0x0348(0x0198)
};


// ScriptStruct  Engine.VectorCurve
// Struct Size::0x0198
struct FVectorCurve : public FAnimCurveBase
{
    FRichCurve                                    FloatCurves;                                                  // 0x0018(0x0080)
    char                                          pa_0098[0x0100]                                               // 0x0098(0x0100)
};


// ScriptStruct  Engine.SlotEvaluationPose
// Struct Size::0x0040
struct FSlotEvaluationPose
{
    enum class EAdditiveAnimationType             AdditiveType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         Weight;                                                       // 0x0004(0x0004)
    char                                          pa_0008[0x0038]                                               // 0x0008(0x0038)
};


// ScriptStruct  Engine.A2Pose
// Struct Size::0x0010
struct FA2Pose
{
    TArray<FTransform>                            Bones;                                                        // 0x0000(0x0010)
};


// ScriptStruct  Engine.A2CSPose
// Struct Size::0x0028
struct FA2CSPose : public FA2Pose
{
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
    TArray<char>                                  ComponentSpaceFlags;                                          // 0x0018(0x0010)
};


// ScriptStruct  Engine.QueuedDrawDebugItem
// Struct Size::0x0068
struct FQueuedDrawDebugItem
{
    enum class EDrawDebugItemType                 ItemType;                                                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       StartLoc;                                                     // 0x0004(0x000C)
    FVector                                       EndLoc;                                                       // 0x0010(0x000C)
    FVector                                       Center;                                                       // 0x001C(0x000C)
    FRotator                                      Rotation;                                                     // 0x0028(0x000C)
    float                                         Radius;                                                       // 0x0034(0x0004)
    float                                         Size;                                                         // 0x0038(0x0004)
    int32_t                                       Segments;                                                     // 0x003C(0x0004)
    FColor                                        Color;                                                        // 0x0040(0x0004)
    bool                                          bPersistentLines;                                             // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
    float                                         LifeTime;                                                     // 0x0048(0x0004)
    float                                         Thickness;                                                    // 0x004C(0x0004)
    FString                                       Message;                                                      // 0x0050(0x0010)
    FVector2D                                     TextScale;                                                    // 0x0060(0x0008)
};


// ScriptStruct  Engine.AnimLinkableElement
// Struct Size::0x0030
struct FAnimLinkableElement
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UAnimMontage*                                 LinkedMontage;                                                // 0x0008(0x0008)
    int32_t                                       SlotIndex;                                                    // 0x0010(0x0004)
    int32_t                                       SegmentIndex;                                                 // 0x0014(0x0004)
    enum class EAnimLinkMethod                    LinkMethod;                                                   // 0x0018(0x0001)
    enum class EAnimLinkMethod                    CachedLinkMethod;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    float                                         SegmentBeginTime;                                             // 0x001C(0x0004)
    float                                         SegmentLength;                                                // 0x0020(0x0004)
    float                                         LinkValue;                                                    // 0x0024(0x0004)
    UAnimSequenceBase*                            LinkedSequence;                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.AnimMontageInstance
// Struct Size::0x01B0
struct FAnimMontageInstance
{
    UAnimMontage*                                 Montage;                                                      // 0x0000(0x0008)
    char                                          pa_0008[0x0020]                                               // 0x0008(0x0020)
    bool                                          bPlaying;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         DefaultBlendTimeMultiplier;                                   // 0x002C(0x0004)
    char                                          pa_0030[0x00B8]                                               // 0x0030(0x00B8)
    TArray<int32_t>                               NextSections;                                                 // 0x00E8(0x0010)
    TArray<int32_t>                               PrevSections;                                                 // 0x00F8(0x0010)
    char                                          pa_0108[0x0010]                                               // 0x0108(0x0010)
    TArray<FAnimNotifyEvent>                      ActiveStateBranchingPoints;                                   // 0x0118(0x0010)
    float                                         Position;                                                     // 0x0128(0x0004)
    float                                         PlayRate;                                                     // 0x012C(0x0004)
    FAlphaBlend                                   Blend;                                                        // 0x0130(0x0030)
    char                                          pa_0160[0x0028]                                               // 0x0160(0x0028)
    int32_t                                       DisableRootMotionCount;                                       // 0x0188(0x0004)
    char                                          pa_018C[0x0024]                                               // 0x018C(0x0024)
};


// ScriptStruct  Engine.AnimNotifyEvent
// Struct Size::0x00C0
struct FAnimNotifyEvent : public FAnimLinkableElement
{
    float                                         DisplayTime;                                                  // 0x0030(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x0034(0x0004)
    float                                         EndTriggerTimeOffset;                                         // 0x0038(0x0004)
    float                                         TriggerWeightThreshold;                                       // 0x003C(0x0004)
    FName                                         NotifyName;                                                   // 0x0040(0x0008)
    UAnimNotify*                                  Notify;                                                       // 0x0048(0x0008)
    UAnimNotifyState*                             NotifyStateClass;                                             // 0x0050(0x0008)
    float                                         Duration;                                                     // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FAnimLinkableElement                          EndLink;                                                      // 0x0060(0x0030)
    bool                                          bConvertedFromBranchingPoint;                                 // 0x0090(0x0001)
    enum class EMontageNotifyTickType             MontageTickType;                                              // 0x0091(0x0001)
    char                                          pa_0092[0x0002]                                               // 0x0092(0x0002)
    float                                         NotifyTriggerChance;                                          // 0x0094(0x0004)
    enum class ENotifyFilterType                  NotifyFilterType;                                             // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       NotifyFilterLOD;                                              // 0x009C(0x0004)
    int32_t                                       NotifyFilterSignificanceLevel;                                // 0x00A0(0x0004)
    bool                                          bTriggerOnDedicatedServer;                                    // 0x00A4(0x0001)
    bool                                          bTriggerOnFollower;                                           // 0x00A5(0x0001)
    char                                          pa_00A6[0x0002]                                               // 0x00A6(0x0002)
    int32_t                                       TrackIndex;                                                   // 0x00A8(0x0004)
    char                                          pa_00AC[0x0014]                                               // 0x00AC(0x0014)
};


// ScriptStruct  Engine.BranchingPointMarker
// Struct Size::0x000C
struct FBranchingPointMarker
{
    int32_t                                       NotifyIndex;                                                  // 0x0000(0x0004)
    float                                         TriggerTime;                                                  // 0x0004(0x0004)
    enum class EAnimNotifyEventType               NotifyEventType;                                              // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.BranchingPoint
// Struct Size::0x0040
struct FBranchingPoint : public FAnimLinkableElement
{
    FName                                         EventName;                                                    // 0x0030(0x0008)
    float                                         DisplayTime;                                                  // 0x0038(0x0004)
    float                                         TriggerTimeOffset;                                            // 0x003C(0x0004)
};


// ScriptStruct  Engine.SlotAnimationTrack
// Struct Size::0x0018
struct FSlotAnimationTrack
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    FAnimTrack                                    AnimTrack;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.CompositeSection
// Struct Size::0x0058
struct FCompositeSection : public FAnimLinkableElement
{
    FName                                         SectionName;                                                  // 0x0030(0x0008)
    float                                         StartTime;                                                    // 0x0038(0x0004)
    FName                                         NextSectionName;                                              // 0x003C(0x0008)
    char                                          pa_0044[0x0004]                                               // 0x0044(0x0004)
    TArray<UAnimMetaData*>                        MetaData;                                                     // 0x0048(0x0010)
};


// ScriptStruct  Engine.AnimNode_ApplyMeshSpaceAdditive
// Struct Size::0x00D0
struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
{
    FPoseLink                                     Base;                                                         // 0x0010(0x0010)
    FPoseLink                                     Additive;                                                     // 0x0020(0x0010)
    enum class EAnimAlphaInputType                AlphaInputType;                                               // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         Alpha;                                                        // 0x0034(0x0004)
    char                                          bAlphaBoolEnabled;                                            // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
    FInputAlphaBoolBlend                          AlphaBoolBlend;                                               // 0x0040(0x0048)
    FName                                         AlphaCurveName;                                               // 0x0088(0x0008)
    FInputScaleBias                               AlphaScaleBias;                                               // 0x0090(0x0008)
    FInputScaleBiasClamp                          AlphaScaleBiasClamp;                                          // 0x0098(0x0030)
    int32_t                                       LODThreshold;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
};


// ScriptStruct  Engine.AnimNode_Inertialization
// Struct Size::0x0070
struct FAnimNode_Inertialization : public FAnimNode_Base
{
    FPoseLink                                     Source;                                                       // 0x0010(0x0010)
    char                                          pa_0020[0x0050]                                               // 0x0020(0x0050)
};


// ScriptStruct  Engine.InertializationPoseDiff
// Struct Size::0x0028
struct FInertializationPoseDiff
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.InertializationCurveDiff
// Struct Size::0x0008
struct FInertializationCurveDiff
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.InertializationBoneDiff
// Struct Size::0x003C
struct FInertializationBoneDiff
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  Engine.InertializationPose
// Struct Size::0x0090
struct FInertializationPose
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  Engine.AnimNode_LinkedAnimGraph
// Struct Size::0x00A0
struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
{
    TArray<FPoseLink>                             InputPoses;                                                   // 0x0058(0x0010)
    TArray<FName>                                 InputPoseNames;                                               // 0x0068(0x0010)
    UAnimInstance*                                InstanceClass;                                                // 0x0078(0x0008)
    FName                                         Tag;                                                          // 0x0080(0x0008)
    char                                          pa_0088[0x0010]                                               // 0x0088(0x0010)
    char                                          bReceiveNotifiesFromLinkedInstances;                          // 0x0098(0x0001)
    char                                          bPropagateNotifiesToLinkedInstances;                          // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  Engine.AnimNode_LinkedAnimLayer
// Struct Size::0x00B8
struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
{
    UAnimLayerInterface*                          Interface;                                                    // 0x00A0(0x0008)
    FName                                         Layer;                                                        // 0x00A8(0x0008)
    bool                                          bEnableDeferredConstructAnimInstance;                         // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  Engine.AnimNode_LinkedInputPose
// Struct Size::0x0078
struct FAnimNode_LinkedInputPose : public FAnimNode_Base
{
    FName                                         Name;                                                         // 0x0010(0x0008)
    FName                                         Graph;                                                        // 0x0018(0x0008)
    FPoseLink                                     InputPose;                                                    // 0x0020(0x0010)
    char                                          pa_0030[0x0048]                                               // 0x0030(0x0048)
};


// ScriptStruct  Engine.AnimNode_SaveCachedPose
// Struct Size::0x00B8
struct FAnimNode_SaveCachedPose : public FAnimNode_Base
{
    FPoseLink                                     Pose;                                                         // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x0008)
    char                                          pa_0028[0x0090]                                               // 0x0028(0x0090)
};


// ScriptStruct  Engine.AnimNode_SequencePlayer
// Struct Size::0x0088
struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
{
    UAnimSequenceBase*                            Sequence;                                                     // 0x0040(0x0008)
    float                                         PlayRateBasis;                                                // 0x0048(0x0004)
    float                                         PlayRate;                                                     // 0x004C(0x0004)
    FInputScaleBiasClamp                          PlayRateScaleBiasClamp;                                       // 0x0050(0x0030)
    float                                         StartPosition;                                                // 0x0080(0x0004)
    bool                                          bLoopAnimation;                                               // 0x0084(0x0001)
    char                                          pa_0085[0x0003]                                               // 0x0085(0x0003)
};


// ScriptStruct  Engine.AnimNode_StateMachine
// Struct Size::0x00B0
struct FAnimNode_StateMachine : public FAnimNode_Base
{
    int32_t                                       StateMachineIndexInClass;                                     // 0x0010(0x0004)
    int32_t                                       MaxTransitionsPerFrame;                                       // 0x0014(0x0004)
    bool                                          bSkipFirstUpdateTransition;                                   // 0x0018(0x0001)
    bool                                          bReinitializeOnBecomingRelevant;                              // 0x0019(0x0001)
    char                                          pa_001A[0x0096]                                               // 0x001A(0x0096)
};


// ScriptStruct  Engine.AnimationPotentialTransition
// Struct Size::0x0030
struct FAnimationPotentialTransition
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.AnimationActiveTransitionEntry
// Struct Size::0x00C8
struct FAnimationActiveTransitionEntry
{
    char                                          pa_0000[0x00B8]                                               // 0x0000(0x00B8)
    UBlendProfile*                                BlendProfile;                                                 // 0x00B8(0x0008)
    char                                          pa_00C0[0x0008]                                               // 0x00C0(0x0008)
};


// ScriptStruct  Engine.AnimNode_TransitionPoseEvaluator
// Struct Size::0x0058
struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
{
    char                                          pa_0010[0x0038]                                               // 0x0010(0x0038)
    int32_t                                       FramesToCachePose;                                            // 0x0048(0x0004)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    enum class EEvaluatorDataSource               DataSource;                                                   // 0x0050(0x0001)
    enum class EEvaluatorMode                     EvaluatorMode;                                                // 0x0051(0x0001)
    char                                          pa_0052[0x0006]                                               // 0x0052(0x0006)
};


// ScriptStruct  Engine.AnimNode_TransitionResult
// Struct Size::0x0028
struct FAnimNode_TransitionResult : public FAnimNode_Base
{
    bool                                          bCanEnterTransition;                                          // 0x0010(0x0001)
    char                                          pa_0011[0x0017]                                               // 0x0011(0x0017)
};


// ScriptStruct  Engine.AnimNode_UseCachedPose
// Struct Size::0x0028
struct FAnimNode_UseCachedPose : public FAnimNode_Base
{
    FPoseLink                                     LinkToCachingNode;                                            // 0x0010(0x0010)
    FName                                         CachePoseName;                                                // 0x0020(0x0008)
};


// ScriptStruct  Engine.ExposedValueHandler
// Struct Size::0x0048
struct FExposedValueHandler
{
    FName                                         BoundFunction;                                                // 0x0000(0x0008)
    TArray<FExposedValueCopyRecord>               CopyRecords;                                                  // 0x0008(0x0010)
    UFunction*                                    Function;                                                     // 0x0018(0x0008)
    *                                             ValueHandlerNodeProperty;                                     // 0x0020(0x0020)
    char                                          pa_0040[0x0008]                                               // 0x0040(0x0008)
};


// ScriptStruct  Engine.ExposedValueCopyRecord
// Struct Size::0x0080
struct FExposedValueCopyRecord
{
    FName                                         SourcePropertyName;                                           // 0x0000(0x0008)
    FName                                         SourceSubPropertyName;                                        // 0x0008(0x0008)
    int32_t                                       SourceArrayIndex;                                             // 0x0010(0x0004)
    bool                                          bInstanceIsTarget;                                            // 0x0014(0x0001)
    enum class EPostCopyOperation                 PostCopyOperation;                                            // 0x0015(0x0001)
    enum class ECopyType                          CopyType;                                                     // 0x0016(0x0001)
    char                                          pa_0017[0x0001]                                               // 0x0017(0x0001)
    *                                             DestProperty;                                                 // 0x0018(0x0020)
    int32_t                                       DestArrayIndex;                                               // 0x0038(0x0004)
    int32_t                                       Size;                                                         // 0x003C(0x0004)
    *                                             CachedSourceProperty;                                         // 0x0040(0x0020)
    *                                             CachedSourceStructSubProperty;                                // 0x0060(0x0020)
};


// ScriptStruct  Engine.AnimNode_ConvertLocalToComponentSpace
// Struct Size::0x0020
struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
{
    FPoseLink                                     LocalPose;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNode_ConvertComponentToLocalSpace
// Struct Size::0x0020
struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
{
    FComponentSpacePoseLink                       ComponentPose;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimNotifyQueue
// Struct Size::0x0070
struct FAnimNotifyQueue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    TArray<FAnimNotifyEventReference>             AnimNotifies;                                                 // 0x0010(0x0010)
    TMap<FName,FAnimNotifyArray>                  UnfilteredMontageAnimNotifies;                                // 0x0020(0x0050)
};


// ScriptStruct  Engine.AnimNotifyArray
// Struct Size::0x0010
struct FAnimNotifyArray
{
    TArray<FAnimNotifyEventReference>             Notifies;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimNotifyEventReference
// Struct Size::0x0010
struct FAnimNotifyEventReference
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      NotifySource;                                                 // 0x0008(0x0008)
};


// ScriptStruct  Engine.CompressedTrack
// Struct Size::0x0038
struct FCompressedTrack
{
    TArray<char>                                  ByteStream;                                                   // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
    float                                         Mins;                                                         // 0x0020(0x0004)
    char                                          pa_0024[0x0008]                                               // 0x0024(0x0008)
    float                                         Ranges;                                                       // 0x002C(0x0004)
    char                                          pa_0030[0x0008]                                               // 0x0030(0x0008)
};


// ScriptStruct  Engine.CurveTrack
// Struct Size::0x0018
struct FCurveTrack
{
    FName                                         CurveName;                                                    // 0x0000(0x0008)
    TArray<float>                                 CurveWeights;                                                 // 0x0008(0x0010)
};


// ScriptStruct  Engine.ScaleTrack
// Struct Size::0x0020
struct FScaleTrack
{
    TArray<FVector>                               ScaleKeys;                                                    // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.RotationTrack
// Struct Size::0x0020
struct FRotationTrack
{
    TArray<FQuat>                                 RotKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.TranslationTrack
// Struct Size::0x0020
struct FTranslationTrack
{
    TArray<FVector>                               PosKeys;                                                      // 0x0000(0x0010)
    TArray<float>                                 Times;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimSequenceTrackContainer
// Struct Size::0x0020
struct FAnimSequenceTrackContainer
{
    TArray<FRawAnimSequenceTrack>                 AnimationTracks;                                              // 0x0000(0x0010)
    TArray<FName>                                 TrackNames;                                                   // 0x0010(0x0010)
};


// ScriptStruct  Engine.RawAnimSequenceTrack
// Struct Size::0x0030
struct FRawAnimSequenceTrack
{
    TArray<FVector>                               PosKeys;                                                      // 0x0000(0x0010)
    TArray<FQuat>                                 RotKeys;                                                      // 0x0010(0x0010)
    TArray<FVector>                               ScaleKeys;                                                    // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimSetMeshLinkup
// Struct Size::0x0010
struct FAnimSetMeshLinkup
{
    TArray<int32_t>                               BoneToTrackTable;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AnimSingleNodeInstanceProxy
// Struct Size::0x0830
struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_06E0[0x0150]                                               // 0x06E0(0x0150)
};


// ScriptStruct  Engine.AnimNode_SingleNode
// Struct Size::0x0030
struct FAnimNode_SingleNode : public FAnimNode_Base
{
    FPoseLink                                     SourcePose;                                                   // 0x0010(0x0010)
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.BakedAnimationStateMachine
// Struct Size::0x0030
struct FBakedAnimationStateMachine
{
    FName                                         MachineName;                                                  // 0x0000(0x0008)
    int32_t                                       InitialState;                                                 // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<FBakedAnimationState>                  States;                                                       // 0x0010(0x0010)
    TArray<FAnimationTransitionBetweenStates>     Transitions;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Engine.AnimationStateBase
// Struct Size::0x0008
struct FAnimationStateBase
{
    FName                                         StateName;                                                    // 0x0000(0x0008)
};


// ScriptStruct  Engine.AnimationTransitionBetweenStates
// Struct Size::0x0040
struct FAnimationTransitionBetweenStates : public FAnimationStateBase
{
    int32_t                                       PreviousState;                                                // 0x0008(0x0004)
    int32_t                                       NextState;                                                    // 0x000C(0x0004)
    float                                         CrossfadeDuration;                                            // 0x0010(0x0004)
    int32_t                                       StartNotify;                                                  // 0x0014(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0018(0x0004)
    int32_t                                       InterruptNotify;                                              // 0x001C(0x0004)
    enum class EAlphaBlendOption                  BlendMode;                                                    // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    UCurveFloat*                                  CustomCurve;                                                  // 0x0028(0x0008)
    UBlendProfile*                                BlendProfile;                                                 // 0x0030(0x0008)
    enum class ETransitionLogicType               LogicType;                                                    // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.BakedAnimationState
// Struct Size::0x0058
struct FBakedAnimationState
{
    FName                                         StateName;                                                    // 0x0000(0x0008)
    TArray<FBakedStateExitTransition>             Transitions;                                                  // 0x0008(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0018(0x0004)
    int32_t                                       StartNotify;                                                  // 0x001C(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0020(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x0024(0x0004)
    bool                                          bIsAConduit;                                                  // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    int32_t                                       EntryRuleNodeIndex;                                           // 0x002C(0x0004)
    TArray<int32_t>                               PlayerNodeIndices;                                            // 0x0030(0x0010)
    TArray<int32_t>                               LayerNodeIndices;                                             // 0x0040(0x0010)
    bool                                          bAlwaysResetOnEntry;                                          // 0x0050(0x0001)
    char                                          pa_0051[0x0007]                                               // 0x0051(0x0007)
};


// ScriptStruct  Engine.BakedStateExitTransition
// Struct Size::0x0020
struct FBakedStateExitTransition
{
    int32_t                                       CanTakeDelegateIndex;                                         // 0x0000(0x0004)
    int32_t                                       CustomResultNodeIndex;                                        // 0x0004(0x0004)
    int32_t                                       TransitionIndex;                                              // 0x0008(0x0004)
    bool                                          bDesiredTransitionReturnValue;                                // 0x000C(0x0001)
    bool                                          bAutomaticRemainingTimeRule;                                  // 0x000D(0x0001)
    char                                          pa_000E[0x0002]                                               // 0x000E(0x0002)
    TArray<int32_t>                               PoseEvaluatorLinks;                                           // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimationState
// Struct Size::0x0028
struct FAnimationState : public FAnimationStateBase
{
    TArray<FAnimationTransitionRule>              Transitions;                                                  // 0x0008(0x0010)
    int32_t                                       StateRootNodeIndex;                                           // 0x0018(0x0004)
    int32_t                                       StartNotify;                                                  // 0x001C(0x0004)
    int32_t                                       EndNotify;                                                    // 0x0020(0x0004)
    int32_t                                       FullyBlendedNotify;                                           // 0x0024(0x0004)
};


// ScriptStruct  Engine.AnimationTransitionRule
// Struct Size::0x0010
struct FAnimationTransitionRule
{
    FName                                         RuleToExecute;                                                // 0x0000(0x0008)
    bool                                          TransitionReturnVal;                                          // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       TransitionIndex;                                              // 0x000C(0x0004)
};


// ScriptStruct  Engine.TrackToSkeletonMap
// Struct Size::0x0004
struct FTrackToSkeletonMap
{
    int32_t                                       BoneTreeIndex;                                                // 0x0000(0x0004)
};


// ScriptStruct  Engine.MarkerSyncData
// Struct Size::0x0020
struct FMarkerSyncData
{
    TArray<FAnimSyncMarker>                       AuthoredSyncMarkers;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.AnimSyncMarker
// Struct Size::0x000C
struct FAnimSyncMarker
{
    FName                                         MarkerName;                                                   // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.AnimNotifyTrack
// Struct Size::0x0038
struct FAnimNotifyTrack
{
    FName                                         TrackName;                                                    // 0x0000(0x0008)
    FLinearColor                                  TrackColor;                                                   // 0x0008(0x0010)
    char                                          pa_0018[0x0020]                                               // 0x0018(0x0020)
};


// ScriptStruct  Engine.PerBoneBlendWeights
// Struct Size::0x0010
struct FPerBoneBlendWeights
{
    TArray<FPerBoneBlendWeight>                   BoneBlendWeights;                                             // 0x0000(0x0010)
};


// ScriptStruct  Engine.AssetImportInfo
// Struct Size::0x0001
struct FAssetImportInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.PrimaryAssetRulesCustomOverride
// Struct Size::0x0038
struct FPrimaryAssetRulesCustomOverride
{
    FPrimaryAssetType                             PrimaryAssetType;                                             // 0x0000(0x0008)
    FDirectoryPath                                FilterDirectory;                                              // 0x0008(0x0010)
    FString                                       FilterString;                                                 // 0x0018(0x0010)
    FPrimaryAssetRules                            Rules;                                                        // 0x0028(0x000C)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.PrimaryAssetRules
// Struct Size::0x000C
struct FPrimaryAssetRules
{
    int32_t                                       Priority;                                                     // 0x0000(0x0004)
    int32_t                                       ChunkID;                                                      // 0x0004(0x0004)
    bool                                          bApplyRecursively;                                            // 0x0008(0x0001)
    enum class EPrimaryAssetCookRule              CookRule;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.PrimaryAssetRulesOverride
// Struct Size::0x001C
struct FPrimaryAssetRulesOverride
{
    FPrimaryAssetId                               PrimaryAssetId;                                               // 0x0000(0x0010)
    FPrimaryAssetRules                            Rules;                                                        // 0x0010(0x000C)
};


// ScriptStruct  Engine.AssetManagerRedirect
// Struct Size::0x0020
struct FAssetManagerRedirect
{
    FString                                       Old;                                                          // 0x0000(0x0010)
    FString                                       New;                                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.PrimaryAssetTypeInfo
// Struct Size::0x0088
struct FPrimaryAssetTypeInfo
{
    FName                                         PrimaryAssetType;                                             // 0x0000(0x0008)
    TSoftClassPtr<UObject>                        AssetBaseClass;                                               // 0x0008(0x0028)
    UObject*                                      AssetBaseClassLoaded;                                         // 0x0030(0x0008)
    bool                                          bHasBlueprintClasses;                                         // 0x0038(0x0001)
    bool                                          bIsEditorOnly;                                                // 0x0039(0x0001)
    char                                          pa_003A[0x0006]                                               // 0x003A(0x0006)
    TArray<FDirectoryPath>                        Directories;                                                  // 0x0040(0x0010)
    TArray<FSoftObjectPath>                       SpecificAssets;                                               // 0x0050(0x0010)
    FPrimaryAssetRules                            Rules;                                                        // 0x0060(0x000C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    TArray<FString>                               AssetScanPaths;                                               // 0x0070(0x0010)
    bool                                          bIsDynamicAsset;                                              // 0x0080(0x0001)
    char                                          pa_0081[0x0003]                                               // 0x0081(0x0003)
    int32_t                                       NumberOfAssets;                                               // 0x0084(0x0004)
};


// ScriptStruct  Engine.AssetMapping
// Struct Size::0x0010
struct FAssetMapping
{
    UAnimationAsset*                              SourceAsset;                                                  // 0x0000(0x0008)
    UAnimationAsset*                              TargetAsset;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.AtmospherePrecomputeInstanceData
// Struct Size::0x0138
struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00A8[0x0090]                                               // 0x00A8(0x0090)
};


// ScriptStruct  Engine.AtmospherePrecomputeParameters
// Struct Size::0x002C
struct FAtmospherePrecomputeParameters
{
    float                                         DensityHeight;                                                // 0x0000(0x0004)
    float                                         DecayHeight;                                                  // 0x0004(0x0004)
    int32_t                                       MaxScatteringOrder;                                           // 0x0008(0x0004)
    int32_t                                       TransmittanceTexWidth;                                        // 0x000C(0x0004)
    int32_t                                       TransmittanceTexHeight;                                       // 0x0010(0x0004)
    int32_t                                       IrradianceTexWidth;                                           // 0x0014(0x0004)
    int32_t                                       IrradianceTexHeight;                                          // 0x0018(0x0004)
    int32_t                                       InscatterAltitudeSampleNum;                                   // 0x001C(0x0004)
    int32_t                                       InscatterMuNum;                                               // 0x0020(0x0004)
    int32_t                                       InscatterMuSNum;                                              // 0x0024(0x0004)
    int32_t                                       InscatterNuNum;                                               // 0x0028(0x0004)
};


// ScriptStruct  Engine.BaseAttenuationSettings
// Struct Size::0x00B0
struct FBaseAttenuationSettings
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EAttenuationDistanceModel          DistanceAlgorithm;                                            // 0x0008(0x0001)
    enum class EAttenuationShape                  AttenuationShape;                                             // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         dBAttenuationAtMax;                                           // 0x000C(0x0004)
    enum class ENaturalSoundFalloffMode           FalloffMode;                                                  // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FVector                                       AttenuationShapeExtents;                                      // 0x0014(0x000C)
    float                                         ConeOffset;                                                   // 0x0020(0x0004)
    float                                         FalloffDistance;                                              // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomAttenuationCurve;                                       // 0x0028(0x0088)
};


// ScriptStruct  Engine.AudioComponentParam
// Struct Size::0x0020
struct FAudioComponentParam
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    float                                         FloatParam;                                                   // 0x0008(0x0004)
    bool                                          BoolParam;                                                    // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    int32_t                                       IntParam;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    USoundWave*                                   SoundWaveParam;                                               // 0x0018(0x0008)
};


// ScriptStruct  Engine.AudioEffectParameters
// Struct Size::0x0008
struct FAudioEffectParameters
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.AudioReverbEffect
// Struct Size::0x0048
struct FAudioReverbEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0040]                                               // 0x0008(0x0040)
};


// ScriptStruct  Engine.AudioQualitySettings
// Struct Size::0x0020
struct FAudioQualitySettings
{
    FText                                         DisplayName;                                                  // 0x0000(0x0018)
    int32_t                                       MaxChannels;                                                  // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InteriorSettings
// Struct Size::0x0024
struct FInteriorSettings
{
    bool                                          bIsWorldSettings;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ExteriorVolume;                                               // 0x0004(0x0004)
    float                                         ExteriorTime;                                                 // 0x0008(0x0004)
    float                                         ExteriorLPF;                                                  // 0x000C(0x0004)
    float                                         ExteriorLPFTime;                                              // 0x0010(0x0004)
    float                                         InteriorVolume;                                               // 0x0014(0x0004)
    float                                         InteriorTime;                                                 // 0x0018(0x0004)
    float                                         InteriorLPF;                                                  // 0x001C(0x0004)
    float                                         InteriorLPFTime;                                              // 0x0020(0x0004)
};


// ScriptStruct  Engine.LaunchOnTestSettings
// Struct Size::0x0020
struct FLaunchOnTestSettings
{
    FFilePath                                     LaunchOnTestmap;                                              // 0x0000(0x0010)
    FString                                       DeviceID;                                                     // 0x0010(0x0010)
};


// ScriptStruct  Engine.EditorMapPerformanceTestDefinition
// Struct Size::0x0020
struct FEditorMapPerformanceTestDefinition
{
    FSoftObjectPath                               PerformanceTestmap;                                           // 0x0000(0x0018)
    int32_t                                       TestTimer;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.BuildPromotionTestSettings
// Struct Size::0x01F0
struct FBuildPromotionTestSettings
{
    FFilePath                                     DefaultStaticMeshAsset;                                       // 0x0000(0x0010)
    FBuildPromotionImportWorkflowSettings         ImportWorkflow;                                               // 0x0010(0x0150)
    FBuildPromotionOpenAssetSettings              OpenAssets;                                                   // 0x0160(0x0060)
    FBuildPromotionNewProjectSettings             NewProjectSettings;                                           // 0x01C0(0x0020)
    FFilePath                                     SourceControlMaterial;                                        // 0x01E0(0x0010)
};


// ScriptStruct  Engine.BuildPromotionNewProjectSettings
// Struct Size::0x0020
struct FBuildPromotionNewProjectSettings
{
    FDirectoryPath                                NewProjectFolderOverride;                                     // 0x0000(0x0010)
    FString                                       NewProjectNameOverride;                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.BuildPromotionOpenAssetSettings
// Struct Size::0x0060
struct FBuildPromotionOpenAssetSettings
{
    FFilePath                                     BlueprintAsset;                                               // 0x0000(0x0010)
    FFilePath                                     MaterialAsset;                                                // 0x0010(0x0010)
    FFilePath                                     ParticleSystemAsset;                                          // 0x0020(0x0010)
    FFilePath                                     SkeletalMeshAsset;                                            // 0x0030(0x0010)
    FFilePath                                     StaticMeshAsset;                                              // 0x0040(0x0010)
    FFilePath                                     TextureAsset;                                                 // 0x0050(0x0010)
};


// ScriptStruct  Engine.BuildPromotionImportWorkflowSettings
// Struct Size::0x0150
struct FBuildPromotionImportWorkflowSettings
{
    FEditorImportWorkflowDefinition               Diffuse;                                                      // 0x0000(0x0020)
    FEditorImportWorkflowDefinition               Normal;                                                       // 0x0020(0x0020)
    FEditorImportWorkflowDefinition               StaticMesh;                                                   // 0x0040(0x0020)
    FEditorImportWorkflowDefinition               ReimportStaticMesh;                                           // 0x0060(0x0020)
    FEditorImportWorkflowDefinition               BlendShapeMesh;                                               // 0x0080(0x0020)
    FEditorImportWorkflowDefinition               MorphMesh;                                                    // 0x00A0(0x0020)
    FEditorImportWorkflowDefinition               SkeletalMesh;                                                 // 0x00C0(0x0020)
    FEditorImportWorkflowDefinition               Animation;                                                    // 0x00E0(0x0020)
    FEditorImportWorkflowDefinition               Sound;                                                        // 0x0100(0x0020)
    FEditorImportWorkflowDefinition               SurroundSound;                                                // 0x0120(0x0020)
    TArray<FEditorImportWorkflowDefinition>       OtherAssetsToImport;                                          // 0x0140(0x0010)
};


// ScriptStruct  Engine.EditorImportWorkflowDefinition
// Struct Size::0x0020
struct FEditorImportWorkflowDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.ImportFactorySettingValues
// Struct Size::0x0020
struct FImportFactorySettingValues
{
    FString                                       SettingName;                                                  // 0x0000(0x0010)
    FString                                       Value;                                                        // 0x0010(0x0010)
};


// ScriptStruct  Engine.BlueprintEditorPromotionSettings
// Struct Size::0x0030
struct FBlueprintEditorPromotionSettings
{
    FFilePath                                     FirstMeshPath;                                                // 0x0000(0x0010)
    FFilePath                                     SecondMeshPath;                                               // 0x0010(0x0010)
    FFilePath                                     DefaultParticleAsset;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.ParticleEditorPromotionSettings
// Struct Size::0x0010
struct FParticleEditorPromotionSettings
{
    FFilePath                                     DefaultParticleAsset;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.MaterialEditorPromotionSettings
// Struct Size::0x0030
struct FMaterialEditorPromotionSettings
{
    FFilePath                                     DefaultMaterialAsset;                                         // 0x0000(0x0010)
    FFilePath                                     DefaultDiffuseTexture;                                        // 0x0010(0x0010)
    FFilePath                                     DefaultNormalTexture;                                         // 0x0020(0x0010)
};


// ScriptStruct  Engine.EditorImportExportTestDefinition
// Struct Size::0x0038
struct FEditorImportExportTestDefinition
{
    FFilePath                                     ImportFilePath;                                               // 0x0000(0x0010)
    FString                                       ExportFileExtension;                                          // 0x0010(0x0010)
    bool                                          bSkipExport;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
    TArray<FImportFactorySettingValues>           FactorySettings;                                              // 0x0028(0x0010)
};


// ScriptStruct  Engine.ExternalToolDefinition
// Struct Size::0x0060
struct FExternalToolDefinition
{
    FString                                       ToolName;                                                     // 0x0000(0x0010)
    FFilePath                                     ExecutablePath;                                               // 0x0010(0x0010)
    FString                                       CommandLineOptions;                                           // 0x0020(0x0010)
    FDirectoryPath                                WorkingDirectory;                                             // 0x0030(0x0010)
    FString                                       ScriptExtension;                                              // 0x0040(0x0010)
    FDirectoryPath                                ScriptDirectory;                                              // 0x0050(0x0010)
};


// ScriptStruct  Engine.NavAvoidanceData
// Struct Size::0x003C
struct FNavAvoidanceData
{
    char                                          pa_0000[0x003C]                                               // 0x0000(0x003C)
};


// ScriptStruct  Engine.BandwidthTestGenerator
// Struct Size::0x0020
struct FBandwidthTestGenerator
{
    TArray<FBandwidthTestItem>                    ReplicatedBuffers;                                            // 0x0000(0x0010)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.BandwidthTestItem
// Struct Size::0x0010
struct FBandwidthTestItem
{
    TArray<char>                                  Kilobyte;                                                     // 0x0000(0x0010)
};


// ScriptStruct  Engine.BlendProfileBoneEntry
// Struct Size::0x0014
struct FBlendProfileBoneEntry
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0010)
    float                                         BlendScale;                                                   // 0x0010(0x0004)
};


// ScriptStruct  Engine.PerBoneInterpolation
// Struct Size::0x0014
struct FPerBoneInterpolation
{
    FBoneReference                                BoneReference;                                                // 0x0000(0x0010)
    float                                         InterpolationSpeedPerSec;                                     // 0x0010(0x0004)
};


// ScriptStruct  Engine.GridBlendSample
// Struct Size::0x001C
struct FGridBlendSample
{
    FEditorElement                                GridElement;                                                  // 0x0000(0x0018)
    float                                         BlendWeight;                                                  // 0x0018(0x0004)
};


// ScriptStruct  Engine.EditorElement
// Struct Size::0x0018
struct FEditorElement
{
    int32_t                                       Indices;                                                      // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Weights;                                                      // 0x000C(0x0004)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlendSample
// Struct Size::0x0018
struct FBlendSample
{
    UAnimSequence*                                Animation;                                                    // 0x0000(0x0008)
    FVector                                       SampleValue;                                                  // 0x0008(0x000C)
    float                                         RateScale;                                                    // 0x0014(0x0004)
};


// ScriptStruct  Engine.BlendParameter
// Struct Size::0x0020
struct FBlendParameter
{
    FString                                       DisplayName;                                                  // 0x0000(0x0010)
    float                                         Min;                                                          // 0x0010(0x0004)
    float                                         Max;                                                          // 0x0014(0x0004)
    int32_t                                       GridNum;                                                      // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.InterpolationParameter
// Struct Size::0x0008
struct FInterpolationParameter
{
    float                                         InterpolationTime;                                            // 0x0000(0x0004)
    enum class EFilterInterpolationType           InterpolationType;                                            // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.BPEditorBookmarkNode
// Struct Size::0x0038
struct FBPEditorBookmarkNode
{
    FGuid                                         NodeGuid;                                                     // 0x0000(0x0010)
    FGuid                                         ParentGuid;                                                   // 0x0010(0x0010)
    FText                                         DisplayName;                                                  // 0x0020(0x0018)
};


// ScriptStruct  Engine.EditedDocumentInfo
// Struct Size::0x0030
struct FEditedDocumentInfo
{
    FSoftObjectPath                               EditedObjectPath;                                             // 0x0000(0x0018)
    FVector2D                                     SavedViewOffset;                                              // 0x0018(0x0008)
    float                                         SavedZoomAmount;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UObject*                                      EditedObject;                                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.BPInterfaceDescription
// Struct Size::0x0018
struct FBPInterfaceDescription
{
    UInterface*                                   Interface;                                                    // 0x0000(0x0008)
    TArray<UEdGraph*>                             Graphs;                                                       // 0x0008(0x0010)
};


// ScriptStruct  Engine.BPVariableDescription
// Struct Size::0x00D0
struct FBPVariableDescription
{
    FName                                         VarName;                                                      // 0x0000(0x0008)
    FGuid                                         VarGuid;                                                      // 0x0008(0x0010)
    FEdGraphPinType                               VarType;                                                      // 0x0018(0x0058)
    FString                                       FriendlyName;                                                 // 0x0070(0x0010)
    FText                                         Category;                                                     // 0x0080(0x0018)
    uint64_t                                      PropertyFlags;                                                // 0x0098(0x0008)
    FName                                         RepNotifyFunc;                                                // 0x00A0(0x0008)
    enum class ELifetimeCondition                 ReplicationCondition;                                         // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    TArray<FBPVariableMetaDataEntry>              MetaDataArray;                                                // 0x00B0(0x0010)
    FString                                       DefaultValue;                                                 // 0x00C0(0x0010)
};


// ScriptStruct  Engine.BPVariableMetaDataEntry
// Struct Size::0x0018
struct FBPVariableMetaDataEntry
{
    FName                                         DataKey;                                                      // 0x0000(0x0008)
    FString                                       DataValue;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.EdGraphPinType
// Struct Size::0x0058
struct FEdGraphPinType
{
    FName                                         PinCategory;                                                  // 0x0000(0x0008)
    FName                                         PinSubCategory;                                               // 0x0008(0x0008)
    TWeakObjectPtr<UObject>                       PinSubCategoryObject;                                         // 0x0010(0x0008)
    FSimpleMemberReference                        PinSubCategoryMemberReference;                                // 0x0018(0x0020)
    FEdGraphTerminalType                          PinValueType;                                                 // 0x0038(0x001C)
    enum class EPinContainerType                  ContainerType;                                                // 0x0054(0x0001)
    char                                          bIsArray;                                                     // 0x0055(0x0001)
    char                                          bIsReference;                                                 // 0x0055(0x0001)
    char                                          bIsConst;                                                     // 0x0055(0x0001)
    char                                          bIsWeakPointer;                                               // 0x0055(0x0001)
    char                                          pa_0056[0x0002]                                               // 0x0056(0x0002)
};


// ScriptStruct  Engine.EdGraphTerminalType
// Struct Size::0x001C
struct FEdGraphTerminalType
{
    FName                                         TerminalCategory;                                             // 0x0000(0x0008)
    FName                                         TerminalSubCategory;                                          // 0x0008(0x0008)
    TWeakObjectPtr<UObject>                       TerminalSubCategoryObject;                                    // 0x0010(0x0008)
    bool                                          bTerminalIsConst;                                             // 0x0018(0x0001)
    bool                                          bTerminalIsWeakPointer;                                       // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
};


// ScriptStruct  Engine.BlueprintMacroCosmeticInfo
// Struct Size::0x0001
struct FBlueprintMacroCosmeticInfo
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.CompilerNativizationOptions
// Struct Size::0x0080
struct FCompilerNativizationOptions
{
    FName                                         PlatformName;                                                 // 0x0000(0x0008)
    bool                                          ServerOnlyPlatform;                                           // 0x0008(0x0001)
    bool                                          ClientOnlyPlatform;                                           // 0x0009(0x0001)
    bool                                          bExcludeMonolithicHeaders;                                    // 0x000A(0x0001)
    char                                          pa_000B[0x0005]                                               // 0x000B(0x0005)
    TArray<FName>                                 ExcludedModules;                                              // 0x0010(0x0010)
    TSet<FSoftObjectPath>                         ExcludedAssets;                                               // 0x0020(0x0050)
    TArray<FString>                               ExcludedFolderPaths;                                          // 0x0070(0x0010)
};


// ScriptStruct  Engine.BPComponentClassOverride
// Struct Size::0x0010
struct FBPComponentClassOverride
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
    UObject*                                      ComponentClass;                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.BlueprintCookedComponentInstancingData
// Struct Size::0x0048
struct FBlueprintCookedComponentInstancingData
{
    TArray<FBlueprintComponentChangedPropertyInfo>ChangedPropertyList;                                          // 0x0000(0x0010)
    char                                          pa_0010[0x0011]                                               // 0x0010(0x0011)
    bool                                          bHasValidCookedData;                                          // 0x0021(0x0001)
    char                                          pa_0022[0x0026]                                               // 0x0022(0x0026)
};


// ScriptStruct  Engine.BlueprintComponentChangedPropertyInfo
// Struct Size::0x0018
struct FBlueprintComponentChangedPropertyInfo
{
    FName                                         PropertyName;                                                 // 0x0000(0x0008)
    int32_t                                       ArrayIndex;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    UStruct*                                      PropertyScope;                                                // 0x0010(0x0008)
};


// ScriptStruct  Engine.EventGraphFastCallPair
// Struct Size::0x0010
struct FEventGraphFastCallPair
{
    UFunction*                                    FunctionToPatch;                                              // 0x0000(0x0008)
    int32_t                                       EventGraphCallOffset;                                         // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.BlueprintDebugData
// Struct Size::0x0001
struct FBlueprintDebugData
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.PointerToUberGraphFrame
// Struct Size::0x0008
struct FPointerToUberGraphFrame
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.DebuggingInfoForSingleFunction
// Struct Size::0x0190
struct FDebuggingInfoForSingleFunction
{
    char                                          pa_0000[0x0190]                                               // 0x0000(0x0190)
};


// ScriptStruct  Engine.NodeToCodeAssociation
// Struct Size::0x0014
struct FNodeToCodeAssociation
{
    char                                          pa_0000[0x0014]                                               // 0x0000(0x0014)
};


// ScriptStruct  Engine.AnimCurveType
// Struct Size::0x0002
struct FAnimCurveType
{
    char                                          pa_0000[0x0002]                                               // 0x0000(0x0002)
};


// ScriptStruct  Engine.BookmarkBaseJumpToSettings
// Struct Size::0x0001
struct FBookmarkBaseJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.BookmarkJumpToSettings
// Struct Size::0x0001
struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
{
};


// ScriptStruct  Engine.Bookmark2DJumpToSettings
// Struct Size::0x0001
struct FBookmark2DJumpToSettings
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.GeomSelection
// Struct Size::0x000C
struct FGeomSelection
{
    int32_t                                       Type;                                                         // 0x0000(0x0004)
    int32_t                                       Index;                                                        // 0x0004(0x0004)
    int32_t                                       SelectionIndex;                                               // 0x0008(0x0004)
};


// ScriptStruct  Engine.BuilderPoly
// Struct Size::0x0020
struct FBuilderPoly
{
    TArray<int32_t>                               VertexIndices;                                                // 0x0000(0x0010)
    int32_t                                       Direction;                                                    // 0x0010(0x0004)
    FName                                         ItemName;                                                     // 0x0014(0x0008)
    int32_t                                       PolyFlags;                                                    // 0x001C(0x0004)
};


// ScriptStruct  Engine.CachedAnimTransitionData
// Struct Size::0x0024
struct FCachedAnimTransitionData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         FromStateName;                                                // 0x0008(0x0008)
    FName                                         ToStateName;                                                  // 0x0010(0x0008)
    char                                          pa_0018[0x000C]                                               // 0x0018(0x000C)
};


// ScriptStruct  Engine.CachedAnimRelevancyData
// Struct Size::0x001C
struct FCachedAnimRelevancyData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x000C]                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.CachedAnimAssetPlayerData
// Struct Size::0x0018
struct FCachedAnimAssetPlayerData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CachedAnimStateArray
// Struct Size::0x0018
struct FCachedAnimStateArray
{
    TArray<FCachedAnimStateData>                  States;                                                       // 0x0000(0x0010)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  Engine.CachedAnimStateData
// Struct Size::0x001C
struct FCachedAnimStateData
{
    FName                                         StateMachineName;                                             // 0x0000(0x0008)
    FName                                         StateName;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x000C]                                               // 0x0010(0x000C)
};


// ScriptStruct  Engine.ActiveCameraShakeInfo
// Struct Size::0x0010
struct FActiveCameraShakeInfo
{
    UCameraShake*                                 ShakeInstance;                                                // 0x0000(0x0008)
    TWeakObjectPtr<UCameraShakeSourceComponent>   ShakeSource;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.PooledCameraShakes
// Struct Size::0x0010
struct FPooledCameraShakes
{
    TArray<UCameraShake*>                         PooledShakes;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.VOscillator
// Struct Size::0x0024
struct FVOscillator
{
    FFOscillator                                  X;                                                            // 0x0000(0x000C)
    FFOscillator                                  Y;                                                            // 0x000C(0x000C)
    FFOscillator                                  Z;                                                            // 0x0018(0x000C)
};


// ScriptStruct  Engine.FOscillator
// Struct Size::0x000C
struct FFOscillator
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         Frequency;                                                    // 0x0004(0x0004)
    enum class EInitialOscillatorOffset           InitialOffset;                                                // 0x0008(0x0001)
    enum class EOscillatorWaveform                Waveform;                                                     // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.ROscillator
// Struct Size::0x0024
struct FROscillator
{
    FFOscillator                                  Pitch;                                                        // 0x0000(0x000C)
    FFOscillator                                  Yaw;                                                          // 0x000C(0x000C)
    FFOscillator                                  Roll;                                                         // 0x0018(0x000C)
};


// ScriptStruct  Engine.DummySpacerCameraTypes
// Struct Size::0x0001
struct FDummySpacerCameraTypes
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.CanvasIcon
// Struct Size::0x0018
struct FCanvasIcon
{
    UTexture*                                     Texture;                                                      // 0x0000(0x0008)
    float                                         U;                                                            // 0x0008(0x0004)
    float                                         V;                                                            // 0x000C(0x0004)
    float                                         UL;                                                           // 0x0010(0x0004)
    float                                         VL;                                                           // 0x0014(0x0004)
};


// ScriptStruct  Engine.WrappedStringElement
// Struct Size::0x0018
struct FWrappedStringElement
{
    FString                                       Value;                                                        // 0x0000(0x0010)
    FVector2D                                     LineExtent;                                                   // 0x0010(0x0008)
};


// ScriptStruct  Engine.TextSizingParameters
// Struct Size::0x0028
struct FTextSizingParameters
{
    float                                         DrawX;                                                        // 0x0000(0x0004)
    float                                         DrawY;                                                        // 0x0004(0x0004)
    float                                         DrawXL;                                                       // 0x0008(0x0004)
    float                                         DrawYL;                                                       // 0x000C(0x0004)
    FVector2D                                     Scaling;                                                      // 0x0010(0x0008)
    UFont*                                        DrawFont;                                                     // 0x0018(0x0008)
    FVector2D                                     SpacingAdjust;                                                // 0x0020(0x0008)
};


// ScriptStruct  Engine.ChildActorComponentInstanceData
// Struct Size::0x00D8
struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
{
    AActor*                                       ChildActorClass;                                              // 0x00A8(0x0008)
    FName                                         ChildActorName;                                               // 0x00B0(0x0008)
    TArray<FChildActorAttachedActorInfo>          AttachedActors;                                               // 0x00B8(0x0010)
    char                                          pa_00C8[0x0010]                                               // 0x00C8(0x0010)
};


// ScriptStruct  Engine.ChildActorAttachedActorInfo
// Struct Size::0x0040
struct FChildActorAttachedActorInfo
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    FName                                         SocketName;                                                   // 0x0008(0x0008)
    FTransform                                    RelativeTransform;                                            // 0x0010(0x0030)
};


// ScriptStruct  Engine.CustomProfile
// Struct Size::0x0018
struct FCustomProfile
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0008(0x0010)
};


// ScriptStruct  Engine.CustomChannelSetup
// Struct Size::0x000C
struct FCustomChannelSetup
{
    enum class ECollisionChannel                  Channel;                                                      // 0x0000(0x0001)
    enum class ECollisionResponse                 DefaultResponse;                                              // 0x0001(0x0001)
    bool                                          bTraceType;                                                   // 0x0002(0x0001)
    bool                                          bStaticObject;                                                // 0x0003(0x0001)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.CollisionResponseTemplate
// Struct Size::0x0048
struct FCollisionResponseTemplate
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class ECollisionEnabled                  CollisionEnabled;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0001]                                               // 0x0009(0x0001)
    bool                                          bCanModify;                                                   // 0x000A(0x0001)
    char                                          pa_000B[0x0021]                                               // 0x000B(0x0021)
    FName                                         ObjectTypeName;                                               // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    TArray<FResponseChannel>                      CustomResponses;                                              // 0x0038(0x0010)
};


// ScriptStruct  Engine.BlueprintComponentDelegateBinding
// Struct Size::0x0018
struct FBlueprintComponentDelegateBinding
{
    FName                                         ComponentPropertyName;                                        // 0x0000(0x0008)
    FName                                         DelegatePropertyName;                                         // 0x0008(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x0008)
};


// ScriptStruct  Engine.MeshUVChannelInfo
// Struct Size::0x0014
struct FMeshUVChannelInfo
{
    bool                                          bInitialized;                                                 // 0x0000(0x0001)
    bool                                          bOverrideDensities;                                           // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    float                                         LocalUVDensities;                                             // 0x0004(0x0004)
    char                                          pa_0008[0x000C]                                               // 0x0008(0x000C)
};


// ScriptStruct  Engine.AutoCompleteNode
// Struct Size::0x0028
struct FAutoCompleteNode
{
    int32_t                                       IndexChar;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               AutoCompleteListIndices;                                      // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.AngularDriveConstraint
// Struct Size::0x004C
struct FAngularDriveConstraint
{
    FConstraintDrive                              TwistDrive;                                                   // 0x0000(0x0010)
    FConstraintDrive                              SwingDrive;                                                   // 0x0010(0x0010)
    FConstraintDrive                              SlerpDrive;                                                   // 0x0020(0x0010)
    FRotator                                      OrientationTarget;                                            // 0x0030(0x000C)
    FVector                                       AngularVelocityTarget;                                        // 0x003C(0x000C)
    enum class EAngularDriveMode                  AngularDriveMode;                                             // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
};


// ScriptStruct  Engine.ConstraintDrive
// Struct Size::0x0010
struct FConstraintDrive
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         MaxForce;                                                     // 0x0008(0x0004)
    char                                          bEnablePositionDrive;                                         // 0x000C(0x0001)
    char                                          bEnableVelocityDrive;                                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.LinearDriveConstraint
// Struct Size::0x004C
struct FLinearDriveConstraint
{
    FVector                                       PositionTarget;                                               // 0x0000(0x000C)
    FVector                                       VelocityTarget;                                               // 0x000C(0x000C)
    FConstraintDrive                              XDrive;                                                       // 0x0018(0x0010)
    FConstraintDrive                              YDrive;                                                       // 0x0028(0x0010)
    FConstraintDrive                              ZDrive;                                                       // 0x0038(0x0010)
    char                                          bEnablePositionDrive;                                         // 0x0048(0x0001)
    char                                          pa_0049[0x0003]                                               // 0x0049(0x0003)
};


// ScriptStruct  Engine.ConstraintInstance
// Struct Size::0x01B8
struct FConstraintInstance
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
    FName                                         JointName;                                                    // 0x0018(0x0008)
    FName                                         ConstraintBone1;                                              // 0x0020(0x0008)
    FName                                         ConstraintBone2;                                              // 0x0028(0x0008)
    FVector                                       Pos1;                                                         // 0x0030(0x000C)
    FVector                                       PriAxis1;                                                     // 0x003C(0x000C)
    FVector                                       SecAxis1;                                                     // 0x0048(0x000C)
    FVector                                       Pos2;                                                         // 0x0054(0x000C)
    FVector                                       PriAxis2;                                                     // 0x0060(0x000C)
    FVector                                       SecAxis2;                                                     // 0x006C(0x000C)
    FRotator                                      AngularRotationOffset;                                        // 0x0078(0x000C)
    char                                          bScaleLinearLimits;                                           // 0x0084(0x0001)
    char                                          pa_0085[0x0007]                                               // 0x0085(0x0007)
    FConstraintProfileProperties                  ProfileInstance;                                              // 0x008C(0x0104)
    char                                          pa_0190[0x0028]                                               // 0x0190(0x0028)
};


// ScriptStruct  Engine.ConstraintProfileProperties
// Struct Size::0x0104
struct FConstraintProfileProperties
{
    float                                         ProjectionLinearTolerance;                                    // 0x0000(0x0004)
    float                                         ProjectionAngularTolerance;                                   // 0x0004(0x0004)
    float                                         LinearBreakThreshold;                                         // 0x0008(0x0004)
    float                                         AngularBreakThreshold;                                        // 0x000C(0x0004)
    FLinearConstraint                             LinearLimit;                                                  // 0x0010(0x001C)
    FConeConstraint                               ConeLimit;                                                    // 0x002C(0x0020)
    FTwistConstraint                              TwistLimit;                                                   // 0x004C(0x001C)
    FLinearDriveConstraint                        LinearDrive;                                                  // 0x0068(0x004C)
    FAngularDriveConstraint                       AngularDrive;                                                 // 0x00B4(0x004C)
    char                                          bDisableCollision;                                            // 0x0100(0x0001)
    char                                          bParentDominates;                                             // 0x0100(0x0001)
    char                                          bEnableProjection;                                            // 0x0100(0x0001)
    char                                          bAngularBreakable;                                            // 0x0100(0x0001)
    char                                          bLinearBreakable;                                             // 0x0100(0x0001)
    char                                          pa_0101[0x0003]                                               // 0x0101(0x0003)
};


// ScriptStruct  Engine.ConstraintBaseParams
// Struct Size::0x0014
struct FConstraintBaseParams
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         Damping;                                                      // 0x0004(0x0004)
    float                                         Restitution;                                                  // 0x0008(0x0004)
    float                                         ContactDistance;                                              // 0x000C(0x0004)
    char                                          bSoftConstraint;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.TwistConstraint
// Struct Size::0x001C
struct FTwistConstraint : public FConstraintBaseParams
{
    float                                         TwistLimitDegrees;                                            // 0x0014(0x0004)
    enum class EAngularConstraintMotion           TwistMotion;                                                  // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
};


// ScriptStruct  Engine.ConeConstraint
// Struct Size::0x0020
struct FConeConstraint : public FConstraintBaseParams
{
    float                                         Swing1LimitDegrees;                                           // 0x0014(0x0004)
    float                                         Swing2LimitDegrees;                                           // 0x0018(0x0004)
    enum class EAngularConstraintMotion           Swing1Motion;                                                 // 0x001C(0x0001)
    enum class EAngularConstraintMotion           Swing2Motion;                                                 // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
};


// ScriptStruct  Engine.LinearConstraint
// Struct Size::0x001C
struct FLinearConstraint : public FConstraintBaseParams
{
    float                                         Limit;                                                        // 0x0014(0x0004)
    enum class ELinearConstraintMotion            XMotion;                                                      // 0x0018(0x0001)
    enum class ELinearConstraintMotion            YMotion;                                                      // 0x0019(0x0001)
    enum class ELinearConstraintMotion            ZMotion;                                                      // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.CullDistanceSizePair
// Struct Size::0x0008
struct FCullDistanceSizePair
{
    float                                         Size;                                                         // 0x0000(0x0004)
    float                                         CullDistance;                                                 // 0x0004(0x0004)
};


// ScriptStruct  Engine.NamedCurveValue
// Struct Size::0x000C
struct FNamedCurveValue
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    float                                         Value;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.DataTableCategoryHandle
// Struct Size::0x0018
struct FDataTableCategoryHandle
{
    UDataTable*                                   DataTable;                                                    // 0x0000(0x0008)
    FName                                         ColumnName;                                                   // 0x0008(0x0008)
    FName                                         RowContents;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Engine.DebugCameraControllerSettingsViewModeIndex
// Struct Size::0x0010
struct FDebugCameraControllerSettingsViewModeIndex
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    enum class EViewModeIndex                     ViewModeIndex;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.DebugDisplayProperty
// Struct Size::0x0020
struct FDebugDisplayProperty
{
    UObject*                                      Obj;                                                          // 0x0000(0x0008)
    UObject*                                      WithinClass;                                                  // 0x0008(0x0008)
    char                                          pa_0010[0x0010]                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.MulticastRecordOptions
// Struct Size::0x0018
struct FMulticastRecordOptions
{
    FString                                       FuncPathName;                                                 // 0x0000(0x0010)
    bool                                          bServerSkip;                                                  // 0x0010(0x0001)
    bool                                          bClientSkip;                                                  // 0x0011(0x0001)
    char                                          pa_0012[0x0006]                                               // 0x0012(0x0006)
};


// ScriptStruct  Engine.RollbackNetStartupActorInfo
// Struct Size::0x00B0
struct FRollbackNetStartupActorInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    UObject*                                      Archetype;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0090]                                               // 0x0010(0x0090)
    TArray<UObject*>                              ObjReferences;                                                // 0x00A0(0x0010)
};


// ScriptStruct  Engine.MeshDeviceLODSettings
// Struct Size::0x000C
struct FMeshDeviceLODSettings
{
    FName                                         LODGroupName;                                                 // 0x0000(0x0008)
    int32_t                                       MinLODToLoad;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Engine.DialogueWaveParameter
// Struct Size::0x0020
struct FDialogueWaveParameter
{
    UDialogueWave*                                DialogueWave;                                                 // 0x0000(0x0008)
    FDialogueContext                              Context;                                                      // 0x0008(0x0018)
};


// ScriptStruct  Engine.DialogueContext
// Struct Size::0x0018
struct FDialogueContext
{
    UDialogueVoice*                               Speaker;                                                      // 0x0000(0x0008)
    TArray<UDialogueVoice*>                       Targets;                                                      // 0x0008(0x0010)
};


// ScriptStruct  Engine.DialogueContextMapping
// Struct Size::0x0038
struct FDialogueContextMapping
{
    FDialogueContext                              Context;                                                      // 0x0000(0x0018)
    USoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
    FString                                       LocalizationKeyFormat;                                        // 0x0020(0x0010)
    UDialogueSoundWaveProxy*                      Proxy;                                                        // 0x0030(0x0008)
};


// ScriptStruct  Engine.RawDistributionFloat
// Struct Size::0x0030
struct FRawDistributionFloat : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    UDistributionFloat*                           Distribution;                                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.RawDistributionVector
// Struct Size::0x0048
struct FRawDistributionVector : public FRawDistribution
{
    float                                         MinValue;                                                     // 0x0020(0x0004)
    float                                         MaxValue;                                                     // 0x0024(0x0004)
    FVector                                       MinValueVec;                                                  // 0x0028(0x000C)
    FVector                                       MaxValueVec;                                                  // 0x0034(0x000C)
    UDistributionVector*                          Distribution;                                                 // 0x0040(0x0008)
};


// ScriptStruct  Engine.GraphReference
// Struct Size::0x0020
struct FGraphReference
{
    UEdGraph*                                     MacroGraph;                                                   // 0x0000(0x0008)
    UBlueprint*                                   GraphBlueprint;                                               // 0x0008(0x0008)
    FGuid                                         GraphGuid;                                                    // 0x0010(0x0010)
};


// ScriptStruct  Engine.EdGraphPinReference
// Struct Size::0x0018
struct FEdGraphPinReference
{
    TWeakObjectPtr<UEdGraphNode>                  OwningNode;                                                   // 0x0000(0x0008)
    FGuid                                         PinId;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction
// Struct Size::0x0100
struct FEdGraphSchemaAction
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FText                                         MenuDescription;                                              // 0x0008(0x0018)
    FText                                         TooltipDescription;                                           // 0x0020(0x0018)
    FText                                         Category;                                                     // 0x0038(0x0018)
    FText                                         Keywords;                                                     // 0x0050(0x0018)
    int32_t                                       Grouping;                                                     // 0x0068(0x0004)
    int32_t                                       SectionID;                                                    // 0x006C(0x0004)
    TArray<FString>                               MenuDescriptionArray;                                         // 0x0070(0x0010)
    TArray<FString>                               FullSearchTitlesArray;                                        // 0x0080(0x0010)
    TArray<FString>                               FullSearchKeywordsArray;                                      // 0x0090(0x0010)
    TArray<FString>                               FullSearchCategoryArray;                                      // 0x00A0(0x0010)
    TArray<FString>                               LocalizedMenuDescriptionArray;                                // 0x00B0(0x0010)
    TArray<FString>                               LocalizedFullSearchTitlesArray;                               // 0x00C0(0x0010)
    TArray<FString>                               LocalizedFullSearchKeywordsArray;                             // 0x00D0(0x0010)
    TArray<FString>                               LocalizedFullSearchCategoryArray;                             // 0x00E0(0x0010)
    FString                                       SearchText;                                                   // 0x00F0(0x0010)
};


// ScriptStruct  Engine.EdGraphSchemaAction_NewNode
// Struct Size::0x0108
struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
{
    UEdGraphNode*                                 NodeTemplate;                                                 // 0x0100(0x0008)
};


// ScriptStruct  Engine.PluginRedirect
// Struct Size::0x0020
struct FPluginRedirect
{
    FString                                       OldPluginName;                                                // 0x0000(0x0010)
    FString                                       NewPluginName;                                                // 0x0010(0x0010)
};


// ScriptStruct  Engine.StructRedirect
// Struct Size::0x0010
struct FStructRedirect
{
    FName                                         OldStructName;                                                // 0x0000(0x0008)
    FName                                         NewStructName;                                                // 0x0008(0x0008)
};


// ScriptStruct  Engine.ClassRedirect
// Struct Size::0x003C
struct FClassRedirect
{
    FName                                         ObjectName;                                                   // 0x0000(0x0008)
    FName                                         OldClassName;                                                 // 0x0008(0x0008)
    FName                                         NewClassName;                                                 // 0x0010(0x0008)
    FName                                         OldSubobjName;                                                // 0x0018(0x0008)
    FName                                         NewSubobjName;                                                // 0x0020(0x0008)
    FName                                         NewClassClass;                                                // 0x0028(0x0008)
    FName                                         NewClassPackage;                                              // 0x0030(0x0008)
    bool                                          InstanceOnly;                                                 // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
};


// ScriptStruct  Engine.GameNameRedirect
// Struct Size::0x0010
struct FGameNameRedirect
{
    FName                                         OldGameName;                                                  // 0x0000(0x0008)
    FName                                         NewGameName;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.ScreenMessageString
// Struct Size::0x0030
struct FScreenMessageString
{
    uint64_t                                      Key;                                                          // 0x0000(0x0008)
    FString                                       ScreenMessage;                                                // 0x0008(0x0010)
    FColor                                        DisplayColor;                                                 // 0x0018(0x0004)
    float                                         TimeToDisplay;                                                // 0x001C(0x0004)
    float                                         CurrentTimeDisplayed;                                         // 0x0020(0x0004)
    FVector2D                                     TextScale;                                                    // 0x0024(0x0008)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.DropNoteInfo
// Struct Size::0x0028
struct FDropNoteInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    FString                                       Comment;                                                      // 0x0018(0x0010)
};


// ScriptStruct  Engine.StatColorMapping
// Struct Size::0x0028
struct FStatColorMapping
{
    FString                                       StatName;                                                     // 0x0000(0x0010)
    TArray<FStatColorMapEntry>                    ColorMap;                                                     // 0x0010(0x0010)
    char                                          DisableBlend;                                                 // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.StatColorMapEntry
// Struct Size::0x0008
struct FStatColorMapEntry
{
    float                                         In;                                                           // 0x0000(0x0004)
    FColor                                        Out;                                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.WorldContext
// Struct Size::0x0280
struct FWorldContext
{
    char                                          pa_0000[0x00D0]                                               // 0x0000(0x00D0)
    FURL                                          LastURL;                                                      // 0x00D0(0x0068)
    FURL                                          LastRemoteURL;                                                // 0x0138(0x0068)
    UPendingNetGame*                              PendingNetGame;                                               // 0x01A0(0x0008)
    TArray<FFullyLoadedPackagesInfo>              PackagesToFullyLoad;                                          // 0x01A8(0x0010)
    char                                          pa_01B8[0x0010]                                               // 0x01B8(0x0010)
    TArray<ULevel*>                               LoadedLevelsForPendingMapChange;                              // 0x01C8(0x0010)
    char                                          pa_01D8[0x0018]                                               // 0x01D8(0x0018)
    TArray<UObjectReferencer*>                    ObjectReferencers;                                            // 0x01F0(0x0010)
    TArray<FLevelStreamingStatus>                 PendingLevelStreamingStatusUpdates;                           // 0x0200(0x0010)
    UGameViewportClient*                          GameViewport;                                                 // 0x0210(0x0008)
    UGameInstance*                                OwningGameInstance;                                           // 0x0218(0x0008)
    TArray<FNamedNetDriver>                       ActiveNetDrivers;                                             // 0x0220(0x0010)
    char                                          pa_0230[0x0050]                                               // 0x0230(0x0050)
};


// ScriptStruct  Engine.NamedNetDriver
// Struct Size::0x0010
struct FNamedNetDriver
{
    UNetDriver*                                   NetDriver;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.LevelStreamingStatus
// Struct Size::0x0010
struct FLevelStreamingStatus
{
    FName                                         PackageName;                                                  // 0x0000(0x0008)
    char                                          bShouldBeLoaded;                                              // 0x0008(0x0001)
    char                                          bShouldBeVisible;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    uint32_t                                      LODIndex;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.FullyLoadedPackagesInfo
// Struct Size::0x0038
struct FFullyLoadedPackagesInfo
{
    enum class EFullyLoadPackageType              FullyLoadType;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       Tag;                                                          // 0x0008(0x0010)
    TArray<FName>                                 PackagesToLoad;                                               // 0x0018(0x0010)
    TArray<UObject*>                              LoadedObjects;                                                // 0x0028(0x0010)
};


// ScriptStruct  Engine.URL
// Struct Size::0x0068
struct FURL
{
    FString                                       Protocol;                                                     // 0x0000(0x0010)
    FString                                       Host;                                                         // 0x0010(0x0010)
    int32_t                                       Port;                                                         // 0x0020(0x0004)
    int32_t                                       Valid;                                                        // 0x0024(0x0004)
    FString                                       Map;                                                          // 0x0028(0x0010)
    FString                                       RedirectURL;                                                  // 0x0038(0x0010)
    TArray<FString>                               Op;                                                           // 0x0048(0x0010)
    FString                                       Portal;                                                       // 0x0058(0x0010)
};


// ScriptStruct  Engine.NetDriverDefinition
// Struct Size::0x0018
struct FNetDriverDefinition
{
    FName                                         DefName;                                                      // 0x0000(0x0008)
    FName                                         DriverClassName;                                              // 0x0008(0x0008)
    FName                                         DriverClassNameFallback;                                      // 0x0010(0x0008)
};


// ScriptStruct  Engine.ExposureSettings
// Struct Size::0x0008
struct FExposureSettings
{
    float                                         FixedEV100;                                                   // 0x0000(0x0004)
    bool                                          bFixed;                                                       // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.TickPrerequisite
// Struct Size::0x0010
struct FTickPrerequisite
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.CanvasUVTri
// Struct Size::0x0060
struct FCanvasUVTri
{
    FVector2D                                     V0_Pos;                                                       // 0x0000(0x0008)
    FVector2D                                     V0_UV;                                                        // 0x0008(0x0008)
    FLinearColor                                  V0_Color;                                                     // 0x0010(0x0010)
    FVector2D                                     V1_Pos;                                                       // 0x0020(0x0008)
    FVector2D                                     V1_UV;                                                        // 0x0028(0x0008)
    FLinearColor                                  V1_Color;                                                     // 0x0030(0x0010)
    FVector2D                                     V2_Pos;                                                       // 0x0040(0x0008)
    FVector2D                                     V2_UV;                                                        // 0x0048(0x0008)
    FLinearColor                                  V2_Color;                                                     // 0x0050(0x0010)
};


// ScriptStruct  Engine.FontRenderInfo
// Struct Size::0x0028
struct FFontRenderInfo
{
    char                                          bClipText;                                                    // 0x0000(0x0001)
    char                                          bEnableShadow;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FDepthFieldGlowInfo                           GlowInfo;                                                     // 0x0004(0x0024)
};


// ScriptStruct  Engine.DepthFieldGlowInfo
// Struct Size::0x0024
struct FDepthFieldGlowInfo
{
    char                                          bEnableGlow;                                                  // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FLinearColor                                  GlowColor;                                                    // 0x0004(0x0010)
    FVector2D                                     GlowOuterRadius;                                              // 0x0014(0x0008)
    FVector2D                                     GlowInnerRadius;                                              // 0x001C(0x0008)
};


// ScriptStruct  Engine.Redirector
// Struct Size::0x0010
struct FRedirector
{
    FName                                         OldName;                                                      // 0x0000(0x0008)
    FName                                         NewName;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Engine.CollectionReference
// Struct Size::0x0008
struct FCollectionReference
{
    FName                                         CollectionName;                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.ComponentReference
// Struct Size::0x0028
struct FComponentReference
{
    AActor*                                       OtherActor;                                                   // 0x0000(0x0008)
    FName                                         ComponentProperty;                                            // 0x0008(0x0008)
    FString                                       PathToComponent;                                              // 0x0010(0x0010)
    char                                          pa_0020[0x0008]                                               // 0x0020(0x0008)
};


// ScriptStruct  Engine.ConstrainComponentPropName
// Struct Size::0x0008
struct FConstrainComponentPropName
{
    FName                                         ComponentName;                                                // 0x0000(0x0008)
};


// ScriptStruct  Engine.RadialDamageEvent
// Struct Size::0x0040
struct FRadialDamageEvent : public FDamageEvent
{
    FRadialDamageParams                           Params;                                                       // 0x0010(0x0014)
    FVector                                       Origin;                                                       // 0x0024(0x000C)
    TArray<FHitResult>                            ComponentHits;                                                // 0x0030(0x0010)
};


// ScriptStruct  Engine.RadialDamageParams
// Struct Size::0x0014
struct FRadialDamageParams
{
    float                                         BaseDamage;                                                   // 0x0000(0x0004)
    float                                         MinimumDamage;                                                // 0x0004(0x0004)
    float                                         InnerRadius;                                                  // 0x0008(0x0004)
    float                                         OuterRadius;                                                  // 0x000C(0x0004)
    float                                         DamageFalloff;                                                // 0x0010(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshBuildSettings
// Struct Size::0x0014
struct FSkeletalMeshBuildSettings
{
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0000(0x0001)
    char                                          bBuildAdjacencyBuffer;                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         ThresholdPosition;                                            // 0x0004(0x0004)
    float                                         ThresholdTangentNormal;                                       // 0x0008(0x0004)
    float                                         ThresholdUV;                                                  // 0x000C(0x0004)
    float                                         MorphThresholdPosition;                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.MeshBuildSettings
// Struct Size::0x0030
struct FMeshBuildSettings
{
    char                                          bUseMikkTSpace;                                               // 0x0000(0x0001)
    char                                          bRecomputeNormals;                                            // 0x0000(0x0001)
    char                                          bRecomputeTangents;                                           // 0x0000(0x0001)
    char                                          bComputeWeightedNormals;                                      // 0x0000(0x0001)
    char                                          bRemoveDegenerates;                                           // 0x0000(0x0001)
    char                                          bBuildAdjacencyBuffer;                                        // 0x0000(0x0001)
    char                                          bBuildReversedIndexBuffer;                                    // 0x0000(0x0001)
    char                                          bUseHighPrecisionTangentBasis;                                // 0x0000(0x0001)
    char                                          bUseFullPrecisionUVs;                                         // 0x0001(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x0001(0x0001)
    char                                          bGenerateDistanceFieldAsIfTwoSided;                           // 0x0001(0x0001)
    char                                          bSupportFaceRemap;                                            // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
    int32_t                                       MinLightmapResolution;                                        // 0x0004(0x0004)
    int32_t                                       SrcLightmapIndex;                                             // 0x0008(0x0004)
    int32_t                                       DstLightmapIndex;                                             // 0x000C(0x0004)
    float                                         BuildScale;                                                   // 0x0010(0x0004)
    FVector                                       BuildScale3D;                                                 // 0x0014(0x000C)
    float                                         DistanceFieldResolutionScale;                                 // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    UStaticMesh*                                  DistanceFieldReplacementMesh;                                 // 0x0028(0x0008)
};


// ScriptStruct  Engine.POV
// Struct Size::0x001C
struct FPOV
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FRotator                                      Rotation;                                                     // 0x000C(0x000C)
    float                                         FOV;                                                          // 0x0018(0x0004)
};


// ScriptStruct  Engine.AnimUpdateRateParameters
// Struct Size::0x0088
struct FAnimUpdateRateParameters
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
    enum class EUpdateRateShiftBucket             ShiftBucket;                                                  // 0x0001(0x0001)
    char                                          bInterpolateSkippedFrames;                                    // 0x0002(0x0001)
    char                                          bShouldUseLodMap;                                             // 0x0002(0x0001)
    char                                          bShouldUseMinLod;                                             // 0x0002(0x0001)
    char                                          bSkipUpdate;                                                  // 0x0002(0x0001)
    char                                          bSkipEvaluation;                                              // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    int32_t                                       UpdateRate;                                                   // 0x0004(0x0004)
    int32_t                                       EvaluationRate;                                               // 0x0008(0x0004)
    float                                         TickedPoseOffestTime;                                         // 0x000C(0x0004)
    float                                         AdditionalTime;                                               // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    int32_t                                       BaseNonRenderedUpdateRate;                                    // 0x0018(0x0004)
    int32_t                                       MaxEvalRateForInterpolation;                                  // 0x001C(0x0004)
    TArray<float>                                 BaseVisibleDistanceFactorThesholds;                           // 0x0020(0x0010)
    TMap<int32_t,int32_t>                         LODToFrameSkipMap;                                            // 0x0030(0x0050)
    int32_t                                       SkippedUpdateFrames;                                          // 0x0080(0x0004)
    int32_t                                       SkippedEvalFrames;                                            // 0x0084(0x0004)
};


// ScriptStruct  Engine.AnimSlotDesc
// Struct Size::0x000C
struct FAnimSlotDesc
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    int32_t                                       NumChannels;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Engine.AnimSlotInfo
// Struct Size::0x0018
struct FAnimSlotInfo
{
    FName                                         SlotName;                                                     // 0x0000(0x0008)
    TArray<float>                                 ChannelWeights;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.MTDResult
// Struct Size::0x0010
struct FMTDResult
{
    FVector                                       Direction;                                                    // 0x0000(0x000C)
    float                                         Distance;                                                     // 0x000C(0x0004)
};


// ScriptStruct  Engine.OverlapResult
// Struct Size::0x0018
struct FOverlapResult
{
    TWeakObjectPtr<AActor>                        Actor;                                                        // 0x0000(0x0008)
    TWeakObjectPtr<UPrimitiveComponent>           Component;                                                    // 0x0008(0x0008)
    char                                          pa_0010[0x0004]                                               // 0x0010(0x0004)
    char                                          bBlockingHit;                                                 // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  Engine.PrimitiveMaterialRef
// Struct Size::0x0018
struct FPrimitiveMaterialRef
{
    UPrimitiveComponent*                          Primitive;                                                    // 0x0000(0x0008)
    UDecalComponent*                              Decal;                                                        // 0x0008(0x0008)
    int32_t                                       ElementIndex;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SwarmDebugOptions
// Struct Size::0x0004
struct FSwarmDebugOptions
{
    char                                          bDistributionEnabled;                                         // 0x0000(0x0001)
    char                                          bForceContentExport;                                          // 0x0000(0x0001)
    char                                          bInitialized;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.LightmassDebugOptions
// Struct Size::0x0010
struct FLightmassDebugOptions
{
    char                                          bDebugMode;                                                   // 0x0000(0x0001)
    char                                          bStatsEnabled;                                                // 0x0000(0x0001)
    char                                          bGatherBSPSurfacesAcrossComponents;                           // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         CoplanarTolerance;                                            // 0x0004(0x0004)
    char                                          bUseImmediateImport;                                          // 0x0008(0x0001)
    char                                          bImmediateProcessMappings;                                    // 0x0008(0x0001)
    char                                          bSortMappings;                                                // 0x0008(0x0001)
    char                                          bDumpBinaryFiles;                                             // 0x0008(0x0001)
    char                                          bDebugMaterials;                                              // 0x0008(0x0001)
    char                                          bPadMappings;                                                 // 0x0008(0x0001)
    char                                          bDebugPaddings;                                               // 0x0008(0x0001)
    char                                          bOnlyCalcDebugTexelMappings;                                  // 0x0008(0x0001)
    char                                          bUseRandomColors;                                             // 0x0009(0x0001)
    char                                          bColorBordersGreen;                                           // 0x0009(0x0001)
    char                                          bColorByExecutionTime;                                        // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
    float                                         ExecutionTimeDivisor;                                         // 0x000C(0x0004)
};


// ScriptStruct  Engine.LightmassPrimitiveSettings
// Struct Size::0x0018
struct FLightmassPrimitiveSettings
{
    char                                          bUseTwoSidedLighting;                                         // 0x0000(0x0001)
    char                                          bShadowIndirectOnly;                                          // 0x0000(0x0001)
    char                                          bUseEmissiveForStaticLighting;                                // 0x0000(0x0001)
    char                                          bUseVertexNormalForHemisphereGather;                          // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         EmissiveLightFalloffExponent;                                 // 0x0004(0x0004)
    float                                         EmissiveLightExplicitInfluenceRadius;                         // 0x0008(0x0004)
    float                                         EmissiveBoost;                                                // 0x000C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0010(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0014(0x0004)
};


// ScriptStruct  Engine.LightmassLightSettings
// Struct Size::0x000C
struct FLightmassLightSettings
{
    float                                         IndirectLightingSaturation;                                   // 0x0000(0x0004)
    float                                         ShadowExponent;                                               // 0x0004(0x0004)
    bool                                          bUseAreaShadowsForStationaryLight;                            // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.LightmassDirectionalLightSettings
// Struct Size::0x0010
struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
{
    float                                         LightSourceAngle;                                             // 0x000C(0x0004)
};


// ScriptStruct  Engine.LightmassPointLightSettings
// Struct Size::0x000C
struct FLightmassPointLightSettings : public FLightmassLightSettings
{
};


// ScriptStruct  Engine.BasedPosition
// Struct Size::0x0038
struct FBasedPosition
{
    AActor*                                       Base;                                                         // 0x0000(0x0008)
    FVector                                       Position;                                                     // 0x0008(0x000C)
    FVector                                       CachedBaseLocation;                                           // 0x0014(0x000C)
    FRotator                                      CachedBaseRotation;                                           // 0x0020(0x000C)
    FVector                                       CachedTransPosition;                                          // 0x002C(0x000C)
};


// ScriptStruct  Engine.FractureEffect
// Struct Size::0x0010
struct FFractureEffect
{
    UParticleSystem*                              ParticleSystem;                                               // 0x0000(0x0008)
    USoundBase*                                   Sound;                                                        // 0x0008(0x0008)
};


// ScriptStruct  Engine.CollisionImpactData
// Struct Size::0x0028
struct FCollisionImpactData
{
    TArray<FRigidBodyContactInfo>                 ContactInfos;                                                 // 0x0000(0x0010)
    FVector                                       TotalNormalImpulse;                                           // 0x0010(0x000C)
    FVector                                       TotalFrictionImpulse;                                         // 0x001C(0x000C)
};


// ScriptStruct  Engine.RigidBodyContactInfo
// Struct Size::0x0030
struct FRigidBodyContactInfo
{
    FVector                                       ContactPosition;                                              // 0x0000(0x000C)
    FVector                                       ContactNormal;                                                // 0x000C(0x000C)
    float                                         ContactPenetration;                                           // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UPhysicalMaterial*                            PhysMaterial;                                                 // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.RigidBodyErrorCorrection
// Struct Size::0x0034
struct FRigidBodyErrorCorrection
{
    float                                         PingExtrapolation;                                            // 0x0000(0x0004)
    float                                         PingLimit;                                                    // 0x0004(0x0004)
    float                                         ErrorPerLinearDifference;                                     // 0x0008(0x0004)
    float                                         ErrorPerAngularDifference;                                    // 0x000C(0x0004)
    float                                         MaxRestoredStateError;                                        // 0x0010(0x0004)
    float                                         MaxLinearHardSnapDistance;                                    // 0x0014(0x0004)
    float                                         PositionLerp;                                                 // 0x0018(0x0004)
    float                                         AngleLerp;                                                    // 0x001C(0x0004)
    float                                         LinearVelocityCoefficient;                                    // 0x0020(0x0004)
    float                                         AngularVelocityCoefficient;                                   // 0x0024(0x0004)
    float                                         ErrorAccumulationSeconds;                                     // 0x0028(0x0004)
    float                                         ErrorAccumulationDistanceSq;                                  // 0x002C(0x0004)
    float                                         ErrorAccumulationSimilarity;                                  // 0x0030(0x0004)
};


// ScriptStruct  Engine.RigidBodyState
// Struct Size::0x0040
struct FRigidBodyState
{
    FVector_NetQuantize100                        Position;                                                     // 0x0000(0x000C)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FQuat                                         Quaternion;                                                   // 0x0010(0x0010)
    FVector_NetQuantize100                        LinVel;                                                       // 0x0020(0x000C)
    FVector_NetQuantize100                        AngVel;                                                       // 0x002C(0x000C)
    char                                          Flags;                                                        // 0x0038(0x0001)
    char                                          pa_0039[0x0007]                                               // 0x0039(0x0007)
};


// ScriptStruct  Engine.MaterialShadingModelField
// Struct Size::0x0002
struct FMaterialShadingModelField
{
    uint16_t                                      ShadingModelField;                                            // 0x0000(0x0002)
};


// ScriptStruct  Engine.SLDirectionalLightScattering
// Struct Size::0x0020
struct FSLDirectionalLightScattering
{
    float                                         DirectionalInscatteringExponent_M;                            // 0x0000(0x0004)
    float                                         DirectionalInscatteringStartDistance_M;                       // 0x0004(0x0004)
    float                                         DirectionalInscatteringMaxDistance_M;                         // 0x0008(0x0004)
    FLinearColor                                  DirectionalInscatteringColor_M;                               // 0x000C(0x0010)
    float                                         DirectionalInscatteringGamma_M;                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.SLHeightFogData
// Struct Size::0x0010
struct FSLHeightFogData
{
    float                                         HFogHeight;                                                   // 0x0000(0x0004)
    float                                         HFogHeightFalloff;                                            // 0x0004(0x0004)
    float                                         HStartDistance;                                               // 0x0008(0x0004)
    float                                         HMaxFadingDistance;                                           // 0x000C(0x0004)
};


// ScriptStruct  Engine.SLDistanceFogData
// Struct Size::0x0018
struct FSLDistanceFogData
{
    float                                         DFogHeight;                                                   // 0x0000(0x0004)
    float                                         DFogFallOff;                                                  // 0x0004(0x0004)
    float                                         DMaxDistance;                                                 // 0x0008(0x0004)
    float                                         DFogGamma;                                                    // 0x000C(0x0004)
    float                                         DMaxOpacity;                                                  // 0x0010(0x0004)
    float                                         DStartDistance;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.ExponentialHeightFogData
// Struct Size::0x000C
struct FExponentialHeightFogData
{
    float                                         FogDensity;                                                   // 0x0000(0x0004)
    float                                         FogHeightFalloff;                                             // 0x0004(0x0004)
    float                                         FogHeightOffset;                                              // 0x0008(0x0004)
};


// ScriptStruct  Engine.FontCharacter
// Struct Size::0x0018
struct FFontCharacter
{
    int32_t                                       StartU;                                                       // 0x0000(0x0004)
    int32_t                                       StartV;                                                       // 0x0004(0x0004)
    int32_t                                       USize;                                                        // 0x0008(0x0004)
    int32_t                                       VSize;                                                        // 0x000C(0x0004)
    char                                          TextureIndex;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    int32_t                                       VerticalOffset;                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.FontImportOptionsData
// Struct Size::0x00B0
struct FFontImportOptionsData
{
    FString                                       FontName;                                                     // 0x0000(0x0010)
    float                                         Height;                                                       // 0x0010(0x0004)
    char                                          bEnableAntialiasing;                                          // 0x0014(0x0001)
    char                                          bEnableBold;                                                  // 0x0014(0x0001)
    char                                          bEnableItalic;                                                // 0x0014(0x0001)
    char                                          bEnableUnderline;                                             // 0x0014(0x0001)
    char                                          bAlphaOnly;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    enum class EFontImportCharacterSet            CharacterSet;                                                 // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
    FString                                       Chars;                                                        // 0x0020(0x0010)
    FString                                       UnicodeRange;                                                 // 0x0030(0x0010)
    FString                                       CharsFilePath;                                                // 0x0040(0x0010)
    FString                                       CharsFileWildcard;                                            // 0x0050(0x0010)
    char                                          bCreatePrintableOnly;                                         // 0x0060(0x0001)
    char                                          bIncludeASCIIRange;                                           // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    FLinearColor                                  ForegroundColor;                                              // 0x0064(0x0010)
    char                                          bEnableDropShadow;                                            // 0x0074(0x0001)
    char                                          pa_0075[0x0003]                                               // 0x0075(0x0003)
    int32_t                                       TexturePageWidth;                                             // 0x0078(0x0004)
    int32_t                                       TexturePageMaxHeight;                                         // 0x007C(0x0004)
    int32_t                                       XPadding;                                                     // 0x0080(0x0004)
    int32_t                                       YPadding;                                                     // 0x0084(0x0004)
    int32_t                                       ExtendBoxTop;                                                 // 0x0088(0x0004)
    int32_t                                       ExtendBoxBottom;                                              // 0x008C(0x0004)
    int32_t                                       ExtendBoxRight;                                               // 0x0090(0x0004)
    int32_t                                       ExtendBoxLeft;                                                // 0x0094(0x0004)
    char                                          bEnableLegacyMode;                                            // 0x0098(0x0001)
    char                                          pa_0099[0x0003]                                               // 0x0099(0x0003)
    int32_t                                       Kerning;                                                      // 0x009C(0x0004)
    char                                          bUseDistanceFieldAlpha;                                       // 0x00A0(0x0001)
    char                                          pa_00A1[0x0003]                                               // 0x00A1(0x0003)
    int32_t                                       DistanceFieldScaleFactor;                                     // 0x00A4(0x0004)
    float                                         DistanceFieldScanRadiusScale;                                 // 0x00A8(0x0004)
    char                                          pa_00AC[0x0004]                                               // 0x00AC(0x0004)
};


// ScriptStruct  Engine.ForceFeedbackAttenuationSettings
// Struct Size::0x00B0
struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
{
};


// ScriptStruct  Engine.ForceFeedbackChannelDetails
// Struct Size::0x0090
struct FForceFeedbackChannelDetails
{
    char                                          bAffectsLeftLarge;                                            // 0x0000(0x0001)
    char                                          bAffectsLeftSmall;                                            // 0x0000(0x0001)
    char                                          bAffectsRightLarge;                                           // 0x0000(0x0001)
    char                                          bAffectsRightSmall;                                           // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FRuntimeFloatCurve                            Curve;                                                        // 0x0008(0x0088)
};


// ScriptStruct  Engine.PredictProjectilePathResult
// Struct Size::0x00B8
struct FPredictProjectilePathResult
{
    TArray<FPredictProjectilePathPointData>       PathData;                                                     // 0x0000(0x0010)
    FPredictProjectilePathPointData               LastTraceDestination;                                         // 0x0010(0x001C)
    FHitResult                                    HitResult;                                                    // 0x002C(0x0088)
    char                                          pa_00B4[0x0004]                                               // 0x00B4(0x0004)
};


// ScriptStruct  Engine.PredictProjectilePathPointData
// Struct Size::0x001C
struct FPredictProjectilePathPointData
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    FVector                                       Velocity;                                                     // 0x000C(0x000C)
    float                                         Time;                                                         // 0x0018(0x0004)
};


// ScriptStruct  Engine.PredictProjectilePathParams
// Struct Size::0x0070
struct FPredictProjectilePathParams
{
    FVector                                       StartLocation;                                                // 0x0000(0x000C)
    FVector                                       LaunchVelocity;                                               // 0x000C(0x000C)
    bool                                          bTraceWithCollision;                                          // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         ProjectileRadius;                                             // 0x001C(0x0004)
    float                                         MaxSimTime;                                                   // 0x0020(0x0004)
    bool                                          bTraceWithChannel;                                            // 0x0024(0x0001)
    enum class ECollisionChannel                  TraceChannel;                                                 // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    TArray<enum class EObjectTypeQuery>           ObjectTypes;                                                  // 0x0028(0x0010)
    TArray<FName>                                 OnlyInfluencedActorTags;                                      // 0x0038(0x0010)
    TArray<AActor*>                               ActorsToIgnore;                                               // 0x0048(0x0010)
    float                                         SimFrequency;                                                 // 0x0058(0x0004)
    float                                         OverrideGravityZ;                                             // 0x005C(0x0004)
    enum class EDrawDebugTrace                    DrawDebugType;                                                // 0x0060(0x0001)
    char                                          pa_0061[0x0003]                                               // 0x0061(0x0003)
    float                                         DrawDebugTime;                                                // 0x0064(0x0004)
    bool                                          bTraceComplex;                                                // 0x0068(0x0001)
    char                                          pa_0069[0x0007]                                               // 0x0069(0x0007)
};


// ScriptStruct  Engine.ActiveHapticFeedbackEffect
// Struct Size::0x0018
struct FActiveHapticFeedbackEffect
{
    UHapticFeedbackEffect_Base*                   HapticEffect;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.HapticFeedbackDetails_Curve
// Struct Size::0x0110
struct FHapticFeedbackDetails_Curve
{
    FRuntimeFloatCurve                            Frequency;                                                    // 0x0000(0x0088)
    FRuntimeFloatCurve                            Amplitude;                                                    // 0x0088(0x0088)
};


// ScriptStruct  Engine.ClusterNode
// Struct Size::0x0040
struct FClusterNode
{
    FVector                                       BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector                                       BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
    FVector                                       MinInstanceScale;                                             // 0x0028(0x000C)
    FVector                                       MaxInstanceScale;                                             // 0x0034(0x000C)
};


// ScriptStruct  Engine.ClusterNode_DEPRECATED
// Struct Size::0x0028
struct FClusterNode_DEPRECATED
{
    FVector                                       BoundMin;                                                     // 0x0000(0x000C)
    int32_t                                       FirstChild;                                                   // 0x000C(0x0004)
    FVector                                       BoundMax;                                                     // 0x0010(0x000C)
    int32_t                                       LastChild;                                                    // 0x001C(0x0004)
    int32_t                                       FirstInstance;                                                // 0x0020(0x0004)
    int32_t                                       LastInstance;                                                 // 0x0024(0x0004)
};


// ScriptStruct  Engine.HLODProxyMesh
// Struct Size::0x0030
struct FHLODProxyMesh
{
    ALODActor*                                    LODActor;                                                     // 0x0000(0x001C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UStaticMesh*                                  StaticMesh;                                                   // 0x0020(0x0008)
    FName                                         Key;                                                          // 0x0028(0x0008)
};


// ScriptStruct  Engine.ImportanceTexture
// Struct Size::0x0050
struct FImportanceTexture
{
    FIntPoint                                     Size;                                                         // 0x0000(0x0008)
    int32_t                                       NumMips;                                                      // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    TArray<float>                                 MarginalCDF;                                                  // 0x0010(0x0010)
    TArray<float>                                 ConditionalCDF;                                               // 0x0020(0x0010)
    TArray<FColor>                                TextureData;                                                  // 0x0030(0x0010)
    TWeakObjectPtr<UTexture2D>                    Texture;                                                      // 0x0040(0x0008)
    enum class EImportanceWeight                  Weighting;                                                    // 0x0048(0x0001)
    char                                          pa_0049[0x0007]                                               // 0x0049(0x0007)
};


// ScriptStruct  Engine.ComponentOverrideRecord
// Struct Size::0x0078
struct FComponentOverrideRecord
{
    UObject*                                      ComponentClass;                                               // 0x0000(0x0008)
    UActorComponent*                              ComponentTemplate;                                            // 0x0008(0x0008)
    FComponentKey                                 ComponentKey;                                                 // 0x0010(0x0020)
    FBlueprintCookedComponentInstancingData       CookedComponentInstancingData;                                // 0x0030(0x0048)
};


// ScriptStruct  Engine.ComponentKey
// Struct Size::0x0020
struct FComponentKey
{
    UObject*                                      OwnerClass;                                                   // 0x0000(0x0008)
    FName                                         SCSVariableName;                                              // 0x0008(0x0008)
    FGuid                                         AssociatedGuid;                                               // 0x0010(0x0010)
};


// ScriptStruct  Engine.BlueprintInputDelegateBinding
// Struct Size::0x0004
struct FBlueprintInputDelegateBinding
{
    char                                          bConsumeInput;                                                // 0x0000(0x0001)
    char                                          bExecuteWhenPaused;                                           // 0x0000(0x0001)
    char                                          bOverrideParentBinding;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.BlueprintInputActionDelegateBinding
// Struct Size::0x0018
struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputActionName;                                              // 0x0004(0x0008)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0010(0x0008)
};


// ScriptStruct  Engine.BlueprintInputAxisDelegateBinding
// Struct Size::0x0014
struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
{
    FName                                         InputAxisName;                                                // 0x0004(0x0008)
    FName                                         FunctionNameToBind;                                           // 0x000C(0x0008)
};


// ScriptStruct  Engine.BlueprintInputAxisKeyDelegateBinding
// Struct Size::0x0028
struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FKey                                          AxisKey;                                                      // 0x0008(0x0018)
    FName                                         FunctionNameToBind;                                           // 0x0020(0x0008)
};


// ScriptStruct  Engine.CachedKeyToActionInfo
// Struct Size::0x0070
struct FCachedKeyToActionInfo
{
    UPlayerInput*                                 PlayerInput;                                                  // 0x0000(0x0008)
    char                                          pa_0008[0x0068]                                               // 0x0008(0x0068)
};


// ScriptStruct  Engine.BlueprintInputKeyDelegateBinding
// Struct Size::0x0038
struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
{
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FInputChord                                   InputChord;                                                   // 0x0008(0x0020)
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x002C(0x0008)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.BlueprintInputTouchDelegateBinding
// Struct Size::0x0010
struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
{
    enum class EInputEvent                        InputKeyEvent;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    FName                                         FunctionNameToBind;                                           // 0x0008(0x0008)
};


// ScriptStruct  Engine.InstancedStaticMeshComponentInstanceData
// Struct Size::0x0140
struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x00A8(0x0008)
    FInstancedStaticMeshLightMapInstanceData      CachedStaticLighting;                                         // 0x00B0(0x0040)
    TArray<FInstancedStaticMeshInstanceData>      PerInstanceSMData;                                            // 0x00F0(0x0010)
    TArray<float>                                 PerInstanceSMCustomData;                                      // 0x0100(0x0010)
    char                                          pa_0110[0x0020]                                               // 0x0110(0x0020)
    int32_t                                       InstancingRandomSeed;                                         // 0x0130(0x0004)
    char                                          pa_0134[0x000C]                                               // 0x0134(0x000C)
};


// ScriptStruct  Engine.InstancedStaticMeshInstanceData
// Struct Size::0x0040
struct FInstancedStaticMeshInstanceData
{
    FMatrix                                       Transform;                                                    // 0x0000(0x0040)
};


// ScriptStruct  Engine.InstancedStaticMeshLightMapInstanceData
// Struct Size::0x0040
struct FInstancedStaticMeshLightMapInstanceData
{
    FTransform                                    Transform;                                                    // 0x0000(0x0030)
    TArray<FGuid>                                 MapBuildDataIds;                                              // 0x0030(0x0010)
};


// ScriptStruct  Engine.InstancedStaticMeshMappingInfo
// Struct Size::0x0008
struct FInstancedStaticMeshMappingInfo
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.IntegralCurve
// Struct Size::0x0080
struct FIntegralCurve : public FIndexedCurve
{
    TArray<FIntegralKey>                          Keys;                                                         // 0x0068(0x0010)
    int32_t                                       DefaultValue;                                                 // 0x0078(0x0004)
    bool                                          bUseDefaultValueBeforeFirstKey;                               // 0x007C(0x0001)
    char                                          pa_007D[0x0003]                                               // 0x007D(0x0003)
};


// ScriptStruct  Engine.IntegralKey
// Struct Size::0x0008
struct FIntegralKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    int32_t                                       Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.CurveEdTab
// Struct Size::0x0030
struct FCurveEdTab
{
    FString                                       TabName;                                                      // 0x0000(0x0010)
    TArray<FCurveEdEntry>                         Curves;                                                       // 0x0010(0x0010)
    float                                         ViewStartInput;                                               // 0x0020(0x0004)
    float                                         ViewEndInput;                                                 // 0x0024(0x0004)
    float                                         ViewStartOutput;                                              // 0x0028(0x0004)
    float                                         ViewEndOutput;                                                // 0x002C(0x0004)
};


// ScriptStruct  Engine.CurveEdEntry
// Struct Size::0x0038
struct FCurveEdEntry
{
    UObject*                                      CurveObject;                                                  // 0x0000(0x0008)
    FColor                                        CurveColor;                                                   // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FString                                       CurveName;                                                    // 0x0010(0x0010)
    int32_t                                       bHideCurve;                                                   // 0x0020(0x0004)
    int32_t                                       bColorCurve;                                                  // 0x0024(0x0004)
    int32_t                                       bFloatingPointColorCurve;                                     // 0x0028(0x0004)
    int32_t                                       bClamp;                                                       // 0x002C(0x0004)
    float                                         ClampLow;                                                     // 0x0030(0x0004)
    float                                         ClampHigh;                                                    // 0x0034(0x0004)
};


// ScriptStruct  Engine.InterpEdSelKey
// Struct Size::0x0018
struct FInterpEdSelKey
{
    UInterpGroup*                                 Group;                                                        // 0x0000(0x0008)
    UInterpTrack*                                 Track;                                                        // 0x0008(0x0008)
    int32_t                                       KeyIndex;                                                     // 0x0010(0x0004)
    float                                         UnsnappedPosition;                                            // 0x0014(0x0004)
};


// ScriptStruct  Engine.CameraPreviewInfo
// Struct Size::0x0030
struct FCameraPreviewInfo
{
    APawn*                                        PawnClass;                                                    // 0x0000(0x0008)
    UAnimSequence*                                AnimSeq;                                                      // 0x0008(0x0008)
    FVector                                       Location;                                                     // 0x0010(0x000C)
    FRotator                                      Rotation;                                                     // 0x001C(0x000C)
    APawn*                                        PawnInst;                                                     // 0x0028(0x0008)
};


// ScriptStruct  Engine.SubTrackGroup
// Struct Size::0x0028
struct FSubTrackGroup
{
    FString                                       GroupName;                                                    // 0x0000(0x0010)
    TArray<int32_t>                               TrackIndices;                                                 // 0x0010(0x0010)
    char                                          bIsCollapsed;                                                 // 0x0020(0x0001)
    char                                          bIsSelected;                                                  // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.SupportedSubTrackInfo
// Struct Size::0x0020
struct FSupportedSubTrackInfo
{
    UInterpTrack*                                 SupportedClass;                                               // 0x0000(0x0008)
    FString                                       SubTrackName;                                                 // 0x0008(0x0010)
    int32_t                                       GroupIndex;                                                   // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AnimControlTrackKey
// Struct Size::0x0020
struct FAnimControlTrackKey
{
    float                                         StartTime;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UAnimSequence*                                AnimSeq;                                                      // 0x0008(0x0008)
    float                                         AnimStartOffset;                                              // 0x0010(0x0004)
    float                                         AnimEndOffset;                                                // 0x0014(0x0004)
    float                                         AnimPlayRate;                                                 // 0x0018(0x0004)
    char                                          bLooping;                                                     // 0x001C(0x0001)
    char                                          bReverse;                                                     // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.BoolTrackKey
// Struct Size::0x0008
struct FBoolTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          Value;                                                        // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.DirectorTrackCut
// Struct Size::0x0014
struct FDirectorTrackCut
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         TransitionTime;                                               // 0x0004(0x0004)
    FName                                         TargetCamGroup;                                               // 0x0008(0x0008)
    int32_t                                       ShotNumber;                                                   // 0x0010(0x0004)
};


// ScriptStruct  Engine.EventTrackKey
// Struct Size::0x000C
struct FEventTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FName                                         EventName;                                                    // 0x0004(0x0008)
};


// ScriptStruct  Engine.InterpLookupTrack
// Struct Size::0x0010
struct FInterpLookupTrack
{
    TArray<FInterpLookupPoint>                    Points;                                                       // 0x0000(0x0010)
};


// ScriptStruct  Engine.InterpLookupPoint
// Struct Size::0x000C
struct FInterpLookupPoint
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.ParticleReplayTrackKey
// Struct Size::0x000C
struct FParticleReplayTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Duration;                                                     // 0x0004(0x0004)
    int32_t                                       ClipIDNumber;                                                 // 0x0008(0x0004)
};


// ScriptStruct  Engine.SoundTrackKey
// Struct Size::0x0018
struct FSoundTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Volume;                                                       // 0x0004(0x0004)
    float                                         Pitch;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    USoundBase*                                   Sound;                                                        // 0x0010(0x0008)
};


// ScriptStruct  Engine.ToggleTrackKey
// Struct Size::0x0008
struct FToggleTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    enum class ETrackToggleAction                 ToggleAction;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.VisibilityTrackKey
// Struct Size::0x0008
struct FVisibilityTrackKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    enum class EVisibilityTrackAction             Action;                                                       // 0x0004(0x0001)
    enum class EVisibilityTrackCondition          ActiveCondition;                                              // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
};


// ScriptStruct  Engine.VectorSpringState
// Struct Size::0x0018
struct FVectorSpringState
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.FloatSpringState
// Struct Size::0x0008
struct FFloatSpringState
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.DrawToRenderTargetContext
// Struct Size::0x0010
struct FDrawToRenderTargetContext
{
    UTextureRenderTarget2D*                       RenderTarget;                                                 // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.LatentActionManager
// Struct Size::0x0060
struct FLatentActionManager
{
    char                                          pa_0000[0x0060]                                               // 0x0000(0x0060)
};


// ScriptStruct  Engine.LayerActorStats
// Struct Size::0x0010
struct FLayerActorStats
{
    UObject*                                      Type;                                                         // 0x0000(0x0008)
    int32_t                                       Total;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.ReplicatedStaticActorDestructionInfo
// Struct Size::0x0038
struct FReplicatedStaticActorDestructionInfo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    UObject*                                      ObjClass;                                                     // 0x0030(0x0008)
};


// ScriptStruct  Engine.LevelSimplificationDetails
// Struct Size::0x012C
struct FLevelSimplificationDetails
{
    bool                                          bCreatePackagePerAsset;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         DetailsPercentage;                                            // 0x0004(0x0004)
    FMaterialProxySettings                        StaticMeshMaterialSettings;                                   // 0x0008(0x0088)
    bool                                          bOverrideLandscapeExportLOD;                                  // 0x0090(0x0001)
    char                                          pa_0091[0x0003]                                               // 0x0091(0x0003)
    int32_t                                       LandscapeExportLOD;                                           // 0x0094(0x0004)
    FMaterialProxySettings                        LandscapeMaterialSettings;                                    // 0x0098(0x0088)
    bool                                          bBakeFoliageToLandscape;                                      // 0x0120(0x0001)
    bool                                          bBakeGrassToLandscape;                                        // 0x0121(0x0001)
    bool                                          bGenerateMeshNormalMap;                                       // 0x0122(0x0001)
    bool                                          bGenerateMeshMetallicMap;                                     // 0x0123(0x0001)
    bool                                          bGenerateMeshRoughnessMap;                                    // 0x0124(0x0001)
    bool                                          bGenerateMeshSpecularMap;                                     // 0x0125(0x0001)
    bool                                          bGenerateLandscapeNormalMap;                                  // 0x0126(0x0001)
    bool                                          bGenerateLandscapeMetallicMap;                                // 0x0127(0x0001)
    bool                                          bGenerateLandscapeRoughnessMap;                               // 0x0128(0x0001)
    bool                                          bGenerateLandscapeSpecularMap;                                // 0x0129(0x0001)
    char                                          pa_012A[0x0002]                                               // 0x012A(0x0002)
};


// ScriptStruct  Engine.MaterialProxySettings
// Struct Size::0x0088
struct FMaterialProxySettings
{
    FIntPoint                                     TextureSize;                                                  // 0x0000(0x0008)
    float                                         GutterSpace;                                                  // 0x0008(0x0004)
    float                                         MetallicConstant;                                             // 0x000C(0x0004)
    float                                         RoughnessConstant;                                            // 0x0010(0x0004)
    float                                         AnisotropyConstant;                                           // 0x0014(0x0004)
    float                                         SpecularConstant;                                             // 0x0018(0x0004)
    float                                         OpacityConstant;                                              // 0x001C(0x0004)
    float                                         OpacityMaskConstant;                                          // 0x0020(0x0004)
    float                                         AmbientOcclusionConstant;                                     // 0x0024(0x0004)
    enum class ETextureSizingType                 TextureSizingType;                                            // 0x0028(0x0001)
    enum class EMaterialMergeType                 MaterialMergeType;                                            // 0x0029(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x002A(0x0001)
    char                                          bAllowTwoSidedMaterial;                                       // 0x002B(0x0001)
    char                                          bNormalMap;                                                   // 0x002B(0x0001)
    char                                          bTangentMap;                                                  // 0x002B(0x0001)
    char                                          bMetallicMap;                                                 // 0x002B(0x0001)
    char                                          bRoughnessMap;                                                // 0x002B(0x0001)
    char                                          bAnisotropyMap;                                               // 0x002B(0x0001)
    char                                          bSpecularMap;                                                 // 0x002B(0x0001)
    char                                          bEmissiveMap;                                                 // 0x002B(0x0001)
    char                                          bOpacityMap;                                                  // 0x002C(0x0001)
    char                                          bOpacityMaskMap;                                              // 0x002C(0x0001)
    char                                          bAmbientOcclusionMap;                                         // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    FIntPoint                                     DiffuseTextureSize;                                           // 0x0030(0x0008)
    FIntPoint                                     NormalTextureSize;                                            // 0x0038(0x0008)
    FIntPoint                                     TangentTextureSize;                                           // 0x0040(0x0008)
    FIntPoint                                     MetallicTextureSize;                                          // 0x0048(0x0008)
    FIntPoint                                     RoughnessTextureSize;                                         // 0x0050(0x0008)
    FIntPoint                                     AnisotropyTextureSize;                                        // 0x0058(0x0008)
    FIntPoint                                     SpecularTextureSize;                                          // 0x0060(0x0008)
    FIntPoint                                     EmissiveTextureSize;                                          // 0x0068(0x0008)
    FIntPoint                                     OpacityTextureSize;                                           // 0x0070(0x0008)
    FIntPoint                                     OpacityMaskTextureSize;                                       // 0x0078(0x0008)
    FIntPoint                                     AmbientOcclusionTextureSize;                                  // 0x0080(0x0008)
};


// ScriptStruct  Engine.StreamableTextureInstance
// Struct Size::0x0028
struct FStreamableTextureInstance
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  Engine.DynamicTextureInstance
// Struct Size::0x0038
struct FDynamicTextureInstance : public FStreamableTextureInstance
{
    UTexture2D*                                   Texture;                                                      // 0x0028(0x0008)
    bool                                          bAttached;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    float                                         OriginalRadius;                                               // 0x0034(0x0004)
};


// ScriptStruct  Engine.LevelSolarDecorationLightMapGUIDArray
// Struct Size::0x0020
struct FLevelSolarDecorationLightMapGUIDArray
{
    TArray<FGuid>                                 MapBuildDataIdArray;                                          // 0x0000(0x0010)
    TArray<uint32_t>                              LODNumArray;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.PrecomputedLightInstanceData
// Struct Size::0x0100
struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
    FTransform                                    Transform;                                                    // 0x00B0(0x0030)
    FGuid                                         LightGuid;                                                    // 0x00E0(0x0010)
    int32_t                                       PreviewShadowMapChannel;                                      // 0x00F0(0x0004)
    char                                          pa_00F4[0x000C]                                               // 0x00F4(0x000C)
};


// ScriptStruct  Engine.BatchedPoint
// Struct Size::0x0028
struct FBatchedPoint
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FLinearColor                                  Color;                                                        // 0x000C(0x0010)
    float                                         PointSize;                                                    // 0x001C(0x0004)
    float                                         RemainingLifeTime;                                            // 0x0020(0x0004)
    char                                          DepthPriority;                                                // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  Engine.BatchedLine
// Struct Size::0x0034
struct FBatchedLine
{
    FVector                                       Start;                                                        // 0x0000(0x000C)
    FVector                                       End;                                                          // 0x000C(0x000C)
    FLinearColor                                  Color;                                                        // 0x0018(0x0010)
    float                                         Thickness;                                                    // 0x0028(0x0004)
    float                                         RemainingLifeTime;                                            // 0x002C(0x0004)
    char                                          DepthPriority;                                                // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
};


// ScriptStruct  Engine.ClientReceiveData
// Struct Size::0x0040
struct FClientReceiveData
{
    APlayerController*                            LocalPC;                                                      // 0x0000(0x0008)
    FName                                         MessageType;                                                  // 0x0008(0x0008)
    int32_t                                       MessageIndex;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    FString                                       MessageString;                                                // 0x0018(0x0010)
    APlayerState*                                 RelatedPlayerState;                                           // 0x0028(0x0008)
    APlayerState*                                 RelatedPlayerState;                                           // 0x0030(0x0008)
    UObject*                                      OptionalObject;                                               // 0x0038(0x0008)
};


// ScriptStruct  Engine.ParameterGroupData
// Struct Size::0x0018
struct FParameterGroupData
{
    FString                                       GroupName;                                                    // 0x0000(0x0010)
    int32_t                                       GroupSortPriority;                                            // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.MaterialSpriteElement
// Struct Size::0x0028
struct FMaterialSpriteElement
{
    UMaterialInterface*                           Material;                                                     // 0x0000(0x0008)
    UCurveFloat*                                  DistanceToOpacityCurve;                                       // 0x0008(0x0008)
    char                                          bSizeIsInScreenSpace;                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         BaseSizeX;                                                    // 0x0014(0x0004)
    float                                         BaseSizeY;                                                    // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UCurveFloat*                                  DistanceToSizeCurve;                                          // 0x0020(0x0008)
};


// ScriptStruct  Engine.MaterialCachedExpressionData
// Struct Size::0x0228
struct FMaterialCachedExpressionData
{
    FMaterialCachedParameters                     Parameters;                                                   // 0x0000(0x01A0)
    TArray<UObject*>                              ReferencedTextures;                                           // 0x01A0(0x0010)
    TArray<FMaterialFunctionInfo>                 FunctionInfos;                                                // 0x01B0(0x0010)
    TArray<FMaterialParameterCollectionInfo>      ParameterCollectionInfos;                                     // 0x01C0(0x0010)
    TArray<UMaterialFunctionInterface*>           DefaultLayers;                                                // 0x01D0(0x0010)
    TArray<UMaterialFunctionInterface*>           DefaultLayerBlends;                                           // 0x01E0(0x0010)
    TArray<ULandscapeGrassType*>                  GrassTypes;                                                   // 0x01F0(0x0010)
    TArray<FName>                                 DynamicParameterNames;                                        // 0x0200(0x0010)
    TArray<bool>                                  QualityLevelsUsed;                                            // 0x0210(0x0010)
    char                                          bHasRuntimeVirtualTextureOutput;                              // 0x0220(0x0001)
    char                                          bHasSceneColor;                                               // 0x0220(0x0001)
    char                                          pa_0221[0x0007]                                               // 0x0221(0x0007)
};


// ScriptStruct  Engine.MaterialParameterCollectionInfo
// Struct Size::0x0018
struct FMaterialParameterCollectionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    UMaterialParameterCollection*                 ParameterCollection;                                          // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialFunctionInfo
// Struct Size::0x0018
struct FMaterialFunctionInfo
{
    FGuid                                         StateId;                                                      // 0x0000(0x0010)
    UMaterialFunctionInterface*                   Function;                                                     // 0x0010(0x0008)
};


// ScriptStruct  Engine.MaterialCachedParameters
// Struct Size::0x01A0
struct FMaterialCachedParameters
{
    FMaterialCachedParameterEntry                 Entries;                                                      // 0x0000(0x0040)
    char                                          pa_0040[0x0100]                                               // 0x0040(0x0100)
    TArray<float>                                 ScalarValues;                                                 // 0x0140(0x0010)
    TArray<FLinearColor>                          VectorValues;                                                 // 0x0150(0x0010)
    TArray<UTexture*>                             TextureValues;                                                // 0x0160(0x0010)
    TArray<UFont*>                                FontValues;                                                   // 0x0170(0x0010)
    TArray<int32_t>                               FontPageValues;                                               // 0x0180(0x0010)
    TArray<URuntimeVirtualTexture*>               RuntimeVirtualTextureValues;                                  // 0x0190(0x0010)
};


// ScriptStruct  Engine.MaterialCachedParameterEntry
// Struct Size::0x0040
struct FMaterialCachedParameterEntry
{
    TArray<uint64_t>                              NameHashes;                                                   // 0x0000(0x0010)
    TArray<FMaterialParameterInfo>                ParameterInfos;                                               // 0x0010(0x0010)
    TArray<FGuid>                                 ExpressionGuids;                                              // 0x0020(0x0010)
    TArray<bool>                                  Overrides;                                                    // 0x0030(0x0010)
};


// ScriptStruct  Engine.MaterialParameterInfo
// Struct Size::0x0010
struct FMaterialParameterInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EMaterialParameterAssociation      Association;                                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    int32_t                                       Index;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.ParameterChannelNames
// Struct Size::0x0060
struct FParameterChannelNames
{
    FText                                         R;                                                            // 0x0000(0x0018)
    FText                                         G;                                                            // 0x0018(0x0018)
    FText                                         B;                                                            // 0x0030(0x0018)
    FText                                         A;                                                            // 0x0048(0x0018)
};


// ScriptStruct  Engine.CustomDefine
// Struct Size::0x0020
struct FCustomDefine
{
    FString                                       DefineName;                                                   // 0x0000(0x0010)
    FString                                       DefineValue;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.CustomInput
// Struct Size::0x001C
struct FCustomInput
{
    FName                                         InputName;                                                    // 0x0000(0x0008)
    FExpressionInput                              Input;                                                        // 0x0008(0x000C)
    char                                          pa_0014[0x0008]                                               // 0x0014(0x0008)
};


// ScriptStruct  Engine.FunctionExpressionOutput
// Struct Size::0x0020
struct FFunctionExpressionOutput
{
    UMaterialExpressionFunctionOutput*            ExpressionOutput;                                             // 0x0000(0x0008)
    FGuid                                         ExpressionOutputId;                                           // 0x0008(0x0010)
    FExpressionOutput                             Output;                                                       // 0x0018(0x0008)
};


// ScriptStruct  Engine.FunctionExpressionInput
// Struct Size::0x0030
struct FFunctionExpressionInput
{
    UMaterialExpressionFunctionInput*             ExpressionInput;                                              // 0x0000(0x0008)
    FGuid                                         ExpressionInputId;                                            // 0x0008(0x0010)
    FExpressionInput                              Input;                                                        // 0x0018(0x000C)
    char                                          pa_0024[0x000C]                                               // 0x0024(0x000C)
};


// ScriptStruct  Engine.FontParameterValue
// Struct Size::0x0030
struct FFontParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    UFont*                                        FontValue;                                                    // 0x0010(0x0008)
    int32_t                                       FontPage;                                                     // 0x0018(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x001C(0x0010)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.RuntimeVirtualTextureParameterValue
// Struct Size::0x0028
struct FRuntimeVirtualTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    URuntimeVirtualTexture*                       ParameterValue;                                               // 0x0010(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.TextureParameterValue
// Struct Size::0x0028
struct FTextureParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    UTexture*                                     ParameterValue;                                               // 0x0010(0x0008)
    FGuid                                         ExpressionGUID;                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.VectorParameterValue
// Struct Size::0x0030
struct FVectorParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    FLinearColor                                  ParameterValue;                                               // 0x0010(0x0010)
    FGuid                                         ExpressionGUID;                                               // 0x0020(0x0010)
};


// ScriptStruct  Engine.ScalarParameterValue
// Struct Size::0x0024
struct FScalarParameterValue
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    float                                         ParameterValue;                                               // 0x0010(0x0004)
    FGuid                                         ExpressionGUID;                                               // 0x0014(0x0010)
};


// ScriptStruct  Engine.ScalarParameterAtlasInstanceData
// Struct Size::0x0058
struct FScalarParameterAtlasInstanceData
{
    bool                                          bIsUsedAsAtlasPosition;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    TSoftObjectPtr<UCurveLinearColor>             Curve;                                                        // 0x0008(0x0028)
    TSoftObjectPtr<UCurveLinearColorAtlas>        Atlas;                                                        // 0x0030(0x0028)
};


// ScriptStruct  Engine.MaterialInstanceBasePropertyOverrides
// Struct Size::0x0008
struct FMaterialInstanceBasePropertyOverrides
{
    char                                          bOverride_OpacityMaskClipValue;                               // 0x0000(0x0001)
    char                                          bOverride_BlendMode;                                          // 0x0000(0x0001)
    char                                          bOverride_ShadingModel;                                       // 0x0000(0x0001)
    char                                          bOverride_DitheredLODTransition;                              // 0x0000(0x0001)
    char                                          bOverride_CastDynamicShadowAsMasked;                          // 0x0000(0x0001)
    char                                          bOverride_TwoSided;                                           // 0x0000(0x0001)
    char                                          TwoSided;                                                     // 0x0000(0x0001)
    char                                          bOverride_AllowTwosidedFallback;                              // 0x0000(0x0001)
    char                                          bAllowTwosidedFallback;                                       // 0x0001(0x0001)
    char                                          DitheredLODTransition;                                        // 0x0001(0x0001)
    char                                          bCastDynamicShadowAsMasked;                                   // 0x0001(0x0001)
    enum class EBlendMode                         BlendMode;                                                    // 0x0002(0x0001)
    enum class EMaterialShadingModel              ShadingModel;                                                 // 0x0003(0x0001)
    float                                         OpacityMaskClipValue;                                         // 0x0004(0x0004)
};


// ScriptStruct  Engine.MaterialTextureInfo
// Struct Size::0x0010
struct FMaterialTextureInfo
{
    float                                         SamplingScale;                                                // 0x0000(0x0004)
    int32_t                                       UVChannelIndex;                                               // 0x0004(0x0004)
    FName                                         TextureName;                                                  // 0x0008(0x0008)
};


// ScriptStruct  Engine.LightmassMaterialInterfaceSettings
// Struct Size::0x0010
struct FLightmassMaterialInterfaceSettings
{
    float                                         EmissiveBoost;                                                // 0x0000(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0004(0x0004)
    float                                         ExportResolutionScale;                                        // 0x0008(0x0004)
    char                                          bCastShadowAsMasked;                                          // 0x000C(0x0001)
    char                                          bOverrideCastShadowAsMasked;                                  // 0x000C(0x0001)
    char                                          bOverrideEmissiveBoost;                                       // 0x000C(0x0001)
    char                                          bOverrideDiffuseBoost;                                        // 0x000C(0x0001)
    char                                          bOverrideExportResolutionScale;                               // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.MaterialLayersFunctions
// Struct Size::0x0040
struct FMaterialLayersFunctions
{
    TArray<UMaterialFunctionInterface*>           Layers;                                                       // 0x0000(0x0010)
    TArray<UMaterialFunctionInterface*>           Blends;                                                       // 0x0010(0x0010)
    TArray<bool>                                  LayerStates;                                                  // 0x0020(0x0010)
    FString                                       KeyString;                                                    // 0x0030(0x0010)
};


// ScriptStruct  Engine.CollectionParameterBase
// Struct Size::0x0018
struct FCollectionParameterBase
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    FGuid                                         ID;                                                           // 0x0008(0x0010)
};


// ScriptStruct  Engine.CollectionVectorParameter
// Struct Size::0x0028
struct FCollectionVectorParameter : public FCollectionParameterBase
{
    FLinearColor                                  DefaultValue;                                                 // 0x0018(0x0010)
};


// ScriptStruct  Engine.CollectionScalarParameter
// Struct Size::0x001C
struct FCollectionScalarParameter : public FCollectionParameterBase
{
    float                                         DefaultValue;                                                 // 0x0018(0x0004)
};


// ScriptStruct  Engine.InterpGroupActorInfo
// Struct Size::0x0018
struct FInterpGroupActorInfo
{
    FName                                         ObjectName;                                                   // 0x0000(0x0008)
    TArray<AActor*>                               Actors;                                                       // 0x0008(0x0010)
};


// ScriptStruct  Engine.CameraCutInfo
// Struct Size::0x0010
struct FCameraCutInfo
{
    FVector                                       Location;                                                     // 0x0000(0x000C)
    float                                         Timestamp;                                                    // 0x000C(0x0004)
};


// ScriptStruct  Engine.MemberReference
// Struct Size::0x0038
struct FMemberReference
{
    UObject*                                      MemberParent;                                                 // 0x0000(0x0008)
    FString                                       MemberScope;                                                  // 0x0008(0x0010)
    FName                                         MemberName;                                                   // 0x0018(0x0008)
    FGuid                                         MemberGuid;                                                   // 0x0020(0x0010)
    bool                                          bSelfContext;                                                 // 0x0030(0x0001)
    bool                                          bWasDeprecated;                                               // 0x0031(0x0001)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  Engine.MeshInstancingSettings
// Struct Size::0x0018
struct FMeshInstancingSettings
{
    AActor*                                       ActorClassToUse;                                              // 0x0000(0x0008)
    int32_t                                       InstanceReplacementThreshold;                                 // 0x0008(0x0004)
    enum class EMeshInstancingReplacementMethod   MeshReplacementMethod;                                        // 0x000C(0x0001)
    bool                                          bSkipMeshesWithVertexColors;                                  // 0x000D(0x0001)
    bool                                          bUseHLODVolumes;                                              // 0x000E(0x0001)
    char                                          pa_000F[0x0001]                                               // 0x000F(0x0001)
    UInstancedStaticMeshComponent*                ISMComponentToUse;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.MeshMergingSettings
// Struct Size::0x00A8
struct FMeshMergingSettings
{
    int32_t                                       TargetLightMapResolution;                                     // 0x0000(0x0004)
    enum class EUVOutput                          OutputUVs;                                                    // 0x0004(0x0001)
    char                                          pa_0005[0x0007]                                               // 0x0005(0x0007)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x000C(0x0088)
    int32_t                                       GutterSize;                                                   // 0x0094(0x0004)
    int32_t                                       SpecificLOD;                                                  // 0x0098(0x0004)
    enum class EMeshLODSelectionType              LODSelectionType;                                             // 0x009C(0x0001)
    char                                          bGenerateLightMapUV;                                          // 0x009D(0x0001)
    char                                          bComputedLightMapResolution;                                  // 0x009D(0x0001)
    char                                          bPivotPointAtZero;                                            // 0x009D(0x0001)
    char                                          bMergePhysicsData;                                            // 0x009D(0x0001)
    char                                          bMergeMaterials;                                              // 0x009D(0x0001)
    char                                          bCreateMergedMaterial;                                        // 0x009D(0x0001)
    char                                          bBakeVertexDataToMesh;                                        // 0x009D(0x0001)
    char                                          bUseVertexDataForBakingMaterial;                              // 0x009D(0x0001)
    char                                          bUseTextureBinning;                                           // 0x009E(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x009E(0x0001)
    char                                          bMergeEquivalentMaterials;                                    // 0x009E(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x009E(0x0001)
    char                                          bUseLandscapeRoadMode;                                        // 0x009E(0x0001)
    char                                          bAutoPlacingMergedRoad;                                       // 0x009E(0x0001)
    char                                          bIncludeImposters;                                            // 0x009E(0x0001)
    char                                          bAllowDistanceField;                                          // 0x009E(0x0001)
    char                                          pa_009F[0x0001]                                               // 0x009F(0x0001)
    int32_t                                       LandscapeRoadSplitFactor;                                     // 0x00A0(0x0004)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
};


// ScriptStruct  Engine.MeshProxySettings
// Struct Size::0x00A8
struct FMeshProxySettings
{
    int32_t                                       ScreenSize;                                                   // 0x0000(0x0004)
    float                                         VoxelSize;                                                    // 0x0004(0x0004)
    FMaterialProxySettings                        MaterialSettings;                                             // 0x0008(0x0088)
    float                                         MergeDistance;                                                // 0x0090(0x0004)
    FColor                                        UnresolvedGeometryColor;                                      // 0x0094(0x0004)
    float                                         MaxRayCastDist;                                               // 0x0098(0x0004)
    float                                         HardAngleThreshold;                                           // 0x009C(0x0004)
    int32_t                                       LightMapResolution;                                           // 0x00A0(0x0004)
    enum class EProxyNormalComputationMethod      NormalCalculationMethod;                                      // 0x00A4(0x0001)
    enum class ELandscapeCullingPrecision         LandscapeCullingPrecision;                                    // 0x00A5(0x0001)
    char                                          bCalculateCorrectLODModel;                                    // 0x00A6(0x0001)
    char                                          bOverrideVoxelSize;                                           // 0x00A6(0x0001)
    char                                          bOverrideTransferDistance;                                    // 0x00A6(0x0001)
    char                                          bUseHardAngleThreshold;                                       // 0x00A6(0x0001)
    char                                          bComputeLightMapResolution;                                   // 0x00A6(0x0001)
    char                                          bRecalculateNormals;                                          // 0x00A6(0x0001)
    char                                          bUseLandscapeCulling;                                         // 0x00A6(0x0001)
    char                                          bAllowAdjacency;                                              // 0x00A6(0x0001)
    char                                          bAllowDistanceField;                                          // 0x00A7(0x0001)
    char                                          bReuseMeshLightmapUVs;                                        // 0x00A7(0x0001)
    char                                          bCreateCollision;                                             // 0x00A7(0x0001)
    char                                          bAllowVertexColors;                                           // 0x00A7(0x0001)
    char                                          bGenerateLightmapUVs;                                         // 0x00A7(0x0001)
};


// ScriptStruct  Engine.MeshReductionSettings
// Struct Size::0x0024
struct FMeshReductionSettings
{
    float                                         PercentTriangles;                                             // 0x0000(0x0004)
    float                                         PercentVertices;                                              // 0x0004(0x0004)
    float                                         MaxDeviation;                                                 // 0x0008(0x0004)
    float                                         PixelError;                                                   // 0x000C(0x0004)
    float                                         WeldingThreshold;                                             // 0x0010(0x0004)
    float                                         HardAngleThreshold;                                           // 0x0014(0x0004)
    int32_t                                       BaseLODModel;                                                 // 0x0018(0x0004)
    enum class EMeshFeatureImportance             SilhouetteImportance;                                         // 0x001C(0x0001)
    enum class EMeshFeatureImportance             TextureImportance;                                            // 0x001D(0x0001)
    enum class EMeshFeatureImportance             ShadingImportance;                                            // 0x001E(0x0001)
    char                                          bRecalculateNormals;                                          // 0x001F(0x0001)
    char                                          bGenerateUniqueLightmapUVs;                                   // 0x001F(0x0001)
    char                                          bKeepSymmetry;                                                // 0x001F(0x0001)
    char                                          bVisibilityAided;                                             // 0x001F(0x0001)
    char                                          bCullOccluded;                                                // 0x001F(0x0001)
    enum class EStaticMeshReductionTerimationCriterionTerminationCriterion;                                     // 0x0020(0x0001)
    enum class EMeshFeatureImportance             VisibilityAggressiveness;                                     // 0x0021(0x0001)
    enum class EMeshFeatureImportance             VertexColorImportance;                                        // 0x0022(0x0001)
    char                                          pa_0023[0x0001]                                               // 0x0023(0x0001)
};


// ScriptStruct  Engine.PurchaseInfo
// Struct Size::0x0040
struct FPurchaseInfo
{
    FString                                       Identifier;                                                   // 0x0000(0x0010)
    FString                                       DisplayName;                                                  // 0x0010(0x0010)
    FString                                       DisplayDescription;                                           // 0x0020(0x0010)
    FString                                       DisplayPrice;                                                 // 0x0030(0x0010)
};


// ScriptStruct  Engine.NameCurve
// Struct Size::0x0078
struct FNameCurve : public FIndexedCurve
{
    TArray<FNameCurveKey>                         Keys;                                                         // 0x0068(0x0010)
};


// ScriptStruct  Engine.NameCurveKey
// Struct Size::0x000C
struct FNameCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    FName                                         Value;                                                        // 0x0004(0x0008)
};


// ScriptStruct  Engine.NavDataConfig
// Struct Size::0x0078
struct FNavDataConfig : public FNavAgentProperties
{
    FName                                         Name;                                                         // 0x0030(0x0008)
    FColor                                        Color;                                                        // 0x0038(0x0004)
    FVector                                       DefaultQueryExtent;                                           // 0x003C(0x000C)
    AActor*                                       NavigationDataClass;                                          // 0x0048(0x0008)
    TSoftClassPtr<UObject>                        NavDataClass;                                                 // 0x0050(0x0028)
};


// ScriptStruct  Engine.NavigationLinkBase
// Struct Size::0x0030
struct FNavigationLinkBase
{
    float                                         LeftProjectHeight;                                            // 0x0000(0x0004)
    float                                         MaxFallDownLength;                                            // 0x0004(0x0004)
    char                                          pa_0008[0x0004]                                               // 0x0008(0x0004)
    float                                         SnapRadius;                                                   // 0x000C(0x0004)
    float                                         SnapHeight;                                                   // 0x0010(0x0004)
    FNavAgentSelector                             SupportedAgents;                                              // 0x0014(0x0004)
    char                                          bSupportsAgent0;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent1;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent2;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent3;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent4;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent5;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent6;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent7;                                              // 0x0018(0x0001)
    char                                          bSupportsAgent8;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent9;                                              // 0x0019(0x0001)
    char                                          bSupportsAgent10;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent11;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent12;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent13;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent14;                                             // 0x0019(0x0001)
    char                                          bSupportsAgent15;                                             // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    enum class ENavLinkDirection                  Direction;                                                    // 0x001C(0x0001)
    char                                          bUseSnapHeight;                                               // 0x001D(0x0001)
    char                                          bSnapToCheapestArea;                                          // 0x001D(0x0001)
    char                                          bCustomFlag0;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag1;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag2;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag3;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag4;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag5;                                                 // 0x001D(0x0001)
    char                                          bCustomFlag6;                                                 // 0x001E(0x0001)
    char                                          bCustomFlag7;                                                 // 0x001E(0x0001)
    char                                          pa_001F[0x0001]                                               // 0x001F(0x0001)
    UNavAreaBase*                                 AreaClass;                                                    // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.NavigationSegmentLink
// Struct Size::0x0060
struct FNavigationSegmentLink : public FNavigationLinkBase
{
    FVector                                       LeftStart;                                                    // 0x0030(0x000C)
    FVector                                       LeftEnd;                                                      // 0x003C(0x000C)
    FVector                                       RightStart;                                                   // 0x0048(0x000C)
    FVector                                       RightEnd;                                                     // 0x0054(0x000C)
};


// ScriptStruct  Engine.NavigationLink
// Struct Size::0x0048
struct FNavigationLink : public FNavigationLinkBase
{
    FVector                                       Left;                                                         // 0x0030(0x000C)
    FVector                                       Right;                                                        // 0x003C(0x000C)
};


// ScriptStruct  Engine.ChannelDefinition
// Struct Size::0x0028
struct FChannelDefinition
{
    FName                                         ChannelName;                                                  // 0x0000(0x0008)
    FName                                         ClassName;                                                    // 0x0008(0x0008)
    UObject*                                      ChannelClass;                                                 // 0x0010(0x0008)
    int32_t                                       StaticChannelIndex;                                           // 0x0018(0x0004)
    bool                                          bTickOnCreate;                                                // 0x001C(0x0001)
    bool                                          bServerOpen;                                                  // 0x001D(0x0001)
    bool                                          bClientOpen;                                                  // 0x001E(0x0001)
    bool                                          bInitialServer;                                               // 0x001F(0x0001)
    bool                                          bInitialClient;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0007]                                               // 0x0021(0x0007)
};


// ScriptStruct  Engine.PacketSimulationSettings
// Struct Size::0x0034
struct FPacketSimulationSettings
{
    int32_t                                       PktLoss;                                                      // 0x0000(0x0004)
    int32_t                                       PktLossMaxSize;                                               // 0x0004(0x0004)
    int32_t                                       PktLossMinSize;                                               // 0x0008(0x0004)
    int32_t                                       PktOrder;                                                     // 0x000C(0x0004)
    int32_t                                       PktDup;                                                       // 0x0010(0x0004)
    int32_t                                       PktLag;                                                       // 0x0014(0x0004)
    int32_t                                       PktLagVariance;                                               // 0x0018(0x0004)
    int32_t                                       PktLagMin;                                                    // 0x001C(0x0004)
    int32_t                                       PktLagMax;                                                    // 0x0020(0x0004)
    int32_t                                       PktIncomingLagMin;                                            // 0x0024(0x0004)
    int32_t                                       PktIncomingLagMax;                                            // 0x0028(0x0004)
    int32_t                                       PktIncomingLoss;                                              // 0x002C(0x0004)
    int32_t                                       PktJitter;                                                    // 0x0030(0x0004)
};


// ScriptStruct  Engine.NetworkEmulationProfileDescription
// Struct Size::0x0020
struct FNetworkEmulationProfileDescription
{
    FString                                       ProfileName;                                                  // 0x0000(0x0010)
    FString                                       Tooltip;                                                      // 0x0010(0x0010)
};


// ScriptStruct  Engine.NodeItem
// Struct Size::0x0040
struct FNodeItem
{
    FName                                         ParentName;                                                   // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
};


// ScriptStruct  Engine.ParticleBurst
// Struct Size::0x000C
struct FParticleBurst
{
    int32_t                                       count;                                                        // 0x0000(0x0004)
    int32_t                                       CountLow;                                                     // 0x0004(0x0004)
    float                                         Time;                                                         // 0x0008(0x0004)
};


// ScriptStruct  Engine.ParticleRandomSeedInfo
// Struct Size::0x0020
struct FParticleRandomSeedInfo
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    char                                          bGetSeedFromInstance;                                         // 0x0008(0x0001)
    char                                          bInstanceSeedIsIndex;                                         // 0x0008(0x0001)
    char                                          bResetSeedOnEmitterLooping;                                   // 0x0008(0x0001)
    char                                          bRandomlySelectSeedArray;                                     // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<int32_t>                               RandomSeeds;                                                  // 0x0010(0x0010)
};


// ScriptStruct  Engine.ParticleCurvePair
// Struct Size::0x0018
struct FParticleCurvePair
{
    FString                                       CurveName;                                                    // 0x0000(0x0010)
    UObject*                                      CurveObject;                                                  // 0x0010(0x0008)
};


// ScriptStruct  Engine.BeamModifierOptions
// Struct Size::0x0004
struct FBeamModifierOptions
{
    char                                          bModify;                                                      // 0x0000(0x0001)
    char                                          bScale;                                                       // 0x0000(0x0001)
    char                                          bLock;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.ParticleEvent_GenerateInfo
// Struct Size::0x0028
struct FParticleEvent_GenerateInfo
{
    enum class EParticleEventType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Frequency;                                                    // 0x0004(0x0004)
    int32_t                                       ParticleFrequency;                                            // 0x0008(0x0004)
    char                                          FirstTimeOnly;                                                // 0x000C(0x0001)
    char                                          LastTimeOnly;                                                 // 0x000C(0x0001)
    char                                          UseReflectedImpactVector;                                     // 0x000C(0x0001)
    char                                          bUseOrbitOffset;                                              // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FName                                         CustomName;                                                   // 0x0010(0x0008)
    TArray<UParticleModuleEventSendToGame*>       ParticleModuleEventsToSendToGame;                             // 0x0018(0x0010)
};


// ScriptStruct  Engine.LocationBoneSocketInfo
// Struct Size::0x0014
struct FLocationBoneSocketInfo
{
    FName                                         BoneSocketName;                                               // 0x0000(0x0008)
    FVector                                       Offset;                                                       // 0x0008(0x000C)
};


// ScriptStruct  Engine.OrbitOptions
// Struct Size::0x0004
struct FOrbitOptions
{
    char                                          bProcessDuringSpawn;                                          // 0x0000(0x0001)
    char                                          bProcessDuringUpdate;                                         // 0x0000(0x0001)
    char                                          bUseEmitterTime;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  Engine.EmitterDynamicParameter
// Struct Size::0x0048
struct FEmitterDynamicParameter
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    char                                          bUseEmitterTime;                                              // 0x0008(0x0001)
    char                                          bSpawnTimeOnly;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    enum class EEmitterDynamicParameterValue      ValueMethod;                                                  // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    char                                          bScaleVelocityByParamValue;                                   // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
    FRawDistributionFloat                         ParamValue;                                                   // 0x0018(0x0030)
};


// ScriptStruct  Engine.BeamTargetData
// Struct Size::0x000C
struct FBeamTargetData
{
    FName                                         TargetName;                                                   // 0x0000(0x0008)
    float                                         TargetPercentage;                                             // 0x0008(0x0004)
};


// ScriptStruct  Engine.GPUSpriteResourceData
// Struct Size::0x0160
struct FGPUSpriteResourceData
{
    TArray<FColor>                                QuantizedColorSamples;                                        // 0x0000(0x0010)
    TArray<FColor>                                QuantizedMiscSamples;                                         // 0x0010(0x0010)
    TArray<FColor>                                QuantizedSimulationAttrSamples;                               // 0x0020(0x0010)
    FVector4                                      ColorScale;                                                   // 0x0030(0x0010)
    FVector4                                      ColorBias;                                                    // 0x0040(0x0010)
    FVector4                                      MiscScale;                                                    // 0x0050(0x0010)
    FVector4                                      MiscBias;                                                     // 0x0060(0x0010)
    FVector4                                      SimulationAttrCurveScale;                                     // 0x0070(0x0010)
    FVector4                                      SimulationAttrCurveBias;                                      // 0x0080(0x0010)
    FVector4                                      SubImageSize;                                                 // 0x0090(0x0010)
    FVector4                                      SizeBySpeed;                                                  // 0x00A0(0x0010)
    FVector                                       ConstantAcceleration;                                         // 0x00B0(0x000C)
    FVector                                       OrbitOffsetBase;                                              // 0x00BC(0x000C)
    FVector                                       OrbitOffsetRange;                                             // 0x00C8(0x000C)
    FVector                                       OrbitFrequencyBase;                                           // 0x00D4(0x000C)
    FVector                                       OrbitFrequencyRange;                                          // 0x00E0(0x000C)
    FVector                                       OrbitPhaseBase;                                               // 0x00EC(0x000C)
    FVector                                       OrbitPhaseRange;                                              // 0x00F8(0x000C)
    float                                         GlobalVectorFieldScale;                                       // 0x0104(0x0004)
    float                                         GlobalVectorFieldTightness;                                   // 0x0108(0x0004)
    float                                         PerParticleVectorFieldScale;                                  // 0x010C(0x0004)
    float                                         PerParticleVectorFieldBias;                                   // 0x0110(0x0004)
    float                                         DragCoefficientScale;                                         // 0x0114(0x0004)
    float                                         DragCoefficientBias;                                          // 0x0118(0x0004)
    float                                         ResilienceScale;                                              // 0x011C(0x0004)
    float                                         ResilienceBias;                                               // 0x0120(0x0004)
    float                                         CollisionRadiusScale;                                         // 0x0124(0x0004)
    float                                         CollisionRadiusBias;                                          // 0x0128(0x0004)
    float                                         CollisionTimeBias;                                            // 0x012C(0x0004)
    float                                         CollisionRandomSpread;                                        // 0x0130(0x0004)
    float                                         CollisionRandomDistribution;                                  // 0x0134(0x0004)
    float                                         OneMinusFriction;                                             // 0x0138(0x0004)
    float                                         RotationRateScale;                                            // 0x013C(0x0004)
    float                                         CameraMotionBlurAmount;                                       // 0x0140(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0144(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0145(0x0001)
    char                                          pa_0146[0x0002]                                               // 0x0146(0x0002)
    FVector2D                                     PivotOffset;                                                  // 0x0148(0x0008)
    char                                          bRemoveHMDRoll;                                               // 0x0150(0x0001)
    char                                          pa_0151[0x0003]                                               // 0x0151(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0154(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x0158(0x0004)
    char                                          pa_015C[0x0004]                                               // 0x015C(0x0004)
};


// ScriptStruct  Engine.GPUSpriteEmitterInfo
// Struct Size::0x0280
struct FGPUSpriteEmitterInfo
{
    UParticleModuleRequired*                      RequiredModule;                                               // 0x0000(0x0008)
    UParticleModuleSpawn*                         SpawnModule;                                                  // 0x0008(0x0008)
    UParticleModuleSpawnPerUnit*                  SpawnPerUnitModule;                                           // 0x0010(0x0008)
    TArray<UParticleModule*>                      SpawnModules;                                                 // 0x0018(0x0010)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    FGPUSpriteLocalVectorFieldInfo                LocalVectorField;                                             // 0x0030(0x0070)
    FFloatDistribution                            VectorFieldScale;                                             // 0x00A0(0x0020)
    FFloatDistribution                            DragCoefficient;                                              // 0x00C0(0x0020)
    FFloatDistribution                            PointAttractorStrength;                                       // 0x00E0(0x0020)
    FFloatDistribution                            Resilience;                                                   // 0x0100(0x0020)
    FVector                                       ConstantAcceleration;                                         // 0x0120(0x000C)
    FVector                                       PointAttractorPosition;                                       // 0x012C(0x000C)
    float                                         PointAttractorRadiusSq;                                       // 0x0138(0x0004)
    FVector                                       OrbitOffsetBase;                                              // 0x013C(0x000C)
    FVector                                       OrbitOffsetRange;                                             // 0x0148(0x000C)
    FVector2D                                     InvMaxSize;                                                   // 0x0154(0x0008)
    float                                         InvRotationRateScale;                                         // 0x015C(0x0004)
    float                                         MaxLifetime;                                                  // 0x0160(0x0004)
    int32_t                                       MaxParticleCount;                                             // 0x0164(0x0004)
    enum class EParticleScreenAlignment           ScreenAlignment;                                              // 0x0168(0x0001)
    enum class EParticleAxisLock                  LockAxisFlag;                                                 // 0x0169(0x0001)
    char                                          pa_016A[0x0002]                                               // 0x016A(0x0002)
    char                                          bEnableCollision;                                             // 0x016C(0x0001)
    char                                          pa_016D[0x0003]                                               // 0x016D(0x0003)
    enum class EParticleCollisionMode             CollisionMode;                                                // 0x0170(0x0001)
    char                                          pa_0171[0x0003]                                               // 0x0171(0x0003)
    char                                          bRemoveHMDRoll;                                               // 0x0174(0x0001)
    char                                          pa_0175[0x0003]                                               // 0x0175(0x0003)
    float                                         MinFacingCameraBlendDistance;                                 // 0x0178(0x0004)
    float                                         MaxFacingCameraBlendDistance;                                 // 0x017C(0x0004)
    FRawDistributionVector                        DynamicColor;                                                 // 0x0180(0x0048)
    FRawDistributionFloat                         DynamicAlpha;                                                 // 0x01C8(0x0030)
    FRawDistributionVector                        DynamicColorScale;                                            // 0x01F8(0x0048)
    FRawDistributionFloat                         DynamicAlphaScale;                                            // 0x0240(0x0030)
    char                                          pa_0270[0x0010]                                               // 0x0270(0x0010)
};


// ScriptStruct  Engine.GPUSpriteLocalVectorFieldInfo
// Struct Size::0x0070
struct FGPUSpriteLocalVectorFieldInfo
{
    UVectorField*                                 Field;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FRotator                                      MinInitialRotation;                                           // 0x0040(0x000C)
    FRotator                                      MaxInitialRotation;                                           // 0x004C(0x000C)
    FRotator                                      RotationRate;                                                 // 0x0058(0x000C)
    float                                         Intensity;                                                    // 0x0064(0x0004)
    float                                         Tightness;                                                    // 0x0068(0x0004)
    char                                          bIgnoreComponentTransform;                                    // 0x006C(0x0001)
    char                                          bTileX;                                                       // 0x006C(0x0001)
    char                                          bTileY;                                                       // 0x006C(0x0001)
    char                                          bTileZ;                                                       // 0x006C(0x0001)
    char                                          bUseFixDT;                                                    // 0x006C(0x0001)
    char                                          pa_006D[0x0003]                                               // 0x006D(0x0003)
};


// ScriptStruct  Engine.NamedEmitterMaterial
// Struct Size::0x0010
struct FNamedEmitterMaterial
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.LODSoloTrack
// Struct Size::0x0010
struct FLODSoloTrack
{
    TArray<char>                                  SoloEnableSetting;                                            // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleSystemLOD
// Struct Size::0x0001
struct FParticleSystemLOD
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  Engine.ParticleSysParam
// Struct Size::0x0080
struct FParticleSysParam
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    enum class EParticleSysParamType              ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Scalar;                                                       // 0x000C(0x0004)
    float                                         Scalar_Low;                                                   // 0x0010(0x0004)
    FVector                                       Vector;                                                       // 0x0014(0x000C)
    FVector                                       Vector_Low;                                                   // 0x0020(0x000C)
    FColor                                        Color;                                                        // 0x002C(0x0004)
    AActor*                                       Actor;                                                        // 0x0030(0x0008)
    UMaterialInterface*                           Material;                                                     // 0x0038(0x0008)
    char                                          pa_0040[0x0040]                                               // 0x0040(0x0040)
};


// ScriptStruct  Engine.ParticleSystemWorldManagerTickFunction
// Struct Size::0x0030
struct FParticleSystemWorldManagerTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.ParticleSystemReplayFrame
// Struct Size::0x0010
struct FParticleSystemReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.ParticleEmitterReplayFrame
// Struct Size::0x0010
struct FParticleEmitterReplayFrame
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
};


// ScriptStruct  Engine.FreezablePerPlatformInt
// Struct Size::0x0004
struct FFreezablePerPlatformInt
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationData
// Struct Size::0x0024
struct FPhysicalAnimationData
{
    FName                                         BodyName;                                                     // 0x0000(0x0008)
    char                                          bIsLocalSimulation;                                           // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         OrientationStrength;                                          // 0x000C(0x0004)
    float                                         AngularVelocityStrength;                                      // 0x0010(0x0004)
    float                                         PositionStrength;                                             // 0x0014(0x0004)
    float                                         VelocityStrength;                                             // 0x0018(0x0004)
    float                                         MaxLinearForce;                                               // 0x001C(0x0004)
    float                                         MaxAngularForce;                                              // 0x0020(0x0004)
};


// ScriptStruct  Engine.TireFrictionScalePair
// Struct Size::0x0010
struct FTireFrictionScalePair
{
    UTireType*                                    TireType;                                                     // 0x0000(0x0008)
    float                                         FrictionScale;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  Engine.PhysicalAnimationProfile
// Struct Size::0x002C
struct FPhysicalAnimationProfile
{
    FName                                         ProfileName;                                                  // 0x0000(0x0008)
    FPhysicalAnimationData                        PhysicalAnimationData;                                        // 0x0008(0x0024)
};


// ScriptStruct  Engine.PhysicsConstraintProfileHandle
// Struct Size::0x010C
struct FPhysicsConstraintProfileHandle
{
    FConstraintProfileProperties                  ProfileProperties;                                            // 0x0000(0x0104)
    FName                                         ProfileName;                                                  // 0x0104(0x0008)
};


// ScriptStruct  Engine.ChaosPhysicsSettings
// Struct Size::0x0003
struct FChaosPhysicsSettings
{
    enum class EChaosThreadingMode                DefaultThreadingModel;                                        // 0x0000(0x0001)
    enum class EChaosSolverTickMode               DedicatedThreadTickMode;                                      // 0x0001(0x0001)
    enum class EChaosBufferMode                   DedicatedThreadBufferMode;                                    // 0x0002(0x0001)
};


// ScriptStruct  Engine.PhysicalSurfaceName
// Struct Size::0x000C
struct FPhysicalSurfaceName
{
    enum class EPhysicalSurface                   Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
};


// ScriptStruct  Engine.DelegateArray
// Struct Size::0x0010
struct FDelegateArray
{
    TArray<FDelegate>                             Delegates;                                                    // 0x0000(0x0010)
};


// ScriptStruct  Engine.TViewTarget
// Struct Size::0x0690
struct FTViewTarget
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x0670)
    APlayerState*                                 PlayerState;                                                  // 0x0680(0x0008)
    char                                          pa_0688[0x0008]                                               // 0x0688(0x0008)
};


// ScriptStruct  Engine.CameraCacheEntry
// Struct Size::0x0680
struct FCameraCacheEntry
{
    float                                         Timestamp;                                                    // 0x0000(0x0004)
    char                                          pa_0004[0x000C]                                               // 0x0004(0x000C)
    FMinimalViewInfo                              POV;                                                          // 0x0010(0x0670)
};


// ScriptStruct  Engine.InputActionSpeechMapping
// Struct Size::0x0010
struct FInputActionSpeechMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x0008)
    FName                                         SpeechKeyword;                                                // 0x0008(0x0008)
};


// ScriptStruct  Engine.InputAxisKeyMapping
// Struct Size::0x0028
struct FInputAxisKeyMapping
{
    FName                                         AxisName;                                                     // 0x0000(0x0008)
    float                                         Scale;                                                        // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
    FKey                                          Key;                                                          // 0x0010(0x0018)
};


// ScriptStruct  Engine.InputActionKeyMapping
// Struct Size::0x0028
struct FInputActionKeyMapping
{
    FName                                         ActionName;                                                   // 0x0000(0x0008)
    char                                          bShift;                                                       // 0x0008(0x0001)
    char                                          bCtrl;                                                        // 0x0008(0x0001)
    char                                          bAlt;                                                         // 0x0008(0x0001)
    char                                          bCmd;                                                         // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    FKey                                          Key;                                                          // 0x0010(0x0018)
};


// ScriptStruct  Engine.InputAxisConfigEntry
// Struct Size::0x0018
struct FInputAxisConfigEntry
{
    FName                                         AxisKeyName;                                                  // 0x0000(0x0008)
    FInputAxisProperties                          AxisProperties;                                               // 0x0008(0x0010)
};


// ScriptStruct  Engine.InputAxisProperties
// Struct Size::0x0010
struct FInputAxisProperties
{
    float                                         Deadzone;                                                     // 0x0000(0x0004)
    float                                         Sensitivity;                                                  // 0x0004(0x0004)
    float                                         Exponent;                                                     // 0x0008(0x0004)
    char                                          bInvert;                                                      // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.KeyBind
// Struct Size::0x0030
struct FKeyBind
{
    FKey                                          Key;                                                          // 0x0000(0x0018)
    FString                                       Command;                                                      // 0x0018(0x0010)
    char                                          Control;                                                      // 0x0028(0x0001)
    char                                          Shift;                                                        // 0x0028(0x0001)
    char                                          Alt;                                                          // 0x0028(0x0001)
    char                                          Cmd;                                                          // 0x0028(0x0001)
    char                                          bIgnoreCtrl;                                                  // 0x0028(0x0001)
    char                                          bIgnoreShift;                                                 // 0x0028(0x0001)
    char                                          bIgnoreAlt;                                                   // 0x0028(0x0001)
    char                                          bIgnoreCmd;                                                   // 0x0028(0x0001)
    char                                          bDisabled;                                                    // 0x0029(0x0001)
    char                                          pa_002A[0x0006]                                               // 0x002A(0x0006)
};


// ScriptStruct  Engine.PlayerMuteList
// Struct Size::0x0038
struct FPlayerMuteList
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
    bool                                          bHasVoiceHandshakeCompleted;                                  // 0x0030(0x0001)
    char                                          pa_0031[0x0003]                                               // 0x0031(0x0003)
    int32_t                                       VoiceChannelIdx;                                              // 0x0034(0x0004)
};


// ScriptStruct  Engine.PoseDataContainer
// Struct Size::0x0090
struct FPoseDataContainer
{
    TArray<FSmartName>                            PoseNames;                                                    // 0x0000(0x0010)
    TArray<FName>                                 Tracks;                                                       // 0x0010(0x0010)
    TMap<FName,int32_t>                           TrackMap;                                                     // 0x0020(0x0050)
    TArray<FPoseData>                             Poses;                                                        // 0x0070(0x0010)
    TArray<FAnimCurveBase>                        Curves;                                                       // 0x0080(0x0010)
};


// ScriptStruct  Engine.PoseData
// Struct Size::0x0070
struct FPoseData
{
    TArray<FTransform>                            LocalSpacePose;                                               // 0x0000(0x0010)
    TMap<int32_t,int32_t>                         TrackToBufferIndex;                                           // 0x0010(0x0050)
    TArray<float>                                 CurveData;                                                    // 0x0060(0x0010)
};


// ScriptStruct  Engine.PreviewAssetAttachContainer
// Struct Size::0x0010
struct FPreviewAssetAttachContainer
{
    TArray<FPreviewAttachedObjectPair>            AttachedObjects;                                              // 0x0000(0x0010)
};


// ScriptStruct  Engine.PreviewAttachedObjectPair
// Struct Size::0x0038
struct FPreviewAttachedObjectPair
{
    TSoftObjectPtr<UObject>                       AttachedObject;                                               // 0x0000(0x0028)
    UObject*                                      Object;                                                       // 0x0028(0x0008)
    FName                                         AttachedTo;                                                   // 0x0030(0x0008)
};


// ScriptStruct  Engine.PreviewMeshCollectionEntry
// Struct Size::0x0028
struct FPreviewMeshCollectionEntry
{
    TSoftObjectPtr<USkeletalMesh>                 SkeletalMesh;                                                 // 0x0000(0x0028)
};


// ScriptStruct  Engine.PrimitiveComponentInstanceData
// Struct Size::0x00F0
struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
{
    char                                          pa_00A8[0x0008]                                               // 0x00A8(0x0008)
    FTransform                                    ComponentTransform;                                           // 0x00B0(0x0030)
    int32_t                                       VisibilityId;                                                 // 0x00E0(0x0004)
    char                                          pa_00E4[0x0004]                                               // 0x00E4(0x0004)
    UPrimitiveComponent*                          LODParent;                                                    // 0x00E8(0x0008)
};


// ScriptStruct  Engine.SpriteCategoryInfo
// Struct Size::0x0038
struct FSpriteCategoryInfo
{
    FName                                         Category;                                                     // 0x0000(0x0008)
    FText                                         DisplayName;                                                  // 0x0008(0x0018)
    FText                                         Description;                                                  // 0x0020(0x0018)
};


// ScriptStruct  Engine.LevelNameAndTime
// Struct Size::0x0018
struct FLevelNameAndTime
{
    FString                                       LevelName;                                                    // 0x0000(0x0010)
    uint32_t                                      LevelChangeTimeInMS;                                          // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.ReverbSettings
// Struct Size::0x0020
struct FReverbSettings
{
    bool                                          bApplyReverb;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    UReverbEffect*                                ReverbEffect;                                                 // 0x0008(0x0008)
    USoundEffectSubmixPreset*                     ReverbPluginEffect;                                           // 0x0010(0x0008)
    float                                         Volume;                                                       // 0x0018(0x0004)
    float                                         FadeTime;                                                     // 0x001C(0x0004)
};


// ScriptStruct  Engine.CompressedRichCurve
// Struct Size::0x0018
struct FCompressedRichCurve
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  Engine.TransformBase
// Struct Size::0x0028
struct FTransformBase
{
    FName                                         Node;                                                         // 0x0000(0x0008)
    FTransformBaseConstraint                      Constraints;                                                  // 0x0008(0x0010)
    char                                          pa_0018[0x0010]                                               // 0x0018(0x0010)
};


// ScriptStruct  Engine.TransformBaseConstraint
// Struct Size::0x0010
struct FTransformBaseConstraint
{
    TArray<FRigTransformConstraint>               TransformConstraints;                                         // 0x0000(0x0010)
};


// ScriptStruct  Engine.RigTransformConstraint
// Struct Size::0x0010
struct FRigTransformConstraint
{
    enum class EConstraintTransform               TranformType;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         ParentSpace;                                                  // 0x0004(0x0008)
    float                                         Weight;                                                       // 0x000C(0x0004)
};


// ScriptStruct  Engine.Node
// Struct Size::0x0060
struct FNode
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FName                                         ParentName;                                                   // 0x0008(0x0008)
    FTransform                                    Transform;                                                    // 0x0010(0x0030)
    FString                                       DisplayName;                                                  // 0x0040(0x0010)
    bool                                          bAdvanced;                                                    // 0x0050(0x0001)
    char                                          pa_0051[0x000F]                                               // 0x0051(0x000F)
};


// ScriptStruct  Engine.RootMotionSource
// Struct Size::0x00A0
struct FRootMotionSource
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    uint16_t                                      Priority;                                                     // 0x0010(0x0002)
    uint16_t                                      LocalId;                                                      // 0x0012(0x0002)
    enum class ERootMotionAccumulateMode          AccumulateMode;                                               // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    FName                                         InstanceName;                                                 // 0x0018(0x0008)
    float                                         StartTime;                                                    // 0x0020(0x0004)
    float                                         CurrentTime;                                                  // 0x0024(0x0004)
    float                                         PreviousTime;                                                 // 0x0028(0x0004)
    float                                         Duration;                                                     // 0x002C(0x0004)
    FRootMotionSourceStatus                       status;                                                       // 0x0030(0x0001)
    FRootMotionSourceSettings                     Settings;                                                     // 0x0031(0x0001)
    bool                                          bInLocalSpace;                                                // 0x0032(0x0001)
    char                                          pa_0033[0x000D]                                               // 0x0033(0x000D)
    FRootMotionMovementParams                     RootMotionParams;                                             // 0x0040(0x0040)
    FRootMotionFinishVelocitySettings             FinishVelocityParams;                                         // 0x0080(0x0014)
    char                                          pa_0094[0x000C]                                               // 0x0094(0x000C)
};


// ScriptStruct  Engine.RootMotionFinishVelocitySettings
// Struct Size::0x0014
struct FRootMotionFinishVelocitySettings
{
    enum class ERootMotionFinishVelocityMode      Mode;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       SetVelocity;                                                  // 0x0004(0x000C)
    float                                         ClampVelocity;                                                // 0x0010(0x0004)
};


// ScriptStruct  Engine.RootMotionSourceStatus
// Struct Size::0x0001
struct FRootMotionSourceStatus
{
    char                                          Flags;                                                        // 0x0000(0x0001)
};


// ScriptStruct  Engine.RootMotionSource_JumpForce
// Struct Size::0x00D0
struct FRootMotionSource_JumpForce : public FRootMotionSource
{
    FRotator                                      Rotation;                                                     // 0x0098(0x000C)
    float                                         Distance;                                                     // 0x00A4(0x0004)
    float                                         Height;                                                       // 0x00A8(0x0004)
    bool                                          bDisableTimeout;                                              // 0x00AC(0x0001)
    char                                          pa_00AD[0x0003]                                               // 0x00AD(0x0003)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x00B0(0x0008)
    UCurveFloat*                                  TimeMappingCurve;                                             // 0x00B8(0x0008)
    char                                          pa_00C0[0x0010]                                               // 0x00C0(0x0010)
};


// ScriptStruct  Engine.RootMotionSource_MoveToDynamicForce
// Struct Size::0x00D0
struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x0098(0x000C)
    FVector                                       InitialTargetLocation;                                        // 0x00A4(0x000C)
    FVector                                       TargetLocation;                                               // 0x00B0(0x000C)
    bool                                          bRestrictSpeedToExpected;                                     // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x00C0(0x0008)
    UCurveFloat*                                  TimeMappingCurve;                                             // 0x00C8(0x0008)
};


// ScriptStruct  Engine.RootMotionSource_MoveToForce
// Struct Size::0x00C0
struct FRootMotionSource_MoveToForce : public FRootMotionSource
{
    FVector                                       StartLocation;                                                // 0x0098(0x000C)
    FVector                                       TargetLocation;                                               // 0x00A4(0x000C)
    bool                                          bRestrictSpeedToExpected;                                     // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
    UCurveVector*                                 PathOffsetCurve;                                              // 0x00B8(0x0008)
};


// ScriptStruct  Engine.RootMotionSource_RadialForce
// Struct Size::0x00E0
struct FRootMotionSource_RadialForce : public FRootMotionSource
{
    FVector                                       Location;                                                     // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    AActor*                                       LocationActor;                                                // 0x00A8(0x0008)
    float                                         Radius;                                                       // 0x00B0(0x0004)
    float                                         Strength;                                                     // 0x00B4(0x0004)
    bool                                          bIsPush;                                                      // 0x00B8(0x0001)
    bool                                          bNoZForce;                                                    // 0x00B9(0x0001)
    char                                          pa_00BA[0x0006]                                               // 0x00BA(0x0006)
    UCurveFloat*                                  StrengthDistanceFalloff;                                      // 0x00C0(0x0008)
    UCurveFloat*                                  StrengthOverTime;                                             // 0x00C8(0x0008)
    bool                                          bUseFixedWorldDirection;                                      // 0x00D0(0x0001)
    char                                          pa_00D1[0x0003]                                               // 0x00D1(0x0003)
    FRotator                                      FixedWorldDirection;                                          // 0x00D4(0x000C)
};


// ScriptStruct  Engine.RootMotionSource_ConstantForce
// Struct Size::0x00B0
struct FRootMotionSource_ConstantForce : public FRootMotionSource
{
    FVector                                       Force;                                                        // 0x0098(0x000C)
    char                                          pa_00A4[0x0004]                                               // 0x00A4(0x0004)
    UCurveFloat*                                  StrengthOverTime;                                             // 0x00A8(0x0008)
};


// ScriptStruct  Engine.CameraExposureSettings
// Struct Size::0x0040
struct FCameraExposureSettings
{
    enum class EAutoExposureMethod                Method;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LowPercent;                                                   // 0x0004(0x0004)
    float                                         HighPercent;                                                  // 0x0008(0x0004)
    float                                         MinBrightness;                                                // 0x000C(0x0004)
    float                                         MaxBrightness;                                                // 0x0010(0x0004)
    float                                         SpeedUp;                                                      // 0x0014(0x0004)
    float                                         SpeedDown;                                                    // 0x0018(0x0004)
    float                                         Bias;                                                         // 0x001C(0x0004)
    UCurveFloat*                                  BiasCurve;                                                    // 0x0020(0x0008)
    UTexture*                                     MeterMask;                                                    // 0x0028(0x0008)
    float                                         HistogramLogMin;                                              // 0x0030(0x0004)
    float                                         HistogramLogMax;                                              // 0x0034(0x0004)
    float                                         CalibrationConstant;                                          // 0x0038(0x0004)
    char                                          ApplyPhysicalCameraExposure;                                  // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  Engine.LensSettings
// Struct Size::0x00E0
struct FLensSettings
{
    FLensBloomSettings                            Bloom;                                                        // 0x0000(0x00B8)
    FLensImperfectionSettings                     Imperfections;                                                // 0x00B8(0x0020)
    float                                         ChromaticAberration;                                          // 0x00D8(0x0004)
    char                                          pa_00DC[0x0004]                                               // 0x00DC(0x0004)
};


// ScriptStruct  Engine.LensImperfectionSettings
// Struct Size::0x0020
struct FLensImperfectionSettings
{
    UTexture*                                     DirtMask;                                                     // 0x0000(0x0008)
    float                                         DirtMaskIntensity;                                            // 0x0008(0x0004)
    FLinearColor                                  DirtMaskTint;                                                 // 0x000C(0x0010)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.LensBloomSettings
// Struct Size::0x00B8
struct FLensBloomSettings
{
    FGaussianSumBloomSettings                     GaussianSum;                                                  // 0x0000(0x0084)
    char                                          pa_0084[0x0004]                                               // 0x0084(0x0004)
    FConvolutionBloomSettings                     Convolution;                                                  // 0x0088(0x0028)
    enum class EBloomMethod                       Method;                                                       // 0x00B0(0x0001)
    char                                          pa_00B1[0x0007]                                               // 0x00B1(0x0007)
};


// ScriptStruct  Engine.ConvolutionBloomSettings
// Struct Size::0x0028
struct FConvolutionBloomSettings
{
    UTexture2D*                                   Texture;                                                      // 0x0000(0x0008)
    float                                         Size;                                                         // 0x0008(0x0004)
    FVector2D                                     CenterUV;                                                     // 0x000C(0x0008)
    float                                         PreFilterMin;                                                 // 0x0014(0x0004)
    float                                         PreFilterMax;                                                 // 0x0018(0x0004)
    float                                         PreFilterMult;                                                // 0x001C(0x0004)
    float                                         BufferScale;                                                  // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.GaussianSumBloomSettings
// Struct Size::0x0084
struct FGaussianSumBloomSettings
{
    float                                         Intensity;                                                    // 0x0000(0x0004)
    float                                         Threshold;                                                    // 0x0004(0x0004)
    float                                         SizeScale;                                                    // 0x0008(0x0004)
    float                                         Filter1Size;                                                  // 0x000C(0x0004)
    float                                         Filter2Size;                                                  // 0x0010(0x0004)
    float                                         Filter3Size;                                                  // 0x0014(0x0004)
    float                                         Filter4Size;                                                  // 0x0018(0x0004)
    float                                         Filter5Size;                                                  // 0x001C(0x0004)
    float                                         Filter6Size;                                                  // 0x0020(0x0004)
    FLinearColor                                  Filter1Tint;                                                  // 0x0024(0x0010)
    FLinearColor                                  Filter2Tint;                                                  // 0x0034(0x0010)
    FLinearColor                                  Filter3Tint;                                                  // 0x0044(0x0010)
    FLinearColor                                  Filter4Tint;                                                  // 0x0054(0x0010)
    FLinearColor                                  Filter5Tint;                                                  // 0x0064(0x0010)
    FLinearColor                                  Filter6Tint;                                                  // 0x0074(0x0010)
};


// ScriptStruct  Engine.FilmStockSettings
// Struct Size::0x0014
struct FFilmStockSettings
{
    float                                         Slope;                                                        // 0x0000(0x0004)
    float                                         Toe;                                                          // 0x0004(0x0004)
    float                                         Shoulder;                                                     // 0x0008(0x0004)
    float                                         BlackClip;                                                    // 0x000C(0x0004)
    float                                         WhiteClip;                                                    // 0x0010(0x0004)
};


// ScriptStruct  Engine.ColorGradingSettings
// Struct Size::0x0190
struct FColorGradingSettings
{
    FColorGradePerRangeSettings                   Global;                                                       // 0x0000(0x0060)
    FColorGradePerRangeSettings                   Shadows;                                                      // 0x0060(0x0060)
    FColorGradePerRangeSettings                   Midtones;                                                     // 0x00C0(0x0060)
    FColorGradePerRangeSettings                   Highlights;                                                   // 0x0120(0x0060)
    float                                         ShadowsMax;                                                   // 0x0180(0x0004)
    float                                         HighlightsMin;                                                // 0x0184(0x0004)
    char                                          pa_0188[0x0008]                                               // 0x0188(0x0008)
};


// ScriptStruct  Engine.ColorGradePerRangeSettings
// Struct Size::0x0060
struct FColorGradePerRangeSettings
{
    FVector4                                      Saturation;                                                   // 0x0000(0x0010)
    FVector4                                      Contrast;                                                     // 0x0010(0x0010)
    FVector4                                      Gamma;                                                        // 0x0020(0x0010)
    FVector4                                      Gain;                                                         // 0x0030(0x0010)
    FVector4                                      Offset;                                                       // 0x0040(0x0010)
    char                                          pa_0050[0x0010]                                               // 0x0050(0x0010)
};


// ScriptStruct  Engine.EngineShowFlagsSetting
// Struct Size::0x0018
struct FEngineShowFlagsSetting
{
    FString                                       ShowFlagName;                                                 // 0x0000(0x0010)
    bool                                          Enabled;                                                      // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.SimpleCurve
// Struct Size::0x0088
struct FSimpleCurve : public FRealCurve
{
    enum class ERichCurveInterpMode               InterpMode;                                                   // 0x0070(0x0001)
    char                                          pa_0071[0x0007]                                               // 0x0071(0x0007)
    TArray<FSimpleCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.SimpleCurveKey
// Struct Size::0x0008
struct FSimpleCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    float                                         Value;                                                        // 0x0004(0x0004)
};


// ScriptStruct  Engine.SingleAnimationPlayData
// Struct Size::0x0018
struct FSingleAnimationPlayData
{
    UAnimationAsset*                              AnimToPlay;                                                   // 0x0000(0x0008)
    char                                          bSavedLooping;                                                // 0x0008(0x0001)
    char                                          bSavedPlaying;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SavedPosition;                                                // 0x000C(0x0004)
    float                                         SavedPlayRate;                                                // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SkeletalMaterial
// Struct Size::0x0028
struct FSkeletalMaterial
{
    UMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0010(0x0014)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.ClothingAssetData_Legacy
// Struct Size::0x0070
struct FClothingAssetData_Legacy
{
    FName                                         AssetName;                                                    // 0x0000(0x0008)
    FString                                       ApexFileName;                                                 // 0x0008(0x0010)
    bool                                          bClothPropertiesChanged;                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    FClothPhysicsProperties_Legacy                PhysicsProperties;                                            // 0x001C(0x0050)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
};


// ScriptStruct  Engine.ClothPhysicsProperties_Legacy
// Struct Size::0x0050
struct FClothPhysicsProperties_Legacy
{
    float                                         VerticalResistance;                                           // 0x0000(0x0004)
    float                                         HorizontalResistance;                                         // 0x0004(0x0004)
    float                                         BendResistance;                                               // 0x0008(0x0004)
    float                                         ShearResistance;                                              // 0x000C(0x0004)
    float                                         Friction;                                                     // 0x0010(0x0004)
    float                                         Damping;                                                      // 0x0014(0x0004)
    float                                         TetherStiffness;                                              // 0x0018(0x0004)
    float                                         TetherLimit;                                                  // 0x001C(0x0004)
    float                                         Drag;                                                         // 0x0020(0x0004)
    float                                         StiffnessFrequency;                                           // 0x0024(0x0004)
    float                                         GravityScale;                                                 // 0x0028(0x0004)
    float                                         MassScale;                                                    // 0x002C(0x0004)
    float                                         InertiaBlend;                                                 // 0x0030(0x0004)
    float                                         SelfCollisionThickness;                                       // 0x0034(0x0004)
    float                                         SelfCollisionSquashScale;                                     // 0x0038(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x003C(0x0004)
    float                                         SolverFrequency;                                              // 0x0040(0x0004)
    float                                         FiberCompression;                                             // 0x0044(0x0004)
    float                                         FiberExpansion;                                               // 0x0048(0x0004)
    float                                         FiberResistance;                                              // 0x004C(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshLODInfo
// Struct Size::0x00B8
struct FSkeletalMeshLODInfo
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    TArray<int32_t>                               LODMaterialMap;                                               // 0x0008(0x0010)
    FSkeletalMeshBuildSettings                    BuildSettings;                                                // 0x0018(0x0014)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x002C(0x003C)
    TArray<FBoneReference>                        BonesToRemove;                                                // 0x0068(0x0010)
    TArray<FBoneReference>                        BonesToPrioritize;                                            // 0x0078(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0088(0x0004)
    char                                          pa_008C[0x0004]                                               // 0x008C(0x0004)
    UAnimSequence*                                BakePose;                                                     // 0x0090(0x0008)
    UAnimSequence*                                BakePoseOverride;                                             // 0x0098(0x0008)
    FString                                       SourceImportFilename;                                         // 0x00A0(0x0010)
    enum class ESkinCacheUsage                    SkinCacheUsage;                                               // 0x00B0(0x0001)
    char                                          bHasBeenSimplified;                                           // 0x00B1(0x0001)
    char                                          bHasPerLODVertexColors;                                       // 0x00B1(0x0001)
    char                                          bAllowCPUAccess;                                              // 0x00B1(0x0001)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x00B1(0x0001)
    char                                          pa_00B2[0x0006]                                               // 0x00B2(0x0006)
};


// ScriptStruct  Engine.SkeletalMeshOptimizationSettings
// Struct Size::0x003C
struct FSkeletalMeshOptimizationSettings
{
    enum class SkeletalMeshTerminationCriterion   TerminationCriterion;                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         NumOfVertPercentage;                                          // 0x0008(0x0004)
    uint32_t                                      MaxNumOfTriangles;                                            // 0x000C(0x0004)
    uint32_t                                      MaxNumOfVerts;                                                // 0x0010(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0014(0x0004)
    enum class SkeletalMeshOptimizationType       ReductionMethod;                                              // 0x0018(0x0001)
    enum class SkeletalMeshOptimizationImportance SilhouetteImportance;                                         // 0x0019(0x0001)
    enum class SkeletalMeshOptimizationImportance TextureImportance;                                            // 0x001A(0x0001)
    enum class SkeletalMeshOptimizationImportance ShadingImportance;                                            // 0x001B(0x0001)
    enum class SkeletalMeshOptimizationImportance SkinningImportance;                                           // 0x001C(0x0001)
    char                                          bRemapMorphTargets;                                           // 0x001D(0x0001)
    char                                          bRecalcNormals;                                               // 0x001D(0x0001)
    char                                          pa_001E[0x0002]                                               // 0x001E(0x0002)
    float                                         WeldingThreshold;                                             // 0x0020(0x0004)
    float                                         NormalsThreshold;                                             // 0x0024(0x0004)
    int32_t                                       MaxBonesPerVertex;                                            // 0x0028(0x0004)
    char                                          bEnforceBoneBoundaries;                                       // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
    float                                         VolumeImportance;                                             // 0x0030(0x0004)
    char                                          bLockEdges;                                                   // 0x0034(0x0001)
    char                                          bLockColorBounaries;                                          // 0x0034(0x0001)
    char                                          pa_0035[0x0003]                                               // 0x0035(0x0003)
    int32_t                                       BaseLOD;                                                      // 0x0038(0x0004)
};


// ScriptStruct  Engine.SkeletalMeshClothBuildParams
// Struct Size::0x0058
struct FSkeletalMeshClothBuildParams
{
    TWeakObjectPtr<UClothingAssetBase>            TargetAsset;                                                  // 0x0000(0x0008)
    int32_t                                       TargetLod;                                                    // 0x0008(0x0004)
    bool                                          bRemapParameters;                                             // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    FString                                       AssetName;                                                    // 0x0010(0x0010)
    int32_t                                       LODIndex;                                                     // 0x0020(0x0004)
    int32_t                                       SourceSection;                                                // 0x0024(0x0004)
    bool                                          bRemoveFromMesh;                                              // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
    TSoftObjectPtr<UPhysicsAsset>                 PhysicsAsset;                                                 // 0x0030(0x0028)
};


// ScriptStruct  Engine.BoneMirrorExport
// Struct Size::0x0014
struct FBoneMirrorExport
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    FName                                         SourceBoneName;                                               // 0x0008(0x0008)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
};


// ScriptStruct  Engine.BoneMirrorInfo
// Struct Size::0x0008
struct FBoneMirrorInfo
{
    int32_t                                       SourceIndex;                                                  // 0x0000(0x0004)
    enum class EAxis                              BoneFlipAxis;                                                 // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshComponentClothTickFunction
// Struct Size::0x0030
struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshComponentEndPhysicsTickFunction
// Struct Size::0x0030
struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshLODGroupSettings
// Struct Size::0x0080
struct FSkeletalMeshLODGroupSettings
{
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0000(0x0004)
    float                                         LODHysteresis;                                                // 0x0004(0x0004)
    enum class EBoneFilterActionOption            BoneFilterActionOption;                                       // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
    TArray<FBoneFilter>                           BoneList;                                                     // 0x0010(0x0010)
    TArray<FName>                                 BonesToPrioritize;                                            // 0x0020(0x0010)
    float                                         WeightOfPrioritization;                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
    UAnimSequence*                                BakePose;                                                     // 0x0038(0x0008)
    FSkeletalMeshOptimizationSettings             ReductionSettings;                                            // 0x0040(0x003C)
    char                                          pa_007C[0x0004]                                               // 0x007C(0x0004)
};


// ScriptStruct  Engine.BoneFilter
// Struct Size::0x000C
struct FBoneFilter
{
    bool                                          bExcludeSelf;                                                 // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         BoneName;                                                     // 0x0004(0x0008)
};


// ScriptStruct  Engine.SkeletalMeshSamplingInfo
// Struct Size::0x0030
struct FSkeletalMeshSamplingInfo
{
    TArray<FSkeletalMeshSamplingRegion>           Regions;                                                      // 0x0000(0x0010)
    FSkeletalMeshSamplingBuiltData                BuiltData;                                                    // 0x0010(0x0020)
};


// ScriptStruct  Engine.SkeletalMeshSamplingBuiltData
// Struct Size::0x0020
struct FSkeletalMeshSamplingBuiltData
{
    TArray<FSkeletalMeshSamplingLODBuiltData>     WholeMeshBuiltData;                                           // 0x0000(0x0010)
    TArray<FSkeletalMeshSamplingRegionBuiltData>  RegionBuiltData;                                              // 0x0010(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBuiltData
// Struct Size::0x0078
struct FSkeletalMeshSamplingRegionBuiltData
{
    char                                          pa_0000[0x0078]                                               // 0x0000(0x0078)
};


// ScriptStruct  Engine.SkeletalMeshSamplingLODBuiltData
// Struct Size::0x0048
struct FSkeletalMeshSamplingLODBuiltData
{
    char                                          pa_0000[0x0048]                                               // 0x0000(0x0048)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegion
// Struct Size::0x0030
struct FSkeletalMeshSamplingRegion
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       LODIndex;                                                     // 0x0008(0x0004)
    char                                          bSupportUniformlyDistributedSampling;                         // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
    TArray<FSkeletalMeshSamplingRegionMaterialFilter>MaterialFilters;                                           // 0x0010(0x0010)
    TArray<FSkeletalMeshSamplingRegionBoneFilter> BoneFilters;                                                  // 0x0020(0x0010)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionBoneFilter
// Struct Size::0x000C
struct FSkeletalMeshSamplingRegionBoneFilter
{
    FName                                         BoneName;                                                     // 0x0000(0x0008)
    char                                          bIncludeOrExclude;                                            // 0x0008(0x0001)
    char                                          bApplyToChildren;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
};


// ScriptStruct  Engine.SkeletalMeshSamplingRegionMaterialFilter
// Struct Size::0x0008
struct FSkeletalMeshSamplingRegionMaterialFilter
{
    FName                                         MaterialName;                                                 // 0x0000(0x0008)
};


// ScriptStruct  Engine.VirtualBone
// Struct Size::0x0018
struct FVirtualBone
{
    FName                                         SourceBoneName;                                               // 0x0000(0x0008)
    FName                                         TargetBoneName;                                               // 0x0008(0x0008)
    FName                                         VirtualBoneName;                                              // 0x0010(0x0008)
};


// ScriptStruct  Engine.AnimSlotGroup
// Struct Size::0x0018
struct FAnimSlotGroup
{
    FName                                         GroupName;                                                    // 0x0000(0x0008)
    TArray<FName>                                 SlotNames;                                                    // 0x0008(0x0010)
};


// ScriptStruct  Engine.RigConfiguration
// Struct Size::0x0018
struct FRigConfiguration
{
    URig*                                         Rig;                                                          // 0x0000(0x0008)
    TArray<FNameMapping>                          BoneMappingTable;                                             // 0x0008(0x0010)
};


// ScriptStruct  Engine.NameMapping
// Struct Size::0x0010
struct FNameMapping
{
    FName                                         NodeName;                                                     // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
};


// ScriptStruct  Engine.BoneReductionSetting
// Struct Size::0x0010
struct FBoneReductionSetting
{
    TArray<FName>                                 BonesToRemove;                                                // 0x0000(0x0010)
};


// ScriptStruct  Engine.ReferencePose
// Struct Size::0x0018
struct FReferencePose
{
    FName                                         PoseName;                                                     // 0x0000(0x0008)
    TArray<FTransform>                            ReferencePose;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.BoneNode
// Struct Size::0x0010
struct FBoneNode
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    int32_t                                       ParentIndex;                                                  // 0x0008(0x0004)
    enum class EBoneTranslationRetargetingMode    TranslationRetargetingMode;                                   // 0x000C(0x0001)
    char                                          pa_000D[0x0003]                                               // 0x000D(0x0003)
};


// ScriptStruct  Engine.SkeletonToMeshLinkup
// Struct Size::0x0020
struct FSkeletonToMeshLinkup
{
    TArray<int32_t>                               SkeletonToMeshTable;                                          // 0x0000(0x0010)
    TArray<int32_t>                               MeshToSkeletonTable;                                          // 0x0010(0x0010)
};


// ScriptStruct  Engine.SkelMeshComponentLODInfo
// Struct Size::0x0028
struct FSkelMeshComponentLODInfo
{
    TArray<bool>                                  HiddenMaterials;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.SkelMeshSkinWeightInfo
// Struct Size::0x003C
struct FSkelMeshSkinWeightInfo
{
    int32_t                                       Bones;                                                        // 0x0000(0x0004)
    char                                          pa_0004[0x002C]                                               // 0x0004(0x002C)
    char                                          Weights;                                                      // 0x0030(0x0001)
    char                                          pa_0031[0x000B]                                               // 0x0031(0x000B)
};


// ScriptStruct  Engine.SkinWeightProfileInfo
// Struct Size::0x0010
struct FSkinWeightProfileInfo
{
    FName                                         Name;                                                         // 0x0000(0x0008)
    FPerPlatformBool                              DefaultProfile;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FPerPlatformInt                               DefaultProfileFromLODIndex;                                   // 0x000C(0x0004)
};


// ScriptStruct  Engine.TentDistribution
// Struct Size::0x000C
struct FTentDistribution
{
    float                                         TipAltitude;                                                  // 0x0000(0x0004)
    float                                         TipValue;                                                     // 0x0004(0x0004)
    float                                         Width;                                                        // 0x0008(0x0004)
};


// ScriptStruct  Engine.PrecomputedSkyLightInstanceData
// Struct Size::0x0160
struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
{
    FGuid                                         LightGuid;                                                    // 0x00A8(0x0010)
    float                                         AverageBrightness;                                            // 0x00B8(0x0004)
    char                                          pa_00BC[0x00A4]                                               // 0x00BC(0x00A4)
};


// ScriptStruct  Engine.SmartNameContainer
// Struct Size::0x0050
struct FSmartNameContainer
{
    char                                          pa_0000[0x0050]                                               // 0x0000(0x0050)
};


// ScriptStruct  Engine.SmartNameMapping
// Struct Size::0x0070
struct FSmartNameMapping
{
    char                                          pa_0000[0x0070]                                               // 0x0000(0x0070)
};


// ScriptStruct  Engine.CurveMetaData
// Struct Size::0x0020
struct FCurveMetaData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.SoundAttenuationSettings
// Struct Size::0x03A0
struct FSoundAttenuationSettings : public FBaseAttenuationSettings
{
    char                                          bAttenuate;                                                   // 0x00B0(0x0001)
    char                                          bSpatialize;                                                  // 0x00B0(0x0001)
    char                                          bAttenuateWithLPF;                                            // 0x00B0(0x0001)
    char                                          bEnableListenerFocus;                                         // 0x00B0(0x0001)
    char                                          bEnableFocusInterpolation;                                    // 0x00B0(0x0001)
    char                                          bEnableOcclusion;                                             // 0x00B0(0x0001)
    char                                          bUseComplexCollisionForOcclusion;                             // 0x00B0(0x0001)
    char                                          bEnableReverbSend;                                            // 0x00B0(0x0001)
    char                                          bEnablePriorityAttenuation;                                   // 0x00B1(0x0001)
    char                                          bApplyNormalizationToStereoSounds;                            // 0x00B1(0x0001)
    char                                          bEnableLogFrequencyScaling;                                   // 0x00B1(0x0001)
    char                                          bEnableSubmixSends;                                           // 0x00B1(0x0001)
    enum class ESoundSpatializationAlgorithm      SpatializationAlgorithm;                                      // 0x00B2(0x0001)
    char                                          pa_00B3[0x0001]                                               // 0x00B3(0x0001)
    float                                         BinauralRadius;                                               // 0x00B4(0x0004)
    enum class EAirAbsorptionMethod               AbsorptionMethod;                                             // 0x00B8(0x0001)
    enum class ECollisionChannel                  OcclusionTraceChannel;                                        // 0x00B9(0x0001)
    enum class EReverbSendMethod                  ReverbSendMethod;                                             // 0x00BA(0x0001)
    enum class EPriorityAttenuationMethod         PriorityAttenuationMethod;                                    // 0x00BB(0x0001)
    float                                         OmniRadius;                                                   // 0x00BC(0x0004)
    float                                         StereoSpread;                                                 // 0x00C0(0x0004)
    float                                         LPFRadiusMin;                                                 // 0x00C4(0x0004)
    float                                         LPFRadiusMax;                                                 // 0x00C8(0x0004)
    char                                          pa_00CC[0x0004]                                               // 0x00CC(0x0004)
    FRuntimeFloatCurve                            CustomLowpassAirAbsorptionCurve;                              // 0x00D0(0x0088)
    FRuntimeFloatCurve                            CustomHighpassAirAbsorptionCurve;                             // 0x0158(0x0088)
    float                                         LPFFrequencyAtMin;                                            // 0x01E0(0x0004)
    float                                         LPFFrequencyAtMax;                                            // 0x01E4(0x0004)
    float                                         HPFFrequencyAtMin;                                            // 0x01E8(0x0004)
    float                                         HPFFrequencyAtMax;                                            // 0x01EC(0x0004)
    float                                         FocusAzimuth;                                                 // 0x01F0(0x0004)
    float                                         NonFocusAzimuth;                                              // 0x01F4(0x0004)
    float                                         FocusDistanceScale;                                           // 0x01F8(0x0004)
    float                                         NonFocusDistanceScale;                                        // 0x01FC(0x0004)
    float                                         FocusPriorityScale;                                           // 0x0200(0x0004)
    float                                         NonFocusPriorityScale;                                        // 0x0204(0x0004)
    float                                         FocusVolumeAttenuation;                                       // 0x0208(0x0004)
    float                                         NonFocusVolumeAttenuation;                                    // 0x020C(0x0004)
    float                                         FocusAttackInterpSpeed;                                       // 0x0210(0x0004)
    float                                         FocusReleaseInterpSpeed;                                      // 0x0214(0x0004)
    float                                         OcclusionLowPassFilterFrequency;                              // 0x0218(0x0004)
    float                                         OcclusionVolumeAttenuation;                                   // 0x021C(0x0004)
    float                                         OcclusionInterpolationTime;                                   // 0x0220(0x0004)
    float                                         ReverbWetLevelMin;                                            // 0x0224(0x0004)
    float                                         ReverbWetLevelMax;                                            // 0x0228(0x0004)
    float                                         ReverbDistanceMin;                                            // 0x022C(0x0004)
    float                                         ReverbDistanceMax;                                            // 0x0230(0x0004)
    float                                         ManualReverbSendLevel;                                        // 0x0234(0x0004)
    FRuntimeFloatCurve                            CustomReverbSendCurve;                                        // 0x0238(0x0088)
    TArray<FAttenuationSubmixSendSettings>        SubmixSendSettings;                                           // 0x02C0(0x0010)
    float                                         PriorityAttenuationMin;                                       // 0x02D0(0x0004)
    float                                         PriorityAttenuationMax;                                       // 0x02D4(0x0004)
    float                                         PriorityAttenuationDistanceMin;                               // 0x02D8(0x0004)
    float                                         PriorityAttenuationDistanceMax;                               // 0x02DC(0x0004)
    float                                         ManualPriorityAttenuation;                                    // 0x02E0(0x0004)
    char                                          pa_02E4[0x0004]                                               // 0x02E4(0x0004)
    FRuntimeFloatCurve                            CustomPriorityAttenuationCurve;                               // 0x02E8(0x0088)
    FSoundAttenuationPluginSettings               PluginSettings;                                               // 0x0370(0x0030)
};


// ScriptStruct  Engine.SoundAttenuationPluginSettings
// Struct Size::0x0030
struct FSoundAttenuationPluginSettings
{
    TArray<USpatializationPluginSourceSettingsBase*>SpatializationPluginSettingsArray;                          // 0x0000(0x0010)
    TArray<UOcclusionPluginSourceSettingsBase*>   OcclusionPluginSettingsArray;                                 // 0x0010(0x0010)
    TArray<UReverbPluginSourceSettingsBase*>      ReverbPluginSettingsArray;                                    // 0x0020(0x0010)
};


// ScriptStruct  Engine.AttenuationSubmixSendSettings
// Struct Size::0x00A8
struct FAttenuationSubmixSendSettings
{
    USoundSubmix*                                 Submix;                                                       // 0x0000(0x0008)
    enum class ESubmixSendMethod                  SubmixSendMethod;                                             // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         SubmixSendLevelMin;                                           // 0x000C(0x0004)
    float                                         SubmixSendLevelMax;                                           // 0x0010(0x0004)
    float                                         SubmixSendDistanceMin;                                        // 0x0014(0x0004)
    float                                         SubmixSendDistanceMax;                                        // 0x0018(0x0004)
    float                                         ManualSubmixSendLevel;                                        // 0x001C(0x0004)
    FRuntimeFloatCurve                            CustomSubmixSendCurve;                                        // 0x0020(0x0088)
};


// ScriptStruct  Engine.PassiveSoundMixModifier
// Struct Size::0x0010
struct FPassiveSoundMixModifier
{
    USoundMix*                                    SoundMix;                                                     // 0x0000(0x0008)
    float                                         MinVolumeThreshold;                                           // 0x0008(0x0004)
    float                                         MaxVolumeThreshold;                                           // 0x000C(0x0004)
};


// ScriptStruct  Engine.SoundClassProperties
// Struct Size::0x0058
struct FSoundClassProperties
{
    float                                         Volume;                                                       // 0x0000(0x0004)
    float                                         Pitch;                                                        // 0x0004(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0008(0x0004)
    float                                         AttenuationDistanceScale;                                     // 0x000C(0x0004)
    float                                         StereoBleed;                                                  // 0x0010(0x0004)
    float                                         LFEBleed;                                                     // 0x0014(0x0004)
    float                                         VoiceCenterChannelVolume;                                     // 0x0018(0x0004)
    float                                         RadioFilterVolume;                                            // 0x001C(0x0004)
    float                                         RadioFilterVolumeThreshold;                                   // 0x0020(0x0004)
    char                                          bApplyEffects;                                                // 0x0024(0x0001)
    char                                          bAlwaysPlay;                                                  // 0x0024(0x0001)
    char                                          bIsUISound;                                                   // 0x0024(0x0001)
    char                                          bIsMusic;                                                     // 0x0024(0x0001)
    char                                          bCenterChannelOnly;                                           // 0x0024(0x0001)
    char                                          bApplyAmbientVolumes;                                         // 0x0024(0x0001)
    char                                          bReverb;                                                      // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
    float                                         Default2DReverbSendAmount;                                    // 0x0028(0x0004)
    enum class EAudioOutputTarget                 OutputTarget;                                                 // 0x002C(0x0001)
    enum class ESoundWaveLoadingBehavior          LoadingBehavior;                                              // 0x002D(0x0001)
    char                                          pa_002E[0x0002]                                               // 0x002E(0x0002)
    USoundSubmix*                                 DefaultSubmix;                                                // 0x0030(0x0008)
    char                                          pa_0038[0x0020]                                               // 0x0038(0x0020)
};


// ScriptStruct  Engine.SoundClassEditorData
// Struct Size::0x0008
struct FSoundClassEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.SoundConcurrencySettings
// Struct Size::0x0020
struct FSoundConcurrencySettings
{
    int32_t                                       MaxCount;                                                     // 0x0000(0x0004)
    char                                          bLimitToOwner;                                                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    enum class EMaxConcurrentResolutionRule       ResolutionRule;                                               // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         VolumeScale;                                                  // 0x000C(0x0004)
    float                                         VolumeScaleAttackTime;                                        // 0x0010(0x0004)
    char                                          bVolumeScaleCanRelease;                                       // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         VolumeScaleReleaseTime;                                       // 0x0018(0x0004)
    float                                         VoiceStealReleaseTime;                                        // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundNodeEditorData
// Struct Size::0x0008
struct FSoundNodeEditorData
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.SourceEffectChainEntry
// Struct Size::0x0010
struct FSourceEffectChainEntry
{
    USoundEffectSourcePreset*                     Preset;                                                       // 0x0000(0x0008)
    char                                          bBypass;                                                      // 0x0008(0x0001)
    char                                          pa_0009[0x0007]                                               // 0x0009(0x0007)
};


// ScriptStruct  Engine.SoundGroup
// Struct Size::0x0020
struct FSoundGroup
{
    enum class ESoundGroup                        SoundGroup;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       DisplayName;                                                  // 0x0008(0x0010)
    char                                          bAlwaysDecompressOnLoad;                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0003]                                               // 0x0019(0x0003)
    float                                         DecompressedDuration;                                         // 0x001C(0x0004)
};


// ScriptStruct  Engine.SoundClassAdjuster
// Struct Size::0x0020
struct FSoundClassAdjuster
{
    USoundClass*                                  SoundClassObject;                                             // 0x0000(0x0008)
    float                                         VolumeAdjuster;                                               // 0x0008(0x0004)
    float                                         PitchAdjuster;                                                // 0x000C(0x0004)
    float                                         LowPassFilterFrequency;                                       // 0x0010(0x0004)
    char                                          bApplyToChildren;                                             // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
    float                                         VoiceCenterChannelVolumeAdjuster;                             // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
};


// ScriptStruct  Engine.AudioEQEffect
// Struct Size::0x0040
struct FAudioEQEffect : public FAudioEffectParameters
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    float                                         FrequencyCenter0;                                             // 0x0010(0x0004)
    float                                         Gain0;                                                        // 0x0014(0x0004)
    float                                         Bandwidth0;                                                   // 0x0018(0x0004)
    float                                         FrequencyCenter1;                                             // 0x001C(0x0004)
    float                                         Gain1;                                                        // 0x0020(0x0004)
    float                                         Bandwidth1;                                                   // 0x0024(0x0004)
    float                                         FrequencyCenter2;                                             // 0x0028(0x0004)
    float                                         Gain2;                                                        // 0x002C(0x0004)
    float                                         Bandwidth2;                                                   // 0x0030(0x0004)
    float                                         FrequencyCenter3;                                             // 0x0034(0x0004)
    float                                         Gain3;                                                        // 0x0038(0x0004)
    float                                         Bandwidth3;                                                   // 0x003C(0x0004)
};


// ScriptStruct  Engine.DistanceDatum
// Struct Size::0x0014
struct FDistanceDatum
{
    float                                         FadeInDistanceStart;                                          // 0x0000(0x0004)
    float                                         FadeInDistanceEnd;                                            // 0x0004(0x0004)
    float                                         FadeOutDistanceStart;                                         // 0x0008(0x0004)
    float                                         FadeOutDistanceEnd;                                           // 0x000C(0x0004)
    float                                         Volume;                                                       // 0x0010(0x0004)
};


// ScriptStruct  Engine.ModulatorContinuousParams
// Struct Size::0x0020
struct FModulatorContinuousParams
{
    FName                                         ParameterName;                                                // 0x0000(0x0008)
    float                                         Default;                                                      // 0x0008(0x0004)
    float                                         MinInput;                                                     // 0x000C(0x0004)
    float                                         MaxInput;                                                     // 0x0010(0x0004)
    float                                         MinOutput;                                                    // 0x0014(0x0004)
    float                                         MaxOutput;                                                    // 0x0018(0x0004)
    enum class ModulationParamMode                ParamMode;                                                    // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.SoundSourceBusSendInfo
// Struct Size::0x00B0
struct FSoundSourceBusSendInfo
{
    enum class ESourceBusSendLevelControlMethod   SourceBusSendLevelControlMethod;                              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    USoundSourceBus*                              SoundSourceBus;                                               // 0x0008(0x0008)
    float                                         SendLevel;                                                    // 0x0010(0x0004)
    float                                         MinSendLevel;                                                 // 0x0014(0x0004)
    float                                         MaxSendLevel;                                                 // 0x0018(0x0004)
    float                                         MinSendDistance;                                              // 0x001C(0x0004)
    float                                         MaxSendDistance;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0028(0x0088)
};


// ScriptStruct  Engine.SoundSubmixSendInfo
// Struct Size::0x00B0
struct FSoundSubmixSendInfo
{
    enum class ESendLevelControlMethod            SendLevelControlMethod;                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    USoundSubmixBase*                             SoundSubmix;                                                  // 0x0008(0x0008)
    float                                         SendLevel;                                                    // 0x0010(0x0004)
    float                                         MinSendLevel;                                                 // 0x0014(0x0004)
    float                                         MaxSendLevel;                                                 // 0x0018(0x0004)
    float                                         MinSendDistance;                                              // 0x001C(0x0004)
    float                                         MaxSendDistance;                                              // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FRuntimeFloatCurve                            CustomSendLevelCurve;                                         // 0x0028(0x0088)
};


// ScriptStruct  Engine.SoundWaveEnvelopeTimeData
// Struct Size::0x0008
struct FSoundWaveEnvelopeTimeData
{
    float                                         Amplitude;                                                    // 0x0000(0x0004)
    float                                         TimeSec;                                                      // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralTimeData
// Struct Size::0x0018
struct FSoundWaveSpectralTimeData
{
    TArray<FSoundWaveSpectralDataEntry>           Data;                                                         // 0x0000(0x0010)
    float                                         TimeSec;                                                      // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
};


// ScriptStruct  Engine.SoundWaveSpectralDataEntry
// Struct Size::0x0008
struct FSoundWaveSpectralDataEntry
{
    float                                         Magnitude;                                                    // 0x0000(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0004(0x0004)
};


// ScriptStruct  Engine.SoundWaveEnvelopeDataPerSound
// Struct Size::0x0010
struct FSoundWaveEnvelopeDataPerSound
{
    float                                         Envelope;                                                     // 0x0000(0x0004)
    float                                         PlaybackTime;                                                 // 0x0004(0x0004)
    USoundWave*                                   SoundWave;                                                    // 0x0008(0x0008)
};


// ScriptStruct  Engine.SoundWaveSpectralDataPerSound
// Struct Size::0x0020
struct FSoundWaveSpectralDataPerSound
{
    TArray<FSoundWaveSpectralData>                SpectralData;                                                 // 0x0000(0x0010)
    float                                         PlaybackTime;                                                 // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    USoundWave*                                   SoundWave;                                                    // 0x0018(0x0008)
};


// ScriptStruct  Engine.SoundWaveSpectralData
// Struct Size::0x000C
struct FSoundWaveSpectralData
{
    float                                         FrequencyHz;                                                  // 0x0000(0x0004)
    float                                         Magnitude;                                                    // 0x0004(0x0004)
    float                                         NormalizedMagnitude;                                          // 0x0008(0x0004)
};


// ScriptStruct  Engine.StreamedAudioPlatformData
// Struct Size::0x0020
struct FStreamedAudioPlatformData
{
    char                                          pa_0000[0x0020]                                               // 0x0000(0x0020)
};


// ScriptStruct  Engine.SplineInstanceData
// Struct Size::0x0180
struct FSplineInstanceData : public FSceneComponentInstanceData
{
    bool                                          bSplineHasBeenEdited;                                         // 0x00A8(0x0001)
    char                                          pa_00A9[0x0007]                                               // 0x00A9(0x0007)
    FSplineCurves                                 SplineCurves;                                                 // 0x00B0(0x0068)
    FSplineCurves                                 SplineCurvesPreUCS;                                           // 0x0118(0x0068)
};


// ScriptStruct  Engine.SplineCurves
// Struct Size::0x0068
struct FSplineCurves
{
    FInterpCurveVector                            Position;                                                     // 0x0000(0x0018)
    FInterpCurveQuat                              Rotation;                                                     // 0x0018(0x0018)
    FInterpCurveVector                            Scale;                                                        // 0x0030(0x0018)
    FInterpCurveFloat                             ReparamTable;                                                 // 0x0048(0x0018)
    USplineMetadata*                              MetaData;                                                     // 0x0060(0x0008)
};


// ScriptStruct  Engine.SplinePoint
// Struct Size::0x0044
struct FSplinePoint
{
    float                                         InputKey;                                                     // 0x0000(0x0004)
    FVector                                       Position;                                                     // 0x0004(0x000C)
    FVector                                       ArriveTangent;                                                // 0x0010(0x000C)
    FVector                                       LeaveTangent;                                                 // 0x001C(0x000C)
    FRotator                                      Rotation;                                                     // 0x0028(0x000C)
    FVector                                       Scale;                                                        // 0x0034(0x000C)
    enum class ESplinePointType                   Type;                                                         // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
};


// ScriptStruct  Engine.SplineMeshInstanceData
// Struct Size::0x00D8
struct FSplineMeshInstanceData : public FSceneComponentInstanceData
{
    FVector                                       StartPos;                                                     // 0x00A8(0x000C)
    FVector                                       EndPos;                                                       // 0x00B4(0x000C)
    FVector                                       StartTangent;                                                 // 0x00C0(0x000C)
    FVector                                       EndTangent;                                                   // 0x00CC(0x000C)
};


// ScriptStruct  Engine.SplineMeshParams
// Struct Size::0x0058
struct FSplineMeshParams
{
    FVector                                       StartPos;                                                     // 0x0000(0x000C)
    FVector                                       StartTangent;                                                 // 0x000C(0x000C)
    FVector2D                                     StartScale;                                                   // 0x0018(0x0008)
    float                                         StartRoll;                                                    // 0x0020(0x0004)
    FVector2D                                     StartOffset;                                                  // 0x0024(0x0008)
    FVector                                       EndPos;                                                       // 0x002C(0x000C)
    FVector2D                                     EndScale;                                                     // 0x0038(0x0008)
    FVector                                       EndTangent;                                                   // 0x0040(0x000C)
    float                                         EndRoll;                                                      // 0x004C(0x0004)
    FVector2D                                     EndOffset;                                                    // 0x0050(0x0008)
};


// ScriptStruct  Engine.MaterialRemapIndex
// Struct Size::0x0018
struct FMaterialRemapIndex
{
    uint32_t                                      ImportVersionKey;                                             // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<int32_t>                               MaterialRemap;                                                // 0x0008(0x0010)
};


// ScriptStruct  Engine.StaticMaterial
// Struct Size::0x0030
struct FStaticMaterial
{
    UMaterialInterface*                           MaterialInterface;                                            // 0x0000(0x0008)
    FName                                         MaterialSlotName;                                             // 0x0008(0x0008)
    FName                                         ImportedMaterialSlotName;                                     // 0x0010(0x0008)
    FMeshUVChannelInfo                            UVChannelData;                                                // 0x0018(0x0014)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  Engine.AssetEditorOrbitCameraPosition
// Struct Size::0x0028
struct FAssetEditorOrbitCameraPosition
{
    bool                                          bIsSet;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FVector                                       CamOrbitPoint;                                                // 0x0004(0x000C)
    FVector                                       CamOrbitZoom;                                                 // 0x0010(0x000C)
    FRotator                                      CamOrbitRotation;                                             // 0x001C(0x000C)
};


// ScriptStruct  Engine.MeshSectionInfoMap
// Struct Size::0x0050
struct FMeshSectionInfoMap
{
    TMap<uint32_t,FMeshSectionInfo>               Map;                                                          // 0x0000(0x0050)
};


// ScriptStruct  Engine.MeshSectionInfo
// Struct Size::0x0008
struct FMeshSectionInfo
{
    int32_t                                       MaterialIndex;                                                // 0x0000(0x0004)
    bool                                          bEnableCollision;                                             // 0x0004(0x0001)
    bool                                          bCastShadow;                                                  // 0x0005(0x0001)
    bool                                          bForceOpaque;                                                 // 0x0006(0x0001)
    char                                          pa_0007[0x0001]                                               // 0x0007(0x0001)
};


// ScriptStruct  Engine.StaticMeshSourceModel
// Struct Size::0x0070
struct FStaticMeshSourceModel
{
    FMeshBuildSettings                            BuildSettings;                                                // 0x0000(0x0030)
    FMeshReductionSettings                        ReductionSettings;                                            // 0x0030(0x0024)
    float                                         LODDistance;                                                  // 0x0054(0x0004)
    FPerPlatformFloat                             ScreenSize;                                                   // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
    FString                                       SourceImportFilename;                                         // 0x0060(0x0010)
};


// ScriptStruct  Engine.StaticMeshOptimizationSettings
// Struct Size::0x001C
struct FStaticMeshOptimizationSettings
{
    enum class EOptimizationType                  ReductionMethod;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         NumOfTrianglesPercentage;                                     // 0x0004(0x0004)
    float                                         MaxDeviationPercentage;                                       // 0x0008(0x0004)
    float                                         WeldingThreshold;                                             // 0x000C(0x0004)
    bool                                          bRecalcNormals;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    float                                         NormalsThreshold;                                             // 0x0014(0x0004)
    char                                          SilhouetteImportance;                                         // 0x0018(0x0001)
    char                                          TextureImportance;                                            // 0x0019(0x0001)
    char                                          ShadingImportance;                                            // 0x001A(0x0001)
    char                                          pa_001B[0x0001]                                               // 0x001B(0x0001)
};


// ScriptStruct  Engine.StaticMeshComponentInstanceData
// Struct Size::0x0130
struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
{
    UStaticMesh*                                  StaticMesh;                                                   // 0x00F0(0x0008)
    TArray<FStaticMeshVertexColorLODData>         VertexColorLODs;                                              // 0x00F8(0x0010)
    TArray<FGuid>                                 CachedStaticLighting;                                         // 0x0108(0x0010)
    TArray<FStreamingTextureBuildInfo>            StreamingTextureData;                                         // 0x0118(0x0010)
    char                                          pa_0128[0x0008]                                               // 0x0128(0x0008)
};


// ScriptStruct  Engine.StreamingTextureBuildInfo
// Struct Size::0x000C
struct FStreamingTextureBuildInfo
{
    uint32_t                                      PackedRelativeBox;                                            // 0x0000(0x0004)
    int32_t                                       TextureLevelIndex;                                            // 0x0004(0x0004)
    float                                         TexelFactor;                                                  // 0x0008(0x0004)
};


// ScriptStruct  Engine.StaticMeshVertexColorLODData
// Struct Size::0x0028
struct FStaticMeshVertexColorLODData
{
    TArray<FPaintedVertex>                        PaintedVertices;                                              // 0x0000(0x0010)
    TArray<FColor>                                VertexBufferColors;                                           // 0x0010(0x0010)
    uint32_t                                      LODIndex;                                                     // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
};


// ScriptStruct  Engine.PaintedVertex
// Struct Size::0x0020
struct FPaintedVertex
{
    FVector                                       Position;                                                     // 0x0000(0x000C)
    FColor                                        Color;                                                        // 0x000C(0x0004)
    FVector4                                      Normal;                                                       // 0x0010(0x0010)
};


// ScriptStruct  Engine.StaticMeshComponentLODInfo
// Struct Size::0x0090
struct FStaticMeshComponentLODInfo
{
    char                                          pa_0000[0x0090]                                               // 0x0000(0x0090)
};


// ScriptStruct  Engine.StaticParameterSet
// Struct Size::0x0040
struct FStaticParameterSet
{
    TArray<FStaticSwitchParameter>                StaticSwitchParameters;                                       // 0x0000(0x0010)
    TArray<FStaticComponentMaskParameter>         StaticComponentMaskParameters;                                // 0x0010(0x0010)
    TArray<FStaticTerrainLayerWeightParameter>    TerrainLayerWeightParameters;                                 // 0x0020(0x0010)
    TArray<FStaticMaterialLayersParameter>        MaterialLayersParameters;                                     // 0x0030(0x0010)
};


// ScriptStruct  Engine.StaticParameterBase
// Struct Size::0x0024
struct FStaticParameterBase
{
    FMaterialParameterInfo                        ParameterInfo;                                                // 0x0000(0x0010)
    bool                                          bOverride;                                                    // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FGuid                                         ExpressionGUID;                                               // 0x0014(0x0010)
};


// ScriptStruct  Engine.StaticMaterialLayersParameter
// Struct Size::0x0068
struct FStaticMaterialLayersParameter : public FStaticParameterBase
{
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    FMaterialLayersFunctions                      Value;                                                        // 0x0028(0x0040)
};


// ScriptStruct  Engine.StaticTerrainLayerWeightParameter
// Struct Size::0x002C
struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
{
    int32_t                                       WeightmapIndex;                                               // 0x0024(0x0004)
    bool                                          bWeightBasedBlend;                                            // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
};


// ScriptStruct  Engine.StaticComponentMaskParameter
// Struct Size::0x0028
struct FStaticComponentMaskParameter : public FStaticParameterBase
{
    bool                                          R;                                                            // 0x0024(0x0001)
    bool                                          G;                                                            // 0x0025(0x0001)
    bool                                          B;                                                            // 0x0026(0x0001)
    bool                                          A;                                                            // 0x0027(0x0001)
};


// ScriptStruct  Engine.StaticSwitchParameter
// Struct Size::0x0028
struct FStaticSwitchParameter : public FStaticParameterBase
{
    bool                                          Value;                                                        // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};
struct FString


// ScriptStruct  Engine.EquirectProps
// Struct Size::0x0048
struct FEquirectProps
{
    FBox2D                                        LeftUVRect;                                                   // 0x0000(0x0014)
    FBox2D                                        RightUVRect;                                                  // 0x0014(0x0014)
    FVector2D                                     LeftScale;                                                    // 0x0028(0x0008)
    FVector2D                                     RightScale;                                                   // 0x0030(0x0008)
    FVector2D                                     LeftBias;                                                     // 0x0038(0x0008)
    FVector2D                                     RightBias;                                                    // 0x0040(0x0008)
};


// ScriptStruct  Engine.StringCurve
// Struct Size::0x0088
struct FStringCurve : public FIndexedCurve
{
    FString                                       DefaultValue;                                                 // 0x0068(0x0010)
    TArray<FStringCurveKey>                       Keys;                                                         // 0x0078(0x0010)
};


// ScriptStruct  Engine.StringCurveKey
// Struct Size::0x0018
struct FStringCurveKey
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    FString                                       Value;                                                        // 0x0008(0x0010)
};


// ScriptStruct  Engine.SubsurfaceProfileStruct
// Struct Size::0x008C
struct FSubsurfaceProfileStruct
{
    FLinearColor                                  SurfaceAlbedo;                                                // 0x0000(0x0010)
    FLinearColor                                  MeanFreePathColor;                                            // 0x0010(0x0010)
    float                                         MeanFreePathDistance;                                         // 0x0020(0x0004)
    float                                         WorldUnitScale;                                               // 0x0024(0x0004)
    bool                                          bEnableBurley;                                                // 0x0028(0x0001)
    char                                          pa_0029[0x0003]                                               // 0x0029(0x0003)
    float                                         ScatterRadius;                                                // 0x002C(0x0004)
    FLinearColor                                  SubsurfaceColor;                                              // 0x0030(0x0010)
    FLinearColor                                  FalloffColor;                                                 // 0x0040(0x0010)
    FLinearColor                                  BoundaryColorBleed;                                           // 0x0050(0x0010)
    float                                         ExtinctionScale;                                              // 0x0060(0x0004)
    float                                         NormalScale;                                                  // 0x0064(0x0004)
    float                                         ScatteringDistribution;                                       // 0x0068(0x0004)
    float                                         IOR;                                                          // 0x006C(0x0004)
    float                                         Roughness0;                                                   // 0x0070(0x0004)
    float                                         Roughness1;                                                   // 0x0074(0x0004)
    float                                         LobeMix;                                                      // 0x0078(0x0004)
    FLinearColor                                  TransmissionTintColor;                                        // 0x007C(0x0010)
};


// ScriptStruct  Engine.TextureFormatSettings
// Struct Size::0x0002
struct FTextureFormatSettings
{
    enum class TextureCompressionSettings         CompressionSettings;                                          // 0x0000(0x0001)
    char                                          CompressionNoAlpha;                                           // 0x0001(0x0001)
    char                                          CompressionNone;                                              // 0x0001(0x0001)
    char                                          CompressionYCoCg;                                             // 0x0001(0x0001)
    char                                          SRGB;                                                         // 0x0001(0x0001)
};


// ScriptStruct  Engine.TexturePlatformData
// Struct Size::0x0030
struct FTexturePlatformData
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.TextureSource
// Struct Size::0x0030
struct FTextureSource
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  Engine.TextureSourceBlock
// Struct Size::0x0018
struct FTextureSourceBlock
{
    int32_t                                       BlockX;                                                       // 0x0000(0x0004)
    int32_t                                       BlockY;                                                       // 0x0004(0x0004)
    int32_t                                       SizeX;                                                        // 0x0008(0x0004)
    int32_t                                       SizeY;                                                        // 0x000C(0x0004)
    int32_t                                       NumSlices;                                                    // 0x0010(0x0004)
    int32_t                                       NumMips;                                                      // 0x0014(0x0004)
};


// ScriptStruct  Engine.TextureLODGroup
// Struct Size::0x0054
struct FTextureLODGroup
{
    enum class TextureGroup                       Group;                                                        // 0x0000(0x0001)
    char                                          pa_0001[0x000B]                                               // 0x0001(0x000B)
    int32_t                                       LODBias;                                                      // 0x000C(0x0004)
    int32_t                                       LODBias_Smaller;                                              // 0x0010(0x0004)
    int32_t                                       LODBias_Smallest;                                             // 0x0014(0x0004)
    char                                          pa_0018[0x0004]                                               // 0x0018(0x0004)
    int32_t                                       NumStreamedMips;                                              // 0x001C(0x0004)
    enum class TextureMipGenSettings              MipGenSettings;                                               // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    int32_t                                       MinLODSize;                                                   // 0x0024(0x0004)
    int32_t                                       MaxLODSize;                                                   // 0x0028(0x0004)
    int32_t                                       MaxLODSize_Smaller;                                           // 0x002C(0x0004)
    int32_t                                       MaxLODSize_Smallest;                                          // 0x0030(0x0004)
    int32_t                                       OptionalLODBias;                                              // 0x0034(0x0004)
    int32_t                                       OptionalMaxLODSize;                                           // 0x0038(0x0004)
    char                                          pa_003C[0x0004]                                               // 0x003C(0x0004)
    FName                                         MinMagFilter;                                                 // 0x0040(0x0008)
    FName                                         MipFilter;                                                    // 0x0048(0x0008)
    enum class ETextureMipLoadOptions             MipLoadOptions;                                               // 0x0050(0x0001)
    bool                                          DuplicateNonOptionalMips;                                     // 0x0051(0x0001)
    char                                          pa_0052[0x0002]                                               // 0x0052(0x0002)
};


// ScriptStruct  Engine.StreamingRenderAssetPrimitiveInfo
// Struct Size::0x0030
struct FStreamingRenderAssetPrimitiveInfo
{
    UStreamableRenderAsset*                       RenderAsset;                                                  // 0x0000(0x0008)
    FBoxSphereBounds                              Bounds;                                                       // 0x0008(0x001C)
    float                                         TexelFactor;                                                  // 0x0024(0x0004)
    uint32_t                                      PackedRelativeBox;                                            // 0x0028(0x0004)
    char                                          bAllowInvalidTexelFactorWhenUnregistered;                     // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  Engine.TTTrackBase
// Struct Size::0x0018
struct FTTTrackBase
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    FName                                         TrackName;                                                    // 0x0008(0x0008)
    bool                                          bIsExternalCurve;                                             // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  Engine.TTPropertyTrack
// Struct Size::0x0020
struct FTTPropertyTrack : public FTTTrackBase
{
    FName                                         PropertyName;                                                 // 0x0018(0x0008)
};


// ScriptStruct  Engine.TTLinearColorTrack
// Struct Size::0x0028
struct FTTLinearColorTrack : public FTTPropertyTrack
{
    UCurveLinearColor*                            CurveLinearColor;                                             // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTVectorTrack
// Struct Size::0x0028
struct FTTVectorTrack : public FTTPropertyTrack
{
    UCurveVector*                                 CurveVector;                                                  // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTFloatTrack
// Struct Size::0x0028
struct FTTFloatTrack : public FTTPropertyTrack
{
    UCurveFloat*                                  CurveFloat;                                                   // 0x0020(0x0008)
};


// ScriptStruct  Engine.TTEventTrack
// Struct Size::0x0028
struct FTTEventTrack : public FTTTrackBase
{
    FName                                         FunctionName;                                                 // 0x0018(0x0008)
    UCurveFloat*                                  CurveKeys;                                                    // 0x0020(0x0008)
};


// ScriptStruct  Engine.TimeStretchCurveInstance
// Struct Size::0x0030
struct FTimeStretchCurveInstance
{
    bool                                          bHasValidData;                                                // 0x0000(0x0001)
    char                                          pa_0001[0x002F]                                               // 0x0001(0x002F)
};


// ScriptStruct  Engine.TimeStretchCurve
// Struct Size::0x0028
struct FTimeStretchCurve
{
    float                                         SamplingRate;                                                 // 0x0000(0x0004)
    float                                         CurveValueMinPrecision;                                       // 0x0004(0x0004)
    TArray<FTimeStretchCurveMarker>               Markers;                                                      // 0x0008(0x0010)
    float                                         Sum_dT_i_by_C_i;                                              // 0x0018(0x0004)
    char                                          pa_001C[0x000C]                                               // 0x001C(0x000C)
};


// ScriptStruct  Engine.TimeStretchCurveMarker
// Struct Size::0x0010
struct FTimeStretchCurveMarker
{
    float                                         Time;                                                         // 0x0000(0x0004)
    char                                          pa_0004[0x0008]                                               // 0x0004(0x0008)
    float                                         Alpha;                                                        // 0x000C(0x0004)
};


// ScriptStruct  Engine.TouchInputControl
// Struct Size::0x0068
struct FTouchInputControl
{
    UTexture2D*                                   Image1;                                                       // 0x0000(0x0008)
    UTexture2D*                                   Image2;                                                       // 0x0008(0x0008)
    FVector2D                                     Center;                                                       // 0x0010(0x0008)
    FVector2D                                     VisualSize;                                                   // 0x0018(0x0008)
    FVector2D                                     ThumbSize;                                                    // 0x0020(0x0008)
    FVector2D                                     InteractionSize;                                              // 0x0028(0x0008)
    FVector2D                                     InputScale;                                                   // 0x0030(0x0008)
    FKey                                          MainInputKey;                                                 // 0x0038(0x0018)
    FKey                                          AltInputKey;                                                  // 0x0050(0x0018)
};


// ScriptStruct  Engine.HardwareCursorReference
// Struct Size::0x0010
struct FHardwareCursorReference
{
    FName                                         CursorPath;                                                   // 0x0000(0x0008)
    FVector2D                                     HotSpot;                                                      // 0x0008(0x0008)
};


// ScriptStruct  Engine.GlobalColorThemeData
// Struct Size::0x0030
struct FGlobalColorThemeData
{
    FString                                       Desc;                                                         // 0x0000(0x0010)
    FString                                       Tag;                                                          // 0x0010(0x0010)
    TArray<FLinearColor>                          Colors;                                                       // 0x0020(0x0010)
};


// ScriptStruct  Engine.VirtualTextureBuildSettings
// Struct Size::0x000C
struct FVirtualTextureBuildSettings
{
    int32_t                                       TileSize;                                                     // 0x0000(0x0004)
    int32_t                                       TileBorderSize;                                               // 0x0004(0x0004)
    bool                                          bEnableCompressCrunch;                                        // 0x0008(0x0001)
    bool                                          bEnableCompressZlib;                                          // 0x0009(0x0001)
    char                                          pa_000A[0x0002]                                               // 0x000A(0x0002)
};


// ScriptStruct  Engine.VirtualTextureSpacePoolConfig
// Struct Size::0x0020
struct FVirtualTextureSpacePoolConfig
{
    int32_t                                       MinTileSize;                                                  // 0x0000(0x0004)
    int32_t                                       MaxTileSize;                                                  // 0x0004(0x0004)
    TArray<enum class EPixelFormat>               Formats;                                                      // 0x0008(0x0010)
    int32_t                                       SizeInMegabyte;                                               // 0x0018(0x0004)
    bool                                          bAllowSizeScale;                                              // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.VoiceSettings
// Struct Size::0x0018
struct FVoiceSettings
{
    USceneComponent*                              ComponentToAttachTo;                                          // 0x0000(0x0008)
    USoundAttenuation*                            AttenuationSettings;                                          // 0x0008(0x0008)
    USoundEffectSourcePresetChain*                SourceEffectChain;                                            // 0x0010(0x0008)
};


// ScriptStruct  Engine.StreamingLevelsToConsider
// Struct Size::0x0028
struct FStreamingLevelsToConsider
{
    TArray<FLevelStreamingWrapper>                StreamingLevels;                                              // 0x0000(0x0010)
    char                                          pa_0010[0x0018]                                               // 0x0010(0x0018)
};


// ScriptStruct  Engine.LevelStreamingWrapper
// Struct Size::0x0008
struct FLevelStreamingWrapper
{
    ULevelStreaming*                              StreamingLevel;                                               // 0x0000(0x0008)
};


// ScriptStruct  Engine.LevelCollection
// Struct Size::0x0078
struct FLevelCollection
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AGameStateBase*                               GameState;                                                    // 0x0008(0x0008)
    UNetDriver*                                   NetDriver;                                                    // 0x0010(0x0008)
    UDemoNetDriver*                               DemoNetDriver;                                                // 0x0018(0x0008)
    ULevel*                                       PersistentLevel;                                              // 0x0020(0x0008)
    TSet<ULevel*>                                 Levels;                                                       // 0x0028(0x0050)
};


// ScriptStruct  Engine.EndPhysicsTickFunction
// Struct Size::0x0030
struct FEndPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.StartPhysicsTickFunction
// Struct Size::0x0030
struct FStartPhysicsTickFunction : public FTickFunction
{
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  Engine.LevelViewportInfo
// Struct Size::0x0020
struct FLevelViewportInfo
{
    FVector                                       CamPosition;                                                  // 0x0000(0x000C)
    FRotator                                      CamRotation;                                                  // 0x000C(0x000C)
    float                                         CamOrthoZoom;                                                 // 0x0018(0x0004)
    bool                                          CamUpdated;                                                   // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  Engine.WorldPSCPool
// Struct Size::0x0058
struct FWorldPSCPool
{
    TMap<UParticleSystem*,FPSCPool>               WorldParticleSystemPools;                                     // 0x0000(0x0050)
    char                                          pa_0050[0x0008]                                               // 0x0050(0x0008)
};


// ScriptStruct  Engine.PSCPool
// Struct Size::0x0010
struct FPSCPool
{
    TArray<FPSCPoolElem>                          FreeElements;                                                 // 0x0000(0x0010)
};


// ScriptStruct  Engine.PSCPoolElem
// Struct Size::0x0010
struct FPSCPoolElem
{
    UParticleSystemComponent*                     PSC;                                                          // 0x0000(0x0008)
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
};


// ScriptStruct  Engine.BroadphaseSettings
// Struct Size::0x0040
struct FBroadphaseSettings
{
    bool                                          bUseMBPOnClient;                                              // 0x0000(0x0001)
    bool                                          bUseMBPOnServer;                                              // 0x0001(0x0001)
    bool                                          bUseMBPOuterBounds;                                           // 0x0002(0x0001)
    char                                          pa_0003[0x0001]                                               // 0x0003(0x0001)
    FBox                                          MBPBounds;                                                    // 0x0004(0x001C)
    FBox                                          MBPOuterBounds;                                               // 0x0020(0x001C)
    uint32_t                                      MBPNumSubdivs;                                                // 0x003C(0x0004)
};


// ScriptStruct  Engine.HierarchicalSimplification
// Struct Size::0x0168
struct FHierarchicalSimplification
{
    float                                         TransitionScreenSize;                                         // 0x0000(0x0004)
    float                                         OverrideDrawDistance;                                         // 0x0004(0x0004)
    char                                          bUseOverrideDrawDistance;                                     // 0x0008(0x0001)
    char                                          bAllowSpecificExclusion;                                      // 0x0008(0x0001)
    char                                          bSimplifyMesh;                                                // 0x0008(0x0001)
    char                                          bOnlyGenerateClustersForVolumes;                              // 0x0008(0x0001)
    char                                          bReusePreviousLevelClusters;                                  // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    FMeshProxySettings                            ProxySetting;                                                 // 0x000C(0x00A8)
    FMeshMergingSettings                          MergeSetting;                                                 // 0x00B4(0x00A8)
    float                                         DesiredBoundRadius;                                           // 0x015C(0x0004)
    float                                         DesiredFillingPercentage;                                     // 0x0160(0x0004)
    int32_t                                       MinNumberOfActorsToBuild;                                     // 0x0164(0x0004)
};


// ScriptStruct  Engine.NetViewer
// Struct Size::0x0030
struct FNetViewer
{
    UNetConnection*                               Connection;                                                   // 0x0000(0x0008)
    AActor*                                       InViewer;                                                     // 0x0008(0x0008)
    AActor*                                       ViewTarget;                                                   // 0x0010(0x0008)
    FVector                                       ViewLocation;                                                 // 0x0018(0x000C)
    FVector                                       ViewDir;                                                      // 0x0024(0x000C)
};


// ScriptStruct  Engine.LightmassWorldInfoSettings
// Struct Size::0x004C
struct FLightmassWorldInfoSettings
{
    float                                         StaticLightingLevelScale;                                     // 0x0000(0x0004)
    int32_t                                       NumIndirectLightingBounces;                                   // 0x0004(0x0004)
    int32_t                                       NumSkyLightingBounces;                                        // 0x0008(0x0004)
    float                                         IndirectLightingQuality;                                      // 0x000C(0x0004)
    float                                         IndirectLightingSmoothness;                                   // 0x0010(0x0004)
    FColor                                        EnvironmentColor;                                             // 0x0014(0x0004)
    float                                         EnvironmentIntensity;                                         // 0x0018(0x0004)
    float                                         EmissiveBoost;                                                // 0x001C(0x0004)
    float                                         DiffuseBoost;                                                 // 0x0020(0x0004)
    enum class EVolumeLightingMethod              VolumeLightingMethod;                                         // 0x0024(0x0001)
    char                                          bUseAmbientOcclusion;                                         // 0x0025(0x0001)
    char                                          bGenerateAmbientOcclusionMaterialMask;                        // 0x0025(0x0001)
    char                                          bVisualizeMaterialDiffuse;                                    // 0x0025(0x0001)
    char                                          bVisualizeAmbientOcclusion;                                   // 0x0025(0x0001)
    char                                          bCompressLightmaps;                                           // 0x0025(0x0001)
    char                                          pa_0026[0x0002]                                               // 0x0026(0x0002)
    float                                         VolumetricLightmapDetailCellSize;                             // 0x0028(0x0004)
    float                                         VolumetricLightmapMaximumBrickMemoryMb;                       // 0x002C(0x0004)
    float                                         VolumetricLightmapSphericalHarmonicSmoothing;                 // 0x0030(0x0004)
    float                                         VolumeLightSamplePlacementScale;                              // 0x0034(0x0004)
    float                                         DirectIlluminationOcclusionFraction;                          // 0x0038(0x0004)
    float                                         IndirectIlluminationOcclusionFraction;                        // 0x003C(0x0004)
    float                                         OcclusionExponent;                                            // 0x0040(0x0004)
    float                                         FullyOccludedSamplesFraction;                                 // 0x0044(0x0004)
    float                                         MaxOcclusionDistance;                                         // 0x0048(0x0004)
};


// ScriptStruct  Serialization.StructSerializerTestStruct
// Struct Size::0x0450
struct FStructSerializerTestStruct
{
    FStructSerializerNumericTestStruct            Numerics;                                                     // 0x0000(0x0030)
    FStructSerializerBooleanTestStruct            Booleans;                                                     // 0x0030(0x0003)
    char                                          pa_0033[0x0005]                                               // 0x0033(0x0005)
    FStructSerializerObjectTestStruct             Objects;                                                      // 0x0038(0x00A0)
    char                                          pa_00D8[0x0008]                                               // 0x00D8(0x0008)
    FStructSerializerBuiltinTestStruct            Builtins;                                                     // 0x00E0(0x0090)
    FStructSerializerArrayTestStruct              Arrays;                                                       // 0x0170(0x0060)
    FStructSerializerMapTestStruct                Maps;                                                         // 0x01D0(0x0140)
    FStructSerializerSetTestStruct                Sets;                                                         // 0x0310(0x0140)
};


// ScriptStruct  Serialization.StructSerializerSetTestStruct
// Struct Size::0x0140
struct FStructSerializerSetTestStruct
{
    TSet<FString>                                 StrSet;                                                       // 0x0000(0x0050)
    TSet<int32_t>                                 IntSet;                                                       // 0x0050(0x0050)
    TSet<FName>                                   NameSet;                                                      // 0x00A0(0x0050)
    TSet<FStructSerializerBuiltinTestStruct>      StructSet;                                                    // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerBuiltinTestStruct
// Struct Size::0x0090
struct FStructSerializerBuiltinTestStruct
{
    FGuid                                         Guid;                                                         // 0x0000(0x0010)
    FName                                         Name;                                                         // 0x0010(0x0008)
    FString                                       String;                                                       // 0x0018(0x0010)
    FText                                         Text;                                                         // 0x0028(0x0018)
    FVector                                       Vector;                                                       // 0x0040(0x000C)
    char                                          pa_004C[0x0004]                                               // 0x004C(0x0004)
    FVector4                                      Vector4;                                                      // 0x0050(0x0010)
    FRotator                                      Rotator;                                                      // 0x0060(0x000C)
    char                                          pa_006C[0x0004]                                               // 0x006C(0x0004)
    FQuat                                         Quat;                                                         // 0x0070(0x0010)
    FColor                                        Color;                                                        // 0x0080(0x0004)
    char                                          pa_0084[0x000C]                                               // 0x0084(0x000C)
};


// ScriptStruct  Serialization.StructSerializerMapTestStruct
// Struct Size::0x0140
struct FStructSerializerMapTestStruct
{
    TMap<int32_t,FString>                         IntToStr;                                                     // 0x0000(0x0050)
    TMap<FString,FString>                         StrToStr;                                                     // 0x0050(0x0050)
    TMap<FString,FVector>                         StrToVec;                                                     // 0x00A0(0x0050)
    TMap<FString,FStructSerializerBuiltinTestStruct>StrToStruct;                                                // 0x00F0(0x0050)
};


// ScriptStruct  Serialization.StructSerializerArrayTestStruct
// Struct Size::0x0060
struct FStructSerializerArrayTestStruct
{
    TArray<int32_t>                               Int32Array;                                                   // 0x0000(0x0010)
    TArray<char>                                  ByteArray;                                                    // 0x0010(0x0010)
    int32_t                                       StaticSingleElement;                                          // 0x0020(0x0004)
    int32_t                                       StaticInt32Array;                                             // 0x0024(0x0004)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
    float                                         StaticFloatArray;                                             // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
    TArray<FVector>                               VectorArray;                                                  // 0x0040(0x0010)
    TArray<FStructSerializerBuiltinTestStruct>    StructArray;                                                  // 0x0050(0x0010)
};


// ScriptStruct  Serialization.StructSerializerObjectTestStruct
// Struct Size::0x00A0
struct FStructSerializerObjectTestStruct
{
    UObject*                                      Class;                                                        // 0x0000(0x0008)
    UMetaData*                                    SubClass;                                                     // 0x0008(0x0008)
    TSoftClassPtr<UObject>                        SoftClass;                                                    // 0x0010(0x0028)
    UObject*                                      Object;                                                       // 0x0038(0x0008)
    TWeakObjectPtr<UMetaData>                     WeakObject;                                                   // 0x0040(0x0008)
    TSoftObjectPtr<UMetaData>                     SoftObject;                                                   // 0x0048(0x0028)
    FSoftClassPath                                ClassPath;                                                    // 0x0070(0x0018)
    FSoftObjectPath                               ObjectPath;                                                   // 0x0088(0x0018)
};


// ScriptStruct  Serialization.StructSerializerBooleanTestStruct
// Struct Size::0x0003
struct FStructSerializerBooleanTestStruct
{
    bool                                          BoolFalse;                                                    // 0x0000(0x0001)
    bool                                          BoolTrue;                                                     // 0x0001(0x0001)
    char                                          Bitfield0;                                                    // 0x0002(0x0001)
    char                                          Bitfield1;                                                    // 0x0002(0x0001)
    char                                          Bitfield2Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield3;                                                    // 0x0002(0x0001)
    char                                          Bitfield4Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield5Set;                                                 // 0x0002(0x0001)
    char                                          Bitfield6;                                                    // 0x0002(0x0001)
    char                                          Bitfield7Set;                                                 // 0x0002(0x0001)
};


// ScriptStruct  Serialization.StructSerializerNumericTestStruct
// Struct Size::0x0030
struct FStructSerializerNumericTestStruct
{
    int8_t                                        int8;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    int16_t                                       int16;                                                        // 0x0002(0x0002)
    int32_t                                       int32;                                                        // 0x0004(0x0004)
    int64_t                                       int64;                                                        // 0x0008(0x0008)
    char                                          uint8;                                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0001]                                               // 0x0011(0x0001)
    uint16_t                                      uint16;                                                       // 0x0012(0x0002)
    uint32_t                                      uint32;                                                       // 0x0014(0x0004)
    uint64_t                                      uint64;                                                       // 0x0018(0x0008)
    float                                         float;                                                        // 0x0020(0x0004)
    char                                          pa_0024[0x0004]                                               // 0x0024(0x0004)
    double                                        Double;                                                       // 0x0028(0x0008)
};


// ScriptStruct  Serialization.StructSerializerByteArray
// Struct Size::0x0038
struct FStructSerializerByteArray
{
    int32_t                                       Dummy1;                                                       // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    TArray<char>                                  ByteArray;                                                    // 0x0008(0x0010)
    int32_t                                       Dummy2;                                                       // 0x0018(0x0004)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    TArray<int8_t>                                Int8Array;                                                    // 0x0020(0x0010)
    int32_t                                       Dummy3;                                                       // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  Overlay.OverlayItem
// Struct Size::0x0028
struct FOverlayItem
{
    FTimespan                                     StartTime;                                                    // 0x0000(0x0008)
    FTimespan                                     EndTime;                                                      // 0x0008(0x0008)
    FString                                       Text;                                                         // 0x0010(0x0010)
    FVector2D                                     Position;                                                     // 0x0020(0x0008)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConfig_Legacy
// Struct Size::0x00D4
struct FClothConfig_Legacy
{
    enum class EClothingWindMethod_Legacy         WindMethod;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FClothConstraintSetup_Legacy                  VerticalConstraintConfig;                                     // 0x0004(0x0010)
    FClothConstraintSetup_Legacy                  HorizontalConstraintConfig;                                   // 0x0014(0x0010)
    FClothConstraintSetup_Legacy                  BendConstraintConfig;                                         // 0x0024(0x0010)
    FClothConstraintSetup_Legacy                  ShearConstraintConfig;                                        // 0x0034(0x0010)
    float                                         SelfCollisionRadius;                                          // 0x0044(0x0004)
    float                                         SelfCollisionStiffness;                                       // 0x0048(0x0004)
    float                                         SelfCollisionCullScale;                                       // 0x004C(0x0004)
    FVector                                       Damping;                                                      // 0x0050(0x000C)
    float                                         Friction;                                                     // 0x005C(0x0004)
    float                                         WindDragCoefficient;                                          // 0x0060(0x0004)
    float                                         WindLiftCoefficient;                                          // 0x0064(0x0004)
    FVector                                       LinearDrag;                                                   // 0x0068(0x000C)
    FVector                                       AngularDrag;                                                  // 0x0074(0x000C)
    FVector                                       LinearInertiaScale;                                           // 0x0080(0x000C)
    FVector                                       AngularInertiaScale;                                          // 0x008C(0x000C)
    FVector                                       CentrifugalInertiaScale;                                      // 0x0098(0x000C)
    float                                         SolverFrequency;                                              // 0x00A4(0x0004)
    float                                         StiffnessFrequency;                                           // 0x00A8(0x0004)
    float                                         GravityScale;                                                 // 0x00AC(0x0004)
    FVector                                       GravityOverride;                                              // 0x00B0(0x000C)
    bool                                          bUseGravityOverride;                                          // 0x00BC(0x0001)
    char                                          pa_00BD[0x0003]                                               // 0x00BD(0x0003)
    float                                         TetherStiffness;                                              // 0x00C0(0x0004)
    float                                         TetherLimit;                                                  // 0x00C4(0x0004)
    float                                         CollisionThickness;                                           // 0x00C8(0x0004)
    float                                         AnimDriveSpringStiffness;                                     // 0x00CC(0x0004)
    float                                         AnimDriveDamperStiffness;                                     // 0x00D0(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothConstraintSetup_Legacy
// Struct Size::0x0010
struct FClothConstraintSetup_Legacy
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothLODDataCommon
// Struct Size::0x0158
struct FClothLODDataCommon
{
    FClothPhysicalMeshData                        PhysicalMeshData;                                             // 0x0000(0x00F8)
    FClothCollisionData                           CollisionData;                                                // 0x00F8(0x0040)
    char                                          pa_0138[0x0020]                                               // 0x0138(0x0020)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothPhysicalMeshData
// Struct Size::0x00F8
struct FClothPhysicalMeshData
{
    TArray<FVector>                               Vertices;                                                     // 0x0000(0x0010)
    TArray<FVector>                               Normals;                                                      // 0x0010(0x0010)
    TArray<uint32_t>                              Indices;                                                      // 0x0020(0x0010)
    TMap<uint32_t,FPointWeightMap>                WeightMaps;                                                   // 0x0030(0x0050)
    TArray<float>                                 InverseMasses;                                                // 0x0080(0x0010)
    TArray<FClothVertBoneData>                    BoneData;                                                     // 0x0090(0x0010)
    int32_t                                       MaxBoneWeights;                                               // 0x00A0(0x0004)
    int32_t                                       NumFixedVerts;                                                // 0x00A4(0x0004)
    TArray<uint32_t>                              SelfCollisionIndices;                                         // 0x00A8(0x0010)
    TArray<float>                                 MaxDistances;                                                 // 0x00B8(0x0010)
    TArray<float>                                 BackstopDistances;                                            // 0x00C8(0x0010)
    TArray<float>                                 BackstopRadiuses;                                             // 0x00D8(0x0010)
    TArray<float>                                 AnimDriveMultipliers;                                         // 0x00E8(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.PointWeightMap
// Struct Size::0x0010
struct FPointWeightMap
{
    TArray<float>                                 Values;                                                       // 0x0000(0x0010)
};


// ScriptStruct  ClothingSystemRuntimeCommon.ClothParameterMask_Legacy
// Struct Size::0x0030
struct FClothParameterMask_Legacy
{
    FName                                         MaskName;                                                     // 0x0000(0x0008)
    enum class EWeightMapTargetCommon             CurrentTarget;                                                // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         MaxValue;                                                     // 0x000C(0x0004)
    float                                         MinValue;                                                     // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    TArray<float>                                 Values;                                                       // 0x0018(0x0010)
    bool                                          bEnabled;                                                     // 0x0028(0x0001)
    char                                          pa_0029[0x0007]                                               // 0x0029(0x0007)
};


// ScriptStruct  ClothingSystemRuntimeNv.ClothConstraintSetupNv
// Struct Size::0x0010
struct FClothConstraintSetupNv
{
    float                                         Stiffness;                                                    // 0x0000(0x0004)
    float                                         StiffnessMultiplier;                                          // 0x0004(0x0004)
    float                                         StretchLimit;                                                 // 0x0008(0x0004)
    float                                         CompressionLimit;                                             // 0x000C(0x0004)
};


// ScriptStruct  SessionMessages.SessionServiceLogUnsubscribe
// Struct Size::0x0001
struct FSessionServiceLogUnsubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SessionMessages.SessionServiceLogSubscribe
// Struct Size::0x0001
struct FSessionServiceLogSubscribe
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  SessionMessages.SessionServiceLog
// Struct Size::0x0038
struct FSessionServiceLog
{
    FName                                         Category;                                                     // 0x0000(0x0008)
    FString                                       Data;                                                         // 0x0008(0x0010)
    FGuid                                         instanceID;                                                   // 0x0018(0x0010)
    double                                        TimeSeconds;                                                  // 0x0028(0x0008)
    char                                          Verbosity;                                                    // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  SessionMessages.SessionServicePong
// Struct Size::0x0090
struct FSessionServicePong
{
    bool                                          Authorized;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FString                                       BuildDate;                                                    // 0x0008(0x0010)
    FString                                       DeviceName;                                                   // 0x0018(0x0010)
    FGuid                                         instanceID;                                                   // 0x0028(0x0010)
    FString                                       InstanceName;                                                 // 0x0038(0x0010)
    FString                                       PlatformName;                                                 // 0x0048(0x0010)
    FGuid                                         SessionId;                                                    // 0x0058(0x0010)
    FString                                       SessionName;                                                  // 0x0068(0x0010)
    FString                                       SessionOwner;                                                 // 0x0078(0x0010)
    bool                                          Standalone;                                                   // 0x0088(0x0001)
    char                                          pa_0089[0x0007]                                               // 0x0089(0x0007)
};


// ScriptStruct  SessionMessages.SessionServicePing
// Struct Size::0x0010
struct FSessionServicePing
{
    FString                                       UserName;                                                     // 0x0000(0x0010)
};


// ScriptStruct  ChaosSolverEngine.ChaosHandlerSet
// Struct Size::0x0058
struct FChaosHandlerSet
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    TSet<UObject*>                                ChaosHandlers;                                                // 0x0008(0x0050)
};


// ScriptStruct  ChaosSolverEngine.BreakEventCallbackWrapper
// Struct Size::0x0040
struct FBreakEventCallbackWrapper
{
    char                                          pa_0000[0x0040]                                               // 0x0000(0x0040)
};


// ScriptStruct  ChaosSolverEngine.ChaosDebugSubstepControl
// Struct Size::0x0003
struct FChaosDebugSubstepControl
{
    bool                                          bPause;                                                       // 0x0000(0x0001)
    bool                                          bSubstep;                                                     // 0x0001(0x0001)
    bool                                          bStep;                                                        // 0x0002(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.ChaosBreakingEventRequestSettings
// Struct Size::0x0018
struct FChaosBreakingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinRadius;                                                    // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinMass;                                                      // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosBreakingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosCollisionEventRequestSettings
// Struct Size::0x0018
struct FChaosCollisionEventRequestSettings
{
    int32_t                                       MaxNumberResults;                                             // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinImpulse;                                                   // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosCollisionSortMethod          SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.ChaosTrailingEventRequestSettings
// Struct Size::0x0018
struct FChaosTrailingEventRequestSettings
{
    int32_t                                       MaxNumberOfResults;                                           // 0x0000(0x0004)
    float                                         MinMass;                                                      // 0x0004(0x0004)
    float                                         MinSpeed;                                                     // 0x0008(0x0004)
    float                                         MinAngularSpeed;                                              // 0x000C(0x0004)
    float                                         MaxDistance;                                                  // 0x0010(0x0004)
    enum class EChaosTrailingSortMethod           SortMethod;                                                   // 0x0014(0x0001)
    char                                          pa_0015[0x0003]                                               // 0x0015(0x0003)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawActorSelectedRigidBody
// Struct Size::0x0018
struct FGeometryCollectionDebugDrawActorSelectedRigidBody
{
    int32_t                                       ID;                                                           // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    AChaosSolverActor*                            Solver;                                                       // 0x0008(0x0008)
    AGeometryCollectionActor*                     GeometryCollection;                                           // 0x0010(0x0008)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionDebugDrawWarningMessage
// Struct Size::0x0001
struct FGeometryCollectionDebugDrawWarningMessage
{
    char                                          pa_0000[0x0001]                                               // 0x0000(0x0001)
};


// ScriptStruct  GeometryCollectionEngine.GeometryCollectionSizeSpecificData
// Struct Size::0x0024
struct FGeometryCollectionSizeSpecificData
{
    float                                         MaxSize;                                                      // 0x0000(0x0004)
    enum class ECollisionTypeEnum                 CollisionType;                                                // 0x0004(0x0001)
    enum class EImplicitTypeEnum                  ImplicitType;                                                 // 0x0005(0x0001)
    char                                          pa_0006[0x0002]                                               // 0x0006(0x0002)
    int32_t                                       MinLevelSetResolution;                                        // 0x0008(0x0004)
    int32_t                                       MaxLevelSetResolution;                                        // 0x000C(0x0004)
    int32_t                                       MinClusterLevelSetResolution;                                 // 0x0010(0x0004)
    int32_t                                       MaxClusterLevelSetResolution;                                 // 0x0014(0x0004)
    int32_t                                       CollisionObjectReductionPercentage;                           // 0x0018(0x0004)
    float                                         CollisionParticlesFraction;                                   // 0x001C(0x0004)
    int32_t                                       MaximumCollisionParticles;                                    // 0x0020(0x0004)
};


// ScriptStruct  InteractiveToolsFramework.BrushStampData
// Struct Size::0x00A8
struct FBrushStampData
{
    char                                          pa_0000[0x00A8]                                               // 0x0000(0x00A8)
};


// ScriptStruct  InteractiveToolsFramework.BehaviorInfo
// Struct Size::0x0020
struct FBehaviorInfo
{
    UInputBehavior*                               Behavior;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0018]                                               // 0x0008(0x0018)
};


// ScriptStruct  InteractiveToolsFramework.InputRayHit
// Struct Size::0x0028
struct FInputRayHit
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
};


// ScriptStruct  InteractiveToolsFramework.ActiveGizmo
// Struct Size::0x0030
struct FActiveGizmo
{
    char                                          pa_0000[0x0030]                                               // 0x0000(0x0030)
};


// ScriptStruct  InteractiveToolsFramework.GizmoFloatParameterChange
// Struct Size::0x0008
struct FGizmoFloatParameterChange
{
    float                                         InitialValue;                                                 // 0x0000(0x0004)
    float                                         CurrentValue;                                                 // 0x0004(0x0004)
};


// ScriptStruct  InteractiveToolsFramework.GizmoVec2ParameterChange
// Struct Size::0x0010
struct FGizmoVec2ParameterChange
{
    FVector2D                                     InitialValue;                                                 // 0x0000(0x0008)
    FVector2D                                     CurrentValue;                                                 // 0x0008(0x0008)
};


// ScriptStruct  WidgetCarousel.WidgetCarouselNavigationBarStyle
// Struct Size::0x0D60
struct FWidgetCarouselNavigationBarStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FSlateBrush                                   HighlightBrush;                                               // 0x0010(0x00F0)
    FButtonStyle                                  LeftButtonStyle;                                              // 0x0100(0x0420)
    FButtonStyle                                  CenterButtonStyle;                                            // 0x0520(0x0420)
    FButtonStyle                                  RightButtonStyle;                                             // 0x0940(0x0420)
};


// ScriptStruct  WidgetCarousel.WidgetCarouselNavigationButtonStyle
// Struct Size::0x0610
struct FWidgetCarouselNavigationButtonStyle : public FSlateWidgetStyle
{
    char                                          pa_0008[0x0008]                                               // 0x0008(0x0008)
    FButtonStyle                                  InnerButtonStyle;                                             // 0x0010(0x0420)
    FSlateBrush                                   NavigationButtonLeftImage;                                    // 0x0430(0x00F0)
    FSlateBrush                                   NavigationButtonRightImage;                                   // 0x0520(0x00F0)
};


// ScriptStruct  RigVM.RigVMParameter
// Struct Size::0x0030
struct FRigVMParameter
{
    enum class ERigVMParameterType                Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    FName                                         Name;                                                         // 0x0004(0x0008)
    int32_t                                       RegisterIndex;                                                // 0x000C(0x0004)
    FString                                       CPPType;                                                      // 0x0010(0x0010)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0020(0x0008)
    FName                                         ScriptStructPath;                                             // 0x0028(0x0008)
};


// ScriptStruct  RigVM.RigVMByteCode
// Struct Size::0x0010
struct FRigVMByteCode
{
    TArray<char>                                  ByteCode;                                                     // 0x0000(0x0010)
};


// ScriptStruct  RigVM.RigVMInstructionArray
// Struct Size::0x0010
struct FRigVMInstructionArray
{
    TArray<FRigVMInstruction>                     Instructions;                                                 // 0x0000(0x0010)
};


// ScriptStruct  RigVM.RigVMInstruction
// Struct Size::0x0010
struct FRigVMInstruction
{
    enum class ERigVMOpCode                       OpCode;                                                       // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    uint64_t                                      ByteCodeIndex;                                                // 0x0008(0x0008)
};


// ScriptStruct  RigVM.RigVMMemoryContainer
// Struct Size::0x00A0
struct FRigVMMemoryContainer
{
    bool                                          bUseNameMap;                                                  // 0x0000(0x0001)
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0006]                                               // 0x0002(0x0006)
    TArray<FRigVMRegister>                        Registers;                                                    // 0x0008(0x0010)
    TArray<FRigVMRegisterOffset>                  RegisterOffsets;                                              // 0x0018(0x0010)
    TArray<char>                                  Data;                                                         // 0x0028(0x0010)
    TArray<UScriptStruct*>                        ScriptStructs;                                                // 0x0038(0x0010)
    TMap<FName,int32_t>                           NameMap;                                                      // 0x0048(0x0050)
    bool                                          bEncounteredErrorDuringLoad;                                  // 0x0098(0x0001)
    char                                          pa_0099[0x0007]                                               // 0x0099(0x0007)
};


// ScriptStruct  RigVM.RigVMRegisterOffset
// Struct Size::0x0038
struct FRigVMRegisterOffset
{
    TArray<int32_t>                               Segments;                                                     // 0x0000(0x0010)
    enum class ERigVMRegisterType                 Type;                                                         // 0x0010(0x0001)
    char                                          pa_0011[0x0003]                                               // 0x0011(0x0003)
    FName                                         CPPType;                                                      // 0x0014(0x0008)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    UScriptStruct*                                ScriptStruct;                                                 // 0x0020(0x0008)
    FName                                         ScriptStructPath;                                             // 0x0028(0x0008)
    uint16_t                                      ElementSize;                                                  // 0x0030(0x0002)
    char                                          pa_0032[0x0006]                                               // 0x0032(0x0006)
};


// ScriptStruct  RigVM.RigVMRegister
// Struct Size::0x0024
struct FRigVMRegister
{
    enum class ERigVMRegisterType                 Type;                                                         // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    uint32_t                                      ByteIndex;                                                    // 0x0004(0x0004)
    uint16_t                                      ElementSize;                                                  // 0x0008(0x0002)
    uint16_t                                      ElementCount;                                                 // 0x000A(0x0002)
    uint16_t                                      SliceIndex;                                                   // 0x000C(0x0002)
    uint16_t                                      SliceCount;                                                   // 0x000E(0x0002)
    char                                          AlignmentBytes;                                               // 0x0010(0x0001)
    char                                          pa_0011[0x0001]                                               // 0x0011(0x0001)
    uint16_t                                      TrailingBytes;                                                // 0x0012(0x0002)
    FName                                         Name;                                                         // 0x0014(0x0008)
    int32_t                                       ScriptStructIndex;                                            // 0x001C(0x0004)
    bool                                          bIsArray;                                                     // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
};


// ScriptStruct  RigVM.RigVMOperand
// Struct Size::0x0006
struct FRigVMOperand
{
    enum class ERigVMMemoryType                   MemoryType;                                                   // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      RegisterIndex;                                                // 0x0002(0x0002)
    uint16_t                                      RegisterOffset;                                               // 0x0004(0x0002)
};


// ScriptStruct  RigVM.RigVMStatistics
// Struct Size::0x002C
struct FRigVMStatistics
{
    uint32_t                                      BytesForCDO;                                                  // 0x0000(0x0004)
    uint32_t                                      BytesPerInstance;                                             // 0x0004(0x0004)
    FRigVMMemoryStatistics                        LiteralMemory;                                                // 0x0008(0x000C)
    FRigVMMemoryStatistics                        WorkMemory;                                                   // 0x0014(0x000C)
    uint32_t                                      BytesForCaching;                                              // 0x0020(0x0004)
    FRigVMByteCodeStatistics                      ByteCode;                                                     // 0x0024(0x0008)
};


// ScriptStruct  RigVM.RigVMByteCodeStatistics
// Struct Size::0x0008
struct FRigVMByteCodeStatistics
{
    uint32_t                                      InstructionCount;                                             // 0x0000(0x0004)
    uint32_t                                      DataBytes;                                                    // 0x0004(0x0004)
};


// ScriptStruct  RigVM.RigVMMemoryStatistics
// Struct Size::0x000C
struct FRigVMMemoryStatistics
{
    uint32_t                                      RegisterCount;                                                // 0x0000(0x0004)
    uint32_t                                      DataBytes;                                                    // 0x0004(0x0004)
    uint32_t                                      TotalBytes;                                                   // 0x0008(0x0004)
};


// ScriptStruct  NavigationSystem.NavCollisionBox
// Struct Size::0x0018
struct FNavCollisionBox
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    FVector                                       Extent;                                                       // 0x000C(0x000C)
};


// ScriptStruct  NavigationSystem.NavCollisionCylinder
// Struct Size::0x0014
struct FNavCollisionCylinder
{
    FVector                                       Offset;                                                       // 0x0000(0x000C)
    float                                         Radius;                                                       // 0x000C(0x0004)
    float                                         Height;                                                       // 0x0010(0x0004)
};


// ScriptStruct  NavigationSystem.SupportedAreaData
// Struct Size::0x0020
struct FSupportedAreaData
{
    FString                                       AreaClassName;                                                // 0x0000(0x0010)
    int32_t                                       AreaID;                                                       // 0x0010(0x0004)
    char                                          pa_0014[0x0004]                                               // 0x0014(0x0004)
    UObject*                                      AreaClass;                                                    // 0x0018(0x0008)
};


// ScriptStruct  NavigationSystem.NavGraphNode
// Struct Size::0x0018
struct FNavGraphNode
{
    UObject*                                      Owner;                                                        // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  NavigationSystem.NavGraphEdge
// Struct Size::0x0018
struct FNavGraphEdge
{
    char                                          pa_0000[0x0018]                                               // 0x0000(0x0018)
};


// ScriptStruct  NavigationSystem.NavigationFilterFlags
// Struct Size::0x0004
struct FNavigationFilterFlags
{
    char                                          bNavFlag0;                                                    // 0x0000(0x0001)
    char                                          bNavFlag1;                                                    // 0x0000(0x0001)
    char                                          bNavFlag2;                                                    // 0x0000(0x0001)
    char                                          bNavFlag3;                                                    // 0x0000(0x0001)
    char                                          bNavFlag4;                                                    // 0x0000(0x0001)
    char                                          bNavFlag5;                                                    // 0x0000(0x0001)
    char                                          bNavFlag6;                                                    // 0x0000(0x0001)
    char                                          bNavFlag7;                                                    // 0x0000(0x0001)
    char                                          bNavFlag8;                                                    // 0x0001(0x0001)
    char                                          bNavFlag9;                                                    // 0x0001(0x0001)
    char                                          bNavFlag10;                                                   // 0x0001(0x0001)
    char                                          bNavFlag11;                                                   // 0x0001(0x0001)
    char                                          bNavFlag12;                                                   // 0x0001(0x0001)
    char                                          bNavFlag13;                                                   // 0x0001(0x0001)
    char                                          bNavFlag14;                                                   // 0x0001(0x0001)
    char                                          bNavFlag15;                                                   // 0x0001(0x0001)
    char                                          pa_0002[0x0002]                                               // 0x0002(0x0002)
};


// ScriptStruct  NavigationSystem.NavigationFilterArea
// Struct Size::0x0018
struct FNavigationFilterArea
{
    UNavArea*                                     AreaClass;                                                    // 0x0000(0x0008)
    float                                         TravelCostOverride;                                           // 0x0008(0x0004)
    float                                         EnteringCostOverride;                                         // 0x000C(0x0004)
    char                                          bIsExcluded;                                                  // 0x0010(0x0001)
    char                                          bOverrideTravelCost;                                          // 0x0010(0x0001)
    char                                          bOverrideEnteringCost;                                        // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  NavigationSystem.NavLinkCustomInstanceData
// Struct Size::0x0060
struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
{
    uint32_t                                      NavLinkUserId;                                                // 0x0058(0x0004)
    char                                          pa_005C[0x0004]                                               // 0x005C(0x0004)
};


// ScriptStruct  NavigationSystem.RecastNavMeshGenerationProperties
// Struct Size::0x0040
struct FRecastNavMeshGenerationProperties
{
    int32_t                                       TilePoolSize;                                                 // 0x0000(0x0004)
    float                                         TileSizeUU;                                                   // 0x0004(0x0004)
    float                                         CellSize;                                                     // 0x0008(0x0004)
    float                                         CellHeight;                                                   // 0x000C(0x0004)
    float                                         AgentRadius;                                                  // 0x0010(0x0004)
    float                                         AgentHeight;                                                  // 0x0014(0x0004)
    float                                         AgentMaxSlope;                                                // 0x0018(0x0004)
    float                                         AgentMaxStepHeight;                                           // 0x001C(0x0004)
    float                                         MinRegionArea;                                                // 0x0020(0x0004)
    float                                         MergeRegionSize;                                              // 0x0024(0x0004)
    float                                         MaxSimplificationError;                                       // 0x0028(0x0004)
    int32_t                                       TileNumberHardLimit;                                          // 0x002C(0x0004)
    enum class ERecastPartitioning                RegionPartitioning;                                           // 0x0030(0x0001)
    enum class ERecastPartitioning                LayerPartitioning;                                            // 0x0031(0x0001)
    char                                          pa_0032[0x0002]                                               // 0x0032(0x0002)
    int32_t                                       RegionChunkSplits;                                            // 0x0034(0x0004)
    int32_t                                       LayerChunkSplits;                                             // 0x0038(0x0004)
    char                                          bSortNavigationAreasByCost;                                   // 0x003C(0x0001)
    char                                          bPerformVoxelFiltering;                                       // 0x003C(0x0001)
    char                                          bMarkLowHeightAreas;                                          // 0x003C(0x0001)
    char                                          bFilterLowSpanSequences;                                      // 0x003C(0x0001)
    char                                          bFilterLowSpanFromTileCache;                                  // 0x003C(0x0001)
    char                                          bFixedTilePoolSize;                                           // 0x003C(0x0001)
    char                                          pa_003D[0x0003]                                               // 0x003D(0x0003)
};


// ScriptStruct  AIModule.AIDataProviderValue
// Struct Size::0x0020
struct FAIDataProviderValue
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UAIDataProvider*                              DataBinding;                                                  // 0x0010(0x0008)
    FName                                         DataField;                                                    // 0x0018(0x0008)
};


// ScriptStruct  AIModule.AIDataProviderTypedValue
// Struct Size::0x0030
struct FAIDataProviderTypedValue : public FAIDataProviderValue
{
    UObject*                                      PropertyType;                                                 // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  AIModule.AIDataProviderBoolValue
// Struct Size::0x0038
struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
{
    bool                                          DefaultValue;                                                 // 0x0030(0x0001)
    char                                          pa_0031[0x0007]                                               // 0x0031(0x0007)
};


// ScriptStruct  AIModule.AIDataProviderFloatValue
// Struct Size::0x0038
struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
{
    float                                         DefaultValue;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderIntValue
// Struct Size::0x0038
struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
{
    int32_t                                       DefaultValue;                                                 // 0x0030(0x0004)
    char                                          pa_0034[0x0004]                                               // 0x0034(0x0004)
};


// ScriptStruct  AIModule.AIDataProviderStructValue
// Struct Size::0x0030
struct FAIDataProviderStructValue : public FAIDataProviderValue
{
    char                                          pa_0020[0x0010]                                               // 0x0020(0x0010)
};


// ScriptStruct  AIModule.ActorPerceptionBlueprintInfo
// Struct Size::0x0020
struct FActorPerceptionBlueprintInfo
{
    AActor*                                       Target;                                                       // 0x0000(0x0008)
    TArray<FAIStimulus>                           LastSensedStimuli;                                            // 0x0008(0x0010)
    char                                          bIsHostile;                                                   // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.AISenseAffiliationFilter
// Struct Size::0x0004
struct FAISenseAffiliationFilter
{
    char                                          bDetectEnemies;                                               // 0x0000(0x0001)
    char                                          bDetectNeutrals;                                              // 0x0000(0x0001)
    char                                          bDetectFriendlies;                                            // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
};


// ScriptStruct  AIModule.AIDamageEvent
// Struct Size::0x0030
struct FAIDamageEvent
{
    float                                         Amount;                                                       // 0x0000(0x0004)
    FVector                                       Location;                                                     // 0x0004(0x000C)
    FVector                                       HitLocation;                                                  // 0x0010(0x000C)
    char                                          pa_001C[0x0004]                                               // 0x001C(0x0004)
    AActor*                                       DamagedActor;                                                 // 0x0020(0x0008)
    AActor*                                       Instigator;                                                   // 0x0028(0x0008)
};


// ScriptStruct  AIModule.AINoiseEvent
// Struct Size::0x0030
struct FAINoiseEvent
{
    char                                          pa_0000[0x0004]                                               // 0x0000(0x0004)
    FVector                                       NoiseLocation;                                                // 0x0004(0x000C)
    float                                         Loudness;                                                     // 0x0010(0x0004)
    float                                         MaxRange;                                                     // 0x0014(0x0004)
    AActor*                                       Instigator;                                                   // 0x0018(0x0008)
    FName                                         Tag;                                                          // 0x0020(0x0008)
    char                                          pa_0028[0x0008]                                               // 0x0028(0x0008)
};


// ScriptStruct  AIModule.AIPredictionEvent
// Struct Size::0x0018
struct FAIPredictionEvent
{
    AActor*                                       Requestor;                                                    // 0x0000(0x0008)
    AActor*                                       PredictedActor;                                               // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AISightEvent
// Struct Size::0x0018
struct FAISightEvent
{
    char                                          pa_0000[0x0008]                                               // 0x0000(0x0008)
    AActor*                                       SeenActor;                                                    // 0x0008(0x0008)
    AActor*                                       Observer;                                                     // 0x0010(0x0008)
};


// ScriptStruct  AIModule.AITeamStimulusEvent
// Struct Size::0x0038
struct FAITeamStimulusEvent
{
    char                                          pa_0000[0x0028]                                               // 0x0000(0x0028)
    AActor*                                       Broadcaster;                                                  // 0x0028(0x0008)
    AActor*                                       Enemy;                                                        // 0x0030(0x0008)
};


// ScriptStruct  AIModule.AITouchEvent
// Struct Size::0x0020
struct FAITouchEvent
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    AActor*                                       TouchReceiver;                                                // 0x0010(0x0008)
    AActor*                                       OtherActor;                                                   // 0x0018(0x0008)
};


// ScriptStruct  AIModule.IntervalCountdown
// Struct Size::0x0008
struct FIntervalCountdown
{
    float                                         Interval;                                                     // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
};


// ScriptStruct  AIModule.AIMoveRequest
// Struct Size::0x0040
struct FAIMoveRequest
{
    AActor*                                       GoalActor;                                                    // 0x0000(0x0008)
    char                                          pa_0008[0x0038]                                               // 0x0008(0x0038)
};


// ScriptStruct  AIModule.BehaviorTreeTemplateInfo
// Struct Size::0x0018
struct FBehaviorTreeTemplateInfo
{
    UBehaviorTree*                                Asset;                                                        // 0x0000(0x0008)
    UBTCompositeNode*                             Template;                                                     // 0x0008(0x0008)
    char                                          pa_0010[0x0008]                                               // 0x0010(0x0008)
};


// ScriptStruct  AIModule.BlackboardKeySelector
// Struct Size::0x0028
struct FBlackboardKeySelector
{
    TArray<UBlackboardKeyType*>                   AllowedTypes;                                                 // 0x0000(0x0010)
    FName                                         SelectedKeyName;                                              // 0x0010(0x0008)
    UBlackboardKeyType*                           SelectedKeyType;                                              // 0x0018(0x0008)
    char                                          SelectedKeyID;                                                // 0x0020(0x0001)
    char                                          pa_0021[0x0003]                                               // 0x0021(0x0003)
    char                                          bNoneIsAllowedValue;                                          // 0x0024(0x0001)
    char                                          pa_0025[0x0003]                                               // 0x0025(0x0003)
};


// ScriptStruct  AIModule.BlackboardEntry
// Struct Size::0x0018
struct FBlackboardEntry
{
    FName                                         EntryName;                                                    // 0x0000(0x0008)
    UBlackboardKeyType*                           KeyType;                                                      // 0x0008(0x0008)
    char                                          bInstanceSynced;                                              // 0x0010(0x0001)
    char                                          pa_0011[0x0007]                                               // 0x0011(0x0007)
};


// ScriptStruct  AIModule.BTCompositeChild
// Struct Size::0x0030
struct FBTCompositeChild
{
    UBTCompositeNode*                             ChildComposite;                                               // 0x0000(0x0008)
    UBTTaskNode*                                  ChildTask;                                                    // 0x0008(0x0008)
    TArray<UBTDecorator*>                         Decorators;                                                   // 0x0010(0x0010)
    TArray<FBTDecoratorLogic>                     DecoratorOps;                                                 // 0x0020(0x0010)
};


// ScriptStruct  AIModule.BTDecoratorLogic
// Struct Size::0x0004
struct FBTDecoratorLogic
{
    enum class EBTDecoratorLogic                  Operation;                                                    // 0x0000(0x0001)
    char                                          pa_0001[0x0001]                                               // 0x0001(0x0001)
    uint16_t                                      Number;                                                       // 0x0002(0x0002)
};


// ScriptStruct  AIModule.CrowdAvoidanceSamplingPattern
// Struct Size::0x0020
struct FCrowdAvoidanceSamplingPattern
{
    TArray<float>                                 Angles;                                                       // 0x0000(0x0010)
    TArray<float>                                 Radii;                                                        // 0x0010(0x0010)
};


// ScriptStruct  AIModule.CrowdAvoidanceConfig
// Struct Size::0x001C
struct FCrowdAvoidanceConfig
{
    float                                         VelocityBias;                                                 // 0x0000(0x0004)
    float                                         DesiredVelocityWeight;                                        // 0x0004(0x0004)
    float                                         CurrentVelocityWeight;                                        // 0x0008(0x0004)
    float                                         SideBiasWeight;                                               // 0x000C(0x0004)
    float                                         ImpactTimeWeight;                                             // 0x0010(0x0004)
    float                                         ImpactTimeRange;                                              // 0x0014(0x0004)
    char                                          CustomPatternIdx;                                             // 0x0018(0x0001)
    char                                          AdaptiveDivisions;                                            // 0x0019(0x0001)
    char                                          AdaptiveRings;                                                // 0x001A(0x0001)
    char                                          AdaptiveDepth;                                                // 0x001B(0x0001)
};


// ScriptStruct  AIModule.EnvQueryInstanceCache
// Struct Size::0x0178
struct FEnvQueryInstanceCache
{
    UEnvQuery*                                    Template;                                                     // 0x0000(0x0008)
    char                                          pa_0008[0x0170]                                               // 0x0008(0x0170)
};


// ScriptStruct  AIModule.EnvQueryRequest
// Struct Size::0x0068
struct FEnvQueryRequest
{
    UEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    UObject*                                      Owner;                                                        // 0x0008(0x0008)
    UWorld*                                       World;                                                        // 0x0010(0x0008)
    char                                          pa_0018[0x0050]                                               // 0x0018(0x0050)
};


// ScriptStruct  AIModule.EQSParametrizedQueryExecutionRequest
// Struct Size::0x0048
struct FEQSParametrizedQueryExecutionRequest
{
    UEnvQuery*                                    QueryTemplate;                                                // 0x0000(0x0008)
    TArray<FAIDynamicParam>                       QueryConfig;                                                  // 0x0008(0x0010)
    FBlackboardKeySelector                        EQSQueryBlackboardKey;                                        // 0x0018(0x0028)
    enum class EEnvQueryRunMode                   RunMode;                                                      // 0x0040(0x0001)
    char                                          pa_0041[0x0003]                                               // 0x0041(0x0003)
    char                                          bUseBBKeyForQueryTemplate;                                    // 0x0044(0x0001)
    char                                          pa_0045[0x0003]                                               // 0x0045(0x0003)
};


// ScriptStruct  AIModule.AIDynamicParam
// Struct Size::0x0038
struct FAIDynamicParam
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    enum class EAIParamType                       ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Value;                                                        // 0x000C(0x0004)
    FBlackboardKeySelector                        BBKey;                                                        // 0x0010(0x0028)
};


// ScriptStruct  AIModule.EnvQueryResult
// Struct Size::0x0040
struct FEnvQueryResult
{
    char                                          pa_0000[0x0010]                                               // 0x0000(0x0010)
    UEnvQueryItemType*                            ItemType;                                                     // 0x0010(0x0008)
    char                                          pa_0018[0x0014]                                               // 0x0018(0x0014)
    int32_t                                       OptionIndex;                                                  // 0x002C(0x0004)
    int32_t                                       QueryID;                                                      // 0x0030(0x0004)
    char                                          pa_0034[0x000C]                                               // 0x0034(0x000C)
};


// ScriptStruct  AIModule.EnvOverlapData
// Struct Size::0x0020
struct FEnvOverlapData
{
    float                                         ExtentX;                                                      // 0x0000(0x0004)
    float                                         ExtentY;                                                      // 0x0004(0x0004)
    float                                         ExtentZ;                                                      // 0x0008(0x0004)
    FVector                                       ShapeOffset;                                                  // 0x000C(0x000C)
    enum class ECollisionChannel                  OverlapChannel;                                               // 0x0018(0x0001)
    enum class EEnvOverlapShape                   OverlapShape;                                                 // 0x0019(0x0001)
    char                                          pa_001A[0x0002]                                               // 0x001A(0x0002)
    char                                          bOnlyBlockingHits;                                            // 0x001C(0x0001)
    char                                          bOverlapComplex;                                              // 0x001C(0x0001)
    char                                          bSkipOverlapQuerier;                                          // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  AIModule.EnvTraceData
// Struct Size::0x0030
struct FEnvTraceData
{
    int32_t                                       VersionNum;                                                   // 0x0000(0x0004)
    char                                          pa_0004[0x0004]                                               // 0x0004(0x0004)
    UNavigationQueryFilter*                       NavigationFilter;                                             // 0x0008(0x0008)
    float                                         ProjectDown;                                                  // 0x0010(0x0004)
    float                                         ProjectUp;                                                    // 0x0014(0x0004)
    float                                         ExtentX;                                                      // 0x0018(0x0004)
    float                                         ExtentY;                                                      // 0x001C(0x0004)
    float                                         ExtentZ;                                                      // 0x0020(0x0004)
    float                                         PostProjectionVerticalOffset;                                 // 0x0024(0x0004)
    enum class ETraceTypeQuery                    TraceChannel;                                                 // 0x0028(0x0001)
    enum class ECollisionChannel                  SerializedChannel;                                            // 0x0029(0x0001)
    enum class EEnvTraceShape                     TraceShape;                                                   // 0x002A(0x0001)
    enum class EEnvQueryTrace                     TraceMode;                                                    // 0x002B(0x0001)
    char                                          bTraceComplex;                                                // 0x002C(0x0001)
    char                                          bOnlyBlockingHits;                                            // 0x002C(0x0001)
    char                                          bCanTraceOnNavMesh;                                           // 0x002C(0x0001)
    char                                          bCanTraceOnGeometry;                                          // 0x002C(0x0001)
    char                                          bCanDisableTrace;                                             // 0x002C(0x0001)
    char                                          bCanProjectDown;                                              // 0x002C(0x0001)
    char                                          pa_002D[0x0003]                                               // 0x002D(0x0003)
};


// ScriptStruct  AIModule.EnvDirection
// Struct Size::0x0020
struct FEnvDirection
{
    UEnvQueryContext*                             LineFrom;                                                     // 0x0000(0x0008)
    UEnvQueryContext*                             LineTo;                                                       // 0x0008(0x0008)
    UEnvQueryContext*                             Rotation;                                                     // 0x0010(0x0008)
    enum class EEnvDirection                      DirMode;                                                      // 0x0018(0x0001)
    char                                          pa_0019[0x0007]                                               // 0x0019(0x0007)
};


// ScriptStruct  AIModule.EnvNamedValue
// Struct Size::0x0010
struct FEnvNamedValue
{
    FName                                         ParamName;                                                    // 0x0000(0x0008)
    enum class EAIParamType                       ParamType;                                                    // 0x0008(0x0001)
    char                                          pa_0009[0x0003]                                               // 0x0009(0x0003)
    float                                         Value;                                                        // 0x000C(0x0004)
};


// ScriptStruct  AIModule.GenericTeamId
// Struct Size::0x0001
struct FGenericTeamId
{
    char                                          TeamID;                                                       // 0x0000(0x0001)
};


// ScriptStruct  AIModule.PawnActionStack
// Struct Size::0x0008
struct FPawnActionStack
{
    UPawnAction*                                  TopAction;                                                    // 0x0000(0x0008)
};


// ScriptStruct  AIModule.PawnActionEvent
// Struct Size::0x0018
struct FPawnActionEvent
{
    UPawnAction*                                  Action;                                                       // 0x0000(0x0008)
    char                                          pa_0008[0x0010]                                               // 0x0008(0x0010)
};


// ScriptStruct  PhysXVehicles.AnimNode_WheelHandler
// Struct Size::0x00E0
struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
{
    char                                          pa_00C8[0x0018]                                               // 0x00C8(0x0018)
};


// ScriptStruct  PhysXVehicles.TireConfigMaterialFriction
// Struct Size::0x0010
struct FTireConfigMaterialFriction
{
    UPhysicalMaterial*                            PhysicalMaterial;                                             // 0x0000(0x0008)
    float                                         FrictionScale;                                                // 0x0008(0x0004)
    char                                          pa_000C[0x0004]                                               // 0x000C(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleAnimInstanceProxy
// Struct Size::0x06F0
struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
{
    char                                          pa_06E0[0x0010]                                               // 0x06E0(0x0010)
};


// ScriptStruct  PhysXVehicles.VehicleInputRate
// Struct Size::0x0008
struct FVehicleInputRate
{
    float                                         RiseRate;                                                     // 0x0000(0x0004)
    float                                         FallRate;                                                     // 0x0004(0x0004)
};


// ScriptStruct  PhysXVehicles.ReplicatedVehicleState
// Struct Size::0x0014
struct FReplicatedVehicleState
{
    float                                         SteeringInput;                                                // 0x0000(0x0004)
    float                                         ThrottleInput;                                                // 0x0004(0x0004)
    float                                         BrakeInput;                                                   // 0x0008(0x0004)
    float                                         HandbrakeInput;                                               // 0x000C(0x0004)
    int32_t                                       CurrentGear;                                                  // 0x0010(0x0004)
};


// ScriptStruct  PhysXVehicles.WheelSetup
// Struct Size::0x0020
struct FWheelSetup
{
    UVehicleWheel*                                WheelClass;                                                   // 0x0000(0x0008)
    FName                                         BoneName;                                                     // 0x0008(0x0008)
    FVector                                       AdditionalOffset;                                             // 0x0010(0x000C)
    bool                                          bDisableSteering;                                             // 0x001C(0x0001)
    char                                          pa_001D[0x0003]                                               // 0x001D(0x0003)
};


// ScriptStruct  PhysXVehicles.VehicleTransmissionData
// Struct Size::0x0030
struct FVehicleTransmissionData
{
    bool                                          bUseGearAutoBox;                                              // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         GearSwitchTime;                                               // 0x0004(0x0004)
    float                                         GearAutoBoxLatency;                                           // 0x0008(0x0004)
    float                                         FinalRatio;                                                   // 0x000C(0x0004)
    TArray<FVehicleGearData>                      ForwardGears;                                                 // 0x0010(0x0010)
    float                                         ReverseGearRatio;                                             // 0x0020(0x0004)
    float                                         NeutralGearUpRatio;                                           // 0x0024(0x0004)
    float                                         ClutchStrength;                                               // 0x0028(0x0004)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleGearData
// Struct Size::0x000C
struct FVehicleGearData
{
    float                                         Ratio;                                                        // 0x0000(0x0004)
    float                                         DownRatio;                                                    // 0x0004(0x0004)
    float                                         UpRatio;                                                      // 0x0008(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleEngineData
// Struct Size::0x00A0
struct FVehicleEngineData
{
    FRuntimeFloatCurve                            TorqueCurve;                                                  // 0x0000(0x0088)
    float                                         MaxRpm;                                                       // 0x0088(0x0004)
    float                                         MOI;                                                          // 0x008C(0x0004)
    float                                         DampingRateFullThrottle;                                      // 0x0090(0x0004)
    float                                         DampingRateZeroThrottleClutchEngaged;                         // 0x0094(0x0004)
    float                                         DampingRateZeroThrottleClutchDisengaged;                      // 0x0098(0x0004)
    char                                          pa_009C[0x0004]                                               // 0x009C(0x0004)
};


// ScriptStruct  PhysXVehicles.VehicleDifferential4WData
// Struct Size::0x001C
struct FVehicleDifferential4WData
{
    enum class EVehicleDifferential4W             DifferentialType;                                             // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         FrontRearSplit;                                               // 0x0004(0x0004)
    float                                         FrontLeftRightSplit;                                          // 0x0008(0x0004)
    float                                         RearLeftRightSplit;                                           // 0x000C(0x0004)
    float                                         CentreBias;                                                   // 0x0010(0x0004)
    float                                         FrontBias;                                                    // 0x0014(0x0004)
    float                                         RearBias;                                                     // 0x0018(0x0004)
};


// UserDefinedStruct  Engine.Default__UserDefinedStruct
// Struct Size::0x0000
struct FDefault__UserDefinedStruct
{
};


// AISenseBlueprintListener  AIModule.Default__AISenseBlueprintListener
// Struct Size::0x0000
struct FDefault__AISenseBlueprintListener
{
};


// UserDefinedStruct  BPS_InteractionButtonViewConfig.BPS_InteractionButtonViewConfig
// Struct Size::0x0088
struct FBPS_InteractionButtonViewConfig
{
    enum class E_Interact_Type                    InteractType_6_1F65E0144F31C4FA0B5C13856808ECE0;              // 0x0000(0x0001)
    char                                          pa_0001[0x0007]                                               // 0x0001(0x0007)
    FSoftObjectPath                               IconResouce_3_EA07EE084F515B41DBD9498FEF4C8208;               // 0x0008(0x0018)
    FVector2D                                     IconBrushSize_11_61E7225947AB1F61C1EBD8B6F4C49E1C;            // 0x0020(0x0008)
    FLinearColor                                  Color1_15_663F3BBB450A7BFB429A3C8B71062876;                   // 0x0028(0x0010)
    enum class ESlateVisibility                   ImgIconLightVisibility_18_992037174FE321574193BF911C96A894;   // 0x0038(0x0001)
    char                                          pa_0039[0x0003]                                               // 0x0039(0x0003)
    int32_t                                       InteractLocTextID_21_23EEFD0940CABD02400A58806173ECB5;        // 0x003C(0x0004)
    FLinearColor                                  InteractTextColor_24_B98B52DB4328C8D2AD3FDE8A5A9DDA3B;        // 0x0040(0x0010)
    FWrappedLocalTextID                           CountDownLocTextID_37_469F098C4BFA8BD8CDE32EA70E75FCD4;       // 0x0050(0x0004)
    FLinearColor                                  Color2_26_CC460D634CCE0C0FB132E3BE299E05D3;                   // 0x0054(0x0010)
    bool                                          EnableGuideVX_28_B67B12E14B3EB71DA66EAF993135695F;            // 0x0064(0x0001)
    char                                          pa_0065[0x0003]                                               // 0x0065(0x0003)
    FLinearColor                                  GuideVXRingColor_31_8342519B4E7CAD84405A9F8A5F5B7589;         // 0x0068(0x0010)
    FLinearColor                                  GuideVXGlowColor_33_88A6ED0B453D3A737378F1AA6565A21E;         // 0x0078(0x0010)
};


// UserDefinedStruct  S_EventList_BattleRoyal.S_EventList_BattleRoyal
// Struct Size::0x0010
struct FS_EventList_BattleRoyal
{
    TArray<FS_Event_BattleRoyale>                 EventList_3_9C55B4BD476EE1024C917DAC11DB6F31;                 // 0x0000(0x0010)
};


// UserDefinedStruct  S_MessageRequest.S_MessageRequest
// Struct Size::0x000C
struct FS_MessageRequest
{
    char                                          Type_2_2EE66F3C4CD2586DEDCF72948B2DA450;                      // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    int32_t                                       Host_7_DF693C9B4C10D03A888FB29CC943485F;                      // 0x0004(0x0004)
    int32_t                                       Target_8_18E530D843D944FA6A02A0ABD0B038CC;                    // 0x0008(0x0004)
};


// UserDefinedStruct  S_Notice.S_Notice
// Struct Size::0x0019
struct FS_Notice
{
    UObject*                                      Icon_23_BE1B67524B1209FD0942B6B9560F62CC;                     // 0x0000(0x0008)
    FString                                       Text_24_2592C444471410BA3FD02289094D92BE;                     // 0x0008(0x0010)
    enum class E_NoticeLevel                      NoticeLevel_25_2D9897214095D9FC1F3636B3132BC0AD;              // 0x0018(0x0001)
};


// UserDefinedStruct  S_NoyaNoticeInfo.S_NoyaNoticeInfo
// Struct Size::0x006C
struct FS_NoyaNoticeInfo
{
    enum class E_NoticeType_Noya                  Type_19_61521B0446EAF964ED4414B88CA78D95;                     // 0x0000(0x0001)
    char                                          pa_0001[0x0003]                                               // 0x0001(0x0003)
    float                                         LifeTime_20_BD882D5545761162ABC2D8B45FABE100;                 // 0x0004(0x0004)
    FString                                       Text_21_231C41074F4B39F8D3276B9B458D1D31;                     // 0x0008(0x0010)
    TMap<char,bool>                               TriggerCondition_24_461190CB4B9B8C849665FEBEA709D091;         // 0x0018(0x0050)
    int32_t                                       MaxTiggerTimes_23_1487705444240010E31DD4A6A175CACD;           // 0x0068(0x0004)
};


// UserDefinedStruct  F_ReviveItemData.F_ReviveItemData
// Struct Size::0x0014
struct FF_ReviveItemData
{
    FString                                       PlayerID_3_454127FA49A9E9B7DFC44B8255034BF1;                  // 0x0000(0x0010)
    int32_t                                       Times_5_60AE18DB4EC5A089DB2C648682EFCFC5;                     // 0x0010(0x0004)
};


// UserDefinedStruct  S_KeyPromptGamepad.S_KeyPromptGamepad
// Struct Size::0x0001
struct FS_KeyPromptGamepad
{
    bool                                          MemberVar_0_B90AE02F4CB9AD0D665AA28F9A2AC172;                 // 0x0000(0x0001)
};


// UserDefinedStruct  S_KeyPromptKeyBoard.S_KeyPromptKeyBoard
// Struct Size::0x0068
struct FS_KeyPromptKeyBoard
{
    FLinearColor                                  BgColor_2_B90AE02F4CB9AD0D665AA28F9A2AC172;                   // 0x0000(0x0010)
    int32_t                                       FontSize_5_3519D57C41DC7FD8DC74729EB654DCBA;                  // 0x0010(0x0004)
    FVector2D                                     BgSize_8_734A1B214070AE4C1235A5A5E6C9846E;                    // 0x0014(0x0008)
    FLinearColor                                  FrameColor_11_7DC26D3E422D4404F9456E972E80A82C;               // 0x001C(0x0010)
    char                                          pa_002C[0x0004]                                               // 0x002C(0x0004)
    FSlateColor                                   FontColor_16_E6BA2266442348FA427E25A3D34A2AF9;                // 0x0030(0x0028)
    FLinearColor                                  ImgColor_19_110032324758E641DC33699848D52BCA;                 // 0x0058(0x0010)
};


// UserDefinedStruct  S_KeyPromptMouse.S_KeyPromptMouse
// Struct Size::0x0001
struct FS_KeyPromptMouse
{
    bool                                          MemberVar_0_B90AE02F4CB9AD0D665AA28F9A2AC172;                 // 0x0000(0x0001)
};


// UserDefinedStruct  S_KeyPrompt.S_KeyPrompt
// Struct Size::0x006A
struct FS_KeyPrompt
{
    FS_KeyPromptKeyBoard                          KeyBoardInfo_2_B90AE02F4CB9AD0D665AA28F9A2AC172;              // 0x0000(0x0068)
    FS_KeyPromptMouse                             MouseInfo_5_1D9DBA59409F03B589D048980CD6DE69;                 // 0x0068(0x0001)
    FS_KeyPromptGamepad                           GamepadInfo_8_3CFBCBFC40895FDC0CCA05AD4C6BBEFC;               // 0x0069(0x0001)
};


// UserDefinedStruct  S_Event_BattleRoyale.S_Event_BattleRoyale
// Struct Size::0x0080
struct FS_Event_BattleRoyale
{
    int32_t                                       BattleTime_15_6488AAB44E84633B11E7DF844AD3B376;               // 0x0000(0x0004)
    enum class E_BattleEvent_BattleRoyale         EventType_11_8FC191774137C63ED18FD5987B59941D;                // 0x0004(0x0001)
    char                                          pa_0005[0x0003]                                               // 0x0005(0x0003)
    TMap<FString,FString>                         EventParam_10_DC47076342DAE72F001FD1A032026480;               // 0x0008(0x0050)
    FGameplayEventFilterConfig                    GEFConfig_18_2C324C7A49BDF95272FD9896A3418C14;                // 0x0058(0x0028)
};


// UserDefinedStruct  S_SkillState.S_SkillState
// Struct Size::0x0004
struct FS_SkillState
{
    enum class ERoleSkillOperation                Super_11_1687CEEF476DE16EEE6A42B53EC116E7;                    // 0x0000(0x0001)
    enum class ERoleSkillOperation                Tactical_1_15_36D081C34231A20607055BA95F67E65B;               // 0x0001(0x0001)
    enum class ERoleSkillOperation                Tactical_2_16_32941DBD423D7A5321C1EEAB08668EBD;               // 0x0002(0x0001)
    enum class ERoleSkillOperation                Tactical_3_17_895B2BD741113F7BF94DAF975F993B30;               // 0x0003(0x0001)
};


